// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Web.h"

PyTypeObject* py::winrt_type<winrt::Windows::Web::WebError>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::IUriToStreamResolver>::python_type;

namespace py::cpp::Windows::Web
{
    // ----- WebError class --------------------
    constexpr const char* const _type_name_WebError = "WebError";

    static PyObject* _new_WebError(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebError);
        return nullptr;
    }

    static PyObject* WebError_GetStatus(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(winrt::Windows::Web::WebError::GetStatus(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebError[] = {
        { "get_status", (PyCFunction)WebError_GetStatus, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebError[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WebError[] = 
    {
        { Py_tp_new, _new_WebError },
        { Py_tp_methods, _methods_WebError },
        { Py_tp_getset, _getset_WebError },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebError =
    {
        "_winrt_Windows_Web.WebError",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebError
    };

    // ----- IUriToStreamResolver interface --------------------
    constexpr const char* const _type_name_IUriToStreamResolver = "IUriToStreamResolver";

    static PyObject* _new_IUriToStreamResolver(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IUriToStreamResolver);
        return nullptr;
    }

    static void _dealloc_IUriToStreamResolver(py::wrapper::Windows::Web::IUriToStreamResolver* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IUriToStreamResolver_UriToStreamAsync(py::wrapper::Windows::Web::IUriToStreamResolver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.UriToStreamAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IUriToStreamResolver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::IUriToStreamResolver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IUriToStreamResolver[] = {
        { "uri_to_stream_async", (PyCFunction)IUriToStreamResolver_UriToStreamAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IUriToStreamResolver, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IUriToStreamResolver[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IUriToStreamResolver[] = 
    {
        { Py_tp_new, _new_IUriToStreamResolver },
        { Py_tp_dealloc, _dealloc_IUriToStreamResolver },
        { Py_tp_methods, _methods_IUriToStreamResolver },
        { Py_tp_getset, _getset_IUriToStreamResolver },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IUriToStreamResolver =
    {
        "_winrt_Windows_Web.IUriToStreamResolver",
        sizeof(py::wrapper::Windows::Web::IUriToStreamResolver),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IUriToStreamResolver
    };

    // ----- Windows.Web Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Web::WebError>::python_type = py::register_python_type(module, _type_name_WebError, &_type_spec_WebError, nullptr);
            py::winrt_type<winrt::Windows::Web::IUriToStreamResolver>::python_type = py::register_python_type(module, _type_name_IUriToStreamResolver, &_type_spec_IUriToStreamResolver, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Web");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Web",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Web

PyMODINIT_FUNC
PyInit__winrt_Windows_Web (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Web::module_def);
}
