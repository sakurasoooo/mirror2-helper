// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.AppService.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceCatalog>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceClosedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceConnection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceResponse>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceTriggerDetails>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppService::StatelessAppServiceResponse>::python_type;

namespace py::cpp::Windows::ApplicationModel::AppService
{
    // ----- AppServiceCatalog class --------------------
    constexpr const char* const _type_name_AppServiceCatalog = "AppServiceCatalog";

    static PyObject* _new_AppServiceCatalog(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppServiceCatalog);
        return nullptr;
    }

    static PyObject* AppServiceCatalog_FindAppServiceProvidersAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::AppService::AppServiceCatalog::FindAppServiceProvidersAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceCatalog[] = {
        { "find_app_service_providers_async", (PyCFunction)AppServiceCatalog_FindAppServiceProvidersAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceCatalog[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceCatalog[] = 
    {
        { Py_tp_new, _new_AppServiceCatalog },
        { Py_tp_methods, _methods_AppServiceCatalog },
        { Py_tp_getset, _getset_AppServiceCatalog },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceCatalog =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceCatalog",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceCatalog
    };

    // ----- AppServiceClosedEventArgs class --------------------
    constexpr const char* const _type_name_AppServiceClosedEventArgs = "AppServiceClosedEventArgs";

    static PyObject* _new_AppServiceClosedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppServiceClosedEventArgs);
        return nullptr;
    }

    static void _dealloc_AppServiceClosedEventArgs(py::wrapper::Windows::ApplicationModel::AppService::AppServiceClosedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppServiceClosedEventArgs_get_Status(py::wrapper::Windows::ApplicationModel::AppService::AppServiceClosedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppServiceClosedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::AppServiceClosedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceClosedEventArgs[] = {
        { "_from", (PyCFunction)_from_AppServiceClosedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceClosedEventArgs[] = {
        { const_cast<char*>("status"), (getter)AppServiceClosedEventArgs_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceClosedEventArgs[] = 
    {
        { Py_tp_new, _new_AppServiceClosedEventArgs },
        { Py_tp_dealloc, _dealloc_AppServiceClosedEventArgs },
        { Py_tp_methods, _methods_AppServiceClosedEventArgs },
        { Py_tp_getset, _getset_AppServiceClosedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceClosedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceClosedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::AppServiceClosedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceClosedEventArgs
    };

    // ----- AppServiceConnection class --------------------
    constexpr const char* const _type_name_AppServiceConnection = "AppServiceConnection";

    static PyObject* _new_AppServiceConnection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::AppService::AppServiceConnection instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AppServiceConnection(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppServiceConnection_Close(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_OpenAsync(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.OpenAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_OpenRemoteAsync(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::RemoteSystems::RemoteSystemConnectionRequest>(args, 0);

                return py::convert(self->obj.OpenRemoteAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_SendMessageAsync(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::ValueSet>(args, 0);

                return py::convert(self->obj.SendMessageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_SendStatelessMessageAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::AppService::AppServiceConnection>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::System::RemoteSystems::RemoteSystemConnectionRequest>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::ValueSet>(args, 2);

                return py::convert(winrt::Windows::ApplicationModel::AppService::AppServiceConnection::SendStatelessMessageAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_get_PackageFamilyName(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppServiceConnection_put_PackageFamilyName(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PackageFamilyName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppServiceConnection_get_AppServiceName(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppServiceName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppServiceConnection_put_AppServiceName(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AppServiceName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppServiceConnection_get_User(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppServiceConnection_put_User(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::System::User>(arg);

            self->obj.User(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppServiceConnection_add_RequestReceived(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppService::AppServiceConnection, winrt::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs>>(arg);

            return py::convert(self->obj.RequestReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_remove_RequestReceived(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.RequestReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_add_ServiceClosed(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppService::AppServiceConnection, winrt::Windows::ApplicationModel::AppService::AppServiceClosedEventArgs>>(arg);

            return py::convert(self->obj.ServiceClosed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceConnection_remove_ServiceClosed(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ServiceClosed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppServiceConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::AppServiceConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_AppServiceConnection(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_AppServiceConnection(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceConnection[] = {
        { "close", (PyCFunction)AppServiceConnection_Close, METH_VARARGS, nullptr },
        { "open_async", (PyCFunction)AppServiceConnection_OpenAsync, METH_VARARGS, nullptr },
        { "open_remote_async", (PyCFunction)AppServiceConnection_OpenRemoteAsync, METH_VARARGS, nullptr },
        { "send_message_async", (PyCFunction)AppServiceConnection_SendMessageAsync, METH_VARARGS, nullptr },
        { "send_stateless_message_async", (PyCFunction)AppServiceConnection_SendStatelessMessageAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "add_request_received", (PyCFunction)AppServiceConnection_add_RequestReceived, METH_O, nullptr },
        { "remove_request_received", (PyCFunction)AppServiceConnection_remove_RequestReceived, METH_O, nullptr },
        { "add_service_closed", (PyCFunction)AppServiceConnection_add_ServiceClosed, METH_O, nullptr },
        { "remove_service_closed", (PyCFunction)AppServiceConnection_remove_ServiceClosed, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AppServiceConnection, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_AppServiceConnection, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_AppServiceConnection, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceConnection[] = {
        { const_cast<char*>("package_family_name"), (getter)AppServiceConnection_get_PackageFamilyName, (setter)AppServiceConnection_put_PackageFamilyName, nullptr, nullptr },
        { const_cast<char*>("app_service_name"), (getter)AppServiceConnection_get_AppServiceName, (setter)AppServiceConnection_put_AppServiceName, nullptr, nullptr },
        { const_cast<char*>("user"), (getter)AppServiceConnection_get_User, (setter)AppServiceConnection_put_User, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceConnection[] = 
    {
        { Py_tp_new, _new_AppServiceConnection },
        { Py_tp_dealloc, _dealloc_AppServiceConnection },
        { Py_tp_methods, _methods_AppServiceConnection },
        { Py_tp_getset, _getset_AppServiceConnection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceConnection =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceConnection",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::AppServiceConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceConnection
    };

    // ----- AppServiceDeferral class --------------------
    constexpr const char* const _type_name_AppServiceDeferral = "AppServiceDeferral";

    static PyObject* _new_AppServiceDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppServiceDeferral);
        return nullptr;
    }

    static void _dealloc_AppServiceDeferral(py::wrapper::Windows::ApplicationModel::AppService::AppServiceDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppServiceDeferral_Complete(py::wrapper::Windows::ApplicationModel::AppService::AppServiceDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_AppServiceDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::AppServiceDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceDeferral[] = {
        { "complete", (PyCFunction)AppServiceDeferral_Complete, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppServiceDeferral, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceDeferral[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceDeferral[] = 
    {
        { Py_tp_new, _new_AppServiceDeferral },
        { Py_tp_dealloc, _dealloc_AppServiceDeferral },
        { Py_tp_methods, _methods_AppServiceDeferral },
        { Py_tp_getset, _getset_AppServiceDeferral },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceDeferral =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceDeferral",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::AppServiceDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceDeferral
    };

    // ----- AppServiceRequest class --------------------
    constexpr const char* const _type_name_AppServiceRequest = "AppServiceRequest";

    static PyObject* _new_AppServiceRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppServiceRequest);
        return nullptr;
    }

    static void _dealloc_AppServiceRequest(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppServiceRequest_SendResponseAsync(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::ValueSet>(args, 0);

                return py::convert(self->obj.SendResponseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceRequest_get_Message(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppServiceRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::AppServiceRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceRequest[] = {
        { "send_response_async", (PyCFunction)AppServiceRequest_SendResponseAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppServiceRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceRequest[] = {
        { const_cast<char*>("message"), (getter)AppServiceRequest_get_Message, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceRequest[] = 
    {
        { Py_tp_new, _new_AppServiceRequest },
        { Py_tp_dealloc, _dealloc_AppServiceRequest },
        { Py_tp_methods, _methods_AppServiceRequest },
        { Py_tp_getset, _getset_AppServiceRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceRequest =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceRequest
    };

    // ----- AppServiceRequestReceivedEventArgs class --------------------
    constexpr const char* const _type_name_AppServiceRequestReceivedEventArgs = "AppServiceRequestReceivedEventArgs";

    static PyObject* _new_AppServiceRequestReceivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppServiceRequestReceivedEventArgs);
        return nullptr;
    }

    static void _dealloc_AppServiceRequestReceivedEventArgs(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppServiceRequestReceivedEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceRequestReceivedEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppServiceRequestReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceRequestReceivedEventArgs[] = {
        { "get_deferral", (PyCFunction)AppServiceRequestReceivedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppServiceRequestReceivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceRequestReceivedEventArgs[] = {
        { const_cast<char*>("request"), (getter)AppServiceRequestReceivedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceRequestReceivedEventArgs[] = 
    {
        { Py_tp_new, _new_AppServiceRequestReceivedEventArgs },
        { Py_tp_dealloc, _dealloc_AppServiceRequestReceivedEventArgs },
        { Py_tp_methods, _methods_AppServiceRequestReceivedEventArgs },
        { Py_tp_getset, _getset_AppServiceRequestReceivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceRequestReceivedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceRequestReceivedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceRequestReceivedEventArgs
    };

    // ----- AppServiceResponse class --------------------
    constexpr const char* const _type_name_AppServiceResponse = "AppServiceResponse";

    static PyObject* _new_AppServiceResponse(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppServiceResponse);
        return nullptr;
    }

    static void _dealloc_AppServiceResponse(py::wrapper::Windows::ApplicationModel::AppService::AppServiceResponse* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppServiceResponse_get_Message(py::wrapper::Windows::ApplicationModel::AppService::AppServiceResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceResponse_get_Status(py::wrapper::Windows::ApplicationModel::AppService::AppServiceResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppServiceResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::AppServiceResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceResponse[] = {
        { "_from", (PyCFunction)_from_AppServiceResponse, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceResponse[] = {
        { const_cast<char*>("message"), (getter)AppServiceResponse_get_Message, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)AppServiceResponse_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceResponse[] = 
    {
        { Py_tp_new, _new_AppServiceResponse },
        { Py_tp_dealloc, _dealloc_AppServiceResponse },
        { Py_tp_methods, _methods_AppServiceResponse },
        { Py_tp_getset, _getset_AppServiceResponse },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceResponse =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceResponse",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::AppServiceResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceResponse
    };

    // ----- AppServiceTriggerDetails class --------------------
    constexpr const char* const _type_name_AppServiceTriggerDetails = "AppServiceTriggerDetails";

    static PyObject* _new_AppServiceTriggerDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppServiceTriggerDetails);
        return nullptr;
    }

    static void _dealloc_AppServiceTriggerDetails(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppServiceTriggerDetails_CheckCallerForCapabilityAsync(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CheckCallerForCapabilityAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppServiceTriggerDetails_get_AppServiceConnection(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppServiceConnection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceTriggerDetails_get_CallerPackageFamilyName(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CallerPackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceTriggerDetails_get_Name(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceTriggerDetails_get_IsRemoteSystemConnection(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRemoteSystemConnection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppServiceTriggerDetails_get_CallerRemoteConnectionToken(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CallerRemoteConnectionToken());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppServiceTriggerDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::AppServiceTriggerDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppServiceTriggerDetails[] = {
        { "check_caller_for_capability_async", (PyCFunction)AppServiceTriggerDetails_CheckCallerForCapabilityAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppServiceTriggerDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppServiceTriggerDetails[] = {
        { const_cast<char*>("app_service_connection"), (getter)AppServiceTriggerDetails_get_AppServiceConnection, nullptr, nullptr, nullptr },
        { const_cast<char*>("caller_package_family_name"), (getter)AppServiceTriggerDetails_get_CallerPackageFamilyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("name"), (getter)AppServiceTriggerDetails_get_Name, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_remote_system_connection"), (getter)AppServiceTriggerDetails_get_IsRemoteSystemConnection, nullptr, nullptr, nullptr },
        { const_cast<char*>("caller_remote_connection_token"), (getter)AppServiceTriggerDetails_get_CallerRemoteConnectionToken, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppServiceTriggerDetails[] = 
    {
        { Py_tp_new, _new_AppServiceTriggerDetails },
        { Py_tp_dealloc, _dealloc_AppServiceTriggerDetails },
        { Py_tp_methods, _methods_AppServiceTriggerDetails },
        { Py_tp_getset, _getset_AppServiceTriggerDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppServiceTriggerDetails =
    {
        "_winrt_Windows_ApplicationModel_AppService.AppServiceTriggerDetails",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::AppServiceTriggerDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppServiceTriggerDetails
    };

    // ----- StatelessAppServiceResponse class --------------------
    constexpr const char* const _type_name_StatelessAppServiceResponse = "StatelessAppServiceResponse";

    static PyObject* _new_StatelessAppServiceResponse(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StatelessAppServiceResponse);
        return nullptr;
    }

    static void _dealloc_StatelessAppServiceResponse(py::wrapper::Windows::ApplicationModel::AppService::StatelessAppServiceResponse* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StatelessAppServiceResponse_get_Message(py::wrapper::Windows::ApplicationModel::AppService::StatelessAppServiceResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StatelessAppServiceResponse_get_Status(py::wrapper::Windows::ApplicationModel::AppService::StatelessAppServiceResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StatelessAppServiceResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppService::StatelessAppServiceResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StatelessAppServiceResponse[] = {
        { "_from", (PyCFunction)_from_StatelessAppServiceResponse, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StatelessAppServiceResponse[] = {
        { const_cast<char*>("message"), (getter)StatelessAppServiceResponse_get_Message, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)StatelessAppServiceResponse_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StatelessAppServiceResponse[] = 
    {
        { Py_tp_new, _new_StatelessAppServiceResponse },
        { Py_tp_dealloc, _dealloc_StatelessAppServiceResponse },
        { Py_tp_methods, _methods_StatelessAppServiceResponse },
        { Py_tp_getset, _getset_StatelessAppServiceResponse },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StatelessAppServiceResponse =
    {
        "_winrt_Windows_ApplicationModel_AppService.StatelessAppServiceResponse",
        sizeof(py::wrapper::Windows::ApplicationModel::AppService::StatelessAppServiceResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StatelessAppServiceResponse
    };

    // ----- Windows.ApplicationModel.AppService Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceCatalog>::python_type = py::register_python_type(module, _type_name_AppServiceCatalog, &_type_spec_AppServiceCatalog, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceClosedEventArgs>::python_type = py::register_python_type(module, _type_name_AppServiceClosedEventArgs, &_type_spec_AppServiceClosedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceConnection>::python_type = py::register_python_type(module, _type_name_AppServiceConnection, &_type_spec_AppServiceConnection, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceDeferral>::python_type = py::register_python_type(module, _type_name_AppServiceDeferral, &_type_spec_AppServiceDeferral, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceRequest>::python_type = py::register_python_type(module, _type_name_AppServiceRequest, &_type_spec_AppServiceRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs>::python_type = py::register_python_type(module, _type_name_AppServiceRequestReceivedEventArgs, &_type_spec_AppServiceRequestReceivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceResponse>::python_type = py::register_python_type(module, _type_name_AppServiceResponse, &_type_spec_AppServiceResponse, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::AppServiceTriggerDetails>::python_type = py::register_python_type(module, _type_name_AppServiceTriggerDetails, &_type_spec_AppServiceTriggerDetails, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppService::StatelessAppServiceResponse>::python_type = py::register_python_type(module, _type_name_StatelessAppServiceResponse, &_type_spec_StatelessAppServiceResponse, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.AppService");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_AppService",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::AppService

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_AppService (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::AppService::module_def);
}
