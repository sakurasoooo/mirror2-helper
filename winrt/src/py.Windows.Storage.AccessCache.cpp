// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Storage.AccessCache.h"

PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::AccessListEntryView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::StorageApplicationPermissions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::StorageItemAccessList>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::AccessCache::AccessListEntry>::python_type;

PyObject* py::converter<winrt::Windows::Storage::AccessCache::AccessListEntry>::convert(winrt::Windows::Storage::AccessCache::AccessListEntry instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Storage::AccessCache::AccessListEntry>());
}
winrt::Windows::Storage::AccessCache::AccessListEntry py::converter<winrt::Windows::Storage::AccessCache::AccessListEntry>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Storage::AccessCache::AccessListEntry>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Storage::AccessCache::AccessListEntry>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Storage::AccessCache::AccessListEntry return_value{};

    PyObject* py_Token = PyDict_GetItemString(obj, "token");
    if (!py_Token) { throw winrt::hresult_invalid_argument(); }
    return_value.Token = converter<winrt::hstring>::convert_to(py_Token);

    PyObject* py_Metadata = PyDict_GetItemString(obj, "metadata");
    if (!py_Metadata) { throw winrt::hresult_invalid_argument(); }
    return_value.Metadata = converter<winrt::hstring>::convert_to(py_Metadata);

    return return_value;
}

namespace py::cpp::Windows::Storage::AccessCache
{
    // ----- AccessListEntryView class --------------------
    constexpr const char* const _type_name_AccessListEntryView = "AccessListEntryView";

    static PyObject* _new_AccessListEntryView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AccessListEntryView);
        return nullptr;
    }

    static void _dealloc_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AccessListEntryView_First(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_GetAt(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_GetMany(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::Windows::Storage::AccessCache::AccessListEntry>::size_type>(args, 1);
                winrt::com_array<winrt::Windows::Storage::AccessCache::AccessListEntry> param1 ( param1_count, py::empty_instance<winrt::Windows::Storage::AccessCache::AccessListEntry>::get() );

                auto return_value = self->obj.GetMany(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_IndexOf(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessListEntry>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_get_Size(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AccessListEntryView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::AccessListEntryView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AccessListEntryView[] = {
        { "first", (PyCFunction)AccessListEntryView_First, METH_VARARGS, nullptr },
        { "get_at", (PyCFunction)AccessListEntryView_GetAt, METH_VARARGS, nullptr },
        { "get_many", (PyCFunction)AccessListEntryView_GetMany, METH_VARARGS, nullptr },
        { "index_of", (PyCFunction)AccessListEntryView_IndexOf, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AccessListEntryView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AccessListEntryView[] = {
        { const_cast<char*>("size"), (getter)AccessListEntryView_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AccessListEntryView[] = 
    {
        { Py_tp_new, _new_AccessListEntryView },
        { Py_tp_dealloc, _dealloc_AccessListEntryView },
        { Py_tp_methods, _methods_AccessListEntryView },
        { Py_tp_getset, _getset_AccessListEntryView },
        { Py_tp_iter, _iterator_AccessListEntryView },
        { Py_sq_length, _seq_length_AccessListEntryView },
        { Py_sq_item, _seq_item_AccessListEntryView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AccessListEntryView =
    {
        "_winrt_Windows_Storage_AccessCache.AccessListEntryView",
        sizeof(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AccessListEntryView
    };

    // ----- ItemRemovedEventArgs class --------------------
    constexpr const char* const _type_name_ItemRemovedEventArgs = "ItemRemovedEventArgs";

    static PyObject* _new_ItemRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ItemRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_ItemRemovedEventArgs(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ItemRemovedEventArgs_get_RemovedEntry(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RemovedEntry());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ItemRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ItemRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_ItemRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ItemRemovedEventArgs[] = {
        { const_cast<char*>("removed_entry"), (getter)ItemRemovedEventArgs_get_RemovedEntry, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ItemRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_ItemRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_ItemRemovedEventArgs },
        { Py_tp_methods, _methods_ItemRemovedEventArgs },
        { Py_tp_getset, _getset_ItemRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ItemRemovedEventArgs =
    {
        "_winrt_Windows_Storage_AccessCache.ItemRemovedEventArgs",
        sizeof(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ItemRemovedEventArgs
    };

    // ----- StorageApplicationPermissions class --------------------
    constexpr const char* const _type_name_StorageApplicationPermissions = "StorageApplicationPermissions";

    static PyObject* _new_StorageApplicationPermissions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorageApplicationPermissions);
        return nullptr;
    }

    static PyObject* StorageApplicationPermissions_GetFutureAccessListForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::GetFutureAccessListForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_GetMostRecentlyUsedListForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::GetMostRecentlyUsedListForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_get_FutureAccessList(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::FutureAccessList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_get_MostRecentlyUsedList(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::MostRecentlyUsedList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageApplicationPermissions[] = {
        { "get_future_access_list_for_user", (PyCFunction)StorageApplicationPermissions_GetFutureAccessListForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "get_most_recently_used_list_for_user", (PyCFunction)StorageApplicationPermissions_GetMostRecentlyUsedListForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "get_future_access_list", (PyCFunction)StorageApplicationPermissions_get_FutureAccessList, METH_NOARGS | METH_STATIC, nullptr },
        { "get_most_recently_used_list", (PyCFunction)StorageApplicationPermissions_get_MostRecentlyUsedList, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorageApplicationPermissions[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_StorageApplicationPermissions[] = 
    {
        { Py_tp_new, _new_StorageApplicationPermissions },
        { Py_tp_methods, _methods_StorageApplicationPermissions },
        { Py_tp_getset, _getset_StorageApplicationPermissions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorageApplicationPermissions =
    {
        "_winrt_Windows_Storage_AccessCache.StorageApplicationPermissions",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageApplicationPermissions
    };

    // ----- StorageItemAccessList class --------------------
    constexpr const char* const _type_name_StorageItemAccessList = "StorageItemAccessList";

    static PyObject* _new_StorageItemAccessList(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorageItemAccessList);
        return nullptr;
    }

    static void _dealloc_StorageItemAccessList(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StorageItemAccessList_Add(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_Clear(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_Remove(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_get_Entries(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::StorageItemAccessList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemAccessList[] = {
        { "add", (PyCFunction)StorageItemAccessList_Add, METH_VARARGS, nullptr },
        { "add_or_replace", (PyCFunction)StorageItemAccessList_AddOrReplace, METH_VARARGS, nullptr },
        { "check_access", (PyCFunction)StorageItemAccessList_CheckAccess, METH_VARARGS, nullptr },
        { "clear", (PyCFunction)StorageItemAccessList_Clear, METH_VARARGS, nullptr },
        { "contains_item", (PyCFunction)StorageItemAccessList_ContainsItem, METH_VARARGS, nullptr },
        { "get_file_async", (PyCFunction)StorageItemAccessList_GetFileAsync, METH_VARARGS, nullptr },
        { "get_folder_async", (PyCFunction)StorageItemAccessList_GetFolderAsync, METH_VARARGS, nullptr },
        { "get_item_async", (PyCFunction)StorageItemAccessList_GetItemAsync, METH_VARARGS, nullptr },
        { "remove", (PyCFunction)StorageItemAccessList_Remove, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_StorageItemAccessList, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorageItemAccessList[] = {
        { const_cast<char*>("entries"), (getter)StorageItemAccessList_get_Entries, nullptr, nullptr, nullptr },
        { const_cast<char*>("maximum_items_allowed"), (getter)StorageItemAccessList_get_MaximumItemsAllowed, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StorageItemAccessList[] = 
    {
        { Py_tp_new, _new_StorageItemAccessList },
        { Py_tp_dealloc, _dealloc_StorageItemAccessList },
        { Py_tp_methods, _methods_StorageItemAccessList },
        { Py_tp_getset, _getset_StorageItemAccessList },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorageItemAccessList =
    {
        "_winrt_Windows_Storage_AccessCache.StorageItemAccessList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemAccessList
    };

    // ----- StorageItemMostRecentlyUsedList class --------------------
    constexpr const char* const _type_name_StorageItemMostRecentlyUsedList = "StorageItemMostRecentlyUsedList";

    static PyObject* _new_StorageItemMostRecentlyUsedList(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorageItemMostRecentlyUsedList);
        return nullptr;
    }

    static void _dealloc_StorageItemMostRecentlyUsedList(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StorageItemMostRecentlyUsedList_Add(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility>(args, 2);

                return py::convert(self->obj.Add(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility>(args, 3);

                self->obj.AddOrReplace(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_Clear(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_Remove(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_get_Entries(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_add_ItemRemoved(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>>(arg);

            return py::convert(self->obj.ItemRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_remove_ItemRemoved(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ItemRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StorageItemMostRecentlyUsedList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemMostRecentlyUsedList[] = {
        { "add", (PyCFunction)StorageItemMostRecentlyUsedList_Add, METH_VARARGS, nullptr },
        { "add_or_replace", (PyCFunction)StorageItemMostRecentlyUsedList_AddOrReplace, METH_VARARGS, nullptr },
        { "check_access", (PyCFunction)StorageItemMostRecentlyUsedList_CheckAccess, METH_VARARGS, nullptr },
        { "clear", (PyCFunction)StorageItemMostRecentlyUsedList_Clear, METH_VARARGS, nullptr },
        { "contains_item", (PyCFunction)StorageItemMostRecentlyUsedList_ContainsItem, METH_VARARGS, nullptr },
        { "get_file_async", (PyCFunction)StorageItemMostRecentlyUsedList_GetFileAsync, METH_VARARGS, nullptr },
        { "get_folder_async", (PyCFunction)StorageItemMostRecentlyUsedList_GetFolderAsync, METH_VARARGS, nullptr },
        { "get_item_async", (PyCFunction)StorageItemMostRecentlyUsedList_GetItemAsync, METH_VARARGS, nullptr },
        { "remove", (PyCFunction)StorageItemMostRecentlyUsedList_Remove, METH_VARARGS, nullptr },
        { "add_item_removed", (PyCFunction)StorageItemMostRecentlyUsedList_add_ItemRemoved, METH_O, nullptr },
        { "remove_item_removed", (PyCFunction)StorageItemMostRecentlyUsedList_remove_ItemRemoved, METH_O, nullptr },
        { "_from", (PyCFunction)_from_StorageItemMostRecentlyUsedList, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorageItemMostRecentlyUsedList[] = {
        { const_cast<char*>("entries"), (getter)StorageItemMostRecentlyUsedList_get_Entries, nullptr, nullptr, nullptr },
        { const_cast<char*>("maximum_items_allowed"), (getter)StorageItemMostRecentlyUsedList_get_MaximumItemsAllowed, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StorageItemMostRecentlyUsedList[] = 
    {
        { Py_tp_new, _new_StorageItemMostRecentlyUsedList },
        { Py_tp_dealloc, _dealloc_StorageItemMostRecentlyUsedList },
        { Py_tp_methods, _methods_StorageItemMostRecentlyUsedList },
        { Py_tp_getset, _getset_StorageItemMostRecentlyUsedList },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorageItemMostRecentlyUsedList =
    {
        "_winrt_Windows_Storage_AccessCache.StorageItemMostRecentlyUsedList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemMostRecentlyUsedList
    };

    // ----- IStorageItemAccessList interface --------------------
    constexpr const char* const _type_name_IStorageItemAccessList = "IStorageItemAccessList";

    static PyObject* _new_IStorageItemAccessList(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IStorageItemAccessList);
        return nullptr;
    }

    static void _dealloc_IStorageItemAccessList(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IStorageItemAccessList_Add(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_Clear(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_Remove(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_get_Entries(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IStorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IStorageItemAccessList[] = {
        { "add", (PyCFunction)IStorageItemAccessList_Add, METH_VARARGS, nullptr },
        { "add_or_replace", (PyCFunction)IStorageItemAccessList_AddOrReplace, METH_VARARGS, nullptr },
        { "check_access", (PyCFunction)IStorageItemAccessList_CheckAccess, METH_VARARGS, nullptr },
        { "clear", (PyCFunction)IStorageItemAccessList_Clear, METH_VARARGS, nullptr },
        { "contains_item", (PyCFunction)IStorageItemAccessList_ContainsItem, METH_VARARGS, nullptr },
        { "get_file_async", (PyCFunction)IStorageItemAccessList_GetFileAsync, METH_VARARGS, nullptr },
        { "get_folder_async", (PyCFunction)IStorageItemAccessList_GetFolderAsync, METH_VARARGS, nullptr },
        { "get_item_async", (PyCFunction)IStorageItemAccessList_GetItemAsync, METH_VARARGS, nullptr },
        { "remove", (PyCFunction)IStorageItemAccessList_Remove, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IStorageItemAccessList, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IStorageItemAccessList[] = {
        { const_cast<char*>("entries"), (getter)IStorageItemAccessList_get_Entries, nullptr, nullptr, nullptr },
        { const_cast<char*>("maximum_items_allowed"), (getter)IStorageItemAccessList_get_MaximumItemsAllowed, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IStorageItemAccessList[] = 
    {
        { Py_tp_new, _new_IStorageItemAccessList },
        { Py_tp_dealloc, _dealloc_IStorageItemAccessList },
        { Py_tp_methods, _methods_IStorageItemAccessList },
        { Py_tp_getset, _getset_IStorageItemAccessList },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IStorageItemAccessList =
    {
        "_winrt_Windows_Storage_AccessCache.IStorageItemAccessList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IStorageItemAccessList
    };

    // ----- AccessListEntry struct --------------------
    constexpr const char* const _type_name_AccessListEntry = "AccessListEntry";

    PyObject* _new_AccessListEntry(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Storage::AccessCache::AccessListEntry return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Storage::AccessCache::AccessListEntry>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        winrt::hstring _Token{};
        winrt::hstring _Metadata{};

        static const char* kwlist[] = {"token", "metadata", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "uu", const_cast<char**>(kwlist), &_Token, &_Metadata))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Storage::AccessCache::AccessListEntry return_value{ _Token, _Metadata };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_AccessListEntry(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self)
    {
    }

    static PyObject* AccessListEntry_get_Token(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Token);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AccessListEntry_set_Token(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Token = py::converter<winrt::hstring>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AccessListEntry_get_Metadata(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Metadata);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AccessListEntry_set_Metadata(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Metadata = py::converter<winrt::hstring>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_AccessListEntry[] = {
        { const_cast<char*>("token"), (getter)AccessListEntry_get_Token, (setter)AccessListEntry_set_Token, nullptr, nullptr },
        { const_cast<char*>("metadata"), (getter)AccessListEntry_get_Metadata, (setter)AccessListEntry_set_Metadata, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AccessListEntry[] = 
    {
        { Py_tp_new, _new_AccessListEntry },
        { Py_tp_dealloc, _dealloc_AccessListEntry },
        { Py_tp_getset, _getset_AccessListEntry },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AccessListEntry =
    {
        "_winrt_Windows_Storage_AccessCache.AccessListEntry",
        sizeof(py::wrapper::Windows::Storage::AccessCache::AccessListEntry),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AccessListEntry
    };

    // ----- Windows.Storage.AccessCache Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Storage::AccessCache::AccessListEntryView>::python_type = py::register_python_type(module, _type_name_AccessListEntryView, &_type_spec_AccessListEntryView, bases.get());
            py::winrt_type<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_ItemRemovedEventArgs, &_type_spec_ItemRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Storage::AccessCache::StorageApplicationPermissions>::python_type = py::register_python_type(module, _type_name_StorageApplicationPermissions, &_type_spec_StorageApplicationPermissions, nullptr);
            py::winrt_type<winrt::Windows::Storage::AccessCache::StorageItemAccessList>::python_type = py::register_python_type(module, _type_name_StorageItemAccessList, &_type_spec_StorageItemAccessList, bases.get());
            py::winrt_type<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>::python_type = py::register_python_type(module, _type_name_StorageItemMostRecentlyUsedList, &_type_spec_StorageItemMostRecentlyUsedList, bases.get());
            py::winrt_type<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>::python_type = py::register_python_type(module, _type_name_IStorageItemAccessList, &_type_spec_IStorageItemAccessList, bases.get());
            py::winrt_type<winrt::Windows::Storage::AccessCache::AccessListEntry>::python_type = py::register_python_type(module, _type_name_AccessListEntry, &_type_spec_AccessListEntry, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Storage.AccessCache");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Storage_AccessCache",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Storage::AccessCache

PyMODINIT_FUNC
PyInit__winrt_Windows_Storage_AccessCache (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Storage::AccessCache::module_def);
}
