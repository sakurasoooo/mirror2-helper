// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Gaming.XboxLive.Storage.h"

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainer>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult>::python_type;

namespace py::cpp::Windows::Gaming::XboxLive::Storage
{
    // ----- GameSaveBlobGetResult class --------------------
    constexpr const char* const _type_name_GameSaveBlobGetResult = "GameSaveBlobGetResult";

    static PyObject* _new_GameSaveBlobGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveBlobGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveBlobGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveBlobGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobGetResult[] = {
        { "_from", (PyCFunction)_from_GameSaveBlobGetResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveBlobGetResult[] = {
        { const_cast<char*>("status"), (getter)GameSaveBlobGetResult_get_Status, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)GameSaveBlobGetResult_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveBlobGetResult[] = 
    {
        { Py_tp_new, _new_GameSaveBlobGetResult },
        { Py_tp_dealloc, _dealloc_GameSaveBlobGetResult },
        { Py_tp_methods, _methods_GameSaveBlobGetResult },
        { Py_tp_getset, _getset_GameSaveBlobGetResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveBlobGetResult =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveBlobGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobGetResult
    };

    // ----- GameSaveBlobInfo class --------------------
    constexpr const char* const _type_name_GameSaveBlobInfo = "GameSaveBlobInfo";

    static PyObject* _new_GameSaveBlobInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveBlobInfo);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobInfo(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveBlobInfo_get_Name(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobInfo_get_Size(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveBlobInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobInfo[] = {
        { "_from", (PyCFunction)_from_GameSaveBlobInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveBlobInfo[] = {
        { const_cast<char*>("name"), (getter)GameSaveBlobInfo_get_Name, nullptr, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)GameSaveBlobInfo_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveBlobInfo[] = 
    {
        { Py_tp_new, _new_GameSaveBlobInfo },
        { Py_tp_dealloc, _dealloc_GameSaveBlobInfo },
        { Py_tp_methods, _methods_GameSaveBlobInfo },
        { Py_tp_getset, _getset_GameSaveBlobInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveBlobInfo =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveBlobInfo",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobInfo
    };

    // ----- GameSaveBlobInfoGetResult class --------------------
    constexpr const char* const _type_name_GameSaveBlobInfoGetResult = "GameSaveBlobInfoGetResult";

    static PyObject* _new_GameSaveBlobInfoGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveBlobInfoGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobInfoGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveBlobInfoGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobInfoGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveBlobInfoGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobInfoGetResult[] = {
        { "_from", (PyCFunction)_from_GameSaveBlobInfoGetResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveBlobInfoGetResult[] = {
        { const_cast<char*>("status"), (getter)GameSaveBlobInfoGetResult_get_Status, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)GameSaveBlobInfoGetResult_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveBlobInfoGetResult[] = 
    {
        { Py_tp_new, _new_GameSaveBlobInfoGetResult },
        { Py_tp_dealloc, _dealloc_GameSaveBlobInfoGetResult },
        { Py_tp_methods, _methods_GameSaveBlobInfoGetResult },
        { Py_tp_getset, _getset_GameSaveBlobInfoGetResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveBlobInfoGetResult =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveBlobInfoGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobInfoGetResult
    };

    // ----- GameSaveBlobInfoQuery class --------------------
    constexpr const char* const _type_name_GameSaveBlobInfoQuery = "GameSaveBlobInfoQuery";

    static PyObject* _new_GameSaveBlobInfoQuery(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveBlobInfoQuery);
        return nullptr;
    }

    static void _dealloc_GameSaveBlobInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveBlobInfoQuery_GetBlobInfoAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetBlobInfoAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetBlobInfoAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveBlobInfoQuery_GetItemCountAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetItemCountAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveBlobInfoQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveBlobInfoQuery[] = {
        { "get_blob_info_async", (PyCFunction)GameSaveBlobInfoQuery_GetBlobInfoAsync, METH_VARARGS, nullptr },
        { "get_item_count_async", (PyCFunction)GameSaveBlobInfoQuery_GetItemCountAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_GameSaveBlobInfoQuery, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveBlobInfoQuery[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveBlobInfoQuery[] = 
    {
        { Py_tp_new, _new_GameSaveBlobInfoQuery },
        { Py_tp_dealloc, _dealloc_GameSaveBlobInfoQuery },
        { Py_tp_methods, _methods_GameSaveBlobInfoQuery },
        { Py_tp_getset, _getset_GameSaveBlobInfoQuery },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveBlobInfoQuery =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveBlobInfoQuery",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveBlobInfoQuery
    };

    // ----- GameSaveContainer class --------------------
    constexpr const char* const _type_name_GameSaveContainer = "GameSaveContainer";

    static PyObject* _new_GameSaveContainer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveContainer);
        return nullptr;
    }

    static void _dealloc_GameSaveContainer(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveContainer_CreateBlobInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateBlobInfoQuery(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_GetAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.GetAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_ReadAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::Storage::Streams::IBuffer>>(args, 0);

                return py::convert(self->obj.ReadAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_SubmitPropertySetUpdatesAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.SubmitPropertySetUpdatesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_SubmitUpdatesAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::Storage::Streams::IBuffer>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.SubmitUpdatesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_get_Name(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainer_get_Provider(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Provider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveContainer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainer[] = {
        { "create_blob_info_query", (PyCFunction)GameSaveContainer_CreateBlobInfoQuery, METH_VARARGS, nullptr },
        { "get_async", (PyCFunction)GameSaveContainer_GetAsync, METH_VARARGS, nullptr },
        { "read_async", (PyCFunction)GameSaveContainer_ReadAsync, METH_VARARGS, nullptr },
        { "submit_property_set_updates_async", (PyCFunction)GameSaveContainer_SubmitPropertySetUpdatesAsync, METH_VARARGS, nullptr },
        { "submit_updates_async", (PyCFunction)GameSaveContainer_SubmitUpdatesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_GameSaveContainer, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveContainer[] = {
        { const_cast<char*>("name"), (getter)GameSaveContainer_get_Name, nullptr, nullptr, nullptr },
        { const_cast<char*>("provider"), (getter)GameSaveContainer_get_Provider, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveContainer[] = 
    {
        { Py_tp_new, _new_GameSaveContainer },
        { Py_tp_dealloc, _dealloc_GameSaveContainer },
        { Py_tp_methods, _methods_GameSaveContainer },
        { Py_tp_getset, _getset_GameSaveContainer },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveContainer =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveContainer",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainer
    };

    // ----- GameSaveContainerInfo class --------------------
    constexpr const char* const _type_name_GameSaveContainerInfo = "GameSaveContainerInfo";

    static PyObject* _new_GameSaveContainerInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveContainerInfo);
        return nullptr;
    }

    static void _dealloc_GameSaveContainerInfo(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveContainerInfo_get_DisplayName(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_LastModifiedTime(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastModifiedTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_Name(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_NeedsSync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NeedsSync());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfo_get_TotalSize(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TotalSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveContainerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainerInfo[] = {
        { "_from", (PyCFunction)_from_GameSaveContainerInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveContainerInfo[] = {
        { const_cast<char*>("display_name"), (getter)GameSaveContainerInfo_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_modified_time"), (getter)GameSaveContainerInfo_get_LastModifiedTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("name"), (getter)GameSaveContainerInfo_get_Name, nullptr, nullptr, nullptr },
        { const_cast<char*>("needs_sync"), (getter)GameSaveContainerInfo_get_NeedsSync, nullptr, nullptr, nullptr },
        { const_cast<char*>("total_size"), (getter)GameSaveContainerInfo_get_TotalSize, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveContainerInfo[] = 
    {
        { Py_tp_new, _new_GameSaveContainerInfo },
        { Py_tp_dealloc, _dealloc_GameSaveContainerInfo },
        { Py_tp_methods, _methods_GameSaveContainerInfo },
        { Py_tp_getset, _getset_GameSaveContainerInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveContainerInfo =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveContainerInfo",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainerInfo
    };

    // ----- GameSaveContainerInfoGetResult class --------------------
    constexpr const char* const _type_name_GameSaveContainerInfoGetResult = "GameSaveContainerInfoGetResult";

    static PyObject* _new_GameSaveContainerInfoGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveContainerInfoGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveContainerInfoGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveContainerInfoGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfoGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveContainerInfoGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainerInfoGetResult[] = {
        { "_from", (PyCFunction)_from_GameSaveContainerInfoGetResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveContainerInfoGetResult[] = {
        { const_cast<char*>("status"), (getter)GameSaveContainerInfoGetResult_get_Status, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)GameSaveContainerInfoGetResult_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveContainerInfoGetResult[] = 
    {
        { Py_tp_new, _new_GameSaveContainerInfoGetResult },
        { Py_tp_dealloc, _dealloc_GameSaveContainerInfoGetResult },
        { Py_tp_methods, _methods_GameSaveContainerInfoGetResult },
        { Py_tp_getset, _getset_GameSaveContainerInfoGetResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveContainerInfoGetResult =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveContainerInfoGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainerInfoGetResult
    };

    // ----- GameSaveContainerInfoQuery class --------------------
    constexpr const char* const _type_name_GameSaveContainerInfoQuery = "GameSaveContainerInfoQuery";

    static PyObject* _new_GameSaveContainerInfoQuery(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveContainerInfoQuery);
        return nullptr;
    }

    static void _dealloc_GameSaveContainerInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveContainerInfoQuery_GetContainerInfoAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetContainerInfoAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetContainerInfoAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveContainerInfoQuery_GetItemCountAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetItemCountAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveContainerInfoQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveContainerInfoQuery[] = {
        { "get_container_info_async", (PyCFunction)GameSaveContainerInfoQuery_GetContainerInfoAsync, METH_VARARGS, nullptr },
        { "get_item_count_async", (PyCFunction)GameSaveContainerInfoQuery_GetItemCountAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_GameSaveContainerInfoQuery, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveContainerInfoQuery[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveContainerInfoQuery[] = 
    {
        { Py_tp_new, _new_GameSaveContainerInfoQuery },
        { Py_tp_dealloc, _dealloc_GameSaveContainerInfoQuery },
        { Py_tp_methods, _methods_GameSaveContainerInfoQuery },
        { Py_tp_getset, _getset_GameSaveContainerInfoQuery },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveContainerInfoQuery =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveContainerInfoQuery",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveContainerInfoQuery
    };

    // ----- GameSaveOperationResult class --------------------
    constexpr const char* const _type_name_GameSaveOperationResult = "GameSaveOperationResult";

    static PyObject* _new_GameSaveOperationResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveOperationResult);
        return nullptr;
    }

    static void _dealloc_GameSaveOperationResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveOperationResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveOperationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveOperationResult[] = {
        { "_from", (PyCFunction)_from_GameSaveOperationResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveOperationResult[] = {
        { const_cast<char*>("status"), (getter)GameSaveOperationResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveOperationResult[] = 
    {
        { Py_tp_new, _new_GameSaveOperationResult },
        { Py_tp_dealloc, _dealloc_GameSaveOperationResult },
        { Py_tp_methods, _methods_GameSaveOperationResult },
        { Py_tp_getset, _getset_GameSaveOperationResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveOperationResult =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveOperationResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveOperationResult
    };

    // ----- GameSaveProvider class --------------------
    constexpr const char* const _type_name_GameSaveProvider = "GameSaveProvider";

    static PyObject* _new_GameSaveProvider(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveProvider);
        return nullptr;
    }

    static void _dealloc_GameSaveProvider(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveProvider_CreateContainer(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateContainer(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_CreateContainerInfoQuery(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateContainerInfoQuery());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateContainerInfoQuery(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_DeleteContainerAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteContainerAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_GetForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider::GetForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_GetRemainingBytesInQuotaAsync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetRemainingBytesInQuotaAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_GetSyncOnDemandForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider::GetSyncOnDemandForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_get_ContainersChangedSinceLastSync(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContainersChangedSinceLastSync());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveProvider_get_User(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveProvider[] = {
        { "create_container", (PyCFunction)GameSaveProvider_CreateContainer, METH_VARARGS, nullptr },
        { "create_container_info_query", (PyCFunction)GameSaveProvider_CreateContainerInfoQuery, METH_VARARGS, nullptr },
        { "delete_container_async", (PyCFunction)GameSaveProvider_DeleteContainerAsync, METH_VARARGS, nullptr },
        { "get_for_user_async", (PyCFunction)GameSaveProvider_GetForUserAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_remaining_bytes_in_quota_async", (PyCFunction)GameSaveProvider_GetRemainingBytesInQuotaAsync, METH_VARARGS, nullptr },
        { "get_sync_on_demand_for_user_async", (PyCFunction)GameSaveProvider_GetSyncOnDemandForUserAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_GameSaveProvider, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveProvider[] = {
        { const_cast<char*>("containers_changed_since_last_sync"), (getter)GameSaveProvider_get_ContainersChangedSinceLastSync, nullptr, nullptr, nullptr },
        { const_cast<char*>("user"), (getter)GameSaveProvider_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveProvider[] = 
    {
        { Py_tp_new, _new_GameSaveProvider },
        { Py_tp_dealloc, _dealloc_GameSaveProvider },
        { Py_tp_methods, _methods_GameSaveProvider },
        { Py_tp_getset, _getset_GameSaveProvider },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveProvider =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveProvider",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveProvider
    };

    // ----- GameSaveProviderGetResult class --------------------
    constexpr const char* const _type_name_GameSaveProviderGetResult = "GameSaveProviderGetResult";

    static PyObject* _new_GameSaveProviderGetResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GameSaveProviderGetResult);
        return nullptr;
    }

    static void _dealloc_GameSaveProviderGetResult(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GameSaveProviderGetResult_get_Status(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameSaveProviderGetResult_get_Value(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GameSaveProviderGetResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameSaveProviderGetResult[] = {
        { "_from", (PyCFunction)_from_GameSaveProviderGetResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GameSaveProviderGetResult[] = {
        { const_cast<char*>("status"), (getter)GameSaveProviderGetResult_get_Status, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)GameSaveProviderGetResult_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GameSaveProviderGetResult[] = 
    {
        { Py_tp_new, _new_GameSaveProviderGetResult },
        { Py_tp_dealloc, _dealloc_GameSaveProviderGetResult },
        { Py_tp_methods, _methods_GameSaveProviderGetResult },
        { Py_tp_getset, _getset_GameSaveProviderGetResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GameSaveProviderGetResult =
    {
        "_winrt_Windows_Gaming_XboxLive_Storage.GameSaveProviderGetResult",
        sizeof(py::wrapper::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameSaveProviderGetResult
    };

    // ----- Windows.Gaming.XboxLive.Storage Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobGetResult>::python_type = py::register_python_type(module, _type_name_GameSaveBlobGetResult, &_type_spec_GameSaveBlobGetResult, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfo>::python_type = py::register_python_type(module, _type_name_GameSaveBlobInfo, &_type_spec_GameSaveBlobInfo, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoGetResult>::python_type = py::register_python_type(module, _type_name_GameSaveBlobInfoGetResult, &_type_spec_GameSaveBlobInfoGetResult, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveBlobInfoQuery>::python_type = py::register_python_type(module, _type_name_GameSaveBlobInfoQuery, &_type_spec_GameSaveBlobInfoQuery, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainer>::python_type = py::register_python_type(module, _type_name_GameSaveContainer, &_type_spec_GameSaveContainer, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfo>::python_type = py::register_python_type(module, _type_name_GameSaveContainerInfo, &_type_spec_GameSaveContainerInfo, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoGetResult>::python_type = py::register_python_type(module, _type_name_GameSaveContainerInfoGetResult, &_type_spec_GameSaveContainerInfoGetResult, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveContainerInfoQuery>::python_type = py::register_python_type(module, _type_name_GameSaveContainerInfoQuery, &_type_spec_GameSaveContainerInfoQuery, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveOperationResult>::python_type = py::register_python_type(module, _type_name_GameSaveOperationResult, &_type_spec_GameSaveOperationResult, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProvider>::python_type = py::register_python_type(module, _type_name_GameSaveProvider, &_type_spec_GameSaveProvider, bases.get());
            py::winrt_type<winrt::Windows::Gaming::XboxLive::Storage::GameSaveProviderGetResult>::python_type = py::register_python_type(module, _type_name_GameSaveProviderGetResult, &_type_spec_GameSaveProviderGetResult, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Gaming.XboxLive.Storage");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Gaming_XboxLive_Storage",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Gaming::XboxLive::Storage

PyMODINIT_FUNC
PyInit__winrt_Windows_Gaming_XboxLive_Storage (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Gaming::XboxLive::Storage::module_def);
}
