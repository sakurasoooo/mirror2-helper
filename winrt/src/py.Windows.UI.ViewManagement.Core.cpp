// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.ViewManagement.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewHidingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewOcclusion>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewShowingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::Core::UISettingsController>::python_type;

namespace py::cpp::Windows::UI::ViewManagement::Core
{
    // ----- CoreFrameworkInputView class --------------------
    constexpr const char* const _type_name_CoreFrameworkInputView = "CoreFrameworkInputView";

    static PyObject* _new_CoreFrameworkInputView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreFrameworkInputView);
        return nullptr;
    }

    static void _dealloc_CoreFrameworkInputView(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreFrameworkInputView_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputView::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputView_GetForUIContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::UIContext>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputView::GetForUIContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputView_add_OcclusionsChanged(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputView, winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs>>(arg);

            return py::convert(self->obj.OcclusionsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputView_remove_OcclusionsChanged(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.OcclusionsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputView_add_PrimaryViewAnimationStarting(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputView, winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs>>(arg);

            return py::convert(self->obj.PrimaryViewAnimationStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputView_remove_PrimaryViewAnimationStarting(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PrimaryViewAnimationStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreFrameworkInputView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreFrameworkInputView[] = {
        { "get_for_current_view", (PyCFunction)CoreFrameworkInputView_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_u_i_context", (PyCFunction)CoreFrameworkInputView_GetForUIContext, METH_VARARGS | METH_STATIC, nullptr },
        { "add_occlusions_changed", (PyCFunction)CoreFrameworkInputView_add_OcclusionsChanged, METH_O, nullptr },
        { "remove_occlusions_changed", (PyCFunction)CoreFrameworkInputView_remove_OcclusionsChanged, METH_O, nullptr },
        { "add_primary_view_animation_starting", (PyCFunction)CoreFrameworkInputView_add_PrimaryViewAnimationStarting, METH_O, nullptr },
        { "remove_primary_view_animation_starting", (PyCFunction)CoreFrameworkInputView_remove_PrimaryViewAnimationStarting, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreFrameworkInputView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreFrameworkInputView[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreFrameworkInputView[] = 
    {
        { Py_tp_new, _new_CoreFrameworkInputView },
        { Py_tp_dealloc, _dealloc_CoreFrameworkInputView },
        { Py_tp_methods, _methods_CoreFrameworkInputView },
        { Py_tp_getset, _getset_CoreFrameworkInputView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreFrameworkInputView =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreFrameworkInputView",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreFrameworkInputView
    };

    // ----- CoreFrameworkInputViewAnimationStartingEventArgs class --------------------
    constexpr const char* const _type_name_CoreFrameworkInputViewAnimationStartingEventArgs = "CoreFrameworkInputViewAnimationStartingEventArgs";

    static PyObject* _new_CoreFrameworkInputViewAnimationStartingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreFrameworkInputViewAnimationStartingEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreFrameworkInputViewAnimationStartingEventArgs(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreFrameworkInputViewAnimationStartingEventArgs_get_AnimationDuration(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AnimationDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputViewAnimationStartingEventArgs_get_FrameworkAnimationRecommended(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameworkAnimationRecommended());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputViewAnimationStartingEventArgs_get_Occlusions(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Occlusions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreFrameworkInputViewAnimationStartingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreFrameworkInputViewAnimationStartingEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreFrameworkInputViewAnimationStartingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreFrameworkInputViewAnimationStartingEventArgs[] = {
        { const_cast<char*>("animation_duration"), (getter)CoreFrameworkInputViewAnimationStartingEventArgs_get_AnimationDuration, nullptr, nullptr, nullptr },
        { const_cast<char*>("framework_animation_recommended"), (getter)CoreFrameworkInputViewAnimationStartingEventArgs_get_FrameworkAnimationRecommended, nullptr, nullptr, nullptr },
        { const_cast<char*>("occlusions"), (getter)CoreFrameworkInputViewAnimationStartingEventArgs_get_Occlusions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreFrameworkInputViewAnimationStartingEventArgs[] = 
    {
        { Py_tp_new, _new_CoreFrameworkInputViewAnimationStartingEventArgs },
        { Py_tp_dealloc, _dealloc_CoreFrameworkInputViewAnimationStartingEventArgs },
        { Py_tp_methods, _methods_CoreFrameworkInputViewAnimationStartingEventArgs },
        { Py_tp_getset, _getset_CoreFrameworkInputViewAnimationStartingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreFrameworkInputViewAnimationStartingEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreFrameworkInputViewAnimationStartingEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreFrameworkInputViewAnimationStartingEventArgs
    };

    // ----- CoreFrameworkInputViewOcclusionsChangedEventArgs class --------------------
    constexpr const char* const _type_name_CoreFrameworkInputViewOcclusionsChangedEventArgs = "CoreFrameworkInputViewOcclusionsChangedEventArgs";

    static PyObject* _new_CoreFrameworkInputViewOcclusionsChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreFrameworkInputViewOcclusionsChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreFrameworkInputViewOcclusionsChangedEventArgs(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreFrameworkInputViewOcclusionsChangedEventArgs_get_Handled(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreFrameworkInputViewOcclusionsChangedEventArgs_get_Occlusions(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Occlusions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreFrameworkInputViewOcclusionsChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreFrameworkInputViewOcclusionsChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreFrameworkInputViewOcclusionsChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreFrameworkInputViewOcclusionsChangedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)CoreFrameworkInputViewOcclusionsChangedEventArgs_get_Handled, nullptr, nullptr, nullptr },
        { const_cast<char*>("occlusions"), (getter)CoreFrameworkInputViewOcclusionsChangedEventArgs_get_Occlusions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreFrameworkInputViewOcclusionsChangedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreFrameworkInputViewOcclusionsChangedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreFrameworkInputViewOcclusionsChangedEventArgs },
        { Py_tp_methods, _methods_CoreFrameworkInputViewOcclusionsChangedEventArgs },
        { Py_tp_getset, _getset_CoreFrameworkInputViewOcclusionsChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreFrameworkInputViewOcclusionsChangedEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreFrameworkInputViewOcclusionsChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreFrameworkInputViewOcclusionsChangedEventArgs
    };

    // ----- CoreInputView class --------------------
    constexpr const char* const _type_name_CoreInputView = "CoreInputView";

    static PyObject* _new_CoreInputView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInputView);
        return nullptr;
    }

    static void _dealloc_CoreInputView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInputView_GetCoreInputViewOcclusions(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCoreInputViewOcclusions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::Core::CoreInputView::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_GetForUIContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::UIContext>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::Core::CoreInputView::GetForUIContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_IsKindSupported(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::Core::CoreInputViewKind>(args, 0);

                return py::convert(self->obj.IsKindSupported(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_TryHide(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryHide());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_TryHidePrimaryView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryHidePrimaryView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_TryShow(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryShow());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::Core::CoreInputViewKind>(args, 0);

                return py::convert(self->obj.TryShow(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_TryShowPrimaryView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryShowPrimaryView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_TryTransferXYFocusToPrimaryView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::ViewManagement::Core::CoreInputViewXYFocusTransferDirection>(args, 1);

                return py::convert(self->obj.TryTransferXYFocusToPrimaryView(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInputView_add_OcclusionsChanged(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreInputView, winrt::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs>>(arg);

            return py::convert(self->obj.OcclusionsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_remove_OcclusionsChanged(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.OcclusionsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_add_XYFocusTransferredToPrimaryView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreInputView, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.XYFocusTransferredToPrimaryView(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_remove_XYFocusTransferredToPrimaryView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.XYFocusTransferredToPrimaryView(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_add_XYFocusTransferringFromPrimaryView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreInputView, winrt::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs>>(arg);

            return py::convert(self->obj.XYFocusTransferringFromPrimaryView(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_remove_XYFocusTransferringFromPrimaryView(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.XYFocusTransferringFromPrimaryView(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_add_PrimaryViewHiding(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreInputView, winrt::Windows::UI::ViewManagement::Core::CoreInputViewHidingEventArgs>>(arg);

            return py::convert(self->obj.PrimaryViewHiding(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_remove_PrimaryViewHiding(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PrimaryViewHiding(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_add_PrimaryViewShowing(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreInputView, winrt::Windows::UI::ViewManagement::Core::CoreInputViewShowingEventArgs>>(arg);

            return py::convert(self->obj.PrimaryViewShowing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_remove_PrimaryViewShowing(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PrimaryViewShowing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_add_PrimaryViewAnimationStarting(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreInputView, winrt::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs>>(arg);

            return py::convert(self->obj.PrimaryViewAnimationStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_remove_PrimaryViewAnimationStarting(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PrimaryViewAnimationStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_add_SupportedKindsChanged(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::Core::CoreInputView, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.SupportedKindsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputView_remove_SupportedKindsChanged(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SupportedKindsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreInputView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreInputView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInputView[] = {
        { "get_core_input_view_occlusions", (PyCFunction)CoreInputView_GetCoreInputViewOcclusions, METH_VARARGS, nullptr },
        { "get_for_current_view", (PyCFunction)CoreInputView_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_u_i_context", (PyCFunction)CoreInputView_GetForUIContext, METH_VARARGS | METH_STATIC, nullptr },
        { "is_kind_supported", (PyCFunction)CoreInputView_IsKindSupported, METH_VARARGS, nullptr },
        { "try_hide", (PyCFunction)CoreInputView_TryHide, METH_VARARGS, nullptr },
        { "try_hide_primary_view", (PyCFunction)CoreInputView_TryHidePrimaryView, METH_VARARGS, nullptr },
        { "try_show", (PyCFunction)CoreInputView_TryShow, METH_VARARGS, nullptr },
        { "try_show_primary_view", (PyCFunction)CoreInputView_TryShowPrimaryView, METH_VARARGS, nullptr },
        { "try_transfer_x_y_focus_to_primary_view", (PyCFunction)CoreInputView_TryTransferXYFocusToPrimaryView, METH_VARARGS, nullptr },
        { "add_occlusions_changed", (PyCFunction)CoreInputView_add_OcclusionsChanged, METH_O, nullptr },
        { "remove_occlusions_changed", (PyCFunction)CoreInputView_remove_OcclusionsChanged, METH_O, nullptr },
        { "add_x_y_focus_transferred_to_primary_view", (PyCFunction)CoreInputView_add_XYFocusTransferredToPrimaryView, METH_O, nullptr },
        { "remove_x_y_focus_transferred_to_primary_view", (PyCFunction)CoreInputView_remove_XYFocusTransferredToPrimaryView, METH_O, nullptr },
        { "add_x_y_focus_transferring_from_primary_view", (PyCFunction)CoreInputView_add_XYFocusTransferringFromPrimaryView, METH_O, nullptr },
        { "remove_x_y_focus_transferring_from_primary_view", (PyCFunction)CoreInputView_remove_XYFocusTransferringFromPrimaryView, METH_O, nullptr },
        { "add_primary_view_hiding", (PyCFunction)CoreInputView_add_PrimaryViewHiding, METH_O, nullptr },
        { "remove_primary_view_hiding", (PyCFunction)CoreInputView_remove_PrimaryViewHiding, METH_O, nullptr },
        { "add_primary_view_showing", (PyCFunction)CoreInputView_add_PrimaryViewShowing, METH_O, nullptr },
        { "remove_primary_view_showing", (PyCFunction)CoreInputView_remove_PrimaryViewShowing, METH_O, nullptr },
        { "add_primary_view_animation_starting", (PyCFunction)CoreInputView_add_PrimaryViewAnimationStarting, METH_O, nullptr },
        { "remove_primary_view_animation_starting", (PyCFunction)CoreInputView_remove_PrimaryViewAnimationStarting, METH_O, nullptr },
        { "add_supported_kinds_changed", (PyCFunction)CoreInputView_add_SupportedKindsChanged, METH_O, nullptr },
        { "remove_supported_kinds_changed", (PyCFunction)CoreInputView_remove_SupportedKindsChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreInputView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInputView[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInputView[] = 
    {
        { Py_tp_new, _new_CoreInputView },
        { Py_tp_dealloc, _dealloc_CoreInputView },
        { Py_tp_methods, _methods_CoreInputView },
        { Py_tp_getset, _getset_CoreInputView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInputView =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreInputView",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInputView
    };

    // ----- CoreInputViewAnimationStartingEventArgs class --------------------
    constexpr const char* const _type_name_CoreInputViewAnimationStartingEventArgs = "CoreInputViewAnimationStartingEventArgs";

    static PyObject* _new_CoreInputViewAnimationStartingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInputViewAnimationStartingEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreInputViewAnimationStartingEventArgs(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInputViewAnimationStartingEventArgs_get_Handled(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInputViewAnimationStartingEventArgs_put_Handled(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInputViewAnimationStartingEventArgs_get_AnimationDuration(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AnimationDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputViewAnimationStartingEventArgs_get_Occlusions(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Occlusions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreInputViewAnimationStartingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInputViewAnimationStartingEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreInputViewAnimationStartingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInputViewAnimationStartingEventArgs[] = {
        { const_cast<char*>("handled"), (getter)CoreInputViewAnimationStartingEventArgs_get_Handled, (setter)CoreInputViewAnimationStartingEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("animation_duration"), (getter)CoreInputViewAnimationStartingEventArgs_get_AnimationDuration, nullptr, nullptr, nullptr },
        { const_cast<char*>("occlusions"), (getter)CoreInputViewAnimationStartingEventArgs_get_Occlusions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInputViewAnimationStartingEventArgs[] = 
    {
        { Py_tp_new, _new_CoreInputViewAnimationStartingEventArgs },
        { Py_tp_dealloc, _dealloc_CoreInputViewAnimationStartingEventArgs },
        { Py_tp_methods, _methods_CoreInputViewAnimationStartingEventArgs },
        { Py_tp_getset, _getset_CoreInputViewAnimationStartingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInputViewAnimationStartingEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreInputViewAnimationStartingEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInputViewAnimationStartingEventArgs
    };

    // ----- CoreInputViewHidingEventArgs class --------------------
    constexpr const char* const _type_name_CoreInputViewHidingEventArgs = "CoreInputViewHidingEventArgs";

    static PyObject* _new_CoreInputViewHidingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInputViewHidingEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreInputViewHidingEventArgs(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewHidingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInputViewHidingEventArgs_TryCancel(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewHidingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryCancel());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_CoreInputViewHidingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreInputViewHidingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInputViewHidingEventArgs[] = {
        { "try_cancel", (PyCFunction)CoreInputViewHidingEventArgs_TryCancel, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreInputViewHidingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInputViewHidingEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInputViewHidingEventArgs[] = 
    {
        { Py_tp_new, _new_CoreInputViewHidingEventArgs },
        { Py_tp_dealloc, _dealloc_CoreInputViewHidingEventArgs },
        { Py_tp_methods, _methods_CoreInputViewHidingEventArgs },
        { Py_tp_getset, _getset_CoreInputViewHidingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInputViewHidingEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreInputViewHidingEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewHidingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInputViewHidingEventArgs
    };

    // ----- CoreInputViewOcclusion class --------------------
    constexpr const char* const _type_name_CoreInputViewOcclusion = "CoreInputViewOcclusion";

    static PyObject* _new_CoreInputViewOcclusion(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInputViewOcclusion);
        return nullptr;
    }

    static void _dealloc_CoreInputViewOcclusion(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusion* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInputViewOcclusion_get_OccludingRect(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OccludingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputViewOcclusion_get_OcclusionKind(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OcclusionKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreInputViewOcclusion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreInputViewOcclusion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInputViewOcclusion[] = {
        { "_from", (PyCFunction)_from_CoreInputViewOcclusion, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInputViewOcclusion[] = {
        { const_cast<char*>("occluding_rect"), (getter)CoreInputViewOcclusion_get_OccludingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("occlusion_kind"), (getter)CoreInputViewOcclusion_get_OcclusionKind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInputViewOcclusion[] = 
    {
        { Py_tp_new, _new_CoreInputViewOcclusion },
        { Py_tp_dealloc, _dealloc_CoreInputViewOcclusion },
        { Py_tp_methods, _methods_CoreInputViewOcclusion },
        { Py_tp_getset, _getset_CoreInputViewOcclusion },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInputViewOcclusion =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreInputViewOcclusion",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInputViewOcclusion
    };

    // ----- CoreInputViewOcclusionsChangedEventArgs class --------------------
    constexpr const char* const _type_name_CoreInputViewOcclusionsChangedEventArgs = "CoreInputViewOcclusionsChangedEventArgs";

    static PyObject* _new_CoreInputViewOcclusionsChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInputViewOcclusionsChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreInputViewOcclusionsChangedEventArgs(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInputViewOcclusionsChangedEventArgs_get_Handled(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInputViewOcclusionsChangedEventArgs_put_Handled(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInputViewOcclusionsChangedEventArgs_get_Occlusions(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Occlusions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreInputViewOcclusionsChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInputViewOcclusionsChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreInputViewOcclusionsChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInputViewOcclusionsChangedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)CoreInputViewOcclusionsChangedEventArgs_get_Handled, (setter)CoreInputViewOcclusionsChangedEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("occlusions"), (getter)CoreInputViewOcclusionsChangedEventArgs_get_Occlusions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInputViewOcclusionsChangedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreInputViewOcclusionsChangedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreInputViewOcclusionsChangedEventArgs },
        { Py_tp_methods, _methods_CoreInputViewOcclusionsChangedEventArgs },
        { Py_tp_getset, _getset_CoreInputViewOcclusionsChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInputViewOcclusionsChangedEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreInputViewOcclusionsChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInputViewOcclusionsChangedEventArgs
    };

    // ----- CoreInputViewShowingEventArgs class --------------------
    constexpr const char* const _type_name_CoreInputViewShowingEventArgs = "CoreInputViewShowingEventArgs";

    static PyObject* _new_CoreInputViewShowingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInputViewShowingEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreInputViewShowingEventArgs(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewShowingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInputViewShowingEventArgs_TryCancel(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewShowingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryCancel());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_CoreInputViewShowingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreInputViewShowingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInputViewShowingEventArgs[] = {
        { "try_cancel", (PyCFunction)CoreInputViewShowingEventArgs_TryCancel, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreInputViewShowingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInputViewShowingEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInputViewShowingEventArgs[] = 
    {
        { Py_tp_new, _new_CoreInputViewShowingEventArgs },
        { Py_tp_dealloc, _dealloc_CoreInputViewShowingEventArgs },
        { Py_tp_methods, _methods_CoreInputViewShowingEventArgs },
        { Py_tp_getset, _getset_CoreInputViewShowingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInputViewShowingEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreInputViewShowingEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewShowingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInputViewShowingEventArgs
    };

    // ----- CoreInputViewTransferringXYFocusEventArgs class --------------------
    constexpr const char* const _type_name_CoreInputViewTransferringXYFocusEventArgs = "CoreInputViewTransferringXYFocusEventArgs";

    static PyObject* _new_CoreInputViewTransferringXYFocusEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInputViewTransferringXYFocusEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreInputViewTransferringXYFocusEventArgs(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInputViewTransferringXYFocusEventArgs_get_TransferHandled(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TransferHandled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInputViewTransferringXYFocusEventArgs_put_TransferHandled(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.TransferHandled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInputViewTransferringXYFocusEventArgs_get_KeepPrimaryViewVisible(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeepPrimaryViewVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInputViewTransferringXYFocusEventArgs_put_KeepPrimaryViewVisible(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.KeepPrimaryViewVisible(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInputViewTransferringXYFocusEventArgs_get_Direction(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Direction());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInputViewTransferringXYFocusEventArgs_get_Origin(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Origin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreInputViewTransferringXYFocusEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInputViewTransferringXYFocusEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreInputViewTransferringXYFocusEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInputViewTransferringXYFocusEventArgs[] = {
        { const_cast<char*>("transfer_handled"), (getter)CoreInputViewTransferringXYFocusEventArgs_get_TransferHandled, (setter)CoreInputViewTransferringXYFocusEventArgs_put_TransferHandled, nullptr, nullptr },
        { const_cast<char*>("keep_primary_view_visible"), (getter)CoreInputViewTransferringXYFocusEventArgs_get_KeepPrimaryViewVisible, (setter)CoreInputViewTransferringXYFocusEventArgs_put_KeepPrimaryViewVisible, nullptr, nullptr },
        { const_cast<char*>("direction"), (getter)CoreInputViewTransferringXYFocusEventArgs_get_Direction, nullptr, nullptr, nullptr },
        { const_cast<char*>("origin"), (getter)CoreInputViewTransferringXYFocusEventArgs_get_Origin, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInputViewTransferringXYFocusEventArgs[] = 
    {
        { Py_tp_new, _new_CoreInputViewTransferringXYFocusEventArgs },
        { Py_tp_dealloc, _dealloc_CoreInputViewTransferringXYFocusEventArgs },
        { Py_tp_methods, _methods_CoreInputViewTransferringXYFocusEventArgs },
        { Py_tp_getset, _getset_CoreInputViewTransferringXYFocusEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInputViewTransferringXYFocusEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement_Core.CoreInputViewTransferringXYFocusEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInputViewTransferringXYFocusEventArgs
    };

    // ----- UISettingsController class --------------------
    constexpr const char* const _type_name_UISettingsController = "UISettingsController";

    static PyObject* _new_UISettingsController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UISettingsController);
        return nullptr;
    }

    static void _dealloc_UISettingsController(py::wrapper::Windows::UI::ViewManagement::Core::UISettingsController* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UISettingsController_RequestDefaultAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::Core::UISettingsController::RequestDefaultAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UISettingsController_SetAdvancedEffectsEnabled(py::wrapper::Windows::UI::ViewManagement::Core::UISettingsController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                self->obj.SetAdvancedEffectsEnabled(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UISettingsController_SetAnimationsEnabled(py::wrapper::Windows::UI::ViewManagement::Core::UISettingsController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                self->obj.SetAnimationsEnabled(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UISettingsController_SetAutoHideScrollBars(py::wrapper::Windows::UI::ViewManagement::Core::UISettingsController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                self->obj.SetAutoHideScrollBars(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UISettingsController_SetMessageDuration(py::wrapper::Windows::UI::ViewManagement::Core::UISettingsController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.SetMessageDuration(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UISettingsController_SetTextScaleFactor(py::wrapper::Windows::UI::ViewManagement::Core::UISettingsController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                self->obj.SetTextScaleFactor(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UISettingsController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::Core::UISettingsController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UISettingsController[] = {
        { "request_default_async", (PyCFunction)UISettingsController_RequestDefaultAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "set_advanced_effects_enabled", (PyCFunction)UISettingsController_SetAdvancedEffectsEnabled, METH_VARARGS, nullptr },
        { "set_animations_enabled", (PyCFunction)UISettingsController_SetAnimationsEnabled, METH_VARARGS, nullptr },
        { "set_auto_hide_scroll_bars", (PyCFunction)UISettingsController_SetAutoHideScrollBars, METH_VARARGS, nullptr },
        { "set_message_duration", (PyCFunction)UISettingsController_SetMessageDuration, METH_VARARGS, nullptr },
        { "set_text_scale_factor", (PyCFunction)UISettingsController_SetTextScaleFactor, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UISettingsController, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UISettingsController[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UISettingsController[] = 
    {
        { Py_tp_new, _new_UISettingsController },
        { Py_tp_dealloc, _dealloc_UISettingsController },
        { Py_tp_methods, _methods_UISettingsController },
        { Py_tp_getset, _getset_UISettingsController },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UISettingsController =
    {
        "_winrt_Windows_UI_ViewManagement_Core.UISettingsController",
        sizeof(py::wrapper::Windows::UI::ViewManagement::Core::UISettingsController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UISettingsController
    };

    // ----- Windows.UI.ViewManagement.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputView>::python_type = py::register_python_type(module, _type_name_CoreFrameworkInputView, &_type_spec_CoreFrameworkInputView, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewAnimationStartingEventArgs>::python_type = py::register_python_type(module, _type_name_CoreFrameworkInputViewAnimationStartingEventArgs, &_type_spec_CoreFrameworkInputViewAnimationStartingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreFrameworkInputViewOcclusionsChangedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreFrameworkInputViewOcclusionsChangedEventArgs, &_type_spec_CoreFrameworkInputViewOcclusionsChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputView>::python_type = py::register_python_type(module, _type_name_CoreInputView, &_type_spec_CoreInputView, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewAnimationStartingEventArgs>::python_type = py::register_python_type(module, _type_name_CoreInputViewAnimationStartingEventArgs, &_type_spec_CoreInputViewAnimationStartingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewHidingEventArgs>::python_type = py::register_python_type(module, _type_name_CoreInputViewHidingEventArgs, &_type_spec_CoreInputViewHidingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewOcclusion>::python_type = py::register_python_type(module, _type_name_CoreInputViewOcclusion, &_type_spec_CoreInputViewOcclusion, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreInputViewOcclusionsChangedEventArgs, &_type_spec_CoreInputViewOcclusionsChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewShowingEventArgs>::python_type = py::register_python_type(module, _type_name_CoreInputViewShowingEventArgs, &_type_spec_CoreInputViewShowingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs>::python_type = py::register_python_type(module, _type_name_CoreInputViewTransferringXYFocusEventArgs, &_type_spec_CoreInputViewTransferringXYFocusEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::Core::UISettingsController>::python_type = py::register_python_type(module, _type_name_UISettingsController, &_type_spec_UISettingsController, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.ViewManagement.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_ViewManagement_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::ViewManagement::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_ViewManagement_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::ViewManagement::Core::module_def);
}
