// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.VoiceCommands.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommand>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>::python_type;

namespace py::cpp::Windows::ApplicationModel::VoiceCommands
{
    // ----- VoiceCommand class --------------------
    constexpr const char* const _type_name_VoiceCommand = "VoiceCommand";

    static PyObject* _new_VoiceCommand(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommand);
        return nullptr;
    }

    static void _dealloc_VoiceCommand(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommand_get_CommandName(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CommandName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommand_get_Properties(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommand_get_SpeechRecognitionResult(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SpeechRecognitionResult());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VoiceCommand(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommand>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommand[] = {
        { "_from", (PyCFunction)_from_VoiceCommand, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommand[] = {
        { const_cast<char*>("command_name"), (getter)VoiceCommand_get_CommandName, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)VoiceCommand_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("speech_recognition_result"), (getter)VoiceCommand_get_SpeechRecognitionResult, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommand[] = 
    {
        { Py_tp_new, _new_VoiceCommand },
        { Py_tp_dealloc, _dealloc_VoiceCommand },
        { Py_tp_methods, _methods_VoiceCommand },
        { Py_tp_getset, _getset_VoiceCommand },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommand =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommand",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommand),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommand
    };

    // ----- VoiceCommandCompletedEventArgs class --------------------
    constexpr const char* const _type_name_VoiceCommandCompletedEventArgs = "VoiceCommandCompletedEventArgs";

    static PyObject* _new_VoiceCommandCompletedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommandCompletedEventArgs);
        return nullptr;
    }

    static void _dealloc_VoiceCommandCompletedEventArgs(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandCompletedEventArgs_get_Reason(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VoiceCommandCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandCompletedEventArgs[] = {
        { "_from", (PyCFunction)_from_VoiceCommandCompletedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandCompletedEventArgs[] = {
        { const_cast<char*>("reason"), (getter)VoiceCommandCompletedEventArgs_get_Reason, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandCompletedEventArgs[] = 
    {
        { Py_tp_new, _new_VoiceCommandCompletedEventArgs },
        { Py_tp_dealloc, _dealloc_VoiceCommandCompletedEventArgs },
        { Py_tp_methods, _methods_VoiceCommandCompletedEventArgs },
        { Py_tp_getset, _getset_VoiceCommandCompletedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandCompletedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandCompletedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandCompletedEventArgs
    };

    // ----- VoiceCommandConfirmationResult class --------------------
    constexpr const char* const _type_name_VoiceCommandConfirmationResult = "VoiceCommandConfirmationResult";

    static PyObject* _new_VoiceCommandConfirmationResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommandConfirmationResult);
        return nullptr;
    }

    static void _dealloc_VoiceCommandConfirmationResult(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandConfirmationResult_get_Confirmed(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Confirmed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VoiceCommandConfirmationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandConfirmationResult[] = {
        { "_from", (PyCFunction)_from_VoiceCommandConfirmationResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandConfirmationResult[] = {
        { const_cast<char*>("confirmed"), (getter)VoiceCommandConfirmationResult_get_Confirmed, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandConfirmationResult[] = 
    {
        { Py_tp_new, _new_VoiceCommandConfirmationResult },
        { Py_tp_dealloc, _dealloc_VoiceCommandConfirmationResult },
        { Py_tp_methods, _methods_VoiceCommandConfirmationResult },
        { Py_tp_getset, _getset_VoiceCommandConfirmationResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandConfirmationResult =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandConfirmationResult",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandConfirmationResult
    };

    // ----- VoiceCommandContentTile class --------------------
    constexpr const char* const _type_name_VoiceCommandContentTile = "VoiceCommandContentTile";

    static PyObject* _new_VoiceCommandContentTile(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_VoiceCommandContentTile(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandContentTile_get_Title(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_Title(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_TextLine3(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextLine3());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_TextLine3(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TextLine3(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_TextLine2(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextLine2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_TextLine2(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TextLine2(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_TextLine1(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextLine1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_TextLine1(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TextLine1(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_Image(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Image());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_Image(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(arg);

            self->obj.Image(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_ContentTileType(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContentTileType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_ContentTileType(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTileType>(arg);

            self->obj.ContentTileType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppLaunchArgument());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AppLaunchArgument(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandContentTile_get_AppContext(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandContentTile_put_AppContext(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);

            self->obj.AppContext(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_VoiceCommandContentTile(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandContentTile[] = {
        { "_from", (PyCFunction)_from_VoiceCommandContentTile, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandContentTile[] = {
        { const_cast<char*>("title"), (getter)VoiceCommandContentTile_get_Title, (setter)VoiceCommandContentTile_put_Title, nullptr, nullptr },
        { const_cast<char*>("text_line3"), (getter)VoiceCommandContentTile_get_TextLine3, (setter)VoiceCommandContentTile_put_TextLine3, nullptr, nullptr },
        { const_cast<char*>("text_line2"), (getter)VoiceCommandContentTile_get_TextLine2, (setter)VoiceCommandContentTile_put_TextLine2, nullptr, nullptr },
        { const_cast<char*>("text_line1"), (getter)VoiceCommandContentTile_get_TextLine1, (setter)VoiceCommandContentTile_put_TextLine1, nullptr, nullptr },
        { const_cast<char*>("image"), (getter)VoiceCommandContentTile_get_Image, (setter)VoiceCommandContentTile_put_Image, nullptr, nullptr },
        { const_cast<char*>("content_tile_type"), (getter)VoiceCommandContentTile_get_ContentTileType, (setter)VoiceCommandContentTile_put_ContentTileType, nullptr, nullptr },
        { const_cast<char*>("app_launch_argument"), (getter)VoiceCommandContentTile_get_AppLaunchArgument, (setter)VoiceCommandContentTile_put_AppLaunchArgument, nullptr, nullptr },
        { const_cast<char*>("app_context"), (getter)VoiceCommandContentTile_get_AppContext, (setter)VoiceCommandContentTile_put_AppContext, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandContentTile[] = 
    {
        { Py_tp_new, _new_VoiceCommandContentTile },
        { Py_tp_dealloc, _dealloc_VoiceCommandContentTile },
        { Py_tp_methods, _methods_VoiceCommandContentTile },
        { Py_tp_getset, _getset_VoiceCommandContentTile },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandContentTile =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandContentTile",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandContentTile
    };

    // ----- VoiceCommandDefinition class --------------------
    constexpr const char* const _type_name_VoiceCommandDefinition = "VoiceCommandDefinition";

    static PyObject* _new_VoiceCommandDefinition(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommandDefinition);
        return nullptr;
    }

    static void _dealloc_VoiceCommandDefinition(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandDefinition_SetPhraseListAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(self->obj.SetPhraseListAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandDefinition_get_Language(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandDefinition_get_Name(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VoiceCommandDefinition(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandDefinition[] = {
        { "set_phrase_list_async", (PyCFunction)VoiceCommandDefinition_SetPhraseListAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_VoiceCommandDefinition, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandDefinition[] = {
        { const_cast<char*>("language"), (getter)VoiceCommandDefinition_get_Language, nullptr, nullptr, nullptr },
        { const_cast<char*>("name"), (getter)VoiceCommandDefinition_get_Name, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandDefinition[] = 
    {
        { Py_tp_new, _new_VoiceCommandDefinition },
        { Py_tp_dealloc, _dealloc_VoiceCommandDefinition },
        { Py_tp_methods, _methods_VoiceCommandDefinition },
        { Py_tp_getset, _getset_VoiceCommandDefinition },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandDefinition =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandDefinition",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandDefinition
    };

    // ----- VoiceCommandDefinitionManager class --------------------
    constexpr const char* const _type_name_VoiceCommandDefinitionManager = "VoiceCommandDefinitionManager";

    static PyObject* _new_VoiceCommandDefinitionManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommandDefinitionManager);
        return nullptr;
    }

    static PyObject* VoiceCommandDefinitionManager_InstallCommandDefinitionsFromStorageFileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager::InstallCommandDefinitionsFromStorageFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandDefinitionManager_get_InstalledCommandDefinitions(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager::InstalledCommandDefinitions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandDefinitionManager[] = {
        { "install_command_definitions_from_storage_file_async", (PyCFunction)VoiceCommandDefinitionManager_InstallCommandDefinitionsFromStorageFileAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_installed_command_definitions", (PyCFunction)VoiceCommandDefinitionManager_get_InstalledCommandDefinitions, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandDefinitionManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandDefinitionManager[] = 
    {
        { Py_tp_new, _new_VoiceCommandDefinitionManager },
        { Py_tp_methods, _methods_VoiceCommandDefinitionManager },
        { Py_tp_getset, _getset_VoiceCommandDefinitionManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandDefinitionManager =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandDefinitionManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandDefinitionManager
    };

    // ----- VoiceCommandDisambiguationResult class --------------------
    constexpr const char* const _type_name_VoiceCommandDisambiguationResult = "VoiceCommandDisambiguationResult";

    static PyObject* _new_VoiceCommandDisambiguationResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommandDisambiguationResult);
        return nullptr;
    }

    static void _dealloc_VoiceCommandDisambiguationResult(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandDisambiguationResult_get_SelectedItem(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SelectedItem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VoiceCommandDisambiguationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandDisambiguationResult[] = {
        { "_from", (PyCFunction)_from_VoiceCommandDisambiguationResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandDisambiguationResult[] = {
        { const_cast<char*>("selected_item"), (getter)VoiceCommandDisambiguationResult_get_SelectedItem, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandDisambiguationResult[] = 
    {
        { Py_tp_new, _new_VoiceCommandDisambiguationResult },
        { Py_tp_dealloc, _dealloc_VoiceCommandDisambiguationResult },
        { Py_tp_methods, _methods_VoiceCommandDisambiguationResult },
        { Py_tp_getset, _getset_VoiceCommandDisambiguationResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandDisambiguationResult =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandDisambiguationResult",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandDisambiguationResult
    };

    // ----- VoiceCommandResponse class --------------------
    constexpr const char* const _type_name_VoiceCommandResponse = "VoiceCommandResponse";

    static PyObject* _new_VoiceCommandResponse(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommandResponse);
        return nullptr;
    }

    static void _dealloc_VoiceCommandResponse(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandResponse_CreateResponse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponse(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandResponse_CreateResponseForPrompt(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponseForPrompt(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>>(args, 2);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::CreateResponseForPrompt(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandResponse_get_RepeatMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RepeatMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandResponse_put_RepeatMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(arg);

            self->obj.RepeatMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandResponse_get_Message(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandResponse_put_Message(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>(arg);

            self->obj.Message(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandResponse_get_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppLaunchArgument());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandResponse_put_AppLaunchArgument(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AppLaunchArgument(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandResponse_get_VoiceCommandContentTiles(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VoiceCommandContentTiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandResponse_get_MaxSupportedVoiceCommandContentTiles(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse::MaxSupportedVoiceCommandContentTiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VoiceCommandResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandResponse[] = {
        { "create_response", (PyCFunction)VoiceCommandResponse_CreateResponse, METH_VARARGS | METH_STATIC, nullptr },
        { "create_response_for_prompt", (PyCFunction)VoiceCommandResponse_CreateResponseForPrompt, METH_VARARGS | METH_STATIC, nullptr },
        { "get_max_supported_voice_command_content_tiles", (PyCFunction)VoiceCommandResponse_get_MaxSupportedVoiceCommandContentTiles, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_VoiceCommandResponse, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandResponse[] = {
        { const_cast<char*>("repeat_message"), (getter)VoiceCommandResponse_get_RepeatMessage, (setter)VoiceCommandResponse_put_RepeatMessage, nullptr, nullptr },
        { const_cast<char*>("message"), (getter)VoiceCommandResponse_get_Message, (setter)VoiceCommandResponse_put_Message, nullptr, nullptr },
        { const_cast<char*>("app_launch_argument"), (getter)VoiceCommandResponse_get_AppLaunchArgument, (setter)VoiceCommandResponse_put_AppLaunchArgument, nullptr, nullptr },
        { const_cast<char*>("voice_command_content_tiles"), (getter)VoiceCommandResponse_get_VoiceCommandContentTiles, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandResponse[] = 
    {
        { Py_tp_new, _new_VoiceCommandResponse },
        { Py_tp_dealloc, _dealloc_VoiceCommandResponse },
        { Py_tp_methods, _methods_VoiceCommandResponse },
        { Py_tp_getset, _getset_VoiceCommandResponse },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandResponse =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandResponse",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandResponse
    };

    // ----- VoiceCommandServiceConnection class --------------------
    constexpr const char* const _type_name_VoiceCommandServiceConnection = "VoiceCommandServiceConnection";

    static PyObject* _new_VoiceCommandServiceConnection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VoiceCommandServiceConnection);
        return nullptr;
    }

    static void _dealloc_VoiceCommandServiceConnection(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandServiceConnection_FromAppServiceTriggerDetails(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::AppService::AppServiceTriggerDetails>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection::FromAppServiceTriggerDetails(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_GetVoiceCommandAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetVoiceCommandAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_ReportFailureAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.ReportFailureAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_ReportProgressAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.ReportProgressAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_ReportSuccessAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.ReportSuccessAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_RequestAppLaunchAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.RequestAppLaunchAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_RequestConfirmationAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.RequestConfirmationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_RequestDisambiguationAsync(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>(args, 0);

                return py::convert(self->obj.RequestDisambiguationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_get_Language(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_add_VoiceCommandCompleted(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection, winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>>(arg);

            return py::convert(self->obj.VoiceCommandCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VoiceCommandServiceConnection_remove_VoiceCommandCompleted(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VoiceCommandCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VoiceCommandServiceConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandServiceConnection[] = {
        { "from_app_service_trigger_details", (PyCFunction)VoiceCommandServiceConnection_FromAppServiceTriggerDetails, METH_VARARGS | METH_STATIC, nullptr },
        { "get_voice_command_async", (PyCFunction)VoiceCommandServiceConnection_GetVoiceCommandAsync, METH_VARARGS, nullptr },
        { "report_failure_async", (PyCFunction)VoiceCommandServiceConnection_ReportFailureAsync, METH_VARARGS, nullptr },
        { "report_progress_async", (PyCFunction)VoiceCommandServiceConnection_ReportProgressAsync, METH_VARARGS, nullptr },
        { "report_success_async", (PyCFunction)VoiceCommandServiceConnection_ReportSuccessAsync, METH_VARARGS, nullptr },
        { "request_app_launch_async", (PyCFunction)VoiceCommandServiceConnection_RequestAppLaunchAsync, METH_VARARGS, nullptr },
        { "request_confirmation_async", (PyCFunction)VoiceCommandServiceConnection_RequestConfirmationAsync, METH_VARARGS, nullptr },
        { "request_disambiguation_async", (PyCFunction)VoiceCommandServiceConnection_RequestDisambiguationAsync, METH_VARARGS, nullptr },
        { "add_voice_command_completed", (PyCFunction)VoiceCommandServiceConnection_add_VoiceCommandCompleted, METH_O, nullptr },
        { "remove_voice_command_completed", (PyCFunction)VoiceCommandServiceConnection_remove_VoiceCommandCompleted, METH_O, nullptr },
        { "_from", (PyCFunction)_from_VoiceCommandServiceConnection, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandServiceConnection[] = {
        { const_cast<char*>("language"), (getter)VoiceCommandServiceConnection_get_Language, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandServiceConnection[] = 
    {
        { Py_tp_new, _new_VoiceCommandServiceConnection },
        { Py_tp_dealloc, _dealloc_VoiceCommandServiceConnection },
        { Py_tp_methods, _methods_VoiceCommandServiceConnection },
        { Py_tp_getset, _getset_VoiceCommandServiceConnection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandServiceConnection =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandServiceConnection",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandServiceConnection
    };

    // ----- VoiceCommandUserMessage class --------------------
    constexpr const char* const _type_name_VoiceCommandUserMessage = "VoiceCommandUserMessage";

    static PyObject* _new_VoiceCommandUserMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_VoiceCommandUserMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VoiceCommandUserMessage_get_SpokenMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SpokenMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandUserMessage_put_SpokenMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SpokenMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VoiceCommandUserMessage_get_DisplayMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VoiceCommandUserMessage_put_DisplayMessage(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_VoiceCommandUserMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VoiceCommandUserMessage[] = {
        { "_from", (PyCFunction)_from_VoiceCommandUserMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VoiceCommandUserMessage[] = {
        { const_cast<char*>("spoken_message"), (getter)VoiceCommandUserMessage_get_SpokenMessage, (setter)VoiceCommandUserMessage_put_SpokenMessage, nullptr, nullptr },
        { const_cast<char*>("display_message"), (getter)VoiceCommandUserMessage_get_DisplayMessage, (setter)VoiceCommandUserMessage_put_DisplayMessage, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VoiceCommandUserMessage[] = 
    {
        { Py_tp_new, _new_VoiceCommandUserMessage },
        { Py_tp_dealloc, _dealloc_VoiceCommandUserMessage },
        { Py_tp_methods, _methods_VoiceCommandUserMessage },
        { Py_tp_getset, _getset_VoiceCommandUserMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VoiceCommandUserMessage =
    {
        "_winrt_Windows_ApplicationModel_VoiceCommands.VoiceCommandUserMessage",
        sizeof(py::wrapper::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VoiceCommandUserMessage
    };

    // ----- Windows.ApplicationModel.VoiceCommands Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommand>::python_type = py::register_python_type(module, _type_name_VoiceCommand, &_type_spec_VoiceCommand, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>::python_type = py::register_python_type(module, _type_name_VoiceCommandCompletedEventArgs, &_type_spec_VoiceCommandCompletedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult>::python_type = py::register_python_type(module, _type_name_VoiceCommandConfirmationResult, &_type_spec_VoiceCommandConfirmationResult, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile>::python_type = py::register_python_type(module, _type_name_VoiceCommandContentTile, &_type_spec_VoiceCommandContentTile, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition>::python_type = py::register_python_type(module, _type_name_VoiceCommandDefinition, &_type_spec_VoiceCommandDefinition, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager>::python_type = py::register_python_type(module, _type_name_VoiceCommandDefinitionManager, &_type_spec_VoiceCommandDefinitionManager, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult>::python_type = py::register_python_type(module, _type_name_VoiceCommandDisambiguationResult, &_type_spec_VoiceCommandDisambiguationResult, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse>::python_type = py::register_python_type(module, _type_name_VoiceCommandResponse, &_type_spec_VoiceCommandResponse, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection>::python_type = py::register_python_type(module, _type_name_VoiceCommandServiceConnection, &_type_spec_VoiceCommandServiceConnection, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage>::python_type = py::register_python_type(module, _type_name_VoiceCommandUserMessage, &_type_spec_VoiceCommandUserMessage, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.VoiceCommands");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_VoiceCommands",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::VoiceCommands

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_VoiceCommands (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::VoiceCommands::module_def);
}
