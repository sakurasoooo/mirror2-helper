// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Security.Cryptography.h"

PyTypeObject* py::winrt_type<winrt::Windows::Security::Cryptography::CryptographicBuffer>::python_type;

namespace py::cpp::Windows::Security::Cryptography
{
    // ----- CryptographicBuffer class --------------------
    constexpr const char* const _type_name_CryptographicBuffer = "CryptographicBuffer";

    static PyObject* _new_CryptographicBuffer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CryptographicBuffer);
        return nullptr;
    }

    static PyObject* CryptographicBuffer_Compare(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::Compare(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_ConvertBinaryToString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Cryptography::BinaryStringEncoding>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::ConvertBinaryToString(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_ConvertStringToBinary(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Cryptography::BinaryStringEncoding>(args, 1);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::ConvertStringToBinary(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_CopyToByteArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                winrt::com_array<uint8_t> param1 { };

                winrt::Windows::Security::Cryptography::CryptographicBuffer::CopyToByteArray(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_CreateFromByteArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::CreateFromByteArray(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_DecodeFromBase64String(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::DecodeFromBase64String(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_DecodeFromHexString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::DecodeFromHexString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_EncodeToBase64String(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::EncodeToBase64String(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_EncodeToHexString(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::EncodeToHexString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_GenerateRandom(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::GenerateRandom(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CryptographicBuffer_GenerateRandomNumber(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Security::Cryptography::CryptographicBuffer::GenerateRandomNumber());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_CryptographicBuffer[] = {
        { "compare", (PyCFunction)CryptographicBuffer_Compare, METH_VARARGS | METH_STATIC, nullptr },
        { "convert_binary_to_string", (PyCFunction)CryptographicBuffer_ConvertBinaryToString, METH_VARARGS | METH_STATIC, nullptr },
        { "convert_string_to_binary", (PyCFunction)CryptographicBuffer_ConvertStringToBinary, METH_VARARGS | METH_STATIC, nullptr },
        { "copy_to_byte_array", (PyCFunction)CryptographicBuffer_CopyToByteArray, METH_VARARGS | METH_STATIC, nullptr },
        { "create_from_byte_array", (PyCFunction)CryptographicBuffer_CreateFromByteArray, METH_VARARGS | METH_STATIC, nullptr },
        { "decode_from_base64_string", (PyCFunction)CryptographicBuffer_DecodeFromBase64String, METH_VARARGS | METH_STATIC, nullptr },
        { "decode_from_hex_string", (PyCFunction)CryptographicBuffer_DecodeFromHexString, METH_VARARGS | METH_STATIC, nullptr },
        { "encode_to_base64_string", (PyCFunction)CryptographicBuffer_EncodeToBase64String, METH_VARARGS | METH_STATIC, nullptr },
        { "encode_to_hex_string", (PyCFunction)CryptographicBuffer_EncodeToHexString, METH_VARARGS | METH_STATIC, nullptr },
        { "generate_random", (PyCFunction)CryptographicBuffer_GenerateRandom, METH_VARARGS | METH_STATIC, nullptr },
        { "generate_random_number", (PyCFunction)CryptographicBuffer_GenerateRandomNumber, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CryptographicBuffer[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CryptographicBuffer[] = 
    {
        { Py_tp_new, _new_CryptographicBuffer },
        { Py_tp_methods, _methods_CryptographicBuffer },
        { Py_tp_getset, _getset_CryptographicBuffer },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CryptographicBuffer =
    {
        "_winrt_Windows_Security_Cryptography.CryptographicBuffer",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CryptographicBuffer
    };

    // ----- Windows.Security.Cryptography Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Security::Cryptography::CryptographicBuffer>::python_type = py::register_python_type(module, _type_name_CryptographicBuffer, &_type_spec_CryptographicBuffer, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Security.Cryptography");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Security_Cryptography",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Security::Cryptography

PyMODINIT_FUNC
PyInit__winrt_Windows_Security_Cryptography (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Security::Cryptography::module_def);
}
