// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Media.Control.h"

PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::CurrentSessionChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSession>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::MediaPropertiesChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::PlaybackInfoChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::SessionsChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Control::TimelinePropertiesChangedEventArgs>::python_type;

namespace py::cpp::Windows::Media::Control
{
    // ----- CurrentSessionChangedEventArgs class --------------------
    constexpr const char* const _type_name_CurrentSessionChangedEventArgs = "CurrentSessionChangedEventArgs";

    static PyObject* _new_CurrentSessionChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CurrentSessionChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_CurrentSessionChangedEventArgs(py::wrapper::Windows::Media::Control::CurrentSessionChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_CurrentSessionChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::CurrentSessionChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CurrentSessionChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_CurrentSessionChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CurrentSessionChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CurrentSessionChangedEventArgs[] = 
    {
        { Py_tp_new, _new_CurrentSessionChangedEventArgs },
        { Py_tp_dealloc, _dealloc_CurrentSessionChangedEventArgs },
        { Py_tp_methods, _methods_CurrentSessionChangedEventArgs },
        { Py_tp_getset, _getset_CurrentSessionChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CurrentSessionChangedEventArgs =
    {
        "_winrt_Windows_Media_Control.CurrentSessionChangedEventArgs",
        sizeof(py::wrapper::Windows::Media::Control::CurrentSessionChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CurrentSessionChangedEventArgs
    };

    // ----- GlobalSystemMediaTransportControlsSession class --------------------
    constexpr const char* const _type_name_GlobalSystemMediaTransportControlsSession = "GlobalSystemMediaTransportControlsSession";

    static PyObject* _new_GlobalSystemMediaTransportControlsSession(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GlobalSystemMediaTransportControlsSession);
        return nullptr;
    }

    static void _dealloc_GlobalSystemMediaTransportControlsSession(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_GetPlaybackInfo(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetPlaybackInfo());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_GetTimelineProperties(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetTimelineProperties());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryChangeAutoRepeatModeAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::MediaPlaybackAutoRepeatMode>(args, 0);

                return py::convert(self->obj.TryChangeAutoRepeatModeAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryChangeChannelDownAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryChangeChannelDownAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryChangeChannelUpAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryChangeChannelUpAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryChangePlaybackPositionAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.TryChangePlaybackPositionAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryChangePlaybackRateAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.TryChangePlaybackRateAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryChangeShuffleActiveAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                return py::convert(self->obj.TryChangeShuffleActiveAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryFastForwardAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryFastForwardAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryGetMediaPropertiesAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryGetMediaPropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryPauseAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryPauseAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryPlayAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryPlayAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryRecordAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryRecordAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryRewindAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryRewindAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TrySkipNextAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TrySkipNextAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TrySkipPreviousAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TrySkipPreviousAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryStopAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryStopAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_TryTogglePlayPauseAsync(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryTogglePlayPauseAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_get_SourceAppUserModelId(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceAppUserModelId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_add_MediaPropertiesChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSession, winrt::Windows::Media::Control::MediaPropertiesChangedEventArgs>>(arg);

            return py::convert(self->obj.MediaPropertiesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_remove_MediaPropertiesChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MediaPropertiesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_add_PlaybackInfoChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSession, winrt::Windows::Media::Control::PlaybackInfoChangedEventArgs>>(arg);

            return py::convert(self->obj.PlaybackInfoChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_remove_PlaybackInfoChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PlaybackInfoChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_add_TimelinePropertiesChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSession, winrt::Windows::Media::Control::TimelinePropertiesChangedEventArgs>>(arg);

            return py::convert(self->obj.TimelinePropertiesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSession_remove_TimelinePropertiesChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TimelinePropertiesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GlobalSystemMediaTransportControlsSession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSession>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalSystemMediaTransportControlsSession[] = {
        { "get_playback_info", (PyCFunction)GlobalSystemMediaTransportControlsSession_GetPlaybackInfo, METH_VARARGS, nullptr },
        { "get_timeline_properties", (PyCFunction)GlobalSystemMediaTransportControlsSession_GetTimelineProperties, METH_VARARGS, nullptr },
        { "try_change_auto_repeat_mode_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryChangeAutoRepeatModeAsync, METH_VARARGS, nullptr },
        { "try_change_channel_down_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryChangeChannelDownAsync, METH_VARARGS, nullptr },
        { "try_change_channel_up_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryChangeChannelUpAsync, METH_VARARGS, nullptr },
        { "try_change_playback_position_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryChangePlaybackPositionAsync, METH_VARARGS, nullptr },
        { "try_change_playback_rate_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryChangePlaybackRateAsync, METH_VARARGS, nullptr },
        { "try_change_shuffle_active_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryChangeShuffleActiveAsync, METH_VARARGS, nullptr },
        { "try_fast_forward_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryFastForwardAsync, METH_VARARGS, nullptr },
        { "try_get_media_properties_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryGetMediaPropertiesAsync, METH_VARARGS, nullptr },
        { "try_pause_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryPauseAsync, METH_VARARGS, nullptr },
        { "try_play_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryPlayAsync, METH_VARARGS, nullptr },
        { "try_record_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryRecordAsync, METH_VARARGS, nullptr },
        { "try_rewind_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryRewindAsync, METH_VARARGS, nullptr },
        { "try_skip_next_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TrySkipNextAsync, METH_VARARGS, nullptr },
        { "try_skip_previous_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TrySkipPreviousAsync, METH_VARARGS, nullptr },
        { "try_stop_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryStopAsync, METH_VARARGS, nullptr },
        { "try_toggle_play_pause_async", (PyCFunction)GlobalSystemMediaTransportControlsSession_TryTogglePlayPauseAsync, METH_VARARGS, nullptr },
        { "add_media_properties_changed", (PyCFunction)GlobalSystemMediaTransportControlsSession_add_MediaPropertiesChanged, METH_O, nullptr },
        { "remove_media_properties_changed", (PyCFunction)GlobalSystemMediaTransportControlsSession_remove_MediaPropertiesChanged, METH_O, nullptr },
        { "add_playback_info_changed", (PyCFunction)GlobalSystemMediaTransportControlsSession_add_PlaybackInfoChanged, METH_O, nullptr },
        { "remove_playback_info_changed", (PyCFunction)GlobalSystemMediaTransportControlsSession_remove_PlaybackInfoChanged, METH_O, nullptr },
        { "add_timeline_properties_changed", (PyCFunction)GlobalSystemMediaTransportControlsSession_add_TimelinePropertiesChanged, METH_O, nullptr },
        { "remove_timeline_properties_changed", (PyCFunction)GlobalSystemMediaTransportControlsSession_remove_TimelinePropertiesChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_GlobalSystemMediaTransportControlsSession, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GlobalSystemMediaTransportControlsSession[] = {
        { const_cast<char*>("source_app_user_model_id"), (getter)GlobalSystemMediaTransportControlsSession_get_SourceAppUserModelId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GlobalSystemMediaTransportControlsSession[] = 
    {
        { Py_tp_new, _new_GlobalSystemMediaTransportControlsSession },
        { Py_tp_dealloc, _dealloc_GlobalSystemMediaTransportControlsSession },
        { Py_tp_methods, _methods_GlobalSystemMediaTransportControlsSession },
        { Py_tp_getset, _getset_GlobalSystemMediaTransportControlsSession },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GlobalSystemMediaTransportControlsSession =
    {
        "_winrt_Windows_Media_Control.GlobalSystemMediaTransportControlsSession",
        sizeof(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSession),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalSystemMediaTransportControlsSession
    };

    // ----- GlobalSystemMediaTransportControlsSessionManager class --------------------
    constexpr const char* const _type_name_GlobalSystemMediaTransportControlsSessionManager = "GlobalSystemMediaTransportControlsSessionManager";

    static PyObject* _new_GlobalSystemMediaTransportControlsSessionManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GlobalSystemMediaTransportControlsSessionManager);
        return nullptr;
    }

    static void _dealloc_GlobalSystemMediaTransportControlsSessionManager(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionManager_GetCurrentSession(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCurrentSession());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionManager_GetSessions(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetSessions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionManager_RequestAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager::RequestAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionManager_add_CurrentSessionChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager, winrt::Windows::Media::Control::CurrentSessionChangedEventArgs>>(arg);

            return py::convert(self->obj.CurrentSessionChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionManager_remove_CurrentSessionChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CurrentSessionChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionManager_add_SessionsChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager, winrt::Windows::Media::Control::SessionsChangedEventArgs>>(arg);

            return py::convert(self->obj.SessionsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionManager_remove_SessionsChanged(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SessionsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GlobalSystemMediaTransportControlsSessionManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalSystemMediaTransportControlsSessionManager[] = {
        { "get_current_session", (PyCFunction)GlobalSystemMediaTransportControlsSessionManager_GetCurrentSession, METH_VARARGS, nullptr },
        { "get_sessions", (PyCFunction)GlobalSystemMediaTransportControlsSessionManager_GetSessions, METH_VARARGS, nullptr },
        { "request_async", (PyCFunction)GlobalSystemMediaTransportControlsSessionManager_RequestAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "add_current_session_changed", (PyCFunction)GlobalSystemMediaTransportControlsSessionManager_add_CurrentSessionChanged, METH_O, nullptr },
        { "remove_current_session_changed", (PyCFunction)GlobalSystemMediaTransportControlsSessionManager_remove_CurrentSessionChanged, METH_O, nullptr },
        { "add_sessions_changed", (PyCFunction)GlobalSystemMediaTransportControlsSessionManager_add_SessionsChanged, METH_O, nullptr },
        { "remove_sessions_changed", (PyCFunction)GlobalSystemMediaTransportControlsSessionManager_remove_SessionsChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_GlobalSystemMediaTransportControlsSessionManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GlobalSystemMediaTransportControlsSessionManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_GlobalSystemMediaTransportControlsSessionManager[] = 
    {
        { Py_tp_new, _new_GlobalSystemMediaTransportControlsSessionManager },
        { Py_tp_dealloc, _dealloc_GlobalSystemMediaTransportControlsSessionManager },
        { Py_tp_methods, _methods_GlobalSystemMediaTransportControlsSessionManager },
        { Py_tp_getset, _getset_GlobalSystemMediaTransportControlsSessionManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GlobalSystemMediaTransportControlsSessionManager =
    {
        "_winrt_Windows_Media_Control.GlobalSystemMediaTransportControlsSessionManager",
        sizeof(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalSystemMediaTransportControlsSessionManager
    };

    // ----- GlobalSystemMediaTransportControlsSessionMediaProperties class --------------------
    constexpr const char* const _type_name_GlobalSystemMediaTransportControlsSessionMediaProperties = "GlobalSystemMediaTransportControlsSessionMediaProperties";

    static PyObject* _new_GlobalSystemMediaTransportControlsSessionMediaProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GlobalSystemMediaTransportControlsSessionMediaProperties);
        return nullptr;
    }

    static void _dealloc_GlobalSystemMediaTransportControlsSessionMediaProperties(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_AlbumArtist(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlbumArtist());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_AlbumTitle(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlbumTitle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_AlbumTrackCount(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlbumTrackCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_Artist(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Artist());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_Genres(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Genres());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_PlaybackType(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PlaybackType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_Subtitle(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subtitle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_Thumbnail(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Thumbnail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_Title(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionMediaProperties_get_TrackNumber(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TrackNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GlobalSystemMediaTransportControlsSessionMediaProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalSystemMediaTransportControlsSessionMediaProperties[] = {
        { "_from", (PyCFunction)_from_GlobalSystemMediaTransportControlsSessionMediaProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GlobalSystemMediaTransportControlsSessionMediaProperties[] = {
        { const_cast<char*>("album_artist"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_AlbumArtist, nullptr, nullptr, nullptr },
        { const_cast<char*>("album_title"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_AlbumTitle, nullptr, nullptr, nullptr },
        { const_cast<char*>("album_track_count"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_AlbumTrackCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("artist"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_Artist, nullptr, nullptr, nullptr },
        { const_cast<char*>("genres"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_Genres, nullptr, nullptr, nullptr },
        { const_cast<char*>("playback_type"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_PlaybackType, nullptr, nullptr, nullptr },
        { const_cast<char*>("subtitle"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_Subtitle, nullptr, nullptr, nullptr },
        { const_cast<char*>("thumbnail"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_Thumbnail, nullptr, nullptr, nullptr },
        { const_cast<char*>("title"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_Title, nullptr, nullptr, nullptr },
        { const_cast<char*>("track_number"), (getter)GlobalSystemMediaTransportControlsSessionMediaProperties_get_TrackNumber, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GlobalSystemMediaTransportControlsSessionMediaProperties[] = 
    {
        { Py_tp_new, _new_GlobalSystemMediaTransportControlsSessionMediaProperties },
        { Py_tp_dealloc, _dealloc_GlobalSystemMediaTransportControlsSessionMediaProperties },
        { Py_tp_methods, _methods_GlobalSystemMediaTransportControlsSessionMediaProperties },
        { Py_tp_getset, _getset_GlobalSystemMediaTransportControlsSessionMediaProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GlobalSystemMediaTransportControlsSessionMediaProperties =
    {
        "_winrt_Windows_Media_Control.GlobalSystemMediaTransportControlsSessionMediaProperties",
        sizeof(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalSystemMediaTransportControlsSessionMediaProperties
    };

    // ----- GlobalSystemMediaTransportControlsSessionPlaybackControls class --------------------
    constexpr const char* const _type_name_GlobalSystemMediaTransportControlsSessionPlaybackControls = "GlobalSystemMediaTransportControlsSessionPlaybackControls";

    static PyObject* _new_GlobalSystemMediaTransportControlsSessionPlaybackControls(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GlobalSystemMediaTransportControlsSessionPlaybackControls);
        return nullptr;
    }

    static void _dealloc_GlobalSystemMediaTransportControlsSessionPlaybackControls(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsChannelDownEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsChannelDownEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsChannelUpEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsChannelUpEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsFastForwardEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsFastForwardEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsNextEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsNextEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPauseEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPauseEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlayEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPlayEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlayPauseToggleEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPlayPauseToggleEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlaybackPositionEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPlaybackPositionEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlaybackRateEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPlaybackRateEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPreviousEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPreviousEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsRecordEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRecordEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsRepeatEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRepeatEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsRewindEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRewindEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsShuffleEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsShuffleEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsStopEnabled(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsStopEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GlobalSystemMediaTransportControlsSessionPlaybackControls(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalSystemMediaTransportControlsSessionPlaybackControls[] = {
        { "_from", (PyCFunction)_from_GlobalSystemMediaTransportControlsSessionPlaybackControls, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GlobalSystemMediaTransportControlsSessionPlaybackControls[] = {
        { const_cast<char*>("is_channel_down_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsChannelDownEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_channel_up_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsChannelUpEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_fast_forward_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsFastForwardEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_next_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsNextEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_pause_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPauseEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_play_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlayEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_play_pause_toggle_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlayPauseToggleEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_playback_position_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlaybackPositionEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_playback_rate_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPlaybackRateEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_previous_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsPreviousEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_record_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsRecordEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_repeat_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsRepeatEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_rewind_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsRewindEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_shuffle_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsShuffleEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_stop_enabled"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackControls_get_IsStopEnabled, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GlobalSystemMediaTransportControlsSessionPlaybackControls[] = 
    {
        { Py_tp_new, _new_GlobalSystemMediaTransportControlsSessionPlaybackControls },
        { Py_tp_dealloc, _dealloc_GlobalSystemMediaTransportControlsSessionPlaybackControls },
        { Py_tp_methods, _methods_GlobalSystemMediaTransportControlsSessionPlaybackControls },
        { Py_tp_getset, _getset_GlobalSystemMediaTransportControlsSessionPlaybackControls },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GlobalSystemMediaTransportControlsSessionPlaybackControls =
    {
        "_winrt_Windows_Media_Control.GlobalSystemMediaTransportControlsSessionPlaybackControls",
        sizeof(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalSystemMediaTransportControlsSessionPlaybackControls
    };

    // ----- GlobalSystemMediaTransportControlsSessionPlaybackInfo class --------------------
    constexpr const char* const _type_name_GlobalSystemMediaTransportControlsSessionPlaybackInfo = "GlobalSystemMediaTransportControlsSessionPlaybackInfo";

    static PyObject* _new_GlobalSystemMediaTransportControlsSessionPlaybackInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GlobalSystemMediaTransportControlsSessionPlaybackInfo);
        return nullptr;
    }

    static void _dealloc_GlobalSystemMediaTransportControlsSessionPlaybackInfo(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_AutoRepeatMode(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutoRepeatMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_Controls(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Controls());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_IsShuffleActive(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsShuffleActive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_PlaybackRate(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PlaybackRate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_PlaybackStatus(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PlaybackStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_PlaybackType(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PlaybackType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GlobalSystemMediaTransportControlsSessionPlaybackInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalSystemMediaTransportControlsSessionPlaybackInfo[] = {
        { "_from", (PyCFunction)_from_GlobalSystemMediaTransportControlsSessionPlaybackInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GlobalSystemMediaTransportControlsSessionPlaybackInfo[] = {
        { const_cast<char*>("auto_repeat_mode"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_AutoRepeatMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("controls"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_Controls, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_shuffle_active"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_IsShuffleActive, nullptr, nullptr, nullptr },
        { const_cast<char*>("playback_rate"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_PlaybackRate, nullptr, nullptr, nullptr },
        { const_cast<char*>("playback_status"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_PlaybackStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("playback_type"), (getter)GlobalSystemMediaTransportControlsSessionPlaybackInfo_get_PlaybackType, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GlobalSystemMediaTransportControlsSessionPlaybackInfo[] = 
    {
        { Py_tp_new, _new_GlobalSystemMediaTransportControlsSessionPlaybackInfo },
        { Py_tp_dealloc, _dealloc_GlobalSystemMediaTransportControlsSessionPlaybackInfo },
        { Py_tp_methods, _methods_GlobalSystemMediaTransportControlsSessionPlaybackInfo },
        { Py_tp_getset, _getset_GlobalSystemMediaTransportControlsSessionPlaybackInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GlobalSystemMediaTransportControlsSessionPlaybackInfo =
    {
        "_winrt_Windows_Media_Control.GlobalSystemMediaTransportControlsSessionPlaybackInfo",
        sizeof(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalSystemMediaTransportControlsSessionPlaybackInfo
    };

    // ----- GlobalSystemMediaTransportControlsSessionTimelineProperties class --------------------
    constexpr const char* const _type_name_GlobalSystemMediaTransportControlsSessionTimelineProperties = "GlobalSystemMediaTransportControlsSessionTimelineProperties";

    static PyObject* _new_GlobalSystemMediaTransportControlsSessionTimelineProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GlobalSystemMediaTransportControlsSessionTimelineProperties);
        return nullptr;
    }

    static void _dealloc_GlobalSystemMediaTransportControlsSessionTimelineProperties(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionTimelineProperties_get_EndTime(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EndTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionTimelineProperties_get_LastUpdatedTime(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastUpdatedTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionTimelineProperties_get_MaxSeekTime(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxSeekTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionTimelineProperties_get_MinSeekTime(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinSeekTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionTimelineProperties_get_Position(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GlobalSystemMediaTransportControlsSessionTimelineProperties_get_StartTime(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GlobalSystemMediaTransportControlsSessionTimelineProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GlobalSystemMediaTransportControlsSessionTimelineProperties[] = {
        { "_from", (PyCFunction)_from_GlobalSystemMediaTransportControlsSessionTimelineProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GlobalSystemMediaTransportControlsSessionTimelineProperties[] = {
        { const_cast<char*>("end_time"), (getter)GlobalSystemMediaTransportControlsSessionTimelineProperties_get_EndTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_updated_time"), (getter)GlobalSystemMediaTransportControlsSessionTimelineProperties_get_LastUpdatedTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_seek_time"), (getter)GlobalSystemMediaTransportControlsSessionTimelineProperties_get_MaxSeekTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("min_seek_time"), (getter)GlobalSystemMediaTransportControlsSessionTimelineProperties_get_MinSeekTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)GlobalSystemMediaTransportControlsSessionTimelineProperties_get_Position, nullptr, nullptr, nullptr },
        { const_cast<char*>("start_time"), (getter)GlobalSystemMediaTransportControlsSessionTimelineProperties_get_StartTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GlobalSystemMediaTransportControlsSessionTimelineProperties[] = 
    {
        { Py_tp_new, _new_GlobalSystemMediaTransportControlsSessionTimelineProperties },
        { Py_tp_dealloc, _dealloc_GlobalSystemMediaTransportControlsSessionTimelineProperties },
        { Py_tp_methods, _methods_GlobalSystemMediaTransportControlsSessionTimelineProperties },
        { Py_tp_getset, _getset_GlobalSystemMediaTransportControlsSessionTimelineProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GlobalSystemMediaTransportControlsSessionTimelineProperties =
    {
        "_winrt_Windows_Media_Control.GlobalSystemMediaTransportControlsSessionTimelineProperties",
        sizeof(py::wrapper::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GlobalSystemMediaTransportControlsSessionTimelineProperties
    };

    // ----- MediaPropertiesChangedEventArgs class --------------------
    constexpr const char* const _type_name_MediaPropertiesChangedEventArgs = "MediaPropertiesChangedEventArgs";

    static PyObject* _new_MediaPropertiesChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaPropertiesChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_MediaPropertiesChangedEventArgs(py::wrapper::Windows::Media::Control::MediaPropertiesChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_MediaPropertiesChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::MediaPropertiesChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaPropertiesChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_MediaPropertiesChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaPropertiesChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaPropertiesChangedEventArgs[] = 
    {
        { Py_tp_new, _new_MediaPropertiesChangedEventArgs },
        { Py_tp_dealloc, _dealloc_MediaPropertiesChangedEventArgs },
        { Py_tp_methods, _methods_MediaPropertiesChangedEventArgs },
        { Py_tp_getset, _getset_MediaPropertiesChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaPropertiesChangedEventArgs =
    {
        "_winrt_Windows_Media_Control.MediaPropertiesChangedEventArgs",
        sizeof(py::wrapper::Windows::Media::Control::MediaPropertiesChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaPropertiesChangedEventArgs
    };

    // ----- PlaybackInfoChangedEventArgs class --------------------
    constexpr const char* const _type_name_PlaybackInfoChangedEventArgs = "PlaybackInfoChangedEventArgs";

    static PyObject* _new_PlaybackInfoChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PlaybackInfoChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_PlaybackInfoChangedEventArgs(py::wrapper::Windows::Media::Control::PlaybackInfoChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_PlaybackInfoChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::PlaybackInfoChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlaybackInfoChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_PlaybackInfoChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PlaybackInfoChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PlaybackInfoChangedEventArgs[] = 
    {
        { Py_tp_new, _new_PlaybackInfoChangedEventArgs },
        { Py_tp_dealloc, _dealloc_PlaybackInfoChangedEventArgs },
        { Py_tp_methods, _methods_PlaybackInfoChangedEventArgs },
        { Py_tp_getset, _getset_PlaybackInfoChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PlaybackInfoChangedEventArgs =
    {
        "_winrt_Windows_Media_Control.PlaybackInfoChangedEventArgs",
        sizeof(py::wrapper::Windows::Media::Control::PlaybackInfoChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlaybackInfoChangedEventArgs
    };

    // ----- SessionsChangedEventArgs class --------------------
    constexpr const char* const _type_name_SessionsChangedEventArgs = "SessionsChangedEventArgs";

    static PyObject* _new_SessionsChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SessionsChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_SessionsChangedEventArgs(py::wrapper::Windows::Media::Control::SessionsChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_SessionsChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::SessionsChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SessionsChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_SessionsChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SessionsChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SessionsChangedEventArgs[] = 
    {
        { Py_tp_new, _new_SessionsChangedEventArgs },
        { Py_tp_dealloc, _dealloc_SessionsChangedEventArgs },
        { Py_tp_methods, _methods_SessionsChangedEventArgs },
        { Py_tp_getset, _getset_SessionsChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SessionsChangedEventArgs =
    {
        "_winrt_Windows_Media_Control.SessionsChangedEventArgs",
        sizeof(py::wrapper::Windows::Media::Control::SessionsChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SessionsChangedEventArgs
    };

    // ----- TimelinePropertiesChangedEventArgs class --------------------
    constexpr const char* const _type_name_TimelinePropertiesChangedEventArgs = "TimelinePropertiesChangedEventArgs";

    static PyObject* _new_TimelinePropertiesChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TimelinePropertiesChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_TimelinePropertiesChangedEventArgs(py::wrapper::Windows::Media::Control::TimelinePropertiesChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_TimelinePropertiesChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Control::TimelinePropertiesChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TimelinePropertiesChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_TimelinePropertiesChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TimelinePropertiesChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_TimelinePropertiesChangedEventArgs[] = 
    {
        { Py_tp_new, _new_TimelinePropertiesChangedEventArgs },
        { Py_tp_dealloc, _dealloc_TimelinePropertiesChangedEventArgs },
        { Py_tp_methods, _methods_TimelinePropertiesChangedEventArgs },
        { Py_tp_getset, _getset_TimelinePropertiesChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TimelinePropertiesChangedEventArgs =
    {
        "_winrt_Windows_Media_Control.TimelinePropertiesChangedEventArgs",
        sizeof(py::wrapper::Windows::Media::Control::TimelinePropertiesChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TimelinePropertiesChangedEventArgs
    };

    // ----- Windows.Media.Control Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Media::Control::CurrentSessionChangedEventArgs>::python_type = py::register_python_type(module, _type_name_CurrentSessionChangedEventArgs, &_type_spec_CurrentSessionChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSession>::python_type = py::register_python_type(module, _type_name_GlobalSystemMediaTransportControlsSession, &_type_spec_GlobalSystemMediaTransportControlsSession, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionManager>::python_type = py::register_python_type(module, _type_name_GlobalSystemMediaTransportControlsSessionManager, &_type_spec_GlobalSystemMediaTransportControlsSessionManager, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionMediaProperties>::python_type = py::register_python_type(module, _type_name_GlobalSystemMediaTransportControlsSessionMediaProperties, &_type_spec_GlobalSystemMediaTransportControlsSessionMediaProperties, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackControls>::python_type = py::register_python_type(module, _type_name_GlobalSystemMediaTransportControlsSessionPlaybackControls, &_type_spec_GlobalSystemMediaTransportControlsSessionPlaybackControls, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionPlaybackInfo>::python_type = py::register_python_type(module, _type_name_GlobalSystemMediaTransportControlsSessionPlaybackInfo, &_type_spec_GlobalSystemMediaTransportControlsSessionPlaybackInfo, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::GlobalSystemMediaTransportControlsSessionTimelineProperties>::python_type = py::register_python_type(module, _type_name_GlobalSystemMediaTransportControlsSessionTimelineProperties, &_type_spec_GlobalSystemMediaTransportControlsSessionTimelineProperties, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::MediaPropertiesChangedEventArgs>::python_type = py::register_python_type(module, _type_name_MediaPropertiesChangedEventArgs, &_type_spec_MediaPropertiesChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::PlaybackInfoChangedEventArgs>::python_type = py::register_python_type(module, _type_name_PlaybackInfoChangedEventArgs, &_type_spec_PlaybackInfoChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::SessionsChangedEventArgs>::python_type = py::register_python_type(module, _type_name_SessionsChangedEventArgs, &_type_spec_SessionsChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Control::TimelinePropertiesChangedEventArgs>::python_type = py::register_python_type(module, _type_name_TimelinePropertiesChangedEventArgs, &_type_spec_TimelinePropertiesChangedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Media.Control");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Media_Control",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Media::Control

PyMODINIT_FUNC
PyInit__winrt_Windows_Media_Control (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Media::Control::module_def);
}
