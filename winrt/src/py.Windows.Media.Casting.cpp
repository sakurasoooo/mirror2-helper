// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Media.Casting.h"

PyTypeObject* py::winrt_type<winrt::Windows::Media::Casting::CastingConnection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Casting::CastingDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Casting::CastingDevicePicker>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Casting::CastingDevicePickerFilter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Casting::CastingDeviceSelectedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Casting::CastingSource>::python_type;

namespace py::cpp::Windows::Media::Casting
{
    // ----- CastingConnection class --------------------
    constexpr const char* const _type_name_CastingConnection = "CastingConnection";

    static PyObject* _new_CastingConnection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CastingConnection);
        return nullptr;
    }

    static void _dealloc_CastingConnection(py::wrapper::Windows::Media::Casting::CastingConnection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CastingConnection_Close(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingConnection_DisconnectAsync(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DisconnectAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingConnection_RequestStartCastingAsync(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Casting::CastingSource>(args, 0);

                return py::convert(self->obj.RequestStartCastingAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingConnection_get_Source(py::wrapper::Windows::Media::Casting::CastingConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CastingConnection_put_Source(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Casting::CastingSource>(arg);

            self->obj.Source(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CastingConnection_get_Device(py::wrapper::Windows::Media::Casting::CastingConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingConnection_get_State(py::wrapper::Windows::Media::Casting::CastingConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingConnection_add_ErrorOccurred(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Casting::CastingConnection, winrt::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs>>(arg);

            return py::convert(self->obj.ErrorOccurred(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingConnection_remove_ErrorOccurred(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ErrorOccurred(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingConnection_add_StateChanged(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Casting::CastingConnection, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.StateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingConnection_remove_StateChanged(py::wrapper::Windows::Media::Casting::CastingConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CastingConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Casting::CastingConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_CastingConnection(py::wrapper::Windows::Media::Casting::CastingConnection* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_CastingConnection(py::wrapper::Windows::Media::Casting::CastingConnection* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CastingConnection[] = {
        { "close", (PyCFunction)CastingConnection_Close, METH_VARARGS, nullptr },
        { "disconnect_async", (PyCFunction)CastingConnection_DisconnectAsync, METH_VARARGS, nullptr },
        { "request_start_casting_async", (PyCFunction)CastingConnection_RequestStartCastingAsync, METH_VARARGS, nullptr },
        { "add_error_occurred", (PyCFunction)CastingConnection_add_ErrorOccurred, METH_O, nullptr },
        { "remove_error_occurred", (PyCFunction)CastingConnection_remove_ErrorOccurred, METH_O, nullptr },
        { "add_state_changed", (PyCFunction)CastingConnection_add_StateChanged, METH_O, nullptr },
        { "remove_state_changed", (PyCFunction)CastingConnection_remove_StateChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CastingConnection, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_CastingConnection, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_CastingConnection, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CastingConnection[] = {
        { const_cast<char*>("source"), (getter)CastingConnection_get_Source, (setter)CastingConnection_put_Source, nullptr, nullptr },
        { const_cast<char*>("device"), (getter)CastingConnection_get_Device, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)CastingConnection_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CastingConnection[] = 
    {
        { Py_tp_new, _new_CastingConnection },
        { Py_tp_dealloc, _dealloc_CastingConnection },
        { Py_tp_methods, _methods_CastingConnection },
        { Py_tp_getset, _getset_CastingConnection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CastingConnection =
    {
        "_winrt_Windows_Media_Casting.CastingConnection",
        sizeof(py::wrapper::Windows::Media::Casting::CastingConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CastingConnection
    };

    // ----- CastingConnectionErrorOccurredEventArgs class --------------------
    constexpr const char* const _type_name_CastingConnectionErrorOccurredEventArgs = "CastingConnectionErrorOccurredEventArgs";

    static PyObject* _new_CastingConnectionErrorOccurredEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CastingConnectionErrorOccurredEventArgs);
        return nullptr;
    }

    static void _dealloc_CastingConnectionErrorOccurredEventArgs(py::wrapper::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CastingConnectionErrorOccurredEventArgs_get_ErrorStatus(py::wrapper::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ErrorStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingConnectionErrorOccurredEventArgs_get_Message(py::wrapper::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CastingConnectionErrorOccurredEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CastingConnectionErrorOccurredEventArgs[] = {
        { "_from", (PyCFunction)_from_CastingConnectionErrorOccurredEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CastingConnectionErrorOccurredEventArgs[] = {
        { const_cast<char*>("error_status"), (getter)CastingConnectionErrorOccurredEventArgs_get_ErrorStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("message"), (getter)CastingConnectionErrorOccurredEventArgs_get_Message, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CastingConnectionErrorOccurredEventArgs[] = 
    {
        { Py_tp_new, _new_CastingConnectionErrorOccurredEventArgs },
        { Py_tp_dealloc, _dealloc_CastingConnectionErrorOccurredEventArgs },
        { Py_tp_methods, _methods_CastingConnectionErrorOccurredEventArgs },
        { Py_tp_getset, _getset_CastingConnectionErrorOccurredEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CastingConnectionErrorOccurredEventArgs =
    {
        "_winrt_Windows_Media_Casting.CastingConnectionErrorOccurredEventArgs",
        sizeof(py::wrapper::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CastingConnectionErrorOccurredEventArgs
    };

    // ----- CastingDevice class --------------------
    constexpr const char* const _type_name_CastingDevice = "CastingDevice";

    static PyObject* _new_CastingDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CastingDevice);
        return nullptr;
    }

    static void _dealloc_CastingDevice(py::wrapper::Windows::Media::Casting::CastingDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CastingDevice_CreateCastingConnection(py::wrapper::Windows::Media::Casting::CastingDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateCastingConnection());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevice_DeviceInfoSupportsCastingAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Enumeration::DeviceInformation>(args, 0);

                return py::convert(winrt::Windows::Media::Casting::CastingDevice::DeviceInfoSupportsCastingAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevice_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Media::Casting::CastingDevice::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Casting::CastingPlaybackTypes>(args, 0);

                return py::convert(winrt::Windows::Media::Casting::CastingDevice::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevice_GetDeviceSelectorFromCastingSourceAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Casting::CastingSource>(args, 0);

                return py::convert(winrt::Windows::Media::Casting::CastingDevice::GetDeviceSelectorFromCastingSourceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevice_GetSupportedCastingPlaybackTypesAsync(py::wrapper::Windows::Media::Casting::CastingDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetSupportedCastingPlaybackTypesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevice_get_FriendlyName(py::wrapper::Windows::Media::Casting::CastingDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FriendlyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingDevice_get_Icon(py::wrapper::Windows::Media::Casting::CastingDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Icon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingDevice_get_Id(py::wrapper::Windows::Media::Casting::CastingDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CastingDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Casting::CastingDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CastingDevice[] = {
        { "create_casting_connection", (PyCFunction)CastingDevice_CreateCastingConnection, METH_VARARGS, nullptr },
        { "device_info_supports_casting_async", (PyCFunction)CastingDevice_DeviceInfoSupportsCastingAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "from_id_async", (PyCFunction)CastingDevice_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)CastingDevice_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector_from_casting_source_async", (PyCFunction)CastingDevice_GetDeviceSelectorFromCastingSourceAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_supported_casting_playback_types_async", (PyCFunction)CastingDevice_GetSupportedCastingPlaybackTypesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CastingDevice, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CastingDevice[] = {
        { const_cast<char*>("friendly_name"), (getter)CastingDevice_get_FriendlyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("icon"), (getter)CastingDevice_get_Icon, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)CastingDevice_get_Id, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CastingDevice[] = 
    {
        { Py_tp_new, _new_CastingDevice },
        { Py_tp_dealloc, _dealloc_CastingDevice },
        { Py_tp_methods, _methods_CastingDevice },
        { Py_tp_getset, _getset_CastingDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CastingDevice =
    {
        "_winrt_Windows_Media_Casting.CastingDevice",
        sizeof(py::wrapper::Windows::Media::Casting::CastingDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CastingDevice
    };

    // ----- CastingDevicePicker class --------------------
    constexpr const char* const _type_name_CastingDevicePicker = "CastingDevicePicker";

    static PyObject* _new_CastingDevicePicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::Casting::CastingDevicePicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CastingDevicePicker(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CastingDevicePicker_Hide(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Hide();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevicePicker_Show(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                self->obj.Show(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                self->obj.Show(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CastingDevicePicker_get_Appearance(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Appearance());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingDevicePicker_get_Filter(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Filter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingDevicePicker_add_CastingDevicePickerDismissed(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Casting::CastingDevicePicker, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.CastingDevicePickerDismissed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingDevicePicker_remove_CastingDevicePickerDismissed(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CastingDevicePickerDismissed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingDevicePicker_add_CastingDeviceSelected(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Casting::CastingDevicePicker, winrt::Windows::Media::Casting::CastingDeviceSelectedEventArgs>>(arg);

            return py::convert(self->obj.CastingDeviceSelected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CastingDevicePicker_remove_CastingDeviceSelected(py::wrapper::Windows::Media::Casting::CastingDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CastingDeviceSelected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CastingDevicePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Casting::CastingDevicePicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CastingDevicePicker[] = {
        { "hide", (PyCFunction)CastingDevicePicker_Hide, METH_VARARGS, nullptr },
        { "show", (PyCFunction)CastingDevicePicker_Show, METH_VARARGS, nullptr },
        { "add_casting_device_picker_dismissed", (PyCFunction)CastingDevicePicker_add_CastingDevicePickerDismissed, METH_O, nullptr },
        { "remove_casting_device_picker_dismissed", (PyCFunction)CastingDevicePicker_remove_CastingDevicePickerDismissed, METH_O, nullptr },
        { "add_casting_device_selected", (PyCFunction)CastingDevicePicker_add_CastingDeviceSelected, METH_O, nullptr },
        { "remove_casting_device_selected", (PyCFunction)CastingDevicePicker_remove_CastingDeviceSelected, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CastingDevicePicker, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CastingDevicePicker[] = {
        { const_cast<char*>("appearance"), (getter)CastingDevicePicker_get_Appearance, nullptr, nullptr, nullptr },
        { const_cast<char*>("filter"), (getter)CastingDevicePicker_get_Filter, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CastingDevicePicker[] = 
    {
        { Py_tp_new, _new_CastingDevicePicker },
        { Py_tp_dealloc, _dealloc_CastingDevicePicker },
        { Py_tp_methods, _methods_CastingDevicePicker },
        { Py_tp_getset, _getset_CastingDevicePicker },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CastingDevicePicker =
    {
        "_winrt_Windows_Media_Casting.CastingDevicePicker",
        sizeof(py::wrapper::Windows::Media::Casting::CastingDevicePicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CastingDevicePicker
    };

    // ----- CastingDevicePickerFilter class --------------------
    constexpr const char* const _type_name_CastingDevicePickerFilter = "CastingDevicePickerFilter";

    static PyObject* _new_CastingDevicePickerFilter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CastingDevicePickerFilter);
        return nullptr;
    }

    static void _dealloc_CastingDevicePickerFilter(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CastingDevicePickerFilter_get_SupportsVideo(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportsVideo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CastingDevicePickerFilter_put_SupportsVideo(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.SupportsVideo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CastingDevicePickerFilter_get_SupportsPictures(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportsPictures());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CastingDevicePickerFilter_put_SupportsPictures(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.SupportsPictures(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CastingDevicePickerFilter_get_SupportsAudio(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportsAudio());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CastingDevicePickerFilter_put_SupportsAudio(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.SupportsAudio(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CastingDevicePickerFilter_get_SupportedCastingSources(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedCastingSources());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CastingDevicePickerFilter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Casting::CastingDevicePickerFilter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CastingDevicePickerFilter[] = {
        { "_from", (PyCFunction)_from_CastingDevicePickerFilter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CastingDevicePickerFilter[] = {
        { const_cast<char*>("supports_video"), (getter)CastingDevicePickerFilter_get_SupportsVideo, (setter)CastingDevicePickerFilter_put_SupportsVideo, nullptr, nullptr },
        { const_cast<char*>("supports_pictures"), (getter)CastingDevicePickerFilter_get_SupportsPictures, (setter)CastingDevicePickerFilter_put_SupportsPictures, nullptr, nullptr },
        { const_cast<char*>("supports_audio"), (getter)CastingDevicePickerFilter_get_SupportsAudio, (setter)CastingDevicePickerFilter_put_SupportsAudio, nullptr, nullptr },
        { const_cast<char*>("supported_casting_sources"), (getter)CastingDevicePickerFilter_get_SupportedCastingSources, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CastingDevicePickerFilter[] = 
    {
        { Py_tp_new, _new_CastingDevicePickerFilter },
        { Py_tp_dealloc, _dealloc_CastingDevicePickerFilter },
        { Py_tp_methods, _methods_CastingDevicePickerFilter },
        { Py_tp_getset, _getset_CastingDevicePickerFilter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CastingDevicePickerFilter =
    {
        "_winrt_Windows_Media_Casting.CastingDevicePickerFilter",
        sizeof(py::wrapper::Windows::Media::Casting::CastingDevicePickerFilter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CastingDevicePickerFilter
    };

    // ----- CastingDeviceSelectedEventArgs class --------------------
    constexpr const char* const _type_name_CastingDeviceSelectedEventArgs = "CastingDeviceSelectedEventArgs";

    static PyObject* _new_CastingDeviceSelectedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CastingDeviceSelectedEventArgs);
        return nullptr;
    }

    static void _dealloc_CastingDeviceSelectedEventArgs(py::wrapper::Windows::Media::Casting::CastingDeviceSelectedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CastingDeviceSelectedEventArgs_get_SelectedCastingDevice(py::wrapper::Windows::Media::Casting::CastingDeviceSelectedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SelectedCastingDevice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CastingDeviceSelectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Casting::CastingDeviceSelectedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CastingDeviceSelectedEventArgs[] = {
        { "_from", (PyCFunction)_from_CastingDeviceSelectedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CastingDeviceSelectedEventArgs[] = {
        { const_cast<char*>("selected_casting_device"), (getter)CastingDeviceSelectedEventArgs_get_SelectedCastingDevice, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CastingDeviceSelectedEventArgs[] = 
    {
        { Py_tp_new, _new_CastingDeviceSelectedEventArgs },
        { Py_tp_dealloc, _dealloc_CastingDeviceSelectedEventArgs },
        { Py_tp_methods, _methods_CastingDeviceSelectedEventArgs },
        { Py_tp_getset, _getset_CastingDeviceSelectedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CastingDeviceSelectedEventArgs =
    {
        "_winrt_Windows_Media_Casting.CastingDeviceSelectedEventArgs",
        sizeof(py::wrapper::Windows::Media::Casting::CastingDeviceSelectedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CastingDeviceSelectedEventArgs
    };

    // ----- CastingSource class --------------------
    constexpr const char* const _type_name_CastingSource = "CastingSource";

    static PyObject* _new_CastingSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CastingSource);
        return nullptr;
    }

    static void _dealloc_CastingSource(py::wrapper::Windows::Media::Casting::CastingSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CastingSource_get_PreferredSourceUri(py::wrapper::Windows::Media::Casting::CastingSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreferredSourceUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CastingSource_put_PreferredSourceUri(py::wrapper::Windows::Media::Casting::CastingSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.PreferredSourceUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CastingSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Casting::CastingSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CastingSource[] = {
        { "_from", (PyCFunction)_from_CastingSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CastingSource[] = {
        { const_cast<char*>("preferred_source_uri"), (getter)CastingSource_get_PreferredSourceUri, (setter)CastingSource_put_PreferredSourceUri, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CastingSource[] = 
    {
        { Py_tp_new, _new_CastingSource },
        { Py_tp_dealloc, _dealloc_CastingSource },
        { Py_tp_methods, _methods_CastingSource },
        { Py_tp_getset, _getset_CastingSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CastingSource =
    {
        "_winrt_Windows_Media_Casting.CastingSource",
        sizeof(py::wrapper::Windows::Media::Casting::CastingSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CastingSource
    };

    // ----- Windows.Media.Casting Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Media::Casting::CastingConnection>::python_type = py::register_python_type(module, _type_name_CastingConnection, &_type_spec_CastingConnection, bases.get());
            py::winrt_type<winrt::Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs>::python_type = py::register_python_type(module, _type_name_CastingConnectionErrorOccurredEventArgs, &_type_spec_CastingConnectionErrorOccurredEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Casting::CastingDevice>::python_type = py::register_python_type(module, _type_name_CastingDevice, &_type_spec_CastingDevice, bases.get());
            py::winrt_type<winrt::Windows::Media::Casting::CastingDevicePicker>::python_type = py::register_python_type(module, _type_name_CastingDevicePicker, &_type_spec_CastingDevicePicker, bases.get());
            py::winrt_type<winrt::Windows::Media::Casting::CastingDevicePickerFilter>::python_type = py::register_python_type(module, _type_name_CastingDevicePickerFilter, &_type_spec_CastingDevicePickerFilter, bases.get());
            py::winrt_type<winrt::Windows::Media::Casting::CastingDeviceSelectedEventArgs>::python_type = py::register_python_type(module, _type_name_CastingDeviceSelectedEventArgs, &_type_spec_CastingDeviceSelectedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Casting::CastingSource>::python_type = py::register_python_type(module, _type_name_CastingSource, &_type_spec_CastingSource, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Media.Casting");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Media_Casting",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Media::Casting

PyMODINIT_FUNC
PyInit__winrt_Windows_Media_Casting (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Media::Casting::module_def);
}
