// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Bluetooth.Rfcomm.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider>::python_type;

namespace py::cpp::Windows::Devices::Bluetooth::Rfcomm
{
    // ----- RfcommDeviceService class --------------------
    constexpr const char* const _type_name_RfcommDeviceService = "RfcommDeviceService";

    static PyObject* _new_RfcommDeviceService(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_RfcommDeviceService);
        return nullptr;
    }

    static void _dealloc_RfcommDeviceService(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* RfcommDeviceService_Close(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>(args, 0);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_GetDeviceSelectorForBluetoothDevice(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Bluetooth::BluetoothDevice>(args, 0);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService::GetDeviceSelectorForBluetoothDevice(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Bluetooth::BluetoothDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Bluetooth::BluetoothCacheMode>(args, 1);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService::GetDeviceSelectorForBluetoothDevice(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_GetDeviceSelectorForBluetoothDeviceAndServiceId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Bluetooth::BluetoothDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>(args, 1);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService::GetDeviceSelectorForBluetoothDeviceAndServiceId(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Bluetooth::BluetoothDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Bluetooth::BluetoothCacheMode>(args, 2);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService::GetDeviceSelectorForBluetoothDeviceAndServiceId(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_GetSdpRawAttributesAsync(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetSdpRawAttributesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Bluetooth::BluetoothCacheMode>(args, 0);

                return py::convert(self->obj.GetSdpRawAttributesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_RequestAccessAsync(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_get_ConnectionHostName(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionHostName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_get_ConnectionServiceName(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionServiceName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_get_MaxProtectionLevel(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxProtectionLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_get_ProtectionLevel(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProtectionLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_get_ServiceId(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ServiceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_get_Device(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceService_get_DeviceAccessInformation(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceAccessInformation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_RfcommDeviceService(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_RfcommDeviceService(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_RfcommDeviceService(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RfcommDeviceService[] = {
        { "close", (PyCFunction)RfcommDeviceService_Close, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)RfcommDeviceService_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)RfcommDeviceService_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector_for_bluetooth_device", (PyCFunction)RfcommDeviceService_GetDeviceSelectorForBluetoothDevice, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector_for_bluetooth_device_and_service_id", (PyCFunction)RfcommDeviceService_GetDeviceSelectorForBluetoothDeviceAndServiceId, METH_VARARGS | METH_STATIC, nullptr },
        { "get_sdp_raw_attributes_async", (PyCFunction)RfcommDeviceService_GetSdpRawAttributesAsync, METH_VARARGS, nullptr },
        { "request_access_async", (PyCFunction)RfcommDeviceService_RequestAccessAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_RfcommDeviceService, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_RfcommDeviceService, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_RfcommDeviceService, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_RfcommDeviceService[] = {
        { const_cast<char*>("connection_host_name"), (getter)RfcommDeviceService_get_ConnectionHostName, nullptr, nullptr, nullptr },
        { const_cast<char*>("connection_service_name"), (getter)RfcommDeviceService_get_ConnectionServiceName, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_protection_level"), (getter)RfcommDeviceService_get_MaxProtectionLevel, nullptr, nullptr, nullptr },
        { const_cast<char*>("protection_level"), (getter)RfcommDeviceService_get_ProtectionLevel, nullptr, nullptr, nullptr },
        { const_cast<char*>("service_id"), (getter)RfcommDeviceService_get_ServiceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("device"), (getter)RfcommDeviceService_get_Device, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_access_information"), (getter)RfcommDeviceService_get_DeviceAccessInformation, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_RfcommDeviceService[] = 
    {
        { Py_tp_new, _new_RfcommDeviceService },
        { Py_tp_dealloc, _dealloc_RfcommDeviceService },
        { Py_tp_methods, _methods_RfcommDeviceService },
        { Py_tp_getset, _getset_RfcommDeviceService },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_RfcommDeviceService =
    {
        "_winrt_Windows_Devices_Bluetooth_Rfcomm.RfcommDeviceService",
        sizeof(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RfcommDeviceService
    };

    // ----- RfcommDeviceServicesResult class --------------------
    constexpr const char* const _type_name_RfcommDeviceServicesResult = "RfcommDeviceServicesResult";

    static PyObject* _new_RfcommDeviceServicesResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_RfcommDeviceServicesResult);
        return nullptr;
    }

    static void _dealloc_RfcommDeviceServicesResult(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* RfcommDeviceServicesResult_get_Error(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Error());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommDeviceServicesResult_get_Services(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Services());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_RfcommDeviceServicesResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RfcommDeviceServicesResult[] = {
        { "_from", (PyCFunction)_from_RfcommDeviceServicesResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_RfcommDeviceServicesResult[] = {
        { const_cast<char*>("error"), (getter)RfcommDeviceServicesResult_get_Error, nullptr, nullptr, nullptr },
        { const_cast<char*>("services"), (getter)RfcommDeviceServicesResult_get_Services, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_RfcommDeviceServicesResult[] = 
    {
        { Py_tp_new, _new_RfcommDeviceServicesResult },
        { Py_tp_dealloc, _dealloc_RfcommDeviceServicesResult },
        { Py_tp_methods, _methods_RfcommDeviceServicesResult },
        { Py_tp_getset, _getset_RfcommDeviceServicesResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_RfcommDeviceServicesResult =
    {
        "_winrt_Windows_Devices_Bluetooth_Rfcomm.RfcommDeviceServicesResult",
        sizeof(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RfcommDeviceServicesResult
    };

    // ----- RfcommServiceId class --------------------
    constexpr const char* const _type_name_RfcommServiceId = "RfcommServiceId";

    static PyObject* _new_RfcommServiceId(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_RfcommServiceId);
        return nullptr;
    }

    static void _dealloc_RfcommServiceId(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* RfcommServiceId_AsShortId(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AsShortId());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_AsString(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_FromShortId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::FromShortId(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_FromUuid(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::FromUuid(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_get_Uuid(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uuid());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_get_GenericFileTransfer(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::GenericFileTransfer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_get_ObexFileTransfer(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::ObexFileTransfer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_get_ObexObjectPush(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::ObexObjectPush());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_get_PhoneBookAccessPce(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::PhoneBookAccessPce());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_get_PhoneBookAccessPse(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::PhoneBookAccessPse());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommServiceId_get_SerialPort(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId::SerialPort());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_RfcommServiceId(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RfcommServiceId[] = {
        { "as_short_id", (PyCFunction)RfcommServiceId_AsShortId, METH_VARARGS, nullptr },
        { "as_string", (PyCFunction)RfcommServiceId_AsString, METH_VARARGS, nullptr },
        { "from_short_id", (PyCFunction)RfcommServiceId_FromShortId, METH_VARARGS | METH_STATIC, nullptr },
        { "from_uuid", (PyCFunction)RfcommServiceId_FromUuid, METH_VARARGS | METH_STATIC, nullptr },
        { "get_generic_file_transfer", (PyCFunction)RfcommServiceId_get_GenericFileTransfer, METH_NOARGS | METH_STATIC, nullptr },
        { "get_obex_file_transfer", (PyCFunction)RfcommServiceId_get_ObexFileTransfer, METH_NOARGS | METH_STATIC, nullptr },
        { "get_obex_object_push", (PyCFunction)RfcommServiceId_get_ObexObjectPush, METH_NOARGS | METH_STATIC, nullptr },
        { "get_phone_book_access_pce", (PyCFunction)RfcommServiceId_get_PhoneBookAccessPce, METH_NOARGS | METH_STATIC, nullptr },
        { "get_phone_book_access_pse", (PyCFunction)RfcommServiceId_get_PhoneBookAccessPse, METH_NOARGS | METH_STATIC, nullptr },
        { "get_serial_port", (PyCFunction)RfcommServiceId_get_SerialPort, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_RfcommServiceId, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_RfcommServiceId[] = {
        { const_cast<char*>("uuid"), (getter)RfcommServiceId_get_Uuid, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_RfcommServiceId[] = 
    {
        { Py_tp_new, _new_RfcommServiceId },
        { Py_tp_dealloc, _dealloc_RfcommServiceId },
        { Py_tp_methods, _methods_RfcommServiceId },
        { Py_tp_getset, _getset_RfcommServiceId },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_RfcommServiceId =
    {
        "_winrt_Windows_Devices_Bluetooth_Rfcomm.RfcommServiceId",
        sizeof(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RfcommServiceId
    };

    // ----- RfcommServiceProvider class --------------------
    constexpr const char* const _type_name_RfcommServiceProvider = "RfcommServiceProvider";

    static PyObject* _new_RfcommServiceProvider(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_RfcommServiceProvider);
        return nullptr;
    }

    static void _dealloc_RfcommServiceProvider(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* RfcommServiceProvider_CreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>(args, 0);

                return py::convert(winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider::CreateAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommServiceProvider_StartAdvertising(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Networking::Sockets::StreamSocketListener>(args, 0);

                self->obj.StartAdvertising(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Networking::Sockets::StreamSocketListener>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);

                self->obj.StartAdvertising(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommServiceProvider_StopAdvertising(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.StopAdvertising();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RfcommServiceProvider_get_SdpRawAttributes(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SdpRawAttributes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* RfcommServiceProvider_get_ServiceId(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ServiceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_RfcommServiceProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RfcommServiceProvider[] = {
        { "create_async", (PyCFunction)RfcommServiceProvider_CreateAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "start_advertising", (PyCFunction)RfcommServiceProvider_StartAdvertising, METH_VARARGS, nullptr },
        { "stop_advertising", (PyCFunction)RfcommServiceProvider_StopAdvertising, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_RfcommServiceProvider, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_RfcommServiceProvider[] = {
        { const_cast<char*>("sdp_raw_attributes"), (getter)RfcommServiceProvider_get_SdpRawAttributes, nullptr, nullptr, nullptr },
        { const_cast<char*>("service_id"), (getter)RfcommServiceProvider_get_ServiceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_RfcommServiceProvider[] = 
    {
        { Py_tp_new, _new_RfcommServiceProvider },
        { Py_tp_dealloc, _dealloc_RfcommServiceProvider },
        { Py_tp_methods, _methods_RfcommServiceProvider },
        { Py_tp_getset, _getset_RfcommServiceProvider },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_RfcommServiceProvider =
    {
        "_winrt_Windows_Devices_Bluetooth_Rfcomm.RfcommServiceProvider",
        sizeof(py::wrapper::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RfcommServiceProvider
    };

    // ----- Windows.Devices.Bluetooth.Rfcomm Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService>::python_type = py::register_python_type(module, _type_name_RfcommDeviceService, &_type_spec_RfcommDeviceService, bases.get());
            py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult>::python_type = py::register_python_type(module, _type_name_RfcommDeviceServicesResult, &_type_spec_RfcommDeviceServicesResult, bases.get());
            py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>::python_type = py::register_python_type(module, _type_name_RfcommServiceId, &_type_spec_RfcommServiceId, bases.get());
            py::winrt_type<winrt::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider>::python_type = py::register_python_type(module, _type_name_RfcommServiceProvider, &_type_spec_RfcommServiceProvider, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Bluetooth.Rfcomm");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Bluetooth_Rfcomm",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Bluetooth::Rfcomm

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Bluetooth_Rfcomm (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Bluetooth::Rfcomm::module_def);
}
