// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Storage.Compression.h"

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Compression::Compressor>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Compression::Decompressor>::python_type;

namespace py::cpp::Windows::Storage::Compression
{
    // ----- Compressor class --------------------
    constexpr const char* const _type_name_Compressor = "Compressor";

    static PyObject* _new_Compressor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 0);

                winrt::Windows::Storage::Compression::Compressor instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Compression::CompressAlgorithm>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                winrt::Windows::Storage::Compression::Compressor instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Compressor(py::wrapper::Windows::Storage::Compression::Compressor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Compressor_Close(py::wrapper::Windows::Storage::Compression::Compressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Compressor_DetachStream(py::wrapper::Windows::Storage::Compression::Compressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DetachStream());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Compressor_FinishAsync(py::wrapper::Windows::Storage::Compression::Compressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FinishAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Compressor_FlushAsync(py::wrapper::Windows::Storage::Compression::Compressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FlushAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Compressor_WriteAsync(py::wrapper::Windows::Storage::Compression::Compressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(self->obj.WriteAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_Compressor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Compression::Compressor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_Compressor(py::wrapper::Windows::Storage::Compression::Compressor* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_Compressor(py::wrapper::Windows::Storage::Compression::Compressor* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Compressor[] = {
        { "close", (PyCFunction)Compressor_Close, METH_VARARGS, nullptr },
        { "detach_stream", (PyCFunction)Compressor_DetachStream, METH_VARARGS, nullptr },
        { "finish_async", (PyCFunction)Compressor_FinishAsync, METH_VARARGS, nullptr },
        { "flush_async", (PyCFunction)Compressor_FlushAsync, METH_VARARGS, nullptr },
        { "write_async", (PyCFunction)Compressor_WriteAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Compressor, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_Compressor, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_Compressor, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Compressor[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_Compressor[] = 
    {
        { Py_tp_new, _new_Compressor },
        { Py_tp_dealloc, _dealloc_Compressor },
        { Py_tp_methods, _methods_Compressor },
        { Py_tp_getset, _getset_Compressor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Compressor =
    {
        "_winrt_Windows_Storage_Compression.Compressor",
        sizeof(py::wrapper::Windows::Storage::Compression::Compressor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Compressor
    };

    // ----- Decompressor class --------------------
    constexpr const char* const _type_name_Decompressor = "Decompressor";

    static PyObject* _new_Decompressor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);

                winrt::Windows::Storage::Compression::Decompressor instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Decompressor(py::wrapper::Windows::Storage::Compression::Decompressor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Decompressor_Close(py::wrapper::Windows::Storage::Compression::Decompressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Decompressor_DetachStream(py::wrapper::Windows::Storage::Compression::Decompressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DetachStream());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Decompressor_ReadAsync(py::wrapper::Windows::Storage::Compression::Decompressor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::InputStreamOptions>(args, 2);

                return py::convert(self->obj.ReadAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_Decompressor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Compression::Decompressor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_Decompressor(py::wrapper::Windows::Storage::Compression::Decompressor* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_Decompressor(py::wrapper::Windows::Storage::Compression::Decompressor* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Decompressor[] = {
        { "close", (PyCFunction)Decompressor_Close, METH_VARARGS, nullptr },
        { "detach_stream", (PyCFunction)Decompressor_DetachStream, METH_VARARGS, nullptr },
        { "read_async", (PyCFunction)Decompressor_ReadAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Decompressor, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_Decompressor, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_Decompressor, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Decompressor[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_Decompressor[] = 
    {
        { Py_tp_new, _new_Decompressor },
        { Py_tp_dealloc, _dealloc_Decompressor },
        { Py_tp_methods, _methods_Decompressor },
        { Py_tp_getset, _getset_Decompressor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Decompressor =
    {
        "_winrt_Windows_Storage_Compression.Decompressor",
        sizeof(py::wrapper::Windows::Storage::Compression::Decompressor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Decompressor
    };

    // ----- Windows.Storage.Compression Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Storage::Compression::Compressor>::python_type = py::register_python_type(module, _type_name_Compressor, &_type_spec_Compressor, bases.get());
            py::winrt_type<winrt::Windows::Storage::Compression::Decompressor>::python_type = py::register_python_type(module, _type_name_Decompressor, &_type_spec_Decompressor, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Storage.Compression");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Storage_Compression",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Storage::Compression

PyMODINIT_FUNC
PyInit__winrt_Windows_Storage_Compression (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Storage::Compression::module_def);
}
