// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.System.Diagnostics.DevicePortal.h"

PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs>::python_type;

namespace py::cpp::Windows::System::Diagnostics::DevicePortal
{
    // ----- DevicePortalConnection class --------------------
    constexpr const char* const _type_name_DevicePortalConnection = "DevicePortalConnection";

    static PyObject* _new_DevicePortalConnection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DevicePortalConnection);
        return nullptr;
    }

    static void _dealloc_DevicePortalConnection(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DevicePortalConnection_GetForAppServiceConnection(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::AppService::AppServiceConnection>(args, 0);

                return py::convert(winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection::GetForAppServiceConnection(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnection_GetServerMessageWebSocketForRequest(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpRequestMessage>(args, 0);

                return py::convert(self->obj.GetServerMessageWebSocketForRequest(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpRequestMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Networking::Sockets::SocketMessageType>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.GetServerMessageWebSocketForRequest(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 6)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpRequestMessage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Networking::Sockets::SocketMessageType>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<uint32_t>(args, 3);
                auto param4 = py::convert_to<uint32_t>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::Networking::Sockets::MessageWebSocketReceiveMode>(args, 5);

                return py::convert(self->obj.GetServerMessageWebSocketForRequest(param0, param1, param2, param3, param4, param5));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnection_GetServerStreamWebSocketForRequest(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpRequestMessage>(args, 0);

                return py::convert(self->obj.GetServerStreamWebSocketForRequest(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpRequestMessage>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);

                return py::convert(self->obj.GetServerStreamWebSocketForRequest(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnection_add_Closed(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection, winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs>>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnection_remove_Closed(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnection_add_RequestReceived(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection, winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs>>(arg);

            return py::convert(self->obj.RequestReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnection_remove_RequestReceived(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.RequestReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DevicePortalConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DevicePortalConnection[] = {
        { "get_for_app_service_connection", (PyCFunction)DevicePortalConnection_GetForAppServiceConnection, METH_VARARGS | METH_STATIC, nullptr },
        { "get_server_message_web_socket_for_request", (PyCFunction)DevicePortalConnection_GetServerMessageWebSocketForRequest, METH_VARARGS, nullptr },
        { "get_server_stream_web_socket_for_request", (PyCFunction)DevicePortalConnection_GetServerStreamWebSocketForRequest, METH_VARARGS, nullptr },
        { "add_closed", (PyCFunction)DevicePortalConnection_add_Closed, METH_O, nullptr },
        { "remove_closed", (PyCFunction)DevicePortalConnection_remove_Closed, METH_O, nullptr },
        { "add_request_received", (PyCFunction)DevicePortalConnection_add_RequestReceived, METH_O, nullptr },
        { "remove_request_received", (PyCFunction)DevicePortalConnection_remove_RequestReceived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_DevicePortalConnection, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DevicePortalConnection[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_DevicePortalConnection[] = 
    {
        { Py_tp_new, _new_DevicePortalConnection },
        { Py_tp_dealloc, _dealloc_DevicePortalConnection },
        { Py_tp_methods, _methods_DevicePortalConnection },
        { Py_tp_getset, _getset_DevicePortalConnection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DevicePortalConnection =
    {
        "_winrt_Windows_System_Diagnostics_DevicePortal.DevicePortalConnection",
        sizeof(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DevicePortalConnection
    };

    // ----- DevicePortalConnectionClosedEventArgs class --------------------
    constexpr const char* const _type_name_DevicePortalConnectionClosedEventArgs = "DevicePortalConnectionClosedEventArgs";

    static PyObject* _new_DevicePortalConnectionClosedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DevicePortalConnectionClosedEventArgs);
        return nullptr;
    }

    static void _dealloc_DevicePortalConnectionClosedEventArgs(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DevicePortalConnectionClosedEventArgs_get_Reason(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DevicePortalConnectionClosedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DevicePortalConnectionClosedEventArgs[] = {
        { "_from", (PyCFunction)_from_DevicePortalConnectionClosedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DevicePortalConnectionClosedEventArgs[] = {
        { const_cast<char*>("reason"), (getter)DevicePortalConnectionClosedEventArgs_get_Reason, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DevicePortalConnectionClosedEventArgs[] = 
    {
        { Py_tp_new, _new_DevicePortalConnectionClosedEventArgs },
        { Py_tp_dealloc, _dealloc_DevicePortalConnectionClosedEventArgs },
        { Py_tp_methods, _methods_DevicePortalConnectionClosedEventArgs },
        { Py_tp_getset, _getset_DevicePortalConnectionClosedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DevicePortalConnectionClosedEventArgs =
    {
        "_winrt_Windows_System_Diagnostics_DevicePortal.DevicePortalConnectionClosedEventArgs",
        sizeof(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DevicePortalConnectionClosedEventArgs
    };

    // ----- DevicePortalConnectionRequestReceivedEventArgs class --------------------
    constexpr const char* const _type_name_DevicePortalConnectionRequestReceivedEventArgs = "DevicePortalConnectionRequestReceivedEventArgs";

    static PyObject* _new_DevicePortalConnectionRequestReceivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DevicePortalConnectionRequestReceivedEventArgs);
        return nullptr;
    }

    static void _dealloc_DevicePortalConnectionRequestReceivedEventArgs(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DevicePortalConnectionRequestReceivedEventArgs_GetDeferral(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnectionRequestReceivedEventArgs_get_RequestMessage(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequestMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnectionRequestReceivedEventArgs_get_ResponseMessage(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResponseMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnectionRequestReceivedEventArgs_get_IsWebSocketUpgradeRequest(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsWebSocketUpgradeRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DevicePortalConnectionRequestReceivedEventArgs_get_WebSocketProtocolsRequested(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebSocketProtocolsRequested());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DevicePortalConnectionRequestReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DevicePortalConnectionRequestReceivedEventArgs[] = {
        { "get_deferral", (PyCFunction)DevicePortalConnectionRequestReceivedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_DevicePortalConnectionRequestReceivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DevicePortalConnectionRequestReceivedEventArgs[] = {
        { const_cast<char*>("request_message"), (getter)DevicePortalConnectionRequestReceivedEventArgs_get_RequestMessage, nullptr, nullptr, nullptr },
        { const_cast<char*>("response_message"), (getter)DevicePortalConnectionRequestReceivedEventArgs_get_ResponseMessage, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_web_socket_upgrade_request"), (getter)DevicePortalConnectionRequestReceivedEventArgs_get_IsWebSocketUpgradeRequest, nullptr, nullptr, nullptr },
        { const_cast<char*>("web_socket_protocols_requested"), (getter)DevicePortalConnectionRequestReceivedEventArgs_get_WebSocketProtocolsRequested, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DevicePortalConnectionRequestReceivedEventArgs[] = 
    {
        { Py_tp_new, _new_DevicePortalConnectionRequestReceivedEventArgs },
        { Py_tp_dealloc, _dealloc_DevicePortalConnectionRequestReceivedEventArgs },
        { Py_tp_methods, _methods_DevicePortalConnectionRequestReceivedEventArgs },
        { Py_tp_getset, _getset_DevicePortalConnectionRequestReceivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DevicePortalConnectionRequestReceivedEventArgs =
    {
        "_winrt_Windows_System_Diagnostics_DevicePortal.DevicePortalConnectionRequestReceivedEventArgs",
        sizeof(py::wrapper::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DevicePortalConnectionRequestReceivedEventArgs
    };

    // ----- Windows.System.Diagnostics.DevicePortal Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnection>::python_type = py::register_python_type(module, _type_name_DevicePortalConnection, &_type_spec_DevicePortalConnection, bases.get());
            py::winrt_type<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs>::python_type = py::register_python_type(module, _type_name_DevicePortalConnectionClosedEventArgs, &_type_spec_DevicePortalConnectionClosedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs>::python_type = py::register_python_type(module, _type_name_DevicePortalConnectionRequestReceivedEventArgs, &_type_spec_DevicePortalConnectionRequestReceivedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.System.Diagnostics.DevicePortal");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_System_Diagnostics_DevicePortal",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::System::Diagnostics::DevicePortal

PyMODINIT_FUNC
PyInit__winrt_Windows_System_Diagnostics_DevicePortal (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::System::Diagnostics::DevicePortal::module_def);
}
