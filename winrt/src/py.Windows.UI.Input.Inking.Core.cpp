// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.Input.Inking.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreInkPresenterHost>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource>::python_type;

namespace py::cpp::Windows::UI::Input::Inking::Core
{
    // ----- CoreIncrementalInkStroke class --------------------
    constexpr const char* const _type_name_CoreIncrementalInkStroke = "CoreIncrementalInkStroke";

    static PyObject* _new_CoreIncrementalInkStroke(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkDrawingAttributes>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3x2>(args, 1);

                winrt::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CoreIncrementalInkStroke(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreIncrementalInkStroke_AppendInkPoints(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::UI::Input::Inking::InkPoint>>(args, 0);

                return py::convert(self->obj.AppendInkPoints(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_CreateInkStroke(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateInkStroke());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_get_DrawingAttributes(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DrawingAttributes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_get_PointTransform(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointTransform());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreIncrementalInkStroke(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreIncrementalInkStroke[] = {
        { "append_ink_points", (PyCFunction)CoreIncrementalInkStroke_AppendInkPoints, METH_VARARGS, nullptr },
        { "create_ink_stroke", (PyCFunction)CoreIncrementalInkStroke_CreateInkStroke, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreIncrementalInkStroke, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreIncrementalInkStroke[] = {
        { const_cast<char*>("bounding_rect"), (getter)CoreIncrementalInkStroke_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("drawing_attributes"), (getter)CoreIncrementalInkStroke_get_DrawingAttributes, nullptr, nullptr, nullptr },
        { const_cast<char*>("point_transform"), (getter)CoreIncrementalInkStroke_get_PointTransform, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreIncrementalInkStroke[] = 
    {
        { Py_tp_new, _new_CoreIncrementalInkStroke },
        { Py_tp_dealloc, _dealloc_CoreIncrementalInkStroke },
        { Py_tp_methods, _methods_CoreIncrementalInkStroke },
        { Py_tp_getset, _getset_CoreIncrementalInkStroke },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreIncrementalInkStroke =
    {
        "_winrt_Windows_UI_Input_Inking_Core.CoreIncrementalInkStroke",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreIncrementalInkStroke
    };

    // ----- CoreInkIndependentInputSource class --------------------
    constexpr const char* const _type_name_CoreInkIndependentInputSource = "CoreInkIndependentInputSource";

    static PyObject* _new_CoreInkIndependentInputSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreInkIndependentInputSource);
        return nullptr;
    }

    static void _dealloc_CoreInkIndependentInputSource(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInkIndependentInputSource_Create(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkPresenter>(args, 0);

                return py::convert(winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource::Create(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_get_InkPresenter(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InkPresenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_get_PointerCursor(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInkIndependentInputSource_put_PointerCursor(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerEntering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntering(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerEntering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntering(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerExiting(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExiting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerExiting(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExiting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerHovering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerHovering(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerHovering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerHovering(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerLost(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerLost(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerMoving(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoving(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerMoving(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoving(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerPressing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerPressing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerReleasing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleasing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerReleasing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleasing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreInkIndependentInputSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInkIndependentInputSource[] = {
        { "create", (PyCFunction)CoreInkIndependentInputSource_Create, METH_VARARGS | METH_STATIC, nullptr },
        { "add_pointer_entering", (PyCFunction)CoreInkIndependentInputSource_add_PointerEntering, METH_O, nullptr },
        { "remove_pointer_entering", (PyCFunction)CoreInkIndependentInputSource_remove_PointerEntering, METH_O, nullptr },
        { "add_pointer_exiting", (PyCFunction)CoreInkIndependentInputSource_add_PointerExiting, METH_O, nullptr },
        { "remove_pointer_exiting", (PyCFunction)CoreInkIndependentInputSource_remove_PointerExiting, METH_O, nullptr },
        { "add_pointer_hovering", (PyCFunction)CoreInkIndependentInputSource_add_PointerHovering, METH_O, nullptr },
        { "remove_pointer_hovering", (PyCFunction)CoreInkIndependentInputSource_remove_PointerHovering, METH_O, nullptr },
        { "add_pointer_lost", (PyCFunction)CoreInkIndependentInputSource_add_PointerLost, METH_O, nullptr },
        { "remove_pointer_lost", (PyCFunction)CoreInkIndependentInputSource_remove_PointerLost, METH_O, nullptr },
        { "add_pointer_moving", (PyCFunction)CoreInkIndependentInputSource_add_PointerMoving, METH_O, nullptr },
        { "remove_pointer_moving", (PyCFunction)CoreInkIndependentInputSource_remove_PointerMoving, METH_O, nullptr },
        { "add_pointer_pressing", (PyCFunction)CoreInkIndependentInputSource_add_PointerPressing, METH_O, nullptr },
        { "remove_pointer_pressing", (PyCFunction)CoreInkIndependentInputSource_remove_PointerPressing, METH_O, nullptr },
        { "add_pointer_releasing", (PyCFunction)CoreInkIndependentInputSource_add_PointerReleasing, METH_O, nullptr },
        { "remove_pointer_releasing", (PyCFunction)CoreInkIndependentInputSource_remove_PointerReleasing, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreInkIndependentInputSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInkIndependentInputSource[] = {
        { const_cast<char*>("ink_presenter"), (getter)CoreInkIndependentInputSource_get_InkPresenter, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_cursor"), (getter)CoreInkIndependentInputSource_get_PointerCursor, (setter)CoreInkIndependentInputSource_put_PointerCursor, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInkIndependentInputSource[] = 
    {
        { Py_tp_new, _new_CoreInkIndependentInputSource },
        { Py_tp_dealloc, _dealloc_CoreInkIndependentInputSource },
        { Py_tp_methods, _methods_CoreInkIndependentInputSource },
        { Py_tp_getset, _getset_CoreInkIndependentInputSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInkIndependentInputSource =
    {
        "_winrt_Windows_UI_Input_Inking_Core.CoreInkIndependentInputSource",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInkIndependentInputSource
    };

    // ----- CoreInkPresenterHost class --------------------
    constexpr const char* const _type_name_CoreInkPresenterHost = "CoreInkPresenterHost";

    static PyObject* _new_CoreInkPresenterHost(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::Input::Inking::Core::CoreInkPresenterHost instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CoreInkPresenterHost(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreInkPresenterHost_get_RootVisual(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RootVisual());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInkPresenterHost_put_RootVisual(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Composition::ContainerVisual>(arg);

            self->obj.RootVisual(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInkPresenterHost_get_InkPresenter(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InkPresenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreInkPresenterHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreInkPresenterHost>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInkPresenterHost[] = {
        { "_from", (PyCFunction)_from_CoreInkPresenterHost, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreInkPresenterHost[] = {
        { const_cast<char*>("root_visual"), (getter)CoreInkPresenterHost_get_RootVisual, (setter)CoreInkPresenterHost_put_RootVisual, nullptr, nullptr },
        { const_cast<char*>("ink_presenter"), (getter)CoreInkPresenterHost_get_InkPresenter, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreInkPresenterHost[] = 
    {
        { Py_tp_new, _new_CoreInkPresenterHost },
        { Py_tp_dealloc, _dealloc_CoreInkPresenterHost },
        { Py_tp_methods, _methods_CoreInkPresenterHost },
        { Py_tp_getset, _getset_CoreInkPresenterHost },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreInkPresenterHost =
    {
        "_winrt_Windows_UI_Input_Inking_Core.CoreInkPresenterHost",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInkPresenterHost
    };

    // ----- CoreWetStrokeUpdateEventArgs class --------------------
    constexpr const char* const _type_name_CoreWetStrokeUpdateEventArgs = "CoreWetStrokeUpdateEventArgs";

    static PyObject* _new_CoreWetStrokeUpdateEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreWetStrokeUpdateEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreWetStrokeUpdateEventArgs(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreWetStrokeUpdateEventArgs_get_Disposition(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Disposition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWetStrokeUpdateEventArgs_put_Disposition(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeDisposition>(arg);

            self->obj.Disposition(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreWetStrokeUpdateEventArgs_get_NewInkPoints(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NewInkPoints());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateEventArgs_get_PointerId(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreWetStrokeUpdateEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreWetStrokeUpdateEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreWetStrokeUpdateEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreWetStrokeUpdateEventArgs[] = {
        { const_cast<char*>("disposition"), (getter)CoreWetStrokeUpdateEventArgs_get_Disposition, (setter)CoreWetStrokeUpdateEventArgs_put_Disposition, nullptr, nullptr },
        { const_cast<char*>("new_ink_points"), (getter)CoreWetStrokeUpdateEventArgs_get_NewInkPoints, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_id"), (getter)CoreWetStrokeUpdateEventArgs_get_PointerId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreWetStrokeUpdateEventArgs[] = 
    {
        { Py_tp_new, _new_CoreWetStrokeUpdateEventArgs },
        { Py_tp_dealloc, _dealloc_CoreWetStrokeUpdateEventArgs },
        { Py_tp_methods, _methods_CoreWetStrokeUpdateEventArgs },
        { Py_tp_getset, _getset_CoreWetStrokeUpdateEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreWetStrokeUpdateEventArgs =
    {
        "_winrt_Windows_UI_Input_Inking_Core.CoreWetStrokeUpdateEventArgs",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreWetStrokeUpdateEventArgs
    };

    // ----- CoreWetStrokeUpdateSource class --------------------
    constexpr const char* const _type_name_CoreWetStrokeUpdateSource = "CoreWetStrokeUpdateSource";

    static PyObject* _new_CoreWetStrokeUpdateSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreWetStrokeUpdateSource);
        return nullptr;
    }

    static void _dealloc_CoreWetStrokeUpdateSource(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreWetStrokeUpdateSource_Create(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkPresenter>(args, 0);

                return py::convert(winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource::Create(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_get_InkPresenter(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InkPresenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeCanceled(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeCanceled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeCanceled(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeCanceled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeCompleted(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeCompleted(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeContinuing(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeContinuing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeContinuing(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeContinuing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeStarting(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeStarting(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeStopping(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeStopping(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeStopping(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeStopping(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreWetStrokeUpdateSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreWetStrokeUpdateSource[] = {
        { "create", (PyCFunction)CoreWetStrokeUpdateSource_Create, METH_VARARGS | METH_STATIC, nullptr },
        { "add_wet_stroke_canceled", (PyCFunction)CoreWetStrokeUpdateSource_add_WetStrokeCanceled, METH_O, nullptr },
        { "remove_wet_stroke_canceled", (PyCFunction)CoreWetStrokeUpdateSource_remove_WetStrokeCanceled, METH_O, nullptr },
        { "add_wet_stroke_completed", (PyCFunction)CoreWetStrokeUpdateSource_add_WetStrokeCompleted, METH_O, nullptr },
        { "remove_wet_stroke_completed", (PyCFunction)CoreWetStrokeUpdateSource_remove_WetStrokeCompleted, METH_O, nullptr },
        { "add_wet_stroke_continuing", (PyCFunction)CoreWetStrokeUpdateSource_add_WetStrokeContinuing, METH_O, nullptr },
        { "remove_wet_stroke_continuing", (PyCFunction)CoreWetStrokeUpdateSource_remove_WetStrokeContinuing, METH_O, nullptr },
        { "add_wet_stroke_starting", (PyCFunction)CoreWetStrokeUpdateSource_add_WetStrokeStarting, METH_O, nullptr },
        { "remove_wet_stroke_starting", (PyCFunction)CoreWetStrokeUpdateSource_remove_WetStrokeStarting, METH_O, nullptr },
        { "add_wet_stroke_stopping", (PyCFunction)CoreWetStrokeUpdateSource_add_WetStrokeStopping, METH_O, nullptr },
        { "remove_wet_stroke_stopping", (PyCFunction)CoreWetStrokeUpdateSource_remove_WetStrokeStopping, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreWetStrokeUpdateSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreWetStrokeUpdateSource[] = {
        { const_cast<char*>("ink_presenter"), (getter)CoreWetStrokeUpdateSource_get_InkPresenter, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreWetStrokeUpdateSource[] = 
    {
        { Py_tp_new, _new_CoreWetStrokeUpdateSource },
        { Py_tp_dealloc, _dealloc_CoreWetStrokeUpdateSource },
        { Py_tp_methods, _methods_CoreWetStrokeUpdateSource },
        { Py_tp_getset, _getset_CoreWetStrokeUpdateSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreWetStrokeUpdateSource =
    {
        "_winrt_Windows_UI_Input_Inking_Core.CoreWetStrokeUpdateSource",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreWetStrokeUpdateSource
    };

    // ----- Windows.UI.Input.Inking.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke>::python_type = py::register_python_type(module, _type_name_CoreIncrementalInkStroke, &_type_spec_CoreIncrementalInkStroke, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>::python_type = py::register_python_type(module, _type_name_CoreInkIndependentInputSource, &_type_spec_CoreInkIndependentInputSource, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreInkPresenterHost>::python_type = py::register_python_type(module, _type_name_CoreInkPresenterHost, &_type_spec_CoreInkPresenterHost, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>::python_type = py::register_python_type(module, _type_name_CoreWetStrokeUpdateEventArgs, &_type_spec_CoreWetStrokeUpdateEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource>::python_type = py::register_python_type(module, _type_name_CoreWetStrokeUpdateSource, &_type_spec_CoreWetStrokeUpdateSource, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.Input.Inking.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_Input_Inking_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::Input::Inking::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_Input_Inking_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::Input::Inking::Core::module_def);
}
