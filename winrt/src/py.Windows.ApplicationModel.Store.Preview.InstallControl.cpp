// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Store.Preview.InstallControl.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::GetEntitlementResult>::python_type;

namespace py::cpp::Windows::ApplicationModel::Store::Preview::InstallControl
{
    // ----- AppInstallItem class --------------------
    constexpr const char* const _type_name_AppInstallItem = "AppInstallItem";

    static PyObject* _new_AppInstallItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppInstallItem);
        return nullptr;
    }

    static void _dealloc_AppInstallItem(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppInstallItem_Cancel(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Cancel();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Cancel(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_GetCurrentStatus(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCurrentStatus());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_Pause(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Pause();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Pause(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_Restart(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Restart();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Restart(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_get_InstallType(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstallType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_get_IsUserInitiated(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsUserInitiated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_get_PackageFamilyName(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_get_Children(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_get_ItemOperationsMightAffectOtherItems(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ItemOperationsMightAffectOtherItems());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_get_LaunchAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LaunchAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallItem_put_LaunchAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.LaunchAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallItem_get_PinToTaskbarAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PinToTaskbarAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallItem_put_PinToTaskbarAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.PinToTaskbarAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallItem_get_PinToStartAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PinToStartAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallItem_put_PinToStartAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.PinToStartAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallItem_get_PinToDesktopAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PinToDesktopAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallItem_put_PinToDesktopAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.PinToDesktopAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallItem_get_InstallInProgressToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstallInProgressToastNotificationMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallItem_put_InstallInProgressToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallationToastNotificationMode>(arg);

            self->obj.InstallInProgressToastNotificationMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallItem_get_CompletedInstallToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CompletedInstallToastNotificationMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallItem_put_CompletedInstallToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallationToastNotificationMode>(arg);

            self->obj.CompletedInstallToastNotificationMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallItem_add_Completed(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Completed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_remove_Completed(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Completed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_add_StatusChanged(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.StatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallItem_remove_StatusChanged(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppInstallItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppInstallItem[] = {
        { "cancel", (PyCFunction)AppInstallItem_Cancel, METH_VARARGS, nullptr },
        { "get_current_status", (PyCFunction)AppInstallItem_GetCurrentStatus, METH_VARARGS, nullptr },
        { "pause", (PyCFunction)AppInstallItem_Pause, METH_VARARGS, nullptr },
        { "restart", (PyCFunction)AppInstallItem_Restart, METH_VARARGS, nullptr },
        { "add_completed", (PyCFunction)AppInstallItem_add_Completed, METH_O, nullptr },
        { "remove_completed", (PyCFunction)AppInstallItem_remove_Completed, METH_O, nullptr },
        { "add_status_changed", (PyCFunction)AppInstallItem_add_StatusChanged, METH_O, nullptr },
        { "remove_status_changed", (PyCFunction)AppInstallItem_remove_StatusChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AppInstallItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppInstallItem[] = {
        { const_cast<char*>("install_type"), (getter)AppInstallItem_get_InstallType, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_user_initiated"), (getter)AppInstallItem_get_IsUserInitiated, nullptr, nullptr, nullptr },
        { const_cast<char*>("package_family_name"), (getter)AppInstallItem_get_PackageFamilyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("product_id"), (getter)AppInstallItem_get_ProductId, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)AppInstallItem_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("item_operations_might_affect_other_items"), (getter)AppInstallItem_get_ItemOperationsMightAffectOtherItems, nullptr, nullptr, nullptr },
        { const_cast<char*>("launch_after_install"), (getter)AppInstallItem_get_LaunchAfterInstall, (setter)AppInstallItem_put_LaunchAfterInstall, nullptr, nullptr },
        { const_cast<char*>("pin_to_taskbar_after_install"), (getter)AppInstallItem_get_PinToTaskbarAfterInstall, (setter)AppInstallItem_put_PinToTaskbarAfterInstall, nullptr, nullptr },
        { const_cast<char*>("pin_to_start_after_install"), (getter)AppInstallItem_get_PinToStartAfterInstall, (setter)AppInstallItem_put_PinToStartAfterInstall, nullptr, nullptr },
        { const_cast<char*>("pin_to_desktop_after_install"), (getter)AppInstallItem_get_PinToDesktopAfterInstall, (setter)AppInstallItem_put_PinToDesktopAfterInstall, nullptr, nullptr },
        { const_cast<char*>("install_in_progress_toast_notification_mode"), (getter)AppInstallItem_get_InstallInProgressToastNotificationMode, (setter)AppInstallItem_put_InstallInProgressToastNotificationMode, nullptr, nullptr },
        { const_cast<char*>("completed_install_toast_notification_mode"), (getter)AppInstallItem_get_CompletedInstallToastNotificationMode, (setter)AppInstallItem_put_CompletedInstallToastNotificationMode, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppInstallItem[] = 
    {
        { Py_tp_new, _new_AppInstallItem },
        { Py_tp_dealloc, _dealloc_AppInstallItem },
        { Py_tp_methods, _methods_AppInstallItem },
        { Py_tp_getset, _getset_AppInstallItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppInstallItem =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl.AppInstallItem",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppInstallItem
    };

    // ----- AppInstallManager class --------------------
    constexpr const char* const _type_name_AppInstallManager = "AppInstallManager";

    static PyObject* _new_AppInstallManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AppInstallManager(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppInstallManager_Cancel(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Cancel(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.Cancel(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetFreeDeviceEntitlementAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.GetFreeDeviceEntitlementAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetFreeUserEntitlementAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.GetFreeUserEntitlementAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetFreeUserEntitlementForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                return py::convert(self->obj.GetFreeUserEntitlementForUserAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetIsAppAllowedToInstallAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetIsAppAllowedToInstallAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                return py::convert(self->obj.GetIsAppAllowedToInstallAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetIsAppAllowedToInstallForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);

                return py::convert(self->obj.GetIsAppAllowedToInstallForUserAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetIsApplicableAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetIsApplicableAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetIsApplicableForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.GetIsApplicableForUserAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetIsPackageIdentityAllowedToInstallAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.GetIsPackageIdentityAllowedToInstallAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_GetIsPackageIdentityAllowedToInstallForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                return py::convert(self->obj.GetIsPackageIdentityAllowedToInstallForUserAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_IsStoreBlockedByPolicyAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.IsStoreBlockedByPolicyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_MoveToFrontOfDownloadQueue(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.MoveToFrontOfDownloadQueue(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_Pause(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Pause(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.Pause(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_Restart(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Restart(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.Restart(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_SearchForAllUpdatesAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SearchForAllUpdatesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.SearchForAllUpdatesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions>(args, 2);

                return py::convert(self->obj.SearchForAllUpdatesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_SearchForAllUpdatesForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.SearchForAllUpdatesForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions>(args, 3);

                return py::convert(self->obj.SearchForAllUpdatesForUserAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_SearchForUpdatesAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.SearchForUpdatesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                return py::convert(self->obj.SearchForUpdatesAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions>(args, 4);

                return py::convert(self->obj.SearchForUpdatesAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_SearchForUpdatesForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);

                return py::convert(self->obj.SearchForUpdatesForUserAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 6)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions>(args, 5);

                return py::convert(self->obj.SearchForUpdatesForUserAsync(param0, param1, param2, param3, param4, param5));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_StartAppInstallAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);

                return py::convert(self->obj.StartAppInstallAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 7)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);
                auto param3 = py::convert_to<bool>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);
                auto param5 = py::convert_to<winrt::hstring>(args, 5);
                auto param6 = py::convert_to<winrt::hstring>(args, 6);

                return py::convert(self->obj.StartAppInstallAsync(param0, param1, param2, param3, param4, param5, param6));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_StartProductInstallAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions>(args, 4);

                return py::convert(self->obj.StartProductInstallAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 8)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<bool>(args, 4);
                auto param5 = py::convert_to<bool>(args, 5);
                auto param6 = py::convert_to<winrt::hstring>(args, 6);
                auto param7 = py::convert_to<winrt::Windows::Management::Deployment::PackageVolume>(args, 7);

                return py::convert(self->obj.StartProductInstallAsync(param0, param1, param2, param3, param4, param5, param6, param7));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_StartProductInstallForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 6)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions>(args, 5);

                return py::convert(self->obj.StartProductInstallForUserAsync(param0, param1, param2, param3, param4, param5));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 9)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);
                auto param5 = py::convert_to<bool>(args, 5);
                auto param6 = py::convert_to<bool>(args, 6);
                auto param7 = py::convert_to<winrt::hstring>(args, 7);
                auto param8 = py::convert_to<winrt::Windows::Management::Deployment::PackageVolume>(args, 8);

                return py::convert(self->obj.StartProductInstallForUserAsync(param0, param1, param2, param3, param4, param5, param6, param7, param8));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_UpdateAppByPackageFamilyNameAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.UpdateAppByPackageFamilyNameAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.UpdateAppByPackageFamilyNameAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_UpdateAppByPackageFamilyNameForUserAsync(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.UpdateAppByPackageFamilyNameForUserAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_get_AutoUpdateSetting(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutoUpdateSetting());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallManager_put_AutoUpdateSetting(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AutoUpdateSetting>(arg);

            self->obj.AutoUpdateSetting(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallManager_get_AcquisitionIdentity(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AcquisitionIdentity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallManager_put_AcquisitionIdentity(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AcquisitionIdentity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallManager_get_AppInstallItems(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppInstallItems());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_get_AppInstallItemsWithGroupSupport(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppInstallItemsWithGroupSupport());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_get_CanInstallForAllUsers(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanInstallForAllUsers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_add_ItemCompleted(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager, winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs>>(arg);

            return py::convert(self->obj.ItemCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_remove_ItemCompleted(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ItemCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_add_ItemStatusChanged(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager, winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs>>(arg);

            return py::convert(self->obj.ItemStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallManager_remove_ItemStatusChanged(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ItemStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppInstallManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppInstallManager[] = {
        { "cancel", (PyCFunction)AppInstallManager_Cancel, METH_VARARGS, nullptr },
        { "get_free_device_entitlement_async", (PyCFunction)AppInstallManager_GetFreeDeviceEntitlementAsync, METH_VARARGS, nullptr },
        { "get_free_user_entitlement_async", (PyCFunction)AppInstallManager_GetFreeUserEntitlementAsync, METH_VARARGS, nullptr },
        { "get_free_user_entitlement_for_user_async", (PyCFunction)AppInstallManager_GetFreeUserEntitlementForUserAsync, METH_VARARGS, nullptr },
        { "get_is_app_allowed_to_install_async", (PyCFunction)AppInstallManager_GetIsAppAllowedToInstallAsync, METH_VARARGS, nullptr },
        { "get_is_app_allowed_to_install_for_user_async", (PyCFunction)AppInstallManager_GetIsAppAllowedToInstallForUserAsync, METH_VARARGS, nullptr },
        { "get_is_applicable_async", (PyCFunction)AppInstallManager_GetIsApplicableAsync, METH_VARARGS, nullptr },
        { "get_is_applicable_for_user_async", (PyCFunction)AppInstallManager_GetIsApplicableForUserAsync, METH_VARARGS, nullptr },
        { "get_is_package_identity_allowed_to_install_async", (PyCFunction)AppInstallManager_GetIsPackageIdentityAllowedToInstallAsync, METH_VARARGS, nullptr },
        { "get_is_package_identity_allowed_to_install_for_user_async", (PyCFunction)AppInstallManager_GetIsPackageIdentityAllowedToInstallForUserAsync, METH_VARARGS, nullptr },
        { "is_store_blocked_by_policy_async", (PyCFunction)AppInstallManager_IsStoreBlockedByPolicyAsync, METH_VARARGS, nullptr },
        { "move_to_front_of_download_queue", (PyCFunction)AppInstallManager_MoveToFrontOfDownloadQueue, METH_VARARGS, nullptr },
        { "pause", (PyCFunction)AppInstallManager_Pause, METH_VARARGS, nullptr },
        { "restart", (PyCFunction)AppInstallManager_Restart, METH_VARARGS, nullptr },
        { "search_for_all_updates_async", (PyCFunction)AppInstallManager_SearchForAllUpdatesAsync, METH_VARARGS, nullptr },
        { "search_for_all_updates_for_user_async", (PyCFunction)AppInstallManager_SearchForAllUpdatesForUserAsync, METH_VARARGS, nullptr },
        { "search_for_updates_async", (PyCFunction)AppInstallManager_SearchForUpdatesAsync, METH_VARARGS, nullptr },
        { "search_for_updates_for_user_async", (PyCFunction)AppInstallManager_SearchForUpdatesForUserAsync, METH_VARARGS, nullptr },
        { "start_app_install_async", (PyCFunction)AppInstallManager_StartAppInstallAsync, METH_VARARGS, nullptr },
        { "start_product_install_async", (PyCFunction)AppInstallManager_StartProductInstallAsync, METH_VARARGS, nullptr },
        { "start_product_install_for_user_async", (PyCFunction)AppInstallManager_StartProductInstallForUserAsync, METH_VARARGS, nullptr },
        { "update_app_by_package_family_name_async", (PyCFunction)AppInstallManager_UpdateAppByPackageFamilyNameAsync, METH_VARARGS, nullptr },
        { "update_app_by_package_family_name_for_user_async", (PyCFunction)AppInstallManager_UpdateAppByPackageFamilyNameForUserAsync, METH_VARARGS, nullptr },
        { "add_item_completed", (PyCFunction)AppInstallManager_add_ItemCompleted, METH_O, nullptr },
        { "remove_item_completed", (PyCFunction)AppInstallManager_remove_ItemCompleted, METH_O, nullptr },
        { "add_item_status_changed", (PyCFunction)AppInstallManager_add_ItemStatusChanged, METH_O, nullptr },
        { "remove_item_status_changed", (PyCFunction)AppInstallManager_remove_ItemStatusChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AppInstallManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppInstallManager[] = {
        { const_cast<char*>("auto_update_setting"), (getter)AppInstallManager_get_AutoUpdateSetting, (setter)AppInstallManager_put_AutoUpdateSetting, nullptr, nullptr },
        { const_cast<char*>("acquisition_identity"), (getter)AppInstallManager_get_AcquisitionIdentity, (setter)AppInstallManager_put_AcquisitionIdentity, nullptr, nullptr },
        { const_cast<char*>("app_install_items"), (getter)AppInstallManager_get_AppInstallItems, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_install_items_with_group_support"), (getter)AppInstallManager_get_AppInstallItemsWithGroupSupport, nullptr, nullptr, nullptr },
        { const_cast<char*>("can_install_for_all_users"), (getter)AppInstallManager_get_CanInstallForAllUsers, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppInstallManager[] = 
    {
        { Py_tp_new, _new_AppInstallManager },
        { Py_tp_dealloc, _dealloc_AppInstallManager },
        { Py_tp_methods, _methods_AppInstallManager },
        { Py_tp_getset, _getset_AppInstallManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppInstallManager =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl.AppInstallManager",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppInstallManager
    };

    // ----- AppInstallManagerItemEventArgs class --------------------
    constexpr const char* const _type_name_AppInstallManagerItemEventArgs = "AppInstallManagerItemEventArgs";

    static PyObject* _new_AppInstallManagerItemEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppInstallManagerItemEventArgs);
        return nullptr;
    }

    static void _dealloc_AppInstallManagerItemEventArgs(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppInstallManagerItemEventArgs_get_Item(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Item());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppInstallManagerItemEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppInstallManagerItemEventArgs[] = {
        { "_from", (PyCFunction)_from_AppInstallManagerItemEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppInstallManagerItemEventArgs[] = {
        { const_cast<char*>("item"), (getter)AppInstallManagerItemEventArgs_get_Item, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppInstallManagerItemEventArgs[] = 
    {
        { Py_tp_new, _new_AppInstallManagerItemEventArgs },
        { Py_tp_dealloc, _dealloc_AppInstallManagerItemEventArgs },
        { Py_tp_methods, _methods_AppInstallManagerItemEventArgs },
        { Py_tp_getset, _getset_AppInstallManagerItemEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppInstallManagerItemEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl.AppInstallManagerItemEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppInstallManagerItemEventArgs
    };

    // ----- AppInstallOptions class --------------------
    constexpr const char* const _type_name_AppInstallOptions = "AppInstallOptions";

    static PyObject* _new_AppInstallOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AppInstallOptions(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppInstallOptions_get_TargetVolume(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TargetVolume());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_TargetVolume(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Management::Deployment::PackageVolume>(arg);

            self->obj.TargetVolume(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_Repair(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Repair());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_Repair(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Repair(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_LaunchAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LaunchAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_LaunchAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.LaunchAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_ForceUseOfNonRemovableStorage(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ForceUseOfNonRemovableStorage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_ForceUseOfNonRemovableStorage(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ForceUseOfNonRemovableStorage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_CatalogId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CatalogId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_CatalogId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CatalogId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_AllowForcedAppRestart(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowForcedAppRestart());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_AllowForcedAppRestart(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowForcedAppRestart(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_StageButDoNotInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StageButDoNotInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_StageButDoNotInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.StageButDoNotInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_PinToTaskbarAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PinToTaskbarAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_PinToTaskbarAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.PinToTaskbarAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_PinToStartAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PinToStartAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_PinToStartAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.PinToStartAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_PinToDesktopAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PinToDesktopAfterInstall());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_PinToDesktopAfterInstall(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.PinToDesktopAfterInstall(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_InstallInProgressToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstallInProgressToastNotificationMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_InstallInProgressToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallationToastNotificationMode>(arg);

            self->obj.InstallInProgressToastNotificationMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_InstallForAllUsers(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstallForAllUsers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_InstallForAllUsers(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.InstallForAllUsers(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_ExtendedCampaignId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExtendedCampaignId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_ExtendedCampaignId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.ExtendedCampaignId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_CompletedInstallToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CompletedInstallToastNotificationMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_CompletedInstallToastNotificationMode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallationToastNotificationMode>(arg);

            self->obj.CompletedInstallToastNotificationMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppInstallOptions_get_CampaignId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CampaignId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppInstallOptions_put_CampaignId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CampaignId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_AppInstallOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppInstallOptions[] = {
        { "_from", (PyCFunction)_from_AppInstallOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppInstallOptions[] = {
        { const_cast<char*>("target_volume"), (getter)AppInstallOptions_get_TargetVolume, (setter)AppInstallOptions_put_TargetVolume, nullptr, nullptr },
        { const_cast<char*>("repair"), (getter)AppInstallOptions_get_Repair, (setter)AppInstallOptions_put_Repair, nullptr, nullptr },
        { const_cast<char*>("launch_after_install"), (getter)AppInstallOptions_get_LaunchAfterInstall, (setter)AppInstallOptions_put_LaunchAfterInstall, nullptr, nullptr },
        { const_cast<char*>("force_use_of_non_removable_storage"), (getter)AppInstallOptions_get_ForceUseOfNonRemovableStorage, (setter)AppInstallOptions_put_ForceUseOfNonRemovableStorage, nullptr, nullptr },
        { const_cast<char*>("catalog_id"), (getter)AppInstallOptions_get_CatalogId, (setter)AppInstallOptions_put_CatalogId, nullptr, nullptr },
        { const_cast<char*>("allow_forced_app_restart"), (getter)AppInstallOptions_get_AllowForcedAppRestart, (setter)AppInstallOptions_put_AllowForcedAppRestart, nullptr, nullptr },
        { const_cast<char*>("stage_but_do_not_install"), (getter)AppInstallOptions_get_StageButDoNotInstall, (setter)AppInstallOptions_put_StageButDoNotInstall, nullptr, nullptr },
        { const_cast<char*>("pin_to_taskbar_after_install"), (getter)AppInstallOptions_get_PinToTaskbarAfterInstall, (setter)AppInstallOptions_put_PinToTaskbarAfterInstall, nullptr, nullptr },
        { const_cast<char*>("pin_to_start_after_install"), (getter)AppInstallOptions_get_PinToStartAfterInstall, (setter)AppInstallOptions_put_PinToStartAfterInstall, nullptr, nullptr },
        { const_cast<char*>("pin_to_desktop_after_install"), (getter)AppInstallOptions_get_PinToDesktopAfterInstall, (setter)AppInstallOptions_put_PinToDesktopAfterInstall, nullptr, nullptr },
        { const_cast<char*>("install_in_progress_toast_notification_mode"), (getter)AppInstallOptions_get_InstallInProgressToastNotificationMode, (setter)AppInstallOptions_put_InstallInProgressToastNotificationMode, nullptr, nullptr },
        { const_cast<char*>("install_for_all_users"), (getter)AppInstallOptions_get_InstallForAllUsers, (setter)AppInstallOptions_put_InstallForAllUsers, nullptr, nullptr },
        { const_cast<char*>("extended_campaign_id"), (getter)AppInstallOptions_get_ExtendedCampaignId, (setter)AppInstallOptions_put_ExtendedCampaignId, nullptr, nullptr },
        { const_cast<char*>("completed_install_toast_notification_mode"), (getter)AppInstallOptions_get_CompletedInstallToastNotificationMode, (setter)AppInstallOptions_put_CompletedInstallToastNotificationMode, nullptr, nullptr },
        { const_cast<char*>("campaign_id"), (getter)AppInstallOptions_get_CampaignId, (setter)AppInstallOptions_put_CampaignId, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppInstallOptions[] = 
    {
        { Py_tp_new, _new_AppInstallOptions },
        { Py_tp_dealloc, _dealloc_AppInstallOptions },
        { Py_tp_methods, _methods_AppInstallOptions },
        { Py_tp_getset, _getset_AppInstallOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppInstallOptions =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl.AppInstallOptions",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppInstallOptions
    };

    // ----- AppInstallStatus class --------------------
    constexpr const char* const _type_name_AppInstallStatus = "AppInstallStatus";

    static PyObject* _new_AppInstallStatus(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppInstallStatus);
        return nullptr;
    }

    static void _dealloc_AppInstallStatus(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppInstallStatus_get_BytesDownloaded(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BytesDownloaded());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallStatus_get_DownloadSizeInBytes(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DownloadSizeInBytes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallStatus_get_ErrorCode(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallStatus_get_InstallState(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstallState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallStatus_get_PercentComplete(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PercentComplete());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallStatus_get_ReadyForLaunch(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ReadyForLaunch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallStatus_get_User(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstallStatus_get_IsStaged(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsStaged());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppInstallStatus(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppInstallStatus[] = {
        { "_from", (PyCFunction)_from_AppInstallStatus, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppInstallStatus[] = {
        { const_cast<char*>("bytes_downloaded"), (getter)AppInstallStatus_get_BytesDownloaded, nullptr, nullptr, nullptr },
        { const_cast<char*>("download_size_in_bytes"), (getter)AppInstallStatus_get_DownloadSizeInBytes, nullptr, nullptr, nullptr },
        { const_cast<char*>("error_code"), (getter)AppInstallStatus_get_ErrorCode, nullptr, nullptr, nullptr },
        { const_cast<char*>("install_state"), (getter)AppInstallStatus_get_InstallState, nullptr, nullptr, nullptr },
        { const_cast<char*>("percent_complete"), (getter)AppInstallStatus_get_PercentComplete, nullptr, nullptr, nullptr },
        { const_cast<char*>("ready_for_launch"), (getter)AppInstallStatus_get_ReadyForLaunch, nullptr, nullptr, nullptr },
        { const_cast<char*>("user"), (getter)AppInstallStatus_get_User, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_staged"), (getter)AppInstallStatus_get_IsStaged, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppInstallStatus[] = 
    {
        { Py_tp_new, _new_AppInstallStatus },
        { Py_tp_dealloc, _dealloc_AppInstallStatus },
        { Py_tp_methods, _methods_AppInstallStatus },
        { Py_tp_getset, _getset_AppInstallStatus },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppInstallStatus =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl.AppInstallStatus",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppInstallStatus
    };

    // ----- AppUpdateOptions class --------------------
    constexpr const char* const _type_name_AppUpdateOptions = "AppUpdateOptions";

    static PyObject* _new_AppUpdateOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AppUpdateOptions(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppUpdateOptions_get_CatalogId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CatalogId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppUpdateOptions_put_CatalogId(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CatalogId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppUpdateOptions_get_AllowForcedAppRestart(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowForcedAppRestart());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppUpdateOptions_put_AllowForcedAppRestart(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowForcedAppRestart(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppUpdateOptions_get_AutomaticallyDownloadAndInstallUpdateIfFound(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutomaticallyDownloadAndInstallUpdateIfFound());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppUpdateOptions_put_AutomaticallyDownloadAndInstallUpdateIfFound(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AutomaticallyDownloadAndInstallUpdateIfFound(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_AppUpdateOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppUpdateOptions[] = {
        { "_from", (PyCFunction)_from_AppUpdateOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppUpdateOptions[] = {
        { const_cast<char*>("catalog_id"), (getter)AppUpdateOptions_get_CatalogId, (setter)AppUpdateOptions_put_CatalogId, nullptr, nullptr },
        { const_cast<char*>("allow_forced_app_restart"), (getter)AppUpdateOptions_get_AllowForcedAppRestart, (setter)AppUpdateOptions_put_AllowForcedAppRestart, nullptr, nullptr },
        { const_cast<char*>("automatically_download_and_install_update_if_found"), (getter)AppUpdateOptions_get_AutomaticallyDownloadAndInstallUpdateIfFound, (setter)AppUpdateOptions_put_AutomaticallyDownloadAndInstallUpdateIfFound, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppUpdateOptions[] = 
    {
        { Py_tp_new, _new_AppUpdateOptions },
        { Py_tp_dealloc, _dealloc_AppUpdateOptions },
        { Py_tp_methods, _methods_AppUpdateOptions },
        { Py_tp_getset, _getset_AppUpdateOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppUpdateOptions =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl.AppUpdateOptions",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppUpdateOptions
    };

    // ----- GetEntitlementResult class --------------------
    constexpr const char* const _type_name_GetEntitlementResult = "GetEntitlementResult";

    static PyObject* _new_GetEntitlementResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GetEntitlementResult);
        return nullptr;
    }

    static void _dealloc_GetEntitlementResult(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::GetEntitlementResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GetEntitlementResult_get_Status(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::GetEntitlementResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GetEntitlementResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::GetEntitlementResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GetEntitlementResult[] = {
        { "_from", (PyCFunction)_from_GetEntitlementResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GetEntitlementResult[] = {
        { const_cast<char*>("status"), (getter)GetEntitlementResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GetEntitlementResult[] = 
    {
        { Py_tp_new, _new_GetEntitlementResult },
        { Py_tp_dealloc, _dealloc_GetEntitlementResult },
        { Py_tp_methods, _methods_GetEntitlementResult },
        { Py_tp_getset, _getset_GetEntitlementResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GetEntitlementResult =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl.GetEntitlementResult",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::InstallControl::GetEntitlementResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GetEntitlementResult
    };

    // ----- Windows.ApplicationModel.Store.Preview.InstallControl Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem>::python_type = py::register_python_type(module, _type_name_AppInstallItem, &_type_spec_AppInstallItem, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManager>::python_type = py::register_python_type(module, _type_name_AppInstallManager, &_type_spec_AppInstallManager, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallManagerItemEventArgs>::python_type = py::register_python_type(module, _type_name_AppInstallManagerItemEventArgs, &_type_spec_AppInstallManagerItemEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallOptions>::python_type = py::register_python_type(module, _type_name_AppInstallOptions, &_type_spec_AppInstallOptions, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallStatus>::python_type = py::register_python_type(module, _type_name_AppInstallStatus, &_type_spec_AppInstallStatus, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::AppUpdateOptions>::python_type = py::register_python_type(module, _type_name_AppUpdateOptions, &_type_spec_AppUpdateOptions, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::InstallControl::GetEntitlementResult>::python_type = py::register_python_type(module, _type_name_GetEntitlementResult, &_type_spec_GetEntitlementResult, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Store.Preview.InstallControl");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Store_Preview_InstallControl",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Store::Preview::InstallControl

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Store_Preview_InstallControl (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Store::Preview::InstallControl::module_def);
}
