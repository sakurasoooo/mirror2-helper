// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Perception.Spatial.h"

PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchor>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorExportSufficiency>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorExporter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorStore>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorTransferManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingVolume>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntity>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityStore>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityUpdatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityWatcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialStageFrameOfReference>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialStationaryFrameOfReference>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingBox>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::Spatial::SpatialRay>::python_type;

PyObject* py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingBox>::convert(winrt::Windows::Perception::Spatial::SpatialBoundingBox instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingBox>());
}
winrt::Windows::Perception::Spatial::SpatialBoundingBox py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingBox>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingBox>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Perception::Spatial::SpatialBoundingBox>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Perception::Spatial::SpatialBoundingBox return_value{};

    PyObject* py_Center = PyDict_GetItemString(obj, "center");
    if (!py_Center) { throw winrt::hresult_invalid_argument(); }
    return_value.Center = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Center);

    PyObject* py_Extents = PyDict_GetItemString(obj, "extents");
    if (!py_Extents) { throw winrt::hresult_invalid_argument(); }
    return_value.Extents = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Extents);

    return return_value;
}

PyObject* py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>::convert(winrt::Windows::Perception::Spatial::SpatialBoundingFrustum instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>());
}
winrt::Windows::Perception::Spatial::SpatialBoundingFrustum py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Perception::Spatial::SpatialBoundingFrustum return_value{};

    PyObject* py_Near = PyDict_GetItemString(obj, "near");
    if (!py_Near) { throw winrt::hresult_invalid_argument(); }
    return_value.Near = converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(py_Near);

    PyObject* py_Far = PyDict_GetItemString(obj, "far");
    if (!py_Far) { throw winrt::hresult_invalid_argument(); }
    return_value.Far = converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(py_Far);

    PyObject* py_Right = PyDict_GetItemString(obj, "right");
    if (!py_Right) { throw winrt::hresult_invalid_argument(); }
    return_value.Right = converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(py_Right);

    PyObject* py_Left = PyDict_GetItemString(obj, "left");
    if (!py_Left) { throw winrt::hresult_invalid_argument(); }
    return_value.Left = converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(py_Left);

    PyObject* py_Top = PyDict_GetItemString(obj, "top");
    if (!py_Top) { throw winrt::hresult_invalid_argument(); }
    return_value.Top = converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(py_Top);

    PyObject* py_Bottom = PyDict_GetItemString(obj, "bottom");
    if (!py_Bottom) { throw winrt::hresult_invalid_argument(); }
    return_value.Bottom = converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(py_Bottom);

    return return_value;
}

PyObject* py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>::convert(winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>());
}
winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox return_value{};

    PyObject* py_Center = PyDict_GetItemString(obj, "center");
    if (!py_Center) { throw winrt::hresult_invalid_argument(); }
    return_value.Center = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Center);

    PyObject* py_Extents = PyDict_GetItemString(obj, "extents");
    if (!py_Extents) { throw winrt::hresult_invalid_argument(); }
    return_value.Extents = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Extents);

    PyObject* py_Orientation = PyDict_GetItemString(obj, "orientation");
    if (!py_Orientation) { throw winrt::hresult_invalid_argument(); }
    return_value.Orientation = converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(py_Orientation);

    return return_value;
}

PyObject* py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>::convert(winrt::Windows::Perception::Spatial::SpatialBoundingSphere instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>());
}
winrt::Windows::Perception::Spatial::SpatialBoundingSphere py::converter<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Perception::Spatial::SpatialBoundingSphere return_value{};

    PyObject* py_Center = PyDict_GetItemString(obj, "center");
    if (!py_Center) { throw winrt::hresult_invalid_argument(); }
    return_value.Center = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Center);

    PyObject* py_Radius = PyDict_GetItemString(obj, "radius");
    if (!py_Radius) { throw winrt::hresult_invalid_argument(); }
    return_value.Radius = converter<float>::convert_to(py_Radius);

    return return_value;
}

PyObject* py::converter<winrt::Windows::Perception::Spatial::SpatialRay>::convert(winrt::Windows::Perception::Spatial::SpatialRay instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Perception::Spatial::SpatialRay>());
}
winrt::Windows::Perception::Spatial::SpatialRay py::converter<winrt::Windows::Perception::Spatial::SpatialRay>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Perception::Spatial::SpatialRay>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Perception::Spatial::SpatialRay>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Perception::Spatial::SpatialRay return_value{};

    PyObject* py_Origin = PyDict_GetItemString(obj, "origin");
    if (!py_Origin) { throw winrt::hresult_invalid_argument(); }
    return_value.Origin = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Origin);

    PyObject* py_Direction = PyDict_GetItemString(obj, "direction");
    if (!py_Direction) { throw winrt::hresult_invalid_argument(); }
    return_value.Direction = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Direction);

    return return_value;
}

namespace py::cpp::Windows::Perception::Spatial
{
    // ----- SpatialAnchor class --------------------
    constexpr const char* const _type_name_SpatialAnchor = "SpatialAnchor";

    static PyObject* _new_SpatialAnchor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialAnchor);
        return nullptr;
    }

    static void _dealloc_SpatialAnchor(py::wrapper::Windows::Perception::Spatial::SpatialAnchor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialAnchor_TryCreateRelativeTo(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchor::TryCreateRelativeTo(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchor::TryCreateRelativeTo(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 2);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchor::TryCreateRelativeTo(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchor_get_CoordinateSystem(py::wrapper::Windows::Perception::Spatial::SpatialAnchor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialAnchor_get_RawCoordinateSystem(py::wrapper::Windows::Perception::Spatial::SpatialAnchor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawCoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialAnchor_get_RemovedByUser(py::wrapper::Windows::Perception::Spatial::SpatialAnchor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RemovedByUser());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialAnchor_add_RawCoordinateSystemAdjusted(py::wrapper::Windows::Perception::Spatial::SpatialAnchor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::SpatialAnchor, winrt::Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs>>(arg);

            return py::convert(self->obj.RawCoordinateSystemAdjusted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialAnchor_remove_RawCoordinateSystemAdjusted(py::wrapper::Windows::Perception::Spatial::SpatialAnchor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.RawCoordinateSystemAdjusted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialAnchor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialAnchor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialAnchor[] = {
        { "try_create_relative_to", (PyCFunction)SpatialAnchor_TryCreateRelativeTo, METH_VARARGS | METH_STATIC, nullptr },
        { "add_raw_coordinate_system_adjusted", (PyCFunction)SpatialAnchor_add_RawCoordinateSystemAdjusted, METH_O, nullptr },
        { "remove_raw_coordinate_system_adjusted", (PyCFunction)SpatialAnchor_remove_RawCoordinateSystemAdjusted, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SpatialAnchor, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialAnchor[] = {
        { const_cast<char*>("coordinate_system"), (getter)SpatialAnchor_get_CoordinateSystem, nullptr, nullptr, nullptr },
        { const_cast<char*>("raw_coordinate_system"), (getter)SpatialAnchor_get_RawCoordinateSystem, nullptr, nullptr, nullptr },
        { const_cast<char*>("removed_by_user"), (getter)SpatialAnchor_get_RemovedByUser, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialAnchor[] = 
    {
        { Py_tp_new, _new_SpatialAnchor },
        { Py_tp_dealloc, _dealloc_SpatialAnchor },
        { Py_tp_methods, _methods_SpatialAnchor },
        { Py_tp_getset, _getset_SpatialAnchor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialAnchor =
    {
        "_winrt_Windows_Perception_Spatial.SpatialAnchor",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialAnchor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialAnchor
    };

    // ----- SpatialAnchorExportSufficiency class --------------------
    constexpr const char* const _type_name_SpatialAnchorExportSufficiency = "SpatialAnchorExportSufficiency";

    static PyObject* _new_SpatialAnchorExportSufficiency(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialAnchorExportSufficiency);
        return nullptr;
    }

    static void _dealloc_SpatialAnchorExportSufficiency(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExportSufficiency* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialAnchorExportSufficiency_get_IsMinimallySufficient(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExportSufficiency* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsMinimallySufficient());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorExportSufficiency_get_RecommendedSufficiencyLevel(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExportSufficiency* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecommendedSufficiencyLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorExportSufficiency_get_SufficiencyLevel(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExportSufficiency* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SufficiencyLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialAnchorExportSufficiency(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialAnchorExportSufficiency>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialAnchorExportSufficiency[] = {
        { "_from", (PyCFunction)_from_SpatialAnchorExportSufficiency, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialAnchorExportSufficiency[] = {
        { const_cast<char*>("is_minimally_sufficient"), (getter)SpatialAnchorExportSufficiency_get_IsMinimallySufficient, nullptr, nullptr, nullptr },
        { const_cast<char*>("recommended_sufficiency_level"), (getter)SpatialAnchorExportSufficiency_get_RecommendedSufficiencyLevel, nullptr, nullptr, nullptr },
        { const_cast<char*>("sufficiency_level"), (getter)SpatialAnchorExportSufficiency_get_SufficiencyLevel, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialAnchorExportSufficiency[] = 
    {
        { Py_tp_new, _new_SpatialAnchorExportSufficiency },
        { Py_tp_dealloc, _dealloc_SpatialAnchorExportSufficiency },
        { Py_tp_methods, _methods_SpatialAnchorExportSufficiency },
        { Py_tp_getset, _getset_SpatialAnchorExportSufficiency },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialAnchorExportSufficiency =
    {
        "_winrt_Windows_Perception_Spatial.SpatialAnchorExportSufficiency",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExportSufficiency),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialAnchorExportSufficiency
    };

    // ----- SpatialAnchorExporter class --------------------
    constexpr const char* const _type_name_SpatialAnchorExporter = "SpatialAnchorExporter";

    static PyObject* _new_SpatialAnchorExporter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialAnchorExporter);
        return nullptr;
    }

    static void _dealloc_SpatialAnchorExporter(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExporter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialAnchorExporter_GetAnchorExportSufficiencyAsync(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExporter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialAnchor>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialAnchorExportPurpose>(args, 1);

                return py::convert(self->obj.GetAnchorExportSufficiencyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorExporter_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchorExporter::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorExporter_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchorExporter::RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorExporter_TryExportAnchorAsync(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExporter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialAnchor>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialAnchorExportPurpose>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 2);

                return py::convert(self->obj.TryExportAnchorAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SpatialAnchorExporter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialAnchorExporter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialAnchorExporter[] = {
        { "get_anchor_export_sufficiency_async", (PyCFunction)SpatialAnchorExporter_GetAnchorExportSufficiencyAsync, METH_VARARGS, nullptr },
        { "get_default", (PyCFunction)SpatialAnchorExporter_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "request_access_async", (PyCFunction)SpatialAnchorExporter_RequestAccessAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_export_anchor_async", (PyCFunction)SpatialAnchorExporter_TryExportAnchorAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SpatialAnchorExporter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialAnchorExporter[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialAnchorExporter[] = 
    {
        { Py_tp_new, _new_SpatialAnchorExporter },
        { Py_tp_dealloc, _dealloc_SpatialAnchorExporter },
        { Py_tp_methods, _methods_SpatialAnchorExporter },
        { Py_tp_getset, _getset_SpatialAnchorExporter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialAnchorExporter =
    {
        "_winrt_Windows_Perception_Spatial.SpatialAnchorExporter",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialAnchorExporter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialAnchorExporter
    };

    // ----- SpatialAnchorManager class --------------------
    constexpr const char* const _type_name_SpatialAnchorManager = "SpatialAnchorManager";

    static PyObject* _new_SpatialAnchorManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialAnchorManager);
        return nullptr;
    }

    static PyObject* SpatialAnchorManager_RequestStoreAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchorManager::RequestStoreAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialAnchorManager[] = {
        { "request_store_async", (PyCFunction)SpatialAnchorManager_RequestStoreAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialAnchorManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialAnchorManager[] = 
    {
        { Py_tp_new, _new_SpatialAnchorManager },
        { Py_tp_methods, _methods_SpatialAnchorManager },
        { Py_tp_getset, _getset_SpatialAnchorManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialAnchorManager =
    {
        "_winrt_Windows_Perception_Spatial.SpatialAnchorManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialAnchorManager
    };

    // ----- SpatialAnchorRawCoordinateSystemAdjustedEventArgs class --------------------
    constexpr const char* const _type_name_SpatialAnchorRawCoordinateSystemAdjustedEventArgs = "SpatialAnchorRawCoordinateSystemAdjustedEventArgs";

    static PyObject* _new_SpatialAnchorRawCoordinateSystemAdjustedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialAnchorRawCoordinateSystemAdjustedEventArgs);
        return nullptr;
    }

    static void _dealloc_SpatialAnchorRawCoordinateSystemAdjustedEventArgs(py::wrapper::Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialAnchorRawCoordinateSystemAdjustedEventArgs_get_OldRawCoordinateSystemToNewRawCoordinateSystemTransform(py::wrapper::Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OldRawCoordinateSystemToNewRawCoordinateSystemTransform());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialAnchorRawCoordinateSystemAdjustedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialAnchorRawCoordinateSystemAdjustedEventArgs[] = {
        { "_from", (PyCFunction)_from_SpatialAnchorRawCoordinateSystemAdjustedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialAnchorRawCoordinateSystemAdjustedEventArgs[] = {
        { const_cast<char*>("old_raw_coordinate_system_to_new_raw_coordinate_system_transform"), (getter)SpatialAnchorRawCoordinateSystemAdjustedEventArgs_get_OldRawCoordinateSystemToNewRawCoordinateSystemTransform, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialAnchorRawCoordinateSystemAdjustedEventArgs[] = 
    {
        { Py_tp_new, _new_SpatialAnchorRawCoordinateSystemAdjustedEventArgs },
        { Py_tp_dealloc, _dealloc_SpatialAnchorRawCoordinateSystemAdjustedEventArgs },
        { Py_tp_methods, _methods_SpatialAnchorRawCoordinateSystemAdjustedEventArgs },
        { Py_tp_getset, _getset_SpatialAnchorRawCoordinateSystemAdjustedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialAnchorRawCoordinateSystemAdjustedEventArgs =
    {
        "_winrt_Windows_Perception_Spatial.SpatialAnchorRawCoordinateSystemAdjustedEventArgs",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialAnchorRawCoordinateSystemAdjustedEventArgs
    };

    // ----- SpatialAnchorStore class --------------------
    constexpr const char* const _type_name_SpatialAnchorStore = "SpatialAnchorStore";

    static PyObject* _new_SpatialAnchorStore(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialAnchorStore);
        return nullptr;
    }

    static void _dealloc_SpatialAnchorStore(py::wrapper::Windows::Perception::Spatial::SpatialAnchorStore* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialAnchorStore_Clear(py::wrapper::Windows::Perception::Spatial::SpatialAnchorStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorStore_GetAllSavedAnchors(py::wrapper::Windows::Perception::Spatial::SpatialAnchorStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAllSavedAnchors());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorStore_Remove(py::wrapper::Windows::Perception::Spatial::SpatialAnchorStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorStore_TrySave(py::wrapper::Windows::Perception::Spatial::SpatialAnchorStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialAnchor>(args, 1);

                return py::convert(self->obj.TrySave(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SpatialAnchorStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialAnchorStore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialAnchorStore[] = {
        { "clear", (PyCFunction)SpatialAnchorStore_Clear, METH_VARARGS, nullptr },
        { "get_all_saved_anchors", (PyCFunction)SpatialAnchorStore_GetAllSavedAnchors, METH_VARARGS, nullptr },
        { "remove", (PyCFunction)SpatialAnchorStore_Remove, METH_VARARGS, nullptr },
        { "try_save", (PyCFunction)SpatialAnchorStore_TrySave, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SpatialAnchorStore, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialAnchorStore[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialAnchorStore[] = 
    {
        { Py_tp_new, _new_SpatialAnchorStore },
        { Py_tp_dealloc, _dealloc_SpatialAnchorStore },
        { Py_tp_methods, _methods_SpatialAnchorStore },
        { Py_tp_getset, _getset_SpatialAnchorStore },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialAnchorStore =
    {
        "_winrt_Windows_Perception_Spatial.SpatialAnchorStore",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialAnchorStore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialAnchorStore
    };

    // ----- SpatialAnchorTransferManager class --------------------
    constexpr const char* const _type_name_SpatialAnchorTransferManager = "SpatialAnchorTransferManager";

    static PyObject* _new_SpatialAnchorTransferManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialAnchorTransferManager);
        return nullptr;
    }

    static PyObject* SpatialAnchorTransferManager_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchorTransferManager::RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorTransferManager_TryExportAnchorsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Perception::Spatial::SpatialAnchor>>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchorTransferManager::TryExportAnchorsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialAnchorTransferManager_TryImportAnchorsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialAnchorTransferManager::TryImportAnchorsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialAnchorTransferManager[] = {
        { "request_access_async", (PyCFunction)SpatialAnchorTransferManager_RequestAccessAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_export_anchors_async", (PyCFunction)SpatialAnchorTransferManager_TryExportAnchorsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_import_anchors_async", (PyCFunction)SpatialAnchorTransferManager_TryImportAnchorsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialAnchorTransferManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialAnchorTransferManager[] = 
    {
        { Py_tp_new, _new_SpatialAnchorTransferManager },
        { Py_tp_methods, _methods_SpatialAnchorTransferManager },
        { Py_tp_getset, _getset_SpatialAnchorTransferManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialAnchorTransferManager =
    {
        "_winrt_Windows_Perception_Spatial.SpatialAnchorTransferManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialAnchorTransferManager
    };

    // ----- SpatialBoundingVolume class --------------------
    constexpr const char* const _type_name_SpatialBoundingVolume = "SpatialBoundingVolume";

    static PyObject* _new_SpatialBoundingVolume(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialBoundingVolume);
        return nullptr;
    }

    static void _dealloc_SpatialBoundingVolume(py::wrapper::Windows::Perception::Spatial::SpatialBoundingVolume* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialBoundingVolume_FromBox(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingBox>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialBoundingVolume::FromBox(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialBoundingVolume_FromFrustum(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialBoundingVolume::FromFrustum(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialBoundingVolume_FromOrientedBox(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialBoundingVolume::FromOrientedBox(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialBoundingVolume_FromSphere(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>(args, 1);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialBoundingVolume::FromSphere(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SpatialBoundingVolume(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialBoundingVolume>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialBoundingVolume[] = {
        { "from_box", (PyCFunction)SpatialBoundingVolume_FromBox, METH_VARARGS | METH_STATIC, nullptr },
        { "from_frustum", (PyCFunction)SpatialBoundingVolume_FromFrustum, METH_VARARGS | METH_STATIC, nullptr },
        { "from_oriented_box", (PyCFunction)SpatialBoundingVolume_FromOrientedBox, METH_VARARGS | METH_STATIC, nullptr },
        { "from_sphere", (PyCFunction)SpatialBoundingVolume_FromSphere, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_SpatialBoundingVolume, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialBoundingVolume[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialBoundingVolume[] = 
    {
        { Py_tp_new, _new_SpatialBoundingVolume },
        { Py_tp_dealloc, _dealloc_SpatialBoundingVolume },
        { Py_tp_methods, _methods_SpatialBoundingVolume },
        { Py_tp_getset, _getset_SpatialBoundingVolume },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialBoundingVolume =
    {
        "_winrt_Windows_Perception_Spatial.SpatialBoundingVolume",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialBoundingVolume),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialBoundingVolume
    };

    // ----- SpatialCoordinateSystem class --------------------
    constexpr const char* const _type_name_SpatialCoordinateSystem = "SpatialCoordinateSystem";

    static PyObject* _new_SpatialCoordinateSystem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialCoordinateSystem);
        return nullptr;
    }

    static void _dealloc_SpatialCoordinateSystem(py::wrapper::Windows::Perception::Spatial::SpatialCoordinateSystem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialCoordinateSystem_TryGetTransformTo(py::wrapper::Windows::Perception::Spatial::SpatialCoordinateSystem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(self->obj.TryGetTransformTo(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SpatialCoordinateSystem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialCoordinateSystem[] = {
        { "try_get_transform_to", (PyCFunction)SpatialCoordinateSystem_TryGetTransformTo, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SpatialCoordinateSystem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialCoordinateSystem[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialCoordinateSystem[] = 
    {
        { Py_tp_new, _new_SpatialCoordinateSystem },
        { Py_tp_dealloc, _dealloc_SpatialCoordinateSystem },
        { Py_tp_methods, _methods_SpatialCoordinateSystem },
        { Py_tp_getset, _getset_SpatialCoordinateSystem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialCoordinateSystem =
    {
        "_winrt_Windows_Perception_Spatial.SpatialCoordinateSystem",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialCoordinateSystem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialCoordinateSystem
    };

    // ----- SpatialEntity class --------------------
    constexpr const char* const _type_name_SpatialEntity = "SpatialEntity";

    static PyObject* _new_SpatialEntity(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialAnchor>(args, 0);

                winrt::Windows::Perception::Spatial::SpatialEntity instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialAnchor>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::ValueSet>(args, 1);

                winrt::Windows::Perception::Spatial::SpatialEntity instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SpatialEntity(py::wrapper::Windows::Perception::Spatial::SpatialEntity* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialEntity_get_Anchor(py::wrapper::Windows::Perception::Spatial::SpatialEntity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Anchor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntity_get_Id(py::wrapper::Windows::Perception::Spatial::SpatialEntity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntity_get_Properties(py::wrapper::Windows::Perception::Spatial::SpatialEntity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialEntity(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialEntity>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialEntity[] = {
        { "_from", (PyCFunction)_from_SpatialEntity, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialEntity[] = {
        { const_cast<char*>("anchor"), (getter)SpatialEntity_get_Anchor, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)SpatialEntity_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)SpatialEntity_get_Properties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialEntity[] = 
    {
        { Py_tp_new, _new_SpatialEntity },
        { Py_tp_dealloc, _dealloc_SpatialEntity },
        { Py_tp_methods, _methods_SpatialEntity },
        { Py_tp_getset, _getset_SpatialEntity },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialEntity =
    {
        "_winrt_Windows_Perception_Spatial.SpatialEntity",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialEntity),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialEntity
    };

    // ----- SpatialEntityAddedEventArgs class --------------------
    constexpr const char* const _type_name_SpatialEntityAddedEventArgs = "SpatialEntityAddedEventArgs";

    static PyObject* _new_SpatialEntityAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialEntityAddedEventArgs);
        return nullptr;
    }

    static void _dealloc_SpatialEntityAddedEventArgs(py::wrapper::Windows::Perception::Spatial::SpatialEntityAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialEntityAddedEventArgs_get_Entity(py::wrapper::Windows::Perception::Spatial::SpatialEntityAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Entity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialEntityAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialEntityAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialEntityAddedEventArgs[] = {
        { "_from", (PyCFunction)_from_SpatialEntityAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialEntityAddedEventArgs[] = {
        { const_cast<char*>("entity"), (getter)SpatialEntityAddedEventArgs_get_Entity, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialEntityAddedEventArgs[] = 
    {
        { Py_tp_new, _new_SpatialEntityAddedEventArgs },
        { Py_tp_dealloc, _dealloc_SpatialEntityAddedEventArgs },
        { Py_tp_methods, _methods_SpatialEntityAddedEventArgs },
        { Py_tp_getset, _getset_SpatialEntityAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialEntityAddedEventArgs =
    {
        "_winrt_Windows_Perception_Spatial.SpatialEntityAddedEventArgs",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialEntityAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialEntityAddedEventArgs
    };

    // ----- SpatialEntityRemovedEventArgs class --------------------
    constexpr const char* const _type_name_SpatialEntityRemovedEventArgs = "SpatialEntityRemovedEventArgs";

    static PyObject* _new_SpatialEntityRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialEntityRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_SpatialEntityRemovedEventArgs(py::wrapper::Windows::Perception::Spatial::SpatialEntityRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialEntityRemovedEventArgs_get_Entity(py::wrapper::Windows::Perception::Spatial::SpatialEntityRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Entity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialEntityRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialEntityRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialEntityRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_SpatialEntityRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialEntityRemovedEventArgs[] = {
        { const_cast<char*>("entity"), (getter)SpatialEntityRemovedEventArgs_get_Entity, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialEntityRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_SpatialEntityRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_SpatialEntityRemovedEventArgs },
        { Py_tp_methods, _methods_SpatialEntityRemovedEventArgs },
        { Py_tp_getset, _getset_SpatialEntityRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialEntityRemovedEventArgs =
    {
        "_winrt_Windows_Perception_Spatial.SpatialEntityRemovedEventArgs",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialEntityRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialEntityRemovedEventArgs
    };

    // ----- SpatialEntityStore class --------------------
    constexpr const char* const _type_name_SpatialEntityStore = "SpatialEntityStore";

    static PyObject* _new_SpatialEntityStore(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialEntityStore);
        return nullptr;
    }

    static void _dealloc_SpatialEntityStore(py::wrapper::Windows::Perception::Spatial::SpatialEntityStore* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialEntityStore_CreateEntityWatcher(py::wrapper::Windows::Perception::Spatial::SpatialEntityStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateEntityWatcher());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialEntityStore_RemoveAsync(py::wrapper::Windows::Perception::Spatial::SpatialEntityStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialEntity>(args, 0);

                return py::convert(self->obj.RemoveAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialEntityStore_SaveAsync(py::wrapper::Windows::Perception::Spatial::SpatialEntityStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialEntity>(args, 0);

                return py::convert(self->obj.SaveAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialEntityStore_TryGet(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::RemoteSystems::RemoteSystemSession>(args, 0);

                return py::convert(winrt::Windows::Perception::Spatial::SpatialEntityStore::TryGet(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialEntityStore_get_IsSupported(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Perception::Spatial::SpatialEntityStore::IsSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialEntityStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialEntityStore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialEntityStore[] = {
        { "create_entity_watcher", (PyCFunction)SpatialEntityStore_CreateEntityWatcher, METH_VARARGS, nullptr },
        { "remove_async", (PyCFunction)SpatialEntityStore_RemoveAsync, METH_VARARGS, nullptr },
        { "save_async", (PyCFunction)SpatialEntityStore_SaveAsync, METH_VARARGS, nullptr },
        { "try_get", (PyCFunction)SpatialEntityStore_TryGet, METH_VARARGS | METH_STATIC, nullptr },
        { "get_is_supported", (PyCFunction)SpatialEntityStore_get_IsSupported, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_SpatialEntityStore, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialEntityStore[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialEntityStore[] = 
    {
        { Py_tp_new, _new_SpatialEntityStore },
        { Py_tp_dealloc, _dealloc_SpatialEntityStore },
        { Py_tp_methods, _methods_SpatialEntityStore },
        { Py_tp_getset, _getset_SpatialEntityStore },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialEntityStore =
    {
        "_winrt_Windows_Perception_Spatial.SpatialEntityStore",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialEntityStore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialEntityStore
    };

    // ----- SpatialEntityUpdatedEventArgs class --------------------
    constexpr const char* const _type_name_SpatialEntityUpdatedEventArgs = "SpatialEntityUpdatedEventArgs";

    static PyObject* _new_SpatialEntityUpdatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialEntityUpdatedEventArgs);
        return nullptr;
    }

    static void _dealloc_SpatialEntityUpdatedEventArgs(py::wrapper::Windows::Perception::Spatial::SpatialEntityUpdatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialEntityUpdatedEventArgs_get_Entity(py::wrapper::Windows::Perception::Spatial::SpatialEntityUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Entity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialEntityUpdatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialEntityUpdatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialEntityUpdatedEventArgs[] = {
        { "_from", (PyCFunction)_from_SpatialEntityUpdatedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialEntityUpdatedEventArgs[] = {
        { const_cast<char*>("entity"), (getter)SpatialEntityUpdatedEventArgs_get_Entity, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialEntityUpdatedEventArgs[] = 
    {
        { Py_tp_new, _new_SpatialEntityUpdatedEventArgs },
        { Py_tp_dealloc, _dealloc_SpatialEntityUpdatedEventArgs },
        { Py_tp_methods, _methods_SpatialEntityUpdatedEventArgs },
        { Py_tp_getset, _getset_SpatialEntityUpdatedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialEntityUpdatedEventArgs =
    {
        "_winrt_Windows_Perception_Spatial.SpatialEntityUpdatedEventArgs",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialEntityUpdatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialEntityUpdatedEventArgs
    };

    // ----- SpatialEntityWatcher class --------------------
    constexpr const char* const _type_name_SpatialEntityWatcher = "SpatialEntityWatcher";

    static PyObject* _new_SpatialEntityWatcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialEntityWatcher);
        return nullptr;
    }

    static void _dealloc_SpatialEntityWatcher(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialEntityWatcher_Start(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_Stop(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_get_Status(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_add_Added(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::SpatialEntityWatcher, winrt::Windows::Perception::Spatial::SpatialEntityAddedEventArgs>>(arg);

            return py::convert(self->obj.Added(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_remove_Added(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Added(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_add_EnumerationCompleted(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::SpatialEntityWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.EnumerationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_remove_EnumerationCompleted(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.EnumerationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_add_Removed(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::SpatialEntityWatcher, winrt::Windows::Perception::Spatial::SpatialEntityRemovedEventArgs>>(arg);

            return py::convert(self->obj.Removed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_remove_Removed(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Removed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_add_Updated(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::SpatialEntityWatcher, winrt::Windows::Perception::Spatial::SpatialEntityUpdatedEventArgs>>(arg);

            return py::convert(self->obj.Updated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialEntityWatcher_remove_Updated(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Updated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialEntityWatcher(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialEntityWatcher>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialEntityWatcher[] = {
        { "start", (PyCFunction)SpatialEntityWatcher_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)SpatialEntityWatcher_Stop, METH_VARARGS, nullptr },
        { "add_added", (PyCFunction)SpatialEntityWatcher_add_Added, METH_O, nullptr },
        { "remove_added", (PyCFunction)SpatialEntityWatcher_remove_Added, METH_O, nullptr },
        { "add_enumeration_completed", (PyCFunction)SpatialEntityWatcher_add_EnumerationCompleted, METH_O, nullptr },
        { "remove_enumeration_completed", (PyCFunction)SpatialEntityWatcher_remove_EnumerationCompleted, METH_O, nullptr },
        { "add_removed", (PyCFunction)SpatialEntityWatcher_add_Removed, METH_O, nullptr },
        { "remove_removed", (PyCFunction)SpatialEntityWatcher_remove_Removed, METH_O, nullptr },
        { "add_updated", (PyCFunction)SpatialEntityWatcher_add_Updated, METH_O, nullptr },
        { "remove_updated", (PyCFunction)SpatialEntityWatcher_remove_Updated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SpatialEntityWatcher, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialEntityWatcher[] = {
        { const_cast<char*>("status"), (getter)SpatialEntityWatcher_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialEntityWatcher[] = 
    {
        { Py_tp_new, _new_SpatialEntityWatcher },
        { Py_tp_dealloc, _dealloc_SpatialEntityWatcher },
        { Py_tp_methods, _methods_SpatialEntityWatcher },
        { Py_tp_getset, _getset_SpatialEntityWatcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialEntityWatcher =
    {
        "_winrt_Windows_Perception_Spatial.SpatialEntityWatcher",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialEntityWatcher),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialEntityWatcher
    };

    // ----- SpatialLocation class --------------------
    constexpr const char* const _type_name_SpatialLocation = "SpatialLocation";

    static PyObject* _new_SpatialLocation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialLocation);
        return nullptr;
    }

    static void _dealloc_SpatialLocation(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialLocation_get_AbsoluteAngularAcceleration(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AbsoluteAngularAcceleration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocation_get_AbsoluteAngularVelocity(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AbsoluteAngularVelocity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocation_get_AbsoluteLinearAcceleration(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AbsoluteLinearAcceleration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocation_get_AbsoluteLinearVelocity(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AbsoluteLinearVelocity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocation_get_Orientation(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocation_get_Position(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocation_get_AbsoluteAngularAccelerationAxisAngle(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AbsoluteAngularAccelerationAxisAngle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocation_get_AbsoluteAngularVelocityAxisAngle(py::wrapper::Windows::Perception::Spatial::SpatialLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AbsoluteAngularVelocityAxisAngle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialLocation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialLocation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialLocation[] = {
        { "_from", (PyCFunction)_from_SpatialLocation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialLocation[] = {
        { const_cast<char*>("absolute_angular_acceleration"), (getter)SpatialLocation_get_AbsoluteAngularAcceleration, nullptr, nullptr, nullptr },
        { const_cast<char*>("absolute_angular_velocity"), (getter)SpatialLocation_get_AbsoluteAngularVelocity, nullptr, nullptr, nullptr },
        { const_cast<char*>("absolute_linear_acceleration"), (getter)SpatialLocation_get_AbsoluteLinearAcceleration, nullptr, nullptr, nullptr },
        { const_cast<char*>("absolute_linear_velocity"), (getter)SpatialLocation_get_AbsoluteLinearVelocity, nullptr, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)SpatialLocation_get_Orientation, nullptr, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)SpatialLocation_get_Position, nullptr, nullptr, nullptr },
        { const_cast<char*>("absolute_angular_acceleration_axis_angle"), (getter)SpatialLocation_get_AbsoluteAngularAccelerationAxisAngle, nullptr, nullptr, nullptr },
        { const_cast<char*>("absolute_angular_velocity_axis_angle"), (getter)SpatialLocation_get_AbsoluteAngularVelocityAxisAngle, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialLocation[] = 
    {
        { Py_tp_new, _new_SpatialLocation },
        { Py_tp_dealloc, _dealloc_SpatialLocation },
        { Py_tp_methods, _methods_SpatialLocation },
        { Py_tp_getset, _getset_SpatialLocation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialLocation =
    {
        "_winrt_Windows_Perception_Spatial.SpatialLocation",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialLocation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialLocation
    };

    // ----- SpatialLocator class --------------------
    constexpr const char* const _type_name_SpatialLocator = "SpatialLocator";

    static PyObject* _new_SpatialLocator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialLocator);
        return nullptr;
    }

    static void _dealloc_SpatialLocator(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialLocator_CreateAttachedFrameOfReferenceAtCurrentHeading(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateAttachedFrameOfReferenceAtCurrentHeading());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);

                return py::convert(self->obj.CreateAttachedFrameOfReferenceAtCurrentHeading(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 1);

                return py::convert(self->obj.CreateAttachedFrameOfReferenceAtCurrentHeading(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 1);
                auto param2 = py::convert_to<double>(args, 2);

                return py::convert(self->obj.CreateAttachedFrameOfReferenceAtCurrentHeading(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_CreateStationaryFrameOfReferenceAtCurrentLocation(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateStationaryFrameOfReferenceAtCurrentLocation());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);

                return py::convert(self->obj.CreateStationaryFrameOfReferenceAtCurrentLocation(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 1);

                return py::convert(self->obj.CreateStationaryFrameOfReferenceAtCurrentLocation(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 1);
                auto param2 = py::convert_to<double>(args, 2);

                return py::convert(self->obj.CreateStationaryFrameOfReferenceAtCurrentLocation(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::SpatialLocator::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_TryLocateAtTimestamp(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::PerceptionTimestamp>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 1);

                return py::convert(self->obj.TryLocateAtTimestamp(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_get_Locatability(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Locatability());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_add_LocatabilityChanged(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::SpatialLocator, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.LocatabilityChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_remove_LocatabilityChanged(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LocatabilityChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_add_PositionalTrackingDeactivating(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Perception::Spatial::SpatialLocator, winrt::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs>>(arg);

            return py::convert(self->obj.PositionalTrackingDeactivating(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialLocator_remove_PositionalTrackingDeactivating(py::wrapper::Windows::Perception::Spatial::SpatialLocator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PositionalTrackingDeactivating(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialLocator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialLocator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialLocator[] = {
        { "create_attached_frame_of_reference_at_current_heading", (PyCFunction)SpatialLocator_CreateAttachedFrameOfReferenceAtCurrentHeading, METH_VARARGS, nullptr },
        { "create_stationary_frame_of_reference_at_current_location", (PyCFunction)SpatialLocator_CreateStationaryFrameOfReferenceAtCurrentLocation, METH_VARARGS, nullptr },
        { "get_default", (PyCFunction)SpatialLocator_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "try_locate_at_timestamp", (PyCFunction)SpatialLocator_TryLocateAtTimestamp, METH_VARARGS, nullptr },
        { "add_locatability_changed", (PyCFunction)SpatialLocator_add_LocatabilityChanged, METH_O, nullptr },
        { "remove_locatability_changed", (PyCFunction)SpatialLocator_remove_LocatabilityChanged, METH_O, nullptr },
        { "add_positional_tracking_deactivating", (PyCFunction)SpatialLocator_add_PositionalTrackingDeactivating, METH_O, nullptr },
        { "remove_positional_tracking_deactivating", (PyCFunction)SpatialLocator_remove_PositionalTrackingDeactivating, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SpatialLocator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialLocator[] = {
        { const_cast<char*>("locatability"), (getter)SpatialLocator_get_Locatability, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialLocator[] = 
    {
        { Py_tp_new, _new_SpatialLocator },
        { Py_tp_dealloc, _dealloc_SpatialLocator },
        { Py_tp_methods, _methods_SpatialLocator },
        { Py_tp_getset, _getset_SpatialLocator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialLocator =
    {
        "_winrt_Windows_Perception_Spatial.SpatialLocator",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialLocator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialLocator
    };

    // ----- SpatialLocatorAttachedFrameOfReference class --------------------
    constexpr const char* const _type_name_SpatialLocatorAttachedFrameOfReference = "SpatialLocatorAttachedFrameOfReference";

    static PyObject* _new_SpatialLocatorAttachedFrameOfReference(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialLocatorAttachedFrameOfReference);
        return nullptr;
    }

    static void _dealloc_SpatialLocatorAttachedFrameOfReference(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialLocatorAttachedFrameOfReference_AdjustHeading(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                self->obj.AdjustHeading(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialLocatorAttachedFrameOfReference_GetStationaryCoordinateSystemAtTimestamp(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::PerceptionTimestamp>(args, 0);

                return py::convert(self->obj.GetStationaryCoordinateSystemAtTimestamp(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialLocatorAttachedFrameOfReference_TryGetRelativeHeadingAtTimestamp(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::PerceptionTimestamp>(args, 0);

                return py::convert(self->obj.TryGetRelativeHeadingAtTimestamp(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialLocatorAttachedFrameOfReference_get_RelativePosition(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelativePosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialLocatorAttachedFrameOfReference_put_RelativePosition(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(arg);

            self->obj.RelativePosition(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialLocatorAttachedFrameOfReference_get_RelativeOrientation(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelativeOrientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialLocatorAttachedFrameOfReference_put_RelativeOrientation(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(arg);

            self->obj.RelativeOrientation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SpatialLocatorAttachedFrameOfReference(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialLocatorAttachedFrameOfReference[] = {
        { "adjust_heading", (PyCFunction)SpatialLocatorAttachedFrameOfReference_AdjustHeading, METH_VARARGS, nullptr },
        { "get_stationary_coordinate_system_at_timestamp", (PyCFunction)SpatialLocatorAttachedFrameOfReference_GetStationaryCoordinateSystemAtTimestamp, METH_VARARGS, nullptr },
        { "try_get_relative_heading_at_timestamp", (PyCFunction)SpatialLocatorAttachedFrameOfReference_TryGetRelativeHeadingAtTimestamp, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SpatialLocatorAttachedFrameOfReference, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialLocatorAttachedFrameOfReference[] = {
        { const_cast<char*>("relative_position"), (getter)SpatialLocatorAttachedFrameOfReference_get_RelativePosition, (setter)SpatialLocatorAttachedFrameOfReference_put_RelativePosition, nullptr, nullptr },
        { const_cast<char*>("relative_orientation"), (getter)SpatialLocatorAttachedFrameOfReference_get_RelativeOrientation, (setter)SpatialLocatorAttachedFrameOfReference_put_RelativeOrientation, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialLocatorAttachedFrameOfReference[] = 
    {
        { Py_tp_new, _new_SpatialLocatorAttachedFrameOfReference },
        { Py_tp_dealloc, _dealloc_SpatialLocatorAttachedFrameOfReference },
        { Py_tp_methods, _methods_SpatialLocatorAttachedFrameOfReference },
        { Py_tp_getset, _getset_SpatialLocatorAttachedFrameOfReference },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialLocatorAttachedFrameOfReference =
    {
        "_winrt_Windows_Perception_Spatial.SpatialLocatorAttachedFrameOfReference",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialLocatorAttachedFrameOfReference
    };

    // ----- SpatialLocatorPositionalTrackingDeactivatingEventArgs class --------------------
    constexpr const char* const _type_name_SpatialLocatorPositionalTrackingDeactivatingEventArgs = "SpatialLocatorPositionalTrackingDeactivatingEventArgs";

    static PyObject* _new_SpatialLocatorPositionalTrackingDeactivatingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialLocatorPositionalTrackingDeactivatingEventArgs);
        return nullptr;
    }

    static void _dealloc_SpatialLocatorPositionalTrackingDeactivatingEventArgs(py::wrapper::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialLocatorPositionalTrackingDeactivatingEventArgs_get_Canceled(py::wrapper::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Canceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialLocatorPositionalTrackingDeactivatingEventArgs_put_Canceled(py::wrapper::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Canceled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SpatialLocatorPositionalTrackingDeactivatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialLocatorPositionalTrackingDeactivatingEventArgs[] = {
        { "_from", (PyCFunction)_from_SpatialLocatorPositionalTrackingDeactivatingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialLocatorPositionalTrackingDeactivatingEventArgs[] = {
        { const_cast<char*>("canceled"), (getter)SpatialLocatorPositionalTrackingDeactivatingEventArgs_get_Canceled, (setter)SpatialLocatorPositionalTrackingDeactivatingEventArgs_put_Canceled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialLocatorPositionalTrackingDeactivatingEventArgs[] = 
    {
        { Py_tp_new, _new_SpatialLocatorPositionalTrackingDeactivatingEventArgs },
        { Py_tp_dealloc, _dealloc_SpatialLocatorPositionalTrackingDeactivatingEventArgs },
        { Py_tp_methods, _methods_SpatialLocatorPositionalTrackingDeactivatingEventArgs },
        { Py_tp_getset, _getset_SpatialLocatorPositionalTrackingDeactivatingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialLocatorPositionalTrackingDeactivatingEventArgs =
    {
        "_winrt_Windows_Perception_Spatial.SpatialLocatorPositionalTrackingDeactivatingEventArgs",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialLocatorPositionalTrackingDeactivatingEventArgs
    };

    // ----- SpatialStageFrameOfReference class --------------------
    constexpr const char* const _type_name_SpatialStageFrameOfReference = "SpatialStageFrameOfReference";

    static PyObject* _new_SpatialStageFrameOfReference(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialStageFrameOfReference);
        return nullptr;
    }

    static void _dealloc_SpatialStageFrameOfReference(py::wrapper::Windows::Perception::Spatial::SpatialStageFrameOfReference* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialStageFrameOfReference_GetCoordinateSystemAtCurrentLocation(py::wrapper::Windows::Perception::Spatial::SpatialStageFrameOfReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialLocator>(args, 0);

                return py::convert(self->obj.GetCoordinateSystemAtCurrentLocation(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_RequestNewStageAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::Spatial::SpatialStageFrameOfReference::RequestNewStageAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_TryGetMovementBounds(py::wrapper::Windows::Perception::Spatial::SpatialStageFrameOfReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(self->obj.TryGetMovementBounds(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_get_CoordinateSystem(py::wrapper::Windows::Perception::Spatial::SpatialStageFrameOfReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_get_LookDirectionRange(py::wrapper::Windows::Perception::Spatial::SpatialStageFrameOfReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LookDirectionRange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_get_MovementRange(py::wrapper::Windows::Perception::Spatial::SpatialStageFrameOfReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MovementRange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Perception::Spatial::SpatialStageFrameOfReference::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_add_CurrentChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::Perception::Spatial::SpatialStageFrameOfReference::CurrentChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpatialStageFrameOfReference_remove_CurrentChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Perception::Spatial::SpatialStageFrameOfReference::CurrentChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialStageFrameOfReference(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialStageFrameOfReference>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialStageFrameOfReference[] = {
        { "get_coordinate_system_at_current_location", (PyCFunction)SpatialStageFrameOfReference_GetCoordinateSystemAtCurrentLocation, METH_VARARGS, nullptr },
        { "request_new_stage_async", (PyCFunction)SpatialStageFrameOfReference_RequestNewStageAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_get_movement_bounds", (PyCFunction)SpatialStageFrameOfReference_TryGetMovementBounds, METH_VARARGS, nullptr },
        { "get_current", (PyCFunction)SpatialStageFrameOfReference_get_Current, METH_NOARGS | METH_STATIC, nullptr },
        { "add_current_changed", (PyCFunction)SpatialStageFrameOfReference_add_CurrentChanged, METH_O | METH_STATIC, nullptr },
        { "remove_current_changed", (PyCFunction)SpatialStageFrameOfReference_remove_CurrentChanged, METH_O | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_SpatialStageFrameOfReference, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialStageFrameOfReference[] = {
        { const_cast<char*>("coordinate_system"), (getter)SpatialStageFrameOfReference_get_CoordinateSystem, nullptr, nullptr, nullptr },
        { const_cast<char*>("look_direction_range"), (getter)SpatialStageFrameOfReference_get_LookDirectionRange, nullptr, nullptr, nullptr },
        { const_cast<char*>("movement_range"), (getter)SpatialStageFrameOfReference_get_MovementRange, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialStageFrameOfReference[] = 
    {
        { Py_tp_new, _new_SpatialStageFrameOfReference },
        { Py_tp_dealloc, _dealloc_SpatialStageFrameOfReference },
        { Py_tp_methods, _methods_SpatialStageFrameOfReference },
        { Py_tp_getset, _getset_SpatialStageFrameOfReference },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialStageFrameOfReference =
    {
        "_winrt_Windows_Perception_Spatial.SpatialStageFrameOfReference",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialStageFrameOfReference),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialStageFrameOfReference
    };

    // ----- SpatialStationaryFrameOfReference class --------------------
    constexpr const char* const _type_name_SpatialStationaryFrameOfReference = "SpatialStationaryFrameOfReference";

    static PyObject* _new_SpatialStationaryFrameOfReference(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpatialStationaryFrameOfReference);
        return nullptr;
    }

    static void _dealloc_SpatialStationaryFrameOfReference(py::wrapper::Windows::Perception::Spatial::SpatialStationaryFrameOfReference* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpatialStationaryFrameOfReference_get_CoordinateSystem(py::wrapper::Windows::Perception::Spatial::SpatialStationaryFrameOfReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpatialStationaryFrameOfReference(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::Spatial::SpatialStationaryFrameOfReference>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpatialStationaryFrameOfReference[] = {
        { "_from", (PyCFunction)_from_SpatialStationaryFrameOfReference, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpatialStationaryFrameOfReference[] = {
        { const_cast<char*>("coordinate_system"), (getter)SpatialStationaryFrameOfReference_get_CoordinateSystem, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialStationaryFrameOfReference[] = 
    {
        { Py_tp_new, _new_SpatialStationaryFrameOfReference },
        { Py_tp_dealloc, _dealloc_SpatialStationaryFrameOfReference },
        { Py_tp_methods, _methods_SpatialStationaryFrameOfReference },
        { Py_tp_getset, _getset_SpatialStationaryFrameOfReference },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialStationaryFrameOfReference =
    {
        "_winrt_Windows_Perception_Spatial.SpatialStationaryFrameOfReference",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialStationaryFrameOfReference),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialStationaryFrameOfReference
    };

    // ----- SpatialBoundingBox struct --------------------
    constexpr const char* const _type_name_SpatialBoundingBox = "SpatialBoundingBox";

    PyObject* _new_SpatialBoundingBox(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Perception::Spatial::SpatialBoundingBox return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingBox>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Center{};
        PyObject* _Extents{};

        static const char* kwlist[] = {"center", "extents", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO", const_cast<char**>(kwlist), &_Center, &_Extents))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Perception::Spatial::SpatialBoundingBox return_value{ py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Center), py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Extents) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_SpatialBoundingBox(py::wrapper::Windows::Perception::Spatial::SpatialBoundingBox* self)
    {
    }

    static PyObject* SpatialBoundingBox_get_Center(py::wrapper::Windows::Perception::Spatial::SpatialBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Center);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingBox_set_Center(py::wrapper::Windows::Perception::Spatial::SpatialBoundingBox* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Center = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingBox_get_Extents(py::wrapper::Windows::Perception::Spatial::SpatialBoundingBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Extents);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingBox_set_Extents(py::wrapper::Windows::Perception::Spatial::SpatialBoundingBox* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Extents = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_SpatialBoundingBox[] = {
        { const_cast<char*>("center"), (getter)SpatialBoundingBox_get_Center, (setter)SpatialBoundingBox_set_Center, nullptr, nullptr },
        { const_cast<char*>("extents"), (getter)SpatialBoundingBox_get_Extents, (setter)SpatialBoundingBox_set_Extents, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialBoundingBox[] = 
    {
        { Py_tp_new, _new_SpatialBoundingBox },
        { Py_tp_dealloc, _dealloc_SpatialBoundingBox },
        { Py_tp_getset, _getset_SpatialBoundingBox },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialBoundingBox =
    {
        "_winrt_Windows_Perception_Spatial.SpatialBoundingBox",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialBoundingBox),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialBoundingBox
    };

    // ----- SpatialBoundingFrustum struct --------------------
    constexpr const char* const _type_name_SpatialBoundingFrustum = "SpatialBoundingFrustum";

    PyObject* _new_SpatialBoundingFrustum(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Perception::Spatial::SpatialBoundingFrustum return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Near{};
        PyObject* _Far{};
        PyObject* _Right{};
        PyObject* _Left{};
        PyObject* _Top{};
        PyObject* _Bottom{};

        static const char* kwlist[] = {"near", "far", "right", "left", "top", "bottom", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO", const_cast<char**>(kwlist), &_Near, &_Far, &_Right, &_Left, &_Top, &_Bottom))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Perception::Spatial::SpatialBoundingFrustum return_value{ py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(_Near), py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(_Far), py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(_Right), py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(_Left), py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(_Top), py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(_Bottom) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_SpatialBoundingFrustum(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self)
    {
    }

    static PyObject* SpatialBoundingFrustum_get_Near(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Near);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingFrustum_set_Near(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Near = py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingFrustum_get_Far(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Far);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingFrustum_set_Far(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Far = py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingFrustum_get_Right(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Right);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingFrustum_set_Right(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Right = py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingFrustum_get_Left(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Left);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingFrustum_set_Left(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Left = py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingFrustum_get_Top(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Top);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingFrustum_set_Top(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Top = py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingFrustum_get_Bottom(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bottom);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingFrustum_set_Bottom(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Bottom = py::converter<winrt::Windows::Foundation::Numerics::plane>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_SpatialBoundingFrustum[] = {
        { const_cast<char*>("near"), (getter)SpatialBoundingFrustum_get_Near, (setter)SpatialBoundingFrustum_set_Near, nullptr, nullptr },
        { const_cast<char*>("far"), (getter)SpatialBoundingFrustum_get_Far, (setter)SpatialBoundingFrustum_set_Far, nullptr, nullptr },
        { const_cast<char*>("right"), (getter)SpatialBoundingFrustum_get_Right, (setter)SpatialBoundingFrustum_set_Right, nullptr, nullptr },
        { const_cast<char*>("left"), (getter)SpatialBoundingFrustum_get_Left, (setter)SpatialBoundingFrustum_set_Left, nullptr, nullptr },
        { const_cast<char*>("top"), (getter)SpatialBoundingFrustum_get_Top, (setter)SpatialBoundingFrustum_set_Top, nullptr, nullptr },
        { const_cast<char*>("bottom"), (getter)SpatialBoundingFrustum_get_Bottom, (setter)SpatialBoundingFrustum_set_Bottom, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialBoundingFrustum[] = 
    {
        { Py_tp_new, _new_SpatialBoundingFrustum },
        { Py_tp_dealloc, _dealloc_SpatialBoundingFrustum },
        { Py_tp_getset, _getset_SpatialBoundingFrustum },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialBoundingFrustum =
    {
        "_winrt_Windows_Perception_Spatial.SpatialBoundingFrustum",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialBoundingFrustum),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialBoundingFrustum
    };

    // ----- SpatialBoundingOrientedBox struct --------------------
    constexpr const char* const _type_name_SpatialBoundingOrientedBox = "SpatialBoundingOrientedBox";

    PyObject* _new_SpatialBoundingOrientedBox(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Center{};
        PyObject* _Extents{};
        PyObject* _Orientation{};

        static const char* kwlist[] = {"center", "extents", "orientation", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOO", const_cast<char**>(kwlist), &_Center, &_Extents, &_Orientation))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox return_value{ py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Center), py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Extents), py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(_Orientation) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_SpatialBoundingOrientedBox(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox* self)
    {
    }

    static PyObject* SpatialBoundingOrientedBox_get_Center(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Center);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingOrientedBox_set_Center(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Center = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingOrientedBox_get_Extents(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Extents);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingOrientedBox_set_Extents(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Extents = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingOrientedBox_get_Orientation(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingOrientedBox_set_Orientation(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Orientation = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_SpatialBoundingOrientedBox[] = {
        { const_cast<char*>("center"), (getter)SpatialBoundingOrientedBox_get_Center, (setter)SpatialBoundingOrientedBox_set_Center, nullptr, nullptr },
        { const_cast<char*>("extents"), (getter)SpatialBoundingOrientedBox_get_Extents, (setter)SpatialBoundingOrientedBox_set_Extents, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)SpatialBoundingOrientedBox_get_Orientation, (setter)SpatialBoundingOrientedBox_set_Orientation, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialBoundingOrientedBox[] = 
    {
        { Py_tp_new, _new_SpatialBoundingOrientedBox },
        { Py_tp_dealloc, _dealloc_SpatialBoundingOrientedBox },
        { Py_tp_getset, _getset_SpatialBoundingOrientedBox },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialBoundingOrientedBox =
    {
        "_winrt_Windows_Perception_Spatial.SpatialBoundingOrientedBox",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialBoundingOrientedBox),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialBoundingOrientedBox
    };

    // ----- SpatialBoundingSphere struct --------------------
    constexpr const char* const _type_name_SpatialBoundingSphere = "SpatialBoundingSphere";

    PyObject* _new_SpatialBoundingSphere(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Perception::Spatial::SpatialBoundingSphere return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Center{};
        float _Radius{};

        static const char* kwlist[] = {"center", "radius", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "Of", const_cast<char**>(kwlist), &_Center, &_Radius))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Perception::Spatial::SpatialBoundingSphere return_value{ py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Center), _Radius };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_SpatialBoundingSphere(py::wrapper::Windows::Perception::Spatial::SpatialBoundingSphere* self)
    {
    }

    static PyObject* SpatialBoundingSphere_get_Center(py::wrapper::Windows::Perception::Spatial::SpatialBoundingSphere* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Center);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingSphere_set_Center(py::wrapper::Windows::Perception::Spatial::SpatialBoundingSphere* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Center = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialBoundingSphere_get_Radius(py::wrapper::Windows::Perception::Spatial::SpatialBoundingSphere* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Radius);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialBoundingSphere_set_Radius(py::wrapper::Windows::Perception::Spatial::SpatialBoundingSphere* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Radius = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_SpatialBoundingSphere[] = {
        { const_cast<char*>("center"), (getter)SpatialBoundingSphere_get_Center, (setter)SpatialBoundingSphere_set_Center, nullptr, nullptr },
        { const_cast<char*>("radius"), (getter)SpatialBoundingSphere_get_Radius, (setter)SpatialBoundingSphere_set_Radius, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialBoundingSphere[] = 
    {
        { Py_tp_new, _new_SpatialBoundingSphere },
        { Py_tp_dealloc, _dealloc_SpatialBoundingSphere },
        { Py_tp_getset, _getset_SpatialBoundingSphere },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialBoundingSphere =
    {
        "_winrt_Windows_Perception_Spatial.SpatialBoundingSphere",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialBoundingSphere),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialBoundingSphere
    };

    // ----- SpatialRay struct --------------------
    constexpr const char* const _type_name_SpatialRay = "SpatialRay";

    PyObject* _new_SpatialRay(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Perception::Spatial::SpatialRay return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Perception::Spatial::SpatialRay>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Origin{};
        PyObject* _Direction{};

        static const char* kwlist[] = {"origin", "direction", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO", const_cast<char**>(kwlist), &_Origin, &_Direction))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Perception::Spatial::SpatialRay return_value{ py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Origin), py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Direction) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_SpatialRay(py::wrapper::Windows::Perception::Spatial::SpatialRay* self)
    {
    }

    static PyObject* SpatialRay_get_Origin(py::wrapper::Windows::Perception::Spatial::SpatialRay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Origin);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialRay_set_Origin(py::wrapper::Windows::Perception::Spatial::SpatialRay* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Origin = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpatialRay_get_Direction(py::wrapper::Windows::Perception::Spatial::SpatialRay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Direction);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpatialRay_set_Direction(py::wrapper::Windows::Perception::Spatial::SpatialRay* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Direction = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_SpatialRay[] = {
        { const_cast<char*>("origin"), (getter)SpatialRay_get_Origin, (setter)SpatialRay_set_Origin, nullptr, nullptr },
        { const_cast<char*>("direction"), (getter)SpatialRay_get_Direction, (setter)SpatialRay_set_Direction, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpatialRay[] = 
    {
        { Py_tp_new, _new_SpatialRay },
        { Py_tp_dealloc, _dealloc_SpatialRay },
        { Py_tp_getset, _getset_SpatialRay },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpatialRay =
    {
        "_winrt_Windows_Perception_Spatial.SpatialRay",
        sizeof(py::wrapper::Windows::Perception::Spatial::SpatialRay),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpatialRay
    };

    // ----- Windows.Perception.Spatial Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchor>::python_type = py::register_python_type(module, _type_name_SpatialAnchor, &_type_spec_SpatialAnchor, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorExportSufficiency>::python_type = py::register_python_type(module, _type_name_SpatialAnchorExportSufficiency, &_type_spec_SpatialAnchorExportSufficiency, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorExporter>::python_type = py::register_python_type(module, _type_name_SpatialAnchorExporter, &_type_spec_SpatialAnchorExporter, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorManager>::python_type = py::register_python_type(module, _type_name_SpatialAnchorManager, &_type_spec_SpatialAnchorManager, nullptr);
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs>::python_type = py::register_python_type(module, _type_name_SpatialAnchorRawCoordinateSystemAdjustedEventArgs, &_type_spec_SpatialAnchorRawCoordinateSystemAdjustedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorStore>::python_type = py::register_python_type(module, _type_name_SpatialAnchorStore, &_type_spec_SpatialAnchorStore, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialAnchorTransferManager>::python_type = py::register_python_type(module, _type_name_SpatialAnchorTransferManager, &_type_spec_SpatialAnchorTransferManager, nullptr);
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingVolume>::python_type = py::register_python_type(module, _type_name_SpatialBoundingVolume, &_type_spec_SpatialBoundingVolume, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>::python_type = py::register_python_type(module, _type_name_SpatialCoordinateSystem, &_type_spec_SpatialCoordinateSystem, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntity>::python_type = py::register_python_type(module, _type_name_SpatialEntity, &_type_spec_SpatialEntity, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityAddedEventArgs>::python_type = py::register_python_type(module, _type_name_SpatialEntityAddedEventArgs, &_type_spec_SpatialEntityAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_SpatialEntityRemovedEventArgs, &_type_spec_SpatialEntityRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityStore>::python_type = py::register_python_type(module, _type_name_SpatialEntityStore, &_type_spec_SpatialEntityStore, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityUpdatedEventArgs>::python_type = py::register_python_type(module, _type_name_SpatialEntityUpdatedEventArgs, &_type_spec_SpatialEntityUpdatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialEntityWatcher>::python_type = py::register_python_type(module, _type_name_SpatialEntityWatcher, &_type_spec_SpatialEntityWatcher, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocation>::python_type = py::register_python_type(module, _type_name_SpatialLocation, &_type_spec_SpatialLocation, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocator>::python_type = py::register_python_type(module, _type_name_SpatialLocator, &_type_spec_SpatialLocator, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference>::python_type = py::register_python_type(module, _type_name_SpatialLocatorAttachedFrameOfReference, &_type_spec_SpatialLocatorAttachedFrameOfReference, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs>::python_type = py::register_python_type(module, _type_name_SpatialLocatorPositionalTrackingDeactivatingEventArgs, &_type_spec_SpatialLocatorPositionalTrackingDeactivatingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialStageFrameOfReference>::python_type = py::register_python_type(module, _type_name_SpatialStageFrameOfReference, &_type_spec_SpatialStageFrameOfReference, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialStationaryFrameOfReference>::python_type = py::register_python_type(module, _type_name_SpatialStationaryFrameOfReference, &_type_spec_SpatialStationaryFrameOfReference, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingBox>::python_type = py::register_python_type(module, _type_name_SpatialBoundingBox, &_type_spec_SpatialBoundingBox, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum>::python_type = py::register_python_type(module, _type_name_SpatialBoundingFrustum, &_type_spec_SpatialBoundingFrustum, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox>::python_type = py::register_python_type(module, _type_name_SpatialBoundingOrientedBox, &_type_spec_SpatialBoundingOrientedBox, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialBoundingSphere>::python_type = py::register_python_type(module, _type_name_SpatialBoundingSphere, &_type_spec_SpatialBoundingSphere, bases.get());
            py::winrt_type<winrt::Windows::Perception::Spatial::SpatialRay>::python_type = py::register_python_type(module, _type_name_SpatialRay, &_type_spec_SpatialRay, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Perception.Spatial");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Perception_Spatial",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Perception::Spatial

PyMODINIT_FUNC
PyInit__winrt_Windows_Perception_Spatial (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Perception::Spatial::module_def);
}
