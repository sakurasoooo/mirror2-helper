// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Storage.FileProperties.h"

PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::BasicProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::DocumentProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::GeotagHelper>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::ImageProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::MusicProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::StorageItemContentProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::StorageItemThumbnail>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::VideoProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::FileProperties::IStorageItemExtraProperties>::python_type;

namespace py::cpp::Windows::Storage::FileProperties
{
    // ----- BasicProperties class --------------------
    constexpr const char* const _type_name_BasicProperties = "BasicProperties";

    static PyObject* _new_BasicProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_BasicProperties);
        return nullptr;
    }

    static void _dealloc_BasicProperties(py::wrapper::Windows::Storage::FileProperties::BasicProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* BasicProperties_RetrievePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::BasicProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.RetrievePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* BasicProperties_SavePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::BasicProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SavePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Foundation::IInspectable>>>(args, 0);

                return py::convert(self->obj.SavePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* BasicProperties_get_DateModified(py::wrapper::Windows::Storage::FileProperties::BasicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DateModified());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BasicProperties_get_ItemDate(py::wrapper::Windows::Storage::FileProperties::BasicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ItemDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BasicProperties_get_Size(py::wrapper::Windows::Storage::FileProperties::BasicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_BasicProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::BasicProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BasicProperties[] = {
        { "retrieve_properties_async", (PyCFunction)BasicProperties_RetrievePropertiesAsync, METH_VARARGS, nullptr },
        { "save_properties_async", (PyCFunction)BasicProperties_SavePropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_BasicProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_BasicProperties[] = {
        { const_cast<char*>("date_modified"), (getter)BasicProperties_get_DateModified, nullptr, nullptr, nullptr },
        { const_cast<char*>("item_date"), (getter)BasicProperties_get_ItemDate, nullptr, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)BasicProperties_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_BasicProperties[] = 
    {
        { Py_tp_new, _new_BasicProperties },
        { Py_tp_dealloc, _dealloc_BasicProperties },
        { Py_tp_methods, _methods_BasicProperties },
        { Py_tp_getset, _getset_BasicProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_BasicProperties =
    {
        "_winrt_Windows_Storage_FileProperties.BasicProperties",
        sizeof(py::wrapper::Windows::Storage::FileProperties::BasicProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BasicProperties
    };

    // ----- DocumentProperties class --------------------
    constexpr const char* const _type_name_DocumentProperties = "DocumentProperties";

    static PyObject* _new_DocumentProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DocumentProperties);
        return nullptr;
    }

    static void _dealloc_DocumentProperties(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DocumentProperties_RetrievePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.RetrievePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DocumentProperties_SavePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SavePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Foundation::IInspectable>>>(args, 0);

                return py::convert(self->obj.SavePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DocumentProperties_get_Title(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DocumentProperties_put_Title(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DocumentProperties_get_Comment(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Comment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DocumentProperties_put_Comment(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Comment(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DocumentProperties_get_Author(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Author());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DocumentProperties_get_Keywords(py::wrapper::Windows::Storage::FileProperties::DocumentProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Keywords());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DocumentProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::DocumentProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DocumentProperties[] = {
        { "retrieve_properties_async", (PyCFunction)DocumentProperties_RetrievePropertiesAsync, METH_VARARGS, nullptr },
        { "save_properties_async", (PyCFunction)DocumentProperties_SavePropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_DocumentProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DocumentProperties[] = {
        { const_cast<char*>("title"), (getter)DocumentProperties_get_Title, (setter)DocumentProperties_put_Title, nullptr, nullptr },
        { const_cast<char*>("comment"), (getter)DocumentProperties_get_Comment, (setter)DocumentProperties_put_Comment, nullptr, nullptr },
        { const_cast<char*>("author"), (getter)DocumentProperties_get_Author, nullptr, nullptr, nullptr },
        { const_cast<char*>("keywords"), (getter)DocumentProperties_get_Keywords, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DocumentProperties[] = 
    {
        { Py_tp_new, _new_DocumentProperties },
        { Py_tp_dealloc, _dealloc_DocumentProperties },
        { Py_tp_methods, _methods_DocumentProperties },
        { Py_tp_getset, _getset_DocumentProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DocumentProperties =
    {
        "_winrt_Windows_Storage_FileProperties.DocumentProperties",
        sizeof(py::wrapper::Windows::Storage::FileProperties::DocumentProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DocumentProperties
    };

    // ----- GeotagHelper class --------------------
    constexpr const char* const _type_name_GeotagHelper = "GeotagHelper";

    static PyObject* _new_GeotagHelper(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GeotagHelper);
        return nullptr;
    }

    static PyObject* GeotagHelper_GetGeotagAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(winrt::Windows::Storage::FileProperties::GeotagHelper::GetGeotagAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GeotagHelper_SetGeotagAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);

                return py::convert(winrt::Windows::Storage::FileProperties::GeotagHelper::SetGeotagAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GeotagHelper_SetGeotagFromGeolocatorAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geolocator>(args, 1);

                return py::convert(winrt::Windows::Storage::FileProperties::GeotagHelper::SetGeotagFromGeolocatorAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_GeotagHelper[] = {
        { "get_geotag_async", (PyCFunction)GeotagHelper_GetGeotagAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "set_geotag_async", (PyCFunction)GeotagHelper_SetGeotagAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "set_geotag_from_geolocator_async", (PyCFunction)GeotagHelper_SetGeotagFromGeolocatorAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GeotagHelper[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_GeotagHelper[] = 
    {
        { Py_tp_new, _new_GeotagHelper },
        { Py_tp_methods, _methods_GeotagHelper },
        { Py_tp_getset, _getset_GeotagHelper },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GeotagHelper =
    {
        "_winrt_Windows_Storage_FileProperties.GeotagHelper",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GeotagHelper
    };

    // ----- ImageProperties class --------------------
    constexpr const char* const _type_name_ImageProperties = "ImageProperties";

    static PyObject* _new_ImageProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ImageProperties);
        return nullptr;
    }

    static void _dealloc_ImageProperties(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ImageProperties_RetrievePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.RetrievePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageProperties_SavePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SavePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Foundation::IInspectable>>>(args, 0);

                return py::convert(self->obj.SavePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ImageProperties_get_Title(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ImageProperties_put_Title(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ImageProperties_get_Rating(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Rating());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ImageProperties_put_Rating(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Rating(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ImageProperties_get_DateTaken(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DateTaken());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ImageProperties_put_DateTaken(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.DateTaken(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ImageProperties_get_CameraModel(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CameraModel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ImageProperties_put_CameraModel(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CameraModel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ImageProperties_get_CameraManufacturer(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CameraManufacturer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ImageProperties_put_CameraManufacturer(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CameraManufacturer(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ImageProperties_get_Height(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageProperties_get_Keywords(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Keywords());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageProperties_get_Latitude(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Latitude());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageProperties_get_Longitude(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Longitude());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageProperties_get_Orientation(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageProperties_get_PeopleNames(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeopleNames());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ImageProperties_get_Width(py::wrapper::Windows::Storage::FileProperties::ImageProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Width());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ImageProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::ImageProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ImageProperties[] = {
        { "retrieve_properties_async", (PyCFunction)ImageProperties_RetrievePropertiesAsync, METH_VARARGS, nullptr },
        { "save_properties_async", (PyCFunction)ImageProperties_SavePropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ImageProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ImageProperties[] = {
        { const_cast<char*>("title"), (getter)ImageProperties_get_Title, (setter)ImageProperties_put_Title, nullptr, nullptr },
        { const_cast<char*>("rating"), (getter)ImageProperties_get_Rating, (setter)ImageProperties_put_Rating, nullptr, nullptr },
        { const_cast<char*>("date_taken"), (getter)ImageProperties_get_DateTaken, (setter)ImageProperties_put_DateTaken, nullptr, nullptr },
        { const_cast<char*>("camera_model"), (getter)ImageProperties_get_CameraModel, (setter)ImageProperties_put_CameraModel, nullptr, nullptr },
        { const_cast<char*>("camera_manufacturer"), (getter)ImageProperties_get_CameraManufacturer, (setter)ImageProperties_put_CameraManufacturer, nullptr, nullptr },
        { const_cast<char*>("height"), (getter)ImageProperties_get_Height, nullptr, nullptr, nullptr },
        { const_cast<char*>("keywords"), (getter)ImageProperties_get_Keywords, nullptr, nullptr, nullptr },
        { const_cast<char*>("latitude"), (getter)ImageProperties_get_Latitude, nullptr, nullptr, nullptr },
        { const_cast<char*>("longitude"), (getter)ImageProperties_get_Longitude, nullptr, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)ImageProperties_get_Orientation, nullptr, nullptr, nullptr },
        { const_cast<char*>("people_names"), (getter)ImageProperties_get_PeopleNames, nullptr, nullptr, nullptr },
        { const_cast<char*>("width"), (getter)ImageProperties_get_Width, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ImageProperties[] = 
    {
        { Py_tp_new, _new_ImageProperties },
        { Py_tp_dealloc, _dealloc_ImageProperties },
        { Py_tp_methods, _methods_ImageProperties },
        { Py_tp_getset, _getset_ImageProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ImageProperties =
    {
        "_winrt_Windows_Storage_FileProperties.ImageProperties",
        sizeof(py::wrapper::Windows::Storage::FileProperties::ImageProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ImageProperties
    };

    // ----- MusicProperties class --------------------
    constexpr const char* const _type_name_MusicProperties = "MusicProperties";

    static PyObject* _new_MusicProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MusicProperties);
        return nullptr;
    }

    static void _dealloc_MusicProperties(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MusicProperties_RetrievePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.RetrievePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MusicProperties_SavePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SavePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Foundation::IInspectable>>>(args, 0);

                return py::convert(self->obj.SavePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MusicProperties_get_Year(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Year());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_Year(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Year(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_TrackNumber(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TrackNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_TrackNumber(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.TrackNumber(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_Title(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_Title(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_Subtitle(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subtitle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_Subtitle(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Subtitle(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_Rating(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Rating());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_Rating(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Rating(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_Publisher(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Publisher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_Publisher(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Publisher(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_Artist(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Artist());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_Artist(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Artist(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_AlbumArtist(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlbumArtist());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_AlbumArtist(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AlbumArtist(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_Album(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Album());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MusicProperties_put_Album(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Album(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MusicProperties_get_Bitrate(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bitrate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MusicProperties_get_Composers(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Composers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MusicProperties_get_Conductors(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Conductors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MusicProperties_get_Duration(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MusicProperties_get_Genre(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Genre());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MusicProperties_get_Producers(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Producers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MusicProperties_get_Writers(py::wrapper::Windows::Storage::FileProperties::MusicProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Writers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MusicProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::MusicProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MusicProperties[] = {
        { "retrieve_properties_async", (PyCFunction)MusicProperties_RetrievePropertiesAsync, METH_VARARGS, nullptr },
        { "save_properties_async", (PyCFunction)MusicProperties_SavePropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MusicProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MusicProperties[] = {
        { const_cast<char*>("year"), (getter)MusicProperties_get_Year, (setter)MusicProperties_put_Year, nullptr, nullptr },
        { const_cast<char*>("track_number"), (getter)MusicProperties_get_TrackNumber, (setter)MusicProperties_put_TrackNumber, nullptr, nullptr },
        { const_cast<char*>("title"), (getter)MusicProperties_get_Title, (setter)MusicProperties_put_Title, nullptr, nullptr },
        { const_cast<char*>("subtitle"), (getter)MusicProperties_get_Subtitle, (setter)MusicProperties_put_Subtitle, nullptr, nullptr },
        { const_cast<char*>("rating"), (getter)MusicProperties_get_Rating, (setter)MusicProperties_put_Rating, nullptr, nullptr },
        { const_cast<char*>("publisher"), (getter)MusicProperties_get_Publisher, (setter)MusicProperties_put_Publisher, nullptr, nullptr },
        { const_cast<char*>("artist"), (getter)MusicProperties_get_Artist, (setter)MusicProperties_put_Artist, nullptr, nullptr },
        { const_cast<char*>("album_artist"), (getter)MusicProperties_get_AlbumArtist, (setter)MusicProperties_put_AlbumArtist, nullptr, nullptr },
        { const_cast<char*>("album"), (getter)MusicProperties_get_Album, (setter)MusicProperties_put_Album, nullptr, nullptr },
        { const_cast<char*>("bitrate"), (getter)MusicProperties_get_Bitrate, nullptr, nullptr, nullptr },
        { const_cast<char*>("composers"), (getter)MusicProperties_get_Composers, nullptr, nullptr, nullptr },
        { const_cast<char*>("conductors"), (getter)MusicProperties_get_Conductors, nullptr, nullptr, nullptr },
        { const_cast<char*>("duration"), (getter)MusicProperties_get_Duration, nullptr, nullptr, nullptr },
        { const_cast<char*>("genre"), (getter)MusicProperties_get_Genre, nullptr, nullptr, nullptr },
        { const_cast<char*>("producers"), (getter)MusicProperties_get_Producers, nullptr, nullptr, nullptr },
        { const_cast<char*>("writers"), (getter)MusicProperties_get_Writers, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MusicProperties[] = 
    {
        { Py_tp_new, _new_MusicProperties },
        { Py_tp_dealloc, _dealloc_MusicProperties },
        { Py_tp_methods, _methods_MusicProperties },
        { Py_tp_getset, _getset_MusicProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MusicProperties =
    {
        "_winrt_Windows_Storage_FileProperties.MusicProperties",
        sizeof(py::wrapper::Windows::Storage::FileProperties::MusicProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MusicProperties
    };

    // ----- StorageItemContentProperties class --------------------
    constexpr const char* const _type_name_StorageItemContentProperties = "StorageItemContentProperties";

    static PyObject* _new_StorageItemContentProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorageItemContentProperties);
        return nullptr;
    }

    static void _dealloc_StorageItemContentProperties(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StorageItemContentProperties_GetDocumentPropertiesAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDocumentPropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemContentProperties_GetImagePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetImagePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemContentProperties_GetMusicPropertiesAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetMusicPropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemContentProperties_GetVideoPropertiesAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetVideoPropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemContentProperties_RetrievePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.RetrievePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemContentProperties_SavePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SavePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Foundation::IInspectable>>>(args, 0);

                return py::convert(self->obj.SavePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_StorageItemContentProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::StorageItemContentProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemContentProperties[] = {
        { "get_document_properties_async", (PyCFunction)StorageItemContentProperties_GetDocumentPropertiesAsync, METH_VARARGS, nullptr },
        { "get_image_properties_async", (PyCFunction)StorageItemContentProperties_GetImagePropertiesAsync, METH_VARARGS, nullptr },
        { "get_music_properties_async", (PyCFunction)StorageItemContentProperties_GetMusicPropertiesAsync, METH_VARARGS, nullptr },
        { "get_video_properties_async", (PyCFunction)StorageItemContentProperties_GetVideoPropertiesAsync, METH_VARARGS, nullptr },
        { "retrieve_properties_async", (PyCFunction)StorageItemContentProperties_RetrievePropertiesAsync, METH_VARARGS, nullptr },
        { "save_properties_async", (PyCFunction)StorageItemContentProperties_SavePropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_StorageItemContentProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorageItemContentProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_StorageItemContentProperties[] = 
    {
        { Py_tp_new, _new_StorageItemContentProperties },
        { Py_tp_dealloc, _dealloc_StorageItemContentProperties },
        { Py_tp_methods, _methods_StorageItemContentProperties },
        { Py_tp_getset, _getset_StorageItemContentProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorageItemContentProperties =
    {
        "_winrt_Windows_Storage_FileProperties.StorageItemContentProperties",
        sizeof(py::wrapper::Windows::Storage::FileProperties::StorageItemContentProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemContentProperties
    };

    // ----- StorageItemThumbnail class --------------------
    constexpr const char* const _type_name_StorageItemThumbnail = "StorageItemThumbnail";

    static PyObject* _new_StorageItemThumbnail(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorageItemThumbnail);
        return nullptr;
    }

    static void _dealloc_StorageItemThumbnail(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StorageItemThumbnail_CloneStream(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CloneStream());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_Close(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_FlushAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FlushAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_GetInputStreamAt(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.GetInputStreamAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_GetOutputStreamAt(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.GetOutputStreamAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_ReadAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::InputStreamOptions>(args, 2);

                return py::convert(self->obj.ReadAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_Seek(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                self->obj.Seek(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_WriteAsync(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(self->obj.WriteAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_OriginalHeight(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OriginalHeight());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_OriginalWidth(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OriginalWidth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_ReturnedSmallerCachedSize(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ReturnedSmallerCachedSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_Type(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_ContentType(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContentType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_Size(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int StorageItemThumbnail_put_Size(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint64_t>(arg);

            self->obj.Size(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* StorageItemThumbnail_get_CanRead(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanRead());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_CanWrite(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanWrite());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemThumbnail_get_Position(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StorageItemThumbnail(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::StorageItemThumbnail>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_StorageItemThumbnail(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_StorageItemThumbnail(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemThumbnail[] = {
        { "clone_stream", (PyCFunction)StorageItemThumbnail_CloneStream, METH_VARARGS, nullptr },
        { "close", (PyCFunction)StorageItemThumbnail_Close, METH_VARARGS, nullptr },
        { "flush_async", (PyCFunction)StorageItemThumbnail_FlushAsync, METH_VARARGS, nullptr },
        { "get_input_stream_at", (PyCFunction)StorageItemThumbnail_GetInputStreamAt, METH_VARARGS, nullptr },
        { "get_output_stream_at", (PyCFunction)StorageItemThumbnail_GetOutputStreamAt, METH_VARARGS, nullptr },
        { "read_async", (PyCFunction)StorageItemThumbnail_ReadAsync, METH_VARARGS, nullptr },
        { "seek", (PyCFunction)StorageItemThumbnail_Seek, METH_VARARGS, nullptr },
        { "write_async", (PyCFunction)StorageItemThumbnail_WriteAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_StorageItemThumbnail, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_StorageItemThumbnail, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_StorageItemThumbnail, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorageItemThumbnail[] = {
        { const_cast<char*>("original_height"), (getter)StorageItemThumbnail_get_OriginalHeight, nullptr, nullptr, nullptr },
        { const_cast<char*>("original_width"), (getter)StorageItemThumbnail_get_OriginalWidth, nullptr, nullptr, nullptr },
        { const_cast<char*>("returned_smaller_cached_size"), (getter)StorageItemThumbnail_get_ReturnedSmallerCachedSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)StorageItemThumbnail_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("content_type"), (getter)StorageItemThumbnail_get_ContentType, nullptr, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)StorageItemThumbnail_get_Size, (setter)StorageItemThumbnail_put_Size, nullptr, nullptr },
        { const_cast<char*>("can_read"), (getter)StorageItemThumbnail_get_CanRead, nullptr, nullptr, nullptr },
        { const_cast<char*>("can_write"), (getter)StorageItemThumbnail_get_CanWrite, nullptr, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)StorageItemThumbnail_get_Position, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StorageItemThumbnail[] = 
    {
        { Py_tp_new, _new_StorageItemThumbnail },
        { Py_tp_dealloc, _dealloc_StorageItemThumbnail },
        { Py_tp_methods, _methods_StorageItemThumbnail },
        { Py_tp_getset, _getset_StorageItemThumbnail },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorageItemThumbnail =
    {
        "_winrt_Windows_Storage_FileProperties.StorageItemThumbnail",
        sizeof(py::wrapper::Windows::Storage::FileProperties::StorageItemThumbnail),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemThumbnail
    };

    // ----- VideoProperties class --------------------
    constexpr const char* const _type_name_VideoProperties = "VideoProperties";

    static PyObject* _new_VideoProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VideoProperties);
        return nullptr;
    }

    static void _dealloc_VideoProperties(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VideoProperties_RetrievePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.RetrievePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VideoProperties_SavePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SavePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Foundation::IInspectable>>>(args, 0);

                return py::convert(self->obj.SavePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Year(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Year());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VideoProperties_put_Year(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Year(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VideoProperties_get_Title(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VideoProperties_put_Title(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VideoProperties_get_Subtitle(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subtitle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VideoProperties_put_Subtitle(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Subtitle(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VideoProperties_get_Rating(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Rating());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VideoProperties_put_Rating(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Rating(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VideoProperties_get_Publisher(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Publisher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VideoProperties_put_Publisher(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Publisher(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VideoProperties_get_Bitrate(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bitrate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Directors(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Directors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Duration(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Height(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Keywords(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Keywords());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Latitude(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Latitude());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Longitude(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Longitude());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Orientation(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Producers(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Producers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Width(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Width());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoProperties_get_Writers(py::wrapper::Windows::Storage::FileProperties::VideoProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Writers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VideoProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::VideoProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VideoProperties[] = {
        { "retrieve_properties_async", (PyCFunction)VideoProperties_RetrievePropertiesAsync, METH_VARARGS, nullptr },
        { "save_properties_async", (PyCFunction)VideoProperties_SavePropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_VideoProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VideoProperties[] = {
        { const_cast<char*>("year"), (getter)VideoProperties_get_Year, (setter)VideoProperties_put_Year, nullptr, nullptr },
        { const_cast<char*>("title"), (getter)VideoProperties_get_Title, (setter)VideoProperties_put_Title, nullptr, nullptr },
        { const_cast<char*>("subtitle"), (getter)VideoProperties_get_Subtitle, (setter)VideoProperties_put_Subtitle, nullptr, nullptr },
        { const_cast<char*>("rating"), (getter)VideoProperties_get_Rating, (setter)VideoProperties_put_Rating, nullptr, nullptr },
        { const_cast<char*>("publisher"), (getter)VideoProperties_get_Publisher, (setter)VideoProperties_put_Publisher, nullptr, nullptr },
        { const_cast<char*>("bitrate"), (getter)VideoProperties_get_Bitrate, nullptr, nullptr, nullptr },
        { const_cast<char*>("directors"), (getter)VideoProperties_get_Directors, nullptr, nullptr, nullptr },
        { const_cast<char*>("duration"), (getter)VideoProperties_get_Duration, nullptr, nullptr, nullptr },
        { const_cast<char*>("height"), (getter)VideoProperties_get_Height, nullptr, nullptr, nullptr },
        { const_cast<char*>("keywords"), (getter)VideoProperties_get_Keywords, nullptr, nullptr, nullptr },
        { const_cast<char*>("latitude"), (getter)VideoProperties_get_Latitude, nullptr, nullptr, nullptr },
        { const_cast<char*>("longitude"), (getter)VideoProperties_get_Longitude, nullptr, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)VideoProperties_get_Orientation, nullptr, nullptr, nullptr },
        { const_cast<char*>("producers"), (getter)VideoProperties_get_Producers, nullptr, nullptr, nullptr },
        { const_cast<char*>("width"), (getter)VideoProperties_get_Width, nullptr, nullptr, nullptr },
        { const_cast<char*>("writers"), (getter)VideoProperties_get_Writers, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VideoProperties[] = 
    {
        { Py_tp_new, _new_VideoProperties },
        { Py_tp_dealloc, _dealloc_VideoProperties },
        { Py_tp_methods, _methods_VideoProperties },
        { Py_tp_getset, _getset_VideoProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VideoProperties =
    {
        "_winrt_Windows_Storage_FileProperties.VideoProperties",
        sizeof(py::wrapper::Windows::Storage::FileProperties::VideoProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VideoProperties
    };

    // ----- IStorageItemExtraProperties interface --------------------
    constexpr const char* const _type_name_IStorageItemExtraProperties = "IStorageItemExtraProperties";

    static PyObject* _new_IStorageItemExtraProperties(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IStorageItemExtraProperties);
        return nullptr;
    }

    static void _dealloc_IStorageItemExtraProperties(py::wrapper::Windows::Storage::FileProperties::IStorageItemExtraProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IStorageItemExtraProperties_RetrievePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::IStorageItemExtraProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(self->obj.RetrievePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemExtraProperties_SavePropertiesAsync(py::wrapper::Windows::Storage::FileProperties::IStorageItemExtraProperties* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SavePropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::Foundation::IInspectable>>>(args, 0);

                return py::convert(self->obj.SavePropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IStorageItemExtraProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::FileProperties::IStorageItemExtraProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IStorageItemExtraProperties[] = {
        { "retrieve_properties_async", (PyCFunction)IStorageItemExtraProperties_RetrievePropertiesAsync, METH_VARARGS, nullptr },
        { "save_properties_async", (PyCFunction)IStorageItemExtraProperties_SavePropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IStorageItemExtraProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IStorageItemExtraProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IStorageItemExtraProperties[] = 
    {
        { Py_tp_new, _new_IStorageItemExtraProperties },
        { Py_tp_dealloc, _dealloc_IStorageItemExtraProperties },
        { Py_tp_methods, _methods_IStorageItemExtraProperties },
        { Py_tp_getset, _getset_IStorageItemExtraProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IStorageItemExtraProperties =
    {
        "_winrt_Windows_Storage_FileProperties.IStorageItemExtraProperties",
        sizeof(py::wrapper::Windows::Storage::FileProperties::IStorageItemExtraProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IStorageItemExtraProperties
    };

    // ----- Windows.Storage.FileProperties Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Storage::FileProperties::BasicProperties>::python_type = py::register_python_type(module, _type_name_BasicProperties, &_type_spec_BasicProperties, bases.get());
            py::winrt_type<winrt::Windows::Storage::FileProperties::DocumentProperties>::python_type = py::register_python_type(module, _type_name_DocumentProperties, &_type_spec_DocumentProperties, bases.get());
            py::winrt_type<winrt::Windows::Storage::FileProperties::GeotagHelper>::python_type = py::register_python_type(module, _type_name_GeotagHelper, &_type_spec_GeotagHelper, nullptr);
            py::winrt_type<winrt::Windows::Storage::FileProperties::ImageProperties>::python_type = py::register_python_type(module, _type_name_ImageProperties, &_type_spec_ImageProperties, bases.get());
            py::winrt_type<winrt::Windows::Storage::FileProperties::MusicProperties>::python_type = py::register_python_type(module, _type_name_MusicProperties, &_type_spec_MusicProperties, bases.get());
            py::winrt_type<winrt::Windows::Storage::FileProperties::StorageItemContentProperties>::python_type = py::register_python_type(module, _type_name_StorageItemContentProperties, &_type_spec_StorageItemContentProperties, bases.get());
            py::winrt_type<winrt::Windows::Storage::FileProperties::StorageItemThumbnail>::python_type = py::register_python_type(module, _type_name_StorageItemThumbnail, &_type_spec_StorageItemThumbnail, bases.get());
            py::winrt_type<winrt::Windows::Storage::FileProperties::VideoProperties>::python_type = py::register_python_type(module, _type_name_VideoProperties, &_type_spec_VideoProperties, bases.get());
            py::winrt_type<winrt::Windows::Storage::FileProperties::IStorageItemExtraProperties>::python_type = py::register_python_type(module, _type_name_IStorageItemExtraProperties, &_type_spec_IStorageItemExtraProperties, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Storage.FileProperties");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Storage_FileProperties",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Storage::FileProperties

PyMODINIT_FUNC
PyInit__winrt_Windows_Storage_FileProperties (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Storage::FileProperties::module_def);
}
