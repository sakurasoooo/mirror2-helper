// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::AcceleratorKeyEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::AutomationProviderRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::BackRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CharacterReceivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreAcceleratorKeys>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreComponentInputSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreCursor>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreDispatcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreIndependentInputSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreIndependentInputSourceController>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreWindow>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreWindowEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreWindowResizeManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::IdleDispatchedHandlerArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::InputEnabledEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::KeyEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::PointerEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::SystemNavigationManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::TouchHitTestingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::VisibilityChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::WindowActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::WindowSizeChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ICoreAcceleratorKeys>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ICoreInputSourceBase>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ICorePointerInputSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ICorePointerInputSource2>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ICorePointerRedirector>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ICoreWindow>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::ICoreWindowEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::IInitializeWithCoreWindow>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CorePhysicalKeyStatus>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Core::CoreProximityEvaluation>::python_type;

PyObject* py::converter<winrt::Windows::UI::Core::CorePhysicalKeyStatus>::convert(winrt::Windows::UI::Core::CorePhysicalKeyStatus instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::UI::Core::CorePhysicalKeyStatus>());
}
winrt::Windows::UI::Core::CorePhysicalKeyStatus py::converter<winrt::Windows::UI::Core::CorePhysicalKeyStatus>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::UI::Core::CorePhysicalKeyStatus>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::UI::Core::CorePhysicalKeyStatus>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::UI::Core::CorePhysicalKeyStatus return_value{};

    PyObject* py_RepeatCount = PyDict_GetItemString(obj, "repeat_count");
    if (!py_RepeatCount) { throw winrt::hresult_invalid_argument(); }
    return_value.RepeatCount = converter<uint32_t>::convert_to(py_RepeatCount);

    PyObject* py_ScanCode = PyDict_GetItemString(obj, "scan_code");
    if (!py_ScanCode) { throw winrt::hresult_invalid_argument(); }
    return_value.ScanCode = converter<uint32_t>::convert_to(py_ScanCode);

    PyObject* py_IsExtendedKey = PyDict_GetItemString(obj, "is_extended_key");
    if (!py_IsExtendedKey) { throw winrt::hresult_invalid_argument(); }
    return_value.IsExtendedKey = converter<bool>::convert_to(py_IsExtendedKey);

    PyObject* py_IsMenuKeyDown = PyDict_GetItemString(obj, "is_menu_key_down");
    if (!py_IsMenuKeyDown) { throw winrt::hresult_invalid_argument(); }
    return_value.IsMenuKeyDown = converter<bool>::convert_to(py_IsMenuKeyDown);

    PyObject* py_WasKeyDown = PyDict_GetItemString(obj, "was_key_down");
    if (!py_WasKeyDown) { throw winrt::hresult_invalid_argument(); }
    return_value.WasKeyDown = converter<bool>::convert_to(py_WasKeyDown);

    PyObject* py_IsKeyReleased = PyDict_GetItemString(obj, "is_key_released");
    if (!py_IsKeyReleased) { throw winrt::hresult_invalid_argument(); }
    return_value.IsKeyReleased = converter<bool>::convert_to(py_IsKeyReleased);

    return return_value;
}

PyObject* py::converter<winrt::Windows::UI::Core::CoreProximityEvaluation>::convert(winrt::Windows::UI::Core::CoreProximityEvaluation instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::UI::Core::CoreProximityEvaluation>());
}
winrt::Windows::UI::Core::CoreProximityEvaluation py::converter<winrt::Windows::UI::Core::CoreProximityEvaluation>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::UI::Core::CoreProximityEvaluation>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::UI::Core::CoreProximityEvaluation>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::UI::Core::CoreProximityEvaluation return_value{};

    PyObject* py_Score = PyDict_GetItemString(obj, "score");
    if (!py_Score) { throw winrt::hresult_invalid_argument(); }
    return_value.Score = converter<int32_t>::convert_to(py_Score);

    PyObject* py_AdjustedPoint = PyDict_GetItemString(obj, "adjusted_point");
    if (!py_AdjustedPoint) { throw winrt::hresult_invalid_argument(); }
    return_value.AdjustedPoint = converter<winrt::Windows::Foundation::Point>::convert_to(py_AdjustedPoint);

    return return_value;
}

namespace py::cpp::Windows::UI::Core
{
    // ----- AcceleratorKeyEventArgs class --------------------
    constexpr const char* const _type_name_AcceleratorKeyEventArgs = "AcceleratorKeyEventArgs";

    static PyObject* _new_AcceleratorKeyEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AcceleratorKeyEventArgs);
        return nullptr;
    }

    static void _dealloc_AcceleratorKeyEventArgs(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AcceleratorKeyEventArgs_get_EventType(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EventType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AcceleratorKeyEventArgs_get_KeyStatus(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeyStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AcceleratorKeyEventArgs_get_VirtualKey(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VirtualKey());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AcceleratorKeyEventArgs_get_DeviceId(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AcceleratorKeyEventArgs_get_Handled(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AcceleratorKeyEventArgs_put_Handled(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_AcceleratorKeyEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AcceleratorKeyEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AcceleratorKeyEventArgs[] = {
        { "_from", (PyCFunction)_from_AcceleratorKeyEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AcceleratorKeyEventArgs[] = {
        { const_cast<char*>("event_type"), (getter)AcceleratorKeyEventArgs_get_EventType, nullptr, nullptr, nullptr },
        { const_cast<char*>("key_status"), (getter)AcceleratorKeyEventArgs_get_KeyStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("virtual_key"), (getter)AcceleratorKeyEventArgs_get_VirtualKey, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)AcceleratorKeyEventArgs_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("handled"), (getter)AcceleratorKeyEventArgs_get_Handled, (setter)AcceleratorKeyEventArgs_put_Handled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AcceleratorKeyEventArgs[] = 
    {
        { Py_tp_new, _new_AcceleratorKeyEventArgs },
        { Py_tp_dealloc, _dealloc_AcceleratorKeyEventArgs },
        { Py_tp_methods, _methods_AcceleratorKeyEventArgs },
        { Py_tp_getset, _getset_AcceleratorKeyEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AcceleratorKeyEventArgs =
    {
        "_winrt_Windows_UI_Core.AcceleratorKeyEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::AcceleratorKeyEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AcceleratorKeyEventArgs
    };

    // ----- AutomationProviderRequestedEventArgs class --------------------
    constexpr const char* const _type_name_AutomationProviderRequestedEventArgs = "AutomationProviderRequestedEventArgs";

    static PyObject* _new_AutomationProviderRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AutomationProviderRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_AutomationProviderRequestedEventArgs(py::wrapper::Windows::UI::Core::AutomationProviderRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AutomationProviderRequestedEventArgs_get_AutomationProvider(py::wrapper::Windows::UI::Core::AutomationProviderRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutomationProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AutomationProviderRequestedEventArgs_put_AutomationProvider(py::wrapper::Windows::UI::Core::AutomationProviderRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);

            self->obj.AutomationProvider(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AutomationProviderRequestedEventArgs_get_Handled(py::wrapper::Windows::UI::Core::AutomationProviderRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AutomationProviderRequestedEventArgs_put_Handled(py::wrapper::Windows::UI::Core::AutomationProviderRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_AutomationProviderRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AutomationProviderRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AutomationProviderRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_AutomationProviderRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AutomationProviderRequestedEventArgs[] = {
        { const_cast<char*>("automation_provider"), (getter)AutomationProviderRequestedEventArgs_get_AutomationProvider, (setter)AutomationProviderRequestedEventArgs_put_AutomationProvider, nullptr, nullptr },
        { const_cast<char*>("handled"), (getter)AutomationProviderRequestedEventArgs_get_Handled, (setter)AutomationProviderRequestedEventArgs_put_Handled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AutomationProviderRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_AutomationProviderRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_AutomationProviderRequestedEventArgs },
        { Py_tp_methods, _methods_AutomationProviderRequestedEventArgs },
        { Py_tp_getset, _getset_AutomationProviderRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AutomationProviderRequestedEventArgs =
    {
        "_winrt_Windows_UI_Core.AutomationProviderRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::AutomationProviderRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AutomationProviderRequestedEventArgs
    };

    // ----- BackRequestedEventArgs class --------------------
    constexpr const char* const _type_name_BackRequestedEventArgs = "BackRequestedEventArgs";

    static PyObject* _new_BackRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_BackRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_BackRequestedEventArgs(py::wrapper::Windows::UI::Core::BackRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* BackRequestedEventArgs_get_Handled(py::wrapper::Windows::UI::Core::BackRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int BackRequestedEventArgs_put_Handled(py::wrapper::Windows::UI::Core::BackRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_BackRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::BackRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BackRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_BackRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_BackRequestedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)BackRequestedEventArgs_get_Handled, (setter)BackRequestedEventArgs_put_Handled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_BackRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_BackRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_BackRequestedEventArgs },
        { Py_tp_methods, _methods_BackRequestedEventArgs },
        { Py_tp_getset, _getset_BackRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_BackRequestedEventArgs =
    {
        "_winrt_Windows_UI_Core.BackRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::BackRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BackRequestedEventArgs
    };

    // ----- CharacterReceivedEventArgs class --------------------
    constexpr const char* const _type_name_CharacterReceivedEventArgs = "CharacterReceivedEventArgs";

    static PyObject* _new_CharacterReceivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CharacterReceivedEventArgs);
        return nullptr;
    }

    static void _dealloc_CharacterReceivedEventArgs(py::wrapper::Windows::UI::Core::CharacterReceivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CharacterReceivedEventArgs_get_KeyCode(py::wrapper::Windows::UI::Core::CharacterReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeyCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CharacterReceivedEventArgs_get_KeyStatus(py::wrapper::Windows::UI::Core::CharacterReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeyStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CharacterReceivedEventArgs_get_Handled(py::wrapper::Windows::UI::Core::CharacterReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CharacterReceivedEventArgs_put_Handled(py::wrapper::Windows::UI::Core::CharacterReceivedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CharacterReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CharacterReceivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CharacterReceivedEventArgs[] = {
        { "_from", (PyCFunction)_from_CharacterReceivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CharacterReceivedEventArgs[] = {
        { const_cast<char*>("key_code"), (getter)CharacterReceivedEventArgs_get_KeyCode, nullptr, nullptr, nullptr },
        { const_cast<char*>("key_status"), (getter)CharacterReceivedEventArgs_get_KeyStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("handled"), (getter)CharacterReceivedEventArgs_get_Handled, (setter)CharacterReceivedEventArgs_put_Handled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CharacterReceivedEventArgs[] = 
    {
        { Py_tp_new, _new_CharacterReceivedEventArgs },
        { Py_tp_dealloc, _dealloc_CharacterReceivedEventArgs },
        { Py_tp_methods, _methods_CharacterReceivedEventArgs },
        { Py_tp_getset, _getset_CharacterReceivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CharacterReceivedEventArgs =
    {
        "_winrt_Windows_UI_Core.CharacterReceivedEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::CharacterReceivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CharacterReceivedEventArgs
    };

    // ----- ClosestInteractiveBoundsRequestedEventArgs class --------------------
    constexpr const char* const _type_name_ClosestInteractiveBoundsRequestedEventArgs = "ClosestInteractiveBoundsRequestedEventArgs";

    static PyObject* _new_ClosestInteractiveBoundsRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ClosestInteractiveBoundsRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_ClosestInteractiveBoundsRequestedEventArgs(py::wrapper::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ClosestInteractiveBoundsRequestedEventArgs_get_ClosestInteractiveBounds(py::wrapper::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClosestInteractiveBounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ClosestInteractiveBoundsRequestedEventArgs_put_ClosestInteractiveBounds(py::wrapper::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(arg);

            self->obj.ClosestInteractiveBounds(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ClosestInteractiveBoundsRequestedEventArgs_get_PointerPosition(py::wrapper::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ClosestInteractiveBoundsRequestedEventArgs_get_SearchBounds(py::wrapper::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SearchBounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ClosestInteractiveBoundsRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ClosestInteractiveBoundsRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_ClosestInteractiveBoundsRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ClosestInteractiveBoundsRequestedEventArgs[] = {
        { const_cast<char*>("closest_interactive_bounds"), (getter)ClosestInteractiveBoundsRequestedEventArgs_get_ClosestInteractiveBounds, (setter)ClosestInteractiveBoundsRequestedEventArgs_put_ClosestInteractiveBounds, nullptr, nullptr },
        { const_cast<char*>("pointer_position"), (getter)ClosestInteractiveBoundsRequestedEventArgs_get_PointerPosition, nullptr, nullptr, nullptr },
        { const_cast<char*>("search_bounds"), (getter)ClosestInteractiveBoundsRequestedEventArgs_get_SearchBounds, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ClosestInteractiveBoundsRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_ClosestInteractiveBoundsRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_ClosestInteractiveBoundsRequestedEventArgs },
        { Py_tp_methods, _methods_ClosestInteractiveBoundsRequestedEventArgs },
        { Py_tp_getset, _getset_ClosestInteractiveBoundsRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ClosestInteractiveBoundsRequestedEventArgs =
    {
        "_winrt_Windows_UI_Core.ClosestInteractiveBoundsRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ClosestInteractiveBoundsRequestedEventArgs
    };

    // ----- CoreAcceleratorKeys class --------------------
    constexpr const char* const _type_name_CoreAcceleratorKeys = "CoreAcceleratorKeys";

    static PyObject* _new_CoreAcceleratorKeys(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreAcceleratorKeys);
        return nullptr;
    }

    static void _dealloc_CoreAcceleratorKeys(py::wrapper::Windows::UI::Core::CoreAcceleratorKeys* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreAcceleratorKeys_add_AcceleratorKeyActivated(py::wrapper::Windows::UI::Core::CoreAcceleratorKeys* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreDispatcher, winrt::Windows::UI::Core::AcceleratorKeyEventArgs>>(arg);

            return py::convert(self->obj.AcceleratorKeyActivated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreAcceleratorKeys_remove_AcceleratorKeyActivated(py::wrapper::Windows::UI::Core::CoreAcceleratorKeys* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AcceleratorKeyActivated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreAcceleratorKeys(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreAcceleratorKeys>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreAcceleratorKeys[] = {
        { "add_accelerator_key_activated", (PyCFunction)CoreAcceleratorKeys_add_AcceleratorKeyActivated, METH_O, nullptr },
        { "remove_accelerator_key_activated", (PyCFunction)CoreAcceleratorKeys_remove_AcceleratorKeyActivated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreAcceleratorKeys, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreAcceleratorKeys[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreAcceleratorKeys[] = 
    {
        { Py_tp_new, _new_CoreAcceleratorKeys },
        { Py_tp_dealloc, _dealloc_CoreAcceleratorKeys },
        { Py_tp_methods, _methods_CoreAcceleratorKeys },
        { Py_tp_getset, _getset_CoreAcceleratorKeys },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreAcceleratorKeys =
    {
        "_winrt_Windows_UI_Core.CoreAcceleratorKeys",
        sizeof(py::wrapper::Windows::UI::Core::CoreAcceleratorKeys),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreAcceleratorKeys
    };

    // ----- CoreComponentInputSource class --------------------
    constexpr const char* const _type_name_CoreComponentInputSource = "CoreComponentInputSource";

    static PyObject* _new_CoreComponentInputSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreComponentInputSource);
        return nullptr;
    }

    static void _dealloc_CoreComponentInputSource(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreComponentInputSource_GetCurrentKeyEventDeviceId(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCurrentKeyEventDeviceId());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_GetCurrentKeyState(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::VirtualKey>(args, 0);

                return py::convert(self->obj.GetCurrentKeyState(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_ReleasePointerCapture(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReleasePointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_SetPointerCapture(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetPointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_get_HasFocus(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasFocus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_get_IsInputEnabled(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsInputEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreComponentInputSource_put_IsInputEnabled(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsInputEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreComponentInputSource_get_Dispatcher(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Dispatcher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_get_PointerCursor(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreComponentInputSource_put_PointerCursor(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreComponentInputSource_get_HasCapture(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasCapture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_get_PointerPosition(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_get_DispatcherQueue(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_InputEnabled(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::InputEnabledEventArgs>>(arg);

            return py::convert(self->obj.InputEnabled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_InputEnabled(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.InputEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_PointerCaptureLost(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerCaptureLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_PointerCaptureLost(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerCaptureLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_PointerEntered(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntered(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_PointerEntered(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntered(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_PointerExited(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExited(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_PointerExited(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExited(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_PointerMoved(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_PointerMoved(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_PointerPressed(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_PointerPressed(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_PointerReleased(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_PointerReleased(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_PointerWheelChanged(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerWheelChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_PointerWheelChanged(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerWheelChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_CharacterReceived(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::CharacterReceivedEventArgs>>(arg);

            return py::convert(self->obj.CharacterReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_CharacterReceived(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CharacterReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_KeyDown(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::KeyEventArgs>>(arg);

            return py::convert(self->obj.KeyDown(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_KeyDown(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.KeyDown(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_KeyUp(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::KeyEventArgs>>(arg);

            return py::convert(self->obj.KeyUp(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_KeyUp(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.KeyUp(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_GotFocus(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::CoreWindowEventArgs>>(arg);

            return py::convert(self->obj.GotFocus(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_GotFocus(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.GotFocus(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_LostFocus(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::CoreWindowEventArgs>>(arg);

            return py::convert(self->obj.LostFocus(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_LostFocus(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LostFocus(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_TouchHitTesting(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::TouchHitTestingEventArgs>>(arg);

            return py::convert(self->obj.TouchHitTesting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_TouchHitTesting(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TouchHitTesting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_add_ClosestInteractiveBoundsRequested(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreComponentInputSource, winrt::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs>>(arg);

            return py::convert(self->obj.ClosestInteractiveBoundsRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreComponentInputSource_remove_ClosestInteractiveBoundsRequested(py::wrapper::Windows::UI::Core::CoreComponentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ClosestInteractiveBoundsRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreComponentInputSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreComponentInputSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreComponentInputSource[] = {
        { "get_current_key_event_device_id", (PyCFunction)CoreComponentInputSource_GetCurrentKeyEventDeviceId, METH_VARARGS, nullptr },
        { "get_current_key_state", (PyCFunction)CoreComponentInputSource_GetCurrentKeyState, METH_VARARGS, nullptr },
        { "release_pointer_capture", (PyCFunction)CoreComponentInputSource_ReleasePointerCapture, METH_VARARGS, nullptr },
        { "set_pointer_capture", (PyCFunction)CoreComponentInputSource_SetPointerCapture, METH_VARARGS, nullptr },
        { "add_input_enabled", (PyCFunction)CoreComponentInputSource_add_InputEnabled, METH_O, nullptr },
        { "remove_input_enabled", (PyCFunction)CoreComponentInputSource_remove_InputEnabled, METH_O, nullptr },
        { "add_pointer_capture_lost", (PyCFunction)CoreComponentInputSource_add_PointerCaptureLost, METH_O, nullptr },
        { "remove_pointer_capture_lost", (PyCFunction)CoreComponentInputSource_remove_PointerCaptureLost, METH_O, nullptr },
        { "add_pointer_entered", (PyCFunction)CoreComponentInputSource_add_PointerEntered, METH_O, nullptr },
        { "remove_pointer_entered", (PyCFunction)CoreComponentInputSource_remove_PointerEntered, METH_O, nullptr },
        { "add_pointer_exited", (PyCFunction)CoreComponentInputSource_add_PointerExited, METH_O, nullptr },
        { "remove_pointer_exited", (PyCFunction)CoreComponentInputSource_remove_PointerExited, METH_O, nullptr },
        { "add_pointer_moved", (PyCFunction)CoreComponentInputSource_add_PointerMoved, METH_O, nullptr },
        { "remove_pointer_moved", (PyCFunction)CoreComponentInputSource_remove_PointerMoved, METH_O, nullptr },
        { "add_pointer_pressed", (PyCFunction)CoreComponentInputSource_add_PointerPressed, METH_O, nullptr },
        { "remove_pointer_pressed", (PyCFunction)CoreComponentInputSource_remove_PointerPressed, METH_O, nullptr },
        { "add_pointer_released", (PyCFunction)CoreComponentInputSource_add_PointerReleased, METH_O, nullptr },
        { "remove_pointer_released", (PyCFunction)CoreComponentInputSource_remove_PointerReleased, METH_O, nullptr },
        { "add_pointer_wheel_changed", (PyCFunction)CoreComponentInputSource_add_PointerWheelChanged, METH_O, nullptr },
        { "remove_pointer_wheel_changed", (PyCFunction)CoreComponentInputSource_remove_PointerWheelChanged, METH_O, nullptr },
        { "add_character_received", (PyCFunction)CoreComponentInputSource_add_CharacterReceived, METH_O, nullptr },
        { "remove_character_received", (PyCFunction)CoreComponentInputSource_remove_CharacterReceived, METH_O, nullptr },
        { "add_key_down", (PyCFunction)CoreComponentInputSource_add_KeyDown, METH_O, nullptr },
        { "remove_key_down", (PyCFunction)CoreComponentInputSource_remove_KeyDown, METH_O, nullptr },
        { "add_key_up", (PyCFunction)CoreComponentInputSource_add_KeyUp, METH_O, nullptr },
        { "remove_key_up", (PyCFunction)CoreComponentInputSource_remove_KeyUp, METH_O, nullptr },
        { "add_got_focus", (PyCFunction)CoreComponentInputSource_add_GotFocus, METH_O, nullptr },
        { "remove_got_focus", (PyCFunction)CoreComponentInputSource_remove_GotFocus, METH_O, nullptr },
        { "add_lost_focus", (PyCFunction)CoreComponentInputSource_add_LostFocus, METH_O, nullptr },
        { "remove_lost_focus", (PyCFunction)CoreComponentInputSource_remove_LostFocus, METH_O, nullptr },
        { "add_touch_hit_testing", (PyCFunction)CoreComponentInputSource_add_TouchHitTesting, METH_O, nullptr },
        { "remove_touch_hit_testing", (PyCFunction)CoreComponentInputSource_remove_TouchHitTesting, METH_O, nullptr },
        { "add_closest_interactive_bounds_requested", (PyCFunction)CoreComponentInputSource_add_ClosestInteractiveBoundsRequested, METH_O, nullptr },
        { "remove_closest_interactive_bounds_requested", (PyCFunction)CoreComponentInputSource_remove_ClosestInteractiveBoundsRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreComponentInputSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreComponentInputSource[] = {
        { const_cast<char*>("has_focus"), (getter)CoreComponentInputSource_get_HasFocus, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_input_enabled"), (getter)CoreComponentInputSource_get_IsInputEnabled, (setter)CoreComponentInputSource_put_IsInputEnabled, nullptr, nullptr },
        { const_cast<char*>("dispatcher"), (getter)CoreComponentInputSource_get_Dispatcher, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_cursor"), (getter)CoreComponentInputSource_get_PointerCursor, (setter)CoreComponentInputSource_put_PointerCursor, nullptr, nullptr },
        { const_cast<char*>("has_capture"), (getter)CoreComponentInputSource_get_HasCapture, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_position"), (getter)CoreComponentInputSource_get_PointerPosition, nullptr, nullptr, nullptr },
        { const_cast<char*>("dispatcher_queue"), (getter)CoreComponentInputSource_get_DispatcherQueue, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreComponentInputSource[] = 
    {
        { Py_tp_new, _new_CoreComponentInputSource },
        { Py_tp_dealloc, _dealloc_CoreComponentInputSource },
        { Py_tp_methods, _methods_CoreComponentInputSource },
        { Py_tp_getset, _getset_CoreComponentInputSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreComponentInputSource =
    {
        "_winrt_Windows_UI_Core.CoreComponentInputSource",
        sizeof(py::wrapper::Windows::UI::Core::CoreComponentInputSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreComponentInputSource
    };

    // ----- CoreCursor class --------------------
    constexpr const char* const _type_name_CoreCursor = "CoreCursor";

    static PyObject* _new_CoreCursor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursorType>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                winrt::Windows::UI::Core::CoreCursor instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CoreCursor(py::wrapper::Windows::UI::Core::CoreCursor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreCursor_get_Id(py::wrapper::Windows::UI::Core::CoreCursor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreCursor_get_Type(py::wrapper::Windows::UI::Core::CoreCursor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreCursor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreCursor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreCursor[] = {
        { "_from", (PyCFunction)_from_CoreCursor, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreCursor[] = {
        { const_cast<char*>("id"), (getter)CoreCursor_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)CoreCursor_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreCursor[] = 
    {
        { Py_tp_new, _new_CoreCursor },
        { Py_tp_dealloc, _dealloc_CoreCursor },
        { Py_tp_methods, _methods_CoreCursor },
        { Py_tp_getset, _getset_CoreCursor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreCursor =
    {
        "_winrt_Windows_UI_Core.CoreCursor",
        sizeof(py::wrapper::Windows::UI::Core::CoreCursor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreCursor
    };

    // ----- CoreDispatcher class --------------------
    constexpr const char* const _type_name_CoreDispatcher = "CoreDispatcher";

    static PyObject* _new_CoreDispatcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreDispatcher);
        return nullptr;
    }

    static void _dealloc_CoreDispatcher(py::wrapper::Windows::UI::Core::CoreDispatcher* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreDispatcher_ProcessEvents(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreProcessEventsOption>(args, 0);

                self->obj.ProcessEvents(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_RunAsync(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreDispatcherPriority>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Core::DispatchedHandler>(args, 1);

                return py::convert(self->obj.RunAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_RunIdleAsync(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::IdleDispatchedHandler>(args, 0);

                return py::convert(self->obj.RunIdleAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_ShouldYield(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ShouldYield());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreDispatcherPriority>(args, 0);

                return py::convert(self->obj.ShouldYield(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_StopProcessEvents(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.StopProcessEvents();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_TryRunAsync(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreDispatcherPriority>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Core::DispatchedHandler>(args, 1);

                return py::convert(self->obj.TryRunAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_TryRunIdleAsync(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::IdleDispatchedHandler>(args, 0);

                return py::convert(self->obj.TryRunIdleAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_get_HasThreadAccess(py::wrapper::Windows::UI::Core::CoreDispatcher* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasThreadAccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_get_CurrentPriority(py::wrapper::Windows::UI::Core::CoreDispatcher* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentPriority());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDispatcher_put_CurrentPriority(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreDispatcherPriority>(arg);

            self->obj.CurrentPriority(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreDispatcher_add_AcceleratorKeyActivated(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreDispatcher, winrt::Windows::UI::Core::AcceleratorKeyEventArgs>>(arg);

            return py::convert(self->obj.AcceleratorKeyActivated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreDispatcher_remove_AcceleratorKeyActivated(py::wrapper::Windows::UI::Core::CoreDispatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AcceleratorKeyActivated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreDispatcher(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreDispatcher>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreDispatcher[] = {
        { "process_events", (PyCFunction)CoreDispatcher_ProcessEvents, METH_VARARGS, nullptr },
        { "run_async", (PyCFunction)CoreDispatcher_RunAsync, METH_VARARGS, nullptr },
        { "run_idle_async", (PyCFunction)CoreDispatcher_RunIdleAsync, METH_VARARGS, nullptr },
        { "should_yield", (PyCFunction)CoreDispatcher_ShouldYield, METH_VARARGS, nullptr },
        { "stop_process_events", (PyCFunction)CoreDispatcher_StopProcessEvents, METH_VARARGS, nullptr },
        { "try_run_async", (PyCFunction)CoreDispatcher_TryRunAsync, METH_VARARGS, nullptr },
        { "try_run_idle_async", (PyCFunction)CoreDispatcher_TryRunIdleAsync, METH_VARARGS, nullptr },
        { "add_accelerator_key_activated", (PyCFunction)CoreDispatcher_add_AcceleratorKeyActivated, METH_O, nullptr },
        { "remove_accelerator_key_activated", (PyCFunction)CoreDispatcher_remove_AcceleratorKeyActivated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreDispatcher, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreDispatcher[] = {
        { const_cast<char*>("has_thread_access"), (getter)CoreDispatcher_get_HasThreadAccess, nullptr, nullptr, nullptr },
        { const_cast<char*>("current_priority"), (getter)CoreDispatcher_get_CurrentPriority, (setter)CoreDispatcher_put_CurrentPriority, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreDispatcher[] = 
    {
        { Py_tp_new, _new_CoreDispatcher },
        { Py_tp_dealloc, _dealloc_CoreDispatcher },
        { Py_tp_methods, _methods_CoreDispatcher },
        { Py_tp_getset, _getset_CoreDispatcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreDispatcher =
    {
        "_winrt_Windows_UI_Core.CoreDispatcher",
        sizeof(py::wrapper::Windows::UI::Core::CoreDispatcher),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreDispatcher
    };

    // ----- CoreIndependentInputSource class --------------------
    constexpr const char* const _type_name_CoreIndependentInputSource = "CoreIndependentInputSource";

    static PyObject* _new_CoreIndependentInputSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreIndependentInputSource);
        return nullptr;
    }

    static void _dealloc_CoreIndependentInputSource(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreIndependentInputSource_ReleasePointerCapture(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReleasePointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_SetPointerCapture(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetPointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_get_IsInputEnabled(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsInputEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreIndependentInputSource_put_IsInputEnabled(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsInputEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreIndependentInputSource_get_Dispatcher(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Dispatcher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_get_PointerCursor(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreIndependentInputSource_put_PointerCursor(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreIndependentInputSource_get_HasCapture(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasCapture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_get_PointerPosition(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_get_DispatcherQueue(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_InputEnabled(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::InputEnabledEventArgs>>(arg);

            return py::convert(self->obj.InputEnabled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_InputEnabled(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.InputEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerCaptureLost(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerCaptureLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerCaptureLost(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerCaptureLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerEntered(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntered(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerEntered(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntered(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerExited(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExited(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerExited(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExited(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerMoved(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerMoved(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerPressed(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerPressed(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerReleased(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerReleased(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerWheelChanged(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerWheelChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerWheelChanged(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerWheelChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerRoutedAway(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedAway(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerRoutedAway(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedAway(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerRoutedReleased(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerRoutedReleased(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_add_PointerRoutedTo(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedTo(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSource_remove_PointerRoutedTo(py::wrapper::Windows::UI::Core::CoreIndependentInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedTo(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreIndependentInputSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreIndependentInputSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreIndependentInputSource[] = {
        { "release_pointer_capture", (PyCFunction)CoreIndependentInputSource_ReleasePointerCapture, METH_VARARGS, nullptr },
        { "set_pointer_capture", (PyCFunction)CoreIndependentInputSource_SetPointerCapture, METH_VARARGS, nullptr },
        { "add_input_enabled", (PyCFunction)CoreIndependentInputSource_add_InputEnabled, METH_O, nullptr },
        { "remove_input_enabled", (PyCFunction)CoreIndependentInputSource_remove_InputEnabled, METH_O, nullptr },
        { "add_pointer_capture_lost", (PyCFunction)CoreIndependentInputSource_add_PointerCaptureLost, METH_O, nullptr },
        { "remove_pointer_capture_lost", (PyCFunction)CoreIndependentInputSource_remove_PointerCaptureLost, METH_O, nullptr },
        { "add_pointer_entered", (PyCFunction)CoreIndependentInputSource_add_PointerEntered, METH_O, nullptr },
        { "remove_pointer_entered", (PyCFunction)CoreIndependentInputSource_remove_PointerEntered, METH_O, nullptr },
        { "add_pointer_exited", (PyCFunction)CoreIndependentInputSource_add_PointerExited, METH_O, nullptr },
        { "remove_pointer_exited", (PyCFunction)CoreIndependentInputSource_remove_PointerExited, METH_O, nullptr },
        { "add_pointer_moved", (PyCFunction)CoreIndependentInputSource_add_PointerMoved, METH_O, nullptr },
        { "remove_pointer_moved", (PyCFunction)CoreIndependentInputSource_remove_PointerMoved, METH_O, nullptr },
        { "add_pointer_pressed", (PyCFunction)CoreIndependentInputSource_add_PointerPressed, METH_O, nullptr },
        { "remove_pointer_pressed", (PyCFunction)CoreIndependentInputSource_remove_PointerPressed, METH_O, nullptr },
        { "add_pointer_released", (PyCFunction)CoreIndependentInputSource_add_PointerReleased, METH_O, nullptr },
        { "remove_pointer_released", (PyCFunction)CoreIndependentInputSource_remove_PointerReleased, METH_O, nullptr },
        { "add_pointer_wheel_changed", (PyCFunction)CoreIndependentInputSource_add_PointerWheelChanged, METH_O, nullptr },
        { "remove_pointer_wheel_changed", (PyCFunction)CoreIndependentInputSource_remove_PointerWheelChanged, METH_O, nullptr },
        { "add_pointer_routed_away", (PyCFunction)CoreIndependentInputSource_add_PointerRoutedAway, METH_O, nullptr },
        { "remove_pointer_routed_away", (PyCFunction)CoreIndependentInputSource_remove_PointerRoutedAway, METH_O, nullptr },
        { "add_pointer_routed_released", (PyCFunction)CoreIndependentInputSource_add_PointerRoutedReleased, METH_O, nullptr },
        { "remove_pointer_routed_released", (PyCFunction)CoreIndependentInputSource_remove_PointerRoutedReleased, METH_O, nullptr },
        { "add_pointer_routed_to", (PyCFunction)CoreIndependentInputSource_add_PointerRoutedTo, METH_O, nullptr },
        { "remove_pointer_routed_to", (PyCFunction)CoreIndependentInputSource_remove_PointerRoutedTo, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreIndependentInputSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreIndependentInputSource[] = {
        { const_cast<char*>("is_input_enabled"), (getter)CoreIndependentInputSource_get_IsInputEnabled, (setter)CoreIndependentInputSource_put_IsInputEnabled, nullptr, nullptr },
        { const_cast<char*>("dispatcher"), (getter)CoreIndependentInputSource_get_Dispatcher, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_cursor"), (getter)CoreIndependentInputSource_get_PointerCursor, (setter)CoreIndependentInputSource_put_PointerCursor, nullptr, nullptr },
        { const_cast<char*>("has_capture"), (getter)CoreIndependentInputSource_get_HasCapture, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_position"), (getter)CoreIndependentInputSource_get_PointerPosition, nullptr, nullptr, nullptr },
        { const_cast<char*>("dispatcher_queue"), (getter)CoreIndependentInputSource_get_DispatcherQueue, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreIndependentInputSource[] = 
    {
        { Py_tp_new, _new_CoreIndependentInputSource },
        { Py_tp_dealloc, _dealloc_CoreIndependentInputSource },
        { Py_tp_methods, _methods_CoreIndependentInputSource },
        { Py_tp_getset, _getset_CoreIndependentInputSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreIndependentInputSource =
    {
        "_winrt_Windows_UI_Core.CoreIndependentInputSource",
        sizeof(py::wrapper::Windows::UI::Core::CoreIndependentInputSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreIndependentInputSource
    };

    // ----- CoreIndependentInputSourceController class --------------------
    constexpr const char* const _type_name_CoreIndependentInputSourceController = "CoreIndependentInputSourceController";

    static PyObject* _new_CoreIndependentInputSourceController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreIndependentInputSourceController);
        return nullptr;
    }

    static void _dealloc_CoreIndependentInputSourceController(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreIndependentInputSourceController_Close(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSourceController_CreateForIVisualElement(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::IVisualElement>(args, 0);

                return py::convert(winrt::Windows::UI::Core::CoreIndependentInputSourceController::CreateForIVisualElement(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSourceController_CreateForVisual(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);

                return py::convert(winrt::Windows::UI::Core::CoreIndependentInputSourceController::CreateForVisual(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSourceController_SetControlledInput(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreInputDeviceTypes>(args, 0);

                self->obj.SetControlledInput(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreInputDeviceTypes>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Core::CoreIndependentInputFilters>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::Core::CoreIndependentInputFilters>(args, 2);

                self->obj.SetControlledInput(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIndependentInputSourceController_get_IsTransparentForUncontrolledInput(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsTransparentForUncontrolledInput());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreIndependentInputSourceController_put_IsTransparentForUncontrolledInput(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsTransparentForUncontrolledInput(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreIndependentInputSourceController_get_IsPalmRejectionEnabled(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPalmRejectionEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreIndependentInputSourceController_put_IsPalmRejectionEnabled(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPalmRejectionEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreIndependentInputSourceController_get_Source(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreIndependentInputSourceController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreIndependentInputSourceController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_CoreIndependentInputSourceController(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_CoreIndependentInputSourceController(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreIndependentInputSourceController[] = {
        { "close", (PyCFunction)CoreIndependentInputSourceController_Close, METH_VARARGS, nullptr },
        { "create_for_i_visual_element", (PyCFunction)CoreIndependentInputSourceController_CreateForIVisualElement, METH_VARARGS | METH_STATIC, nullptr },
        { "create_for_visual", (PyCFunction)CoreIndependentInputSourceController_CreateForVisual, METH_VARARGS | METH_STATIC, nullptr },
        { "set_controlled_input", (PyCFunction)CoreIndependentInputSourceController_SetControlledInput, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreIndependentInputSourceController, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_CoreIndependentInputSourceController, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_CoreIndependentInputSourceController, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreIndependentInputSourceController[] = {
        { const_cast<char*>("is_transparent_for_uncontrolled_input"), (getter)CoreIndependentInputSourceController_get_IsTransparentForUncontrolledInput, (setter)CoreIndependentInputSourceController_put_IsTransparentForUncontrolledInput, nullptr, nullptr },
        { const_cast<char*>("is_palm_rejection_enabled"), (getter)CoreIndependentInputSourceController_get_IsPalmRejectionEnabled, (setter)CoreIndependentInputSourceController_put_IsPalmRejectionEnabled, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)CoreIndependentInputSourceController_get_Source, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreIndependentInputSourceController[] = 
    {
        { Py_tp_new, _new_CoreIndependentInputSourceController },
        { Py_tp_dealloc, _dealloc_CoreIndependentInputSourceController },
        { Py_tp_methods, _methods_CoreIndependentInputSourceController },
        { Py_tp_getset, _getset_CoreIndependentInputSourceController },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreIndependentInputSourceController =
    {
        "_winrt_Windows_UI_Core.CoreIndependentInputSourceController",
        sizeof(py::wrapper::Windows::UI::Core::CoreIndependentInputSourceController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreIndependentInputSourceController
    };

    // ----- CoreWindow class --------------------
    constexpr const char* const _type_name_CoreWindow = "CoreWindow";

    static PyObject* _new_CoreWindow(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreWindow);
        return nullptr;
    }

    static void _dealloc_CoreWindow(py::wrapper::Windows::UI::Core::CoreWindow* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreWindow_Activate(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Activate();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_Close(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_GetAsyncKeyState(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::VirtualKey>(args, 0);

                return py::convert(self->obj.GetAsyncKeyState(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_GetCurrentKeyEventDeviceId(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCurrentKeyEventDeviceId());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_GetForCurrentThread(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::Core::CoreWindow::GetForCurrentThread());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_GetKeyState(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::VirtualKey>(args, 0);

                return py::convert(self->obj.GetKeyState(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_ReleasePointerCapture(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReleasePointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_SetPointerCapture(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetPointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_PointerPosition(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWindow_put_PointerPosition(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Point>(arg);

            self->obj.PointerPosition(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreWindow_get_PointerCursor(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWindow_put_PointerCursor(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreWindow_get_FlowDirection(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FlowDirection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWindow_put_FlowDirection(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreWindowFlowDirection>(arg);

            self->obj.FlowDirection(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreWindow_get_IsInputEnabled(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsInputEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWindow_put_IsInputEnabled(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsInputEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreWindow_get_Dispatcher(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Dispatcher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_AutomationHostProvider(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutomationHostProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_Bounds(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_CustomProperties(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CustomProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_Visible(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Visible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_ActivationMode(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivationMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_DispatcherQueue(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_get_UIContext(py::wrapper::Windows::UI::Core::CoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UIContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_Activated(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::WindowActivatedEventArgs>>(arg);

            return py::convert(self->obj.Activated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_Activated(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Activated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_AutomationProviderRequested(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::AutomationProviderRequestedEventArgs>>(arg);

            return py::convert(self->obj.AutomationProviderRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_AutomationProviderRequested(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AutomationProviderRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_CharacterReceived(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::CharacterReceivedEventArgs>>(arg);

            return py::convert(self->obj.CharacterReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_CharacterReceived(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CharacterReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_Closed(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::CoreWindowEventArgs>>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_Closed(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_InputEnabled(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::InputEnabledEventArgs>>(arg);

            return py::convert(self->obj.InputEnabled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_InputEnabled(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.InputEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_KeyDown(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::KeyEventArgs>>(arg);

            return py::convert(self->obj.KeyDown(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_KeyDown(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.KeyDown(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_KeyUp(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::KeyEventArgs>>(arg);

            return py::convert(self->obj.KeyUp(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_KeyUp(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.KeyUp(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerCaptureLost(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerCaptureLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerCaptureLost(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerCaptureLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerEntered(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntered(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerEntered(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntered(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerExited(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExited(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerExited(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExited(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerMoved(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerMoved(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerPressed(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerPressed(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerReleased(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerReleased(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerWheelChanged(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerWheelChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerWheelChanged(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerWheelChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_SizeChanged(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::WindowSizeChangedEventArgs>>(arg);

            return py::convert(self->obj.SizeChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_SizeChanged(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SizeChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_TouchHitTesting(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::TouchHitTestingEventArgs>>(arg);

            return py::convert(self->obj.TouchHitTesting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_TouchHitTesting(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TouchHitTesting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_VisibilityChanged(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::VisibilityChangedEventArgs>>(arg);

            return py::convert(self->obj.VisibilityChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_VisibilityChanged(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VisibilityChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerRoutedAway(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedAway(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerRoutedAway(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedAway(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerRoutedReleased(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerRoutedReleased(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_PointerRoutedTo(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedTo(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_PointerRoutedTo(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedTo(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_ClosestInteractiveBoundsRequested(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs>>(arg);

            return py::convert(self->obj.ClosestInteractiveBoundsRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_ClosestInteractiveBoundsRequested(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ClosestInteractiveBoundsRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_ResizeCompleted(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ResizeCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_ResizeCompleted(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ResizeCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_add_ResizeStarted(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ResizeStarted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWindow_remove_ResizeStarted(py::wrapper::Windows::UI::Core::CoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ResizeStarted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreWindow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreWindow>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreWindow[] = {
        { "activate", (PyCFunction)CoreWindow_Activate, METH_VARARGS, nullptr },
        { "close", (PyCFunction)CoreWindow_Close, METH_VARARGS, nullptr },
        { "get_async_key_state", (PyCFunction)CoreWindow_GetAsyncKeyState, METH_VARARGS, nullptr },
        { "get_current_key_event_device_id", (PyCFunction)CoreWindow_GetCurrentKeyEventDeviceId, METH_VARARGS, nullptr },
        { "get_for_current_thread", (PyCFunction)CoreWindow_GetForCurrentThread, METH_VARARGS | METH_STATIC, nullptr },
        { "get_key_state", (PyCFunction)CoreWindow_GetKeyState, METH_VARARGS, nullptr },
        { "release_pointer_capture", (PyCFunction)CoreWindow_ReleasePointerCapture, METH_VARARGS, nullptr },
        { "set_pointer_capture", (PyCFunction)CoreWindow_SetPointerCapture, METH_VARARGS, nullptr },
        { "add_activated", (PyCFunction)CoreWindow_add_Activated, METH_O, nullptr },
        { "remove_activated", (PyCFunction)CoreWindow_remove_Activated, METH_O, nullptr },
        { "add_automation_provider_requested", (PyCFunction)CoreWindow_add_AutomationProviderRequested, METH_O, nullptr },
        { "remove_automation_provider_requested", (PyCFunction)CoreWindow_remove_AutomationProviderRequested, METH_O, nullptr },
        { "add_character_received", (PyCFunction)CoreWindow_add_CharacterReceived, METH_O, nullptr },
        { "remove_character_received", (PyCFunction)CoreWindow_remove_CharacterReceived, METH_O, nullptr },
        { "add_closed", (PyCFunction)CoreWindow_add_Closed, METH_O, nullptr },
        { "remove_closed", (PyCFunction)CoreWindow_remove_Closed, METH_O, nullptr },
        { "add_input_enabled", (PyCFunction)CoreWindow_add_InputEnabled, METH_O, nullptr },
        { "remove_input_enabled", (PyCFunction)CoreWindow_remove_InputEnabled, METH_O, nullptr },
        { "add_key_down", (PyCFunction)CoreWindow_add_KeyDown, METH_O, nullptr },
        { "remove_key_down", (PyCFunction)CoreWindow_remove_KeyDown, METH_O, nullptr },
        { "add_key_up", (PyCFunction)CoreWindow_add_KeyUp, METH_O, nullptr },
        { "remove_key_up", (PyCFunction)CoreWindow_remove_KeyUp, METH_O, nullptr },
        { "add_pointer_capture_lost", (PyCFunction)CoreWindow_add_PointerCaptureLost, METH_O, nullptr },
        { "remove_pointer_capture_lost", (PyCFunction)CoreWindow_remove_PointerCaptureLost, METH_O, nullptr },
        { "add_pointer_entered", (PyCFunction)CoreWindow_add_PointerEntered, METH_O, nullptr },
        { "remove_pointer_entered", (PyCFunction)CoreWindow_remove_PointerEntered, METH_O, nullptr },
        { "add_pointer_exited", (PyCFunction)CoreWindow_add_PointerExited, METH_O, nullptr },
        { "remove_pointer_exited", (PyCFunction)CoreWindow_remove_PointerExited, METH_O, nullptr },
        { "add_pointer_moved", (PyCFunction)CoreWindow_add_PointerMoved, METH_O, nullptr },
        { "remove_pointer_moved", (PyCFunction)CoreWindow_remove_PointerMoved, METH_O, nullptr },
        { "add_pointer_pressed", (PyCFunction)CoreWindow_add_PointerPressed, METH_O, nullptr },
        { "remove_pointer_pressed", (PyCFunction)CoreWindow_remove_PointerPressed, METH_O, nullptr },
        { "add_pointer_released", (PyCFunction)CoreWindow_add_PointerReleased, METH_O, nullptr },
        { "remove_pointer_released", (PyCFunction)CoreWindow_remove_PointerReleased, METH_O, nullptr },
        { "add_pointer_wheel_changed", (PyCFunction)CoreWindow_add_PointerWheelChanged, METH_O, nullptr },
        { "remove_pointer_wheel_changed", (PyCFunction)CoreWindow_remove_PointerWheelChanged, METH_O, nullptr },
        { "add_size_changed", (PyCFunction)CoreWindow_add_SizeChanged, METH_O, nullptr },
        { "remove_size_changed", (PyCFunction)CoreWindow_remove_SizeChanged, METH_O, nullptr },
        { "add_touch_hit_testing", (PyCFunction)CoreWindow_add_TouchHitTesting, METH_O, nullptr },
        { "remove_touch_hit_testing", (PyCFunction)CoreWindow_remove_TouchHitTesting, METH_O, nullptr },
        { "add_visibility_changed", (PyCFunction)CoreWindow_add_VisibilityChanged, METH_O, nullptr },
        { "remove_visibility_changed", (PyCFunction)CoreWindow_remove_VisibilityChanged, METH_O, nullptr },
        { "add_pointer_routed_away", (PyCFunction)CoreWindow_add_PointerRoutedAway, METH_O, nullptr },
        { "remove_pointer_routed_away", (PyCFunction)CoreWindow_remove_PointerRoutedAway, METH_O, nullptr },
        { "add_pointer_routed_released", (PyCFunction)CoreWindow_add_PointerRoutedReleased, METH_O, nullptr },
        { "remove_pointer_routed_released", (PyCFunction)CoreWindow_remove_PointerRoutedReleased, METH_O, nullptr },
        { "add_pointer_routed_to", (PyCFunction)CoreWindow_add_PointerRoutedTo, METH_O, nullptr },
        { "remove_pointer_routed_to", (PyCFunction)CoreWindow_remove_PointerRoutedTo, METH_O, nullptr },
        { "add_closest_interactive_bounds_requested", (PyCFunction)CoreWindow_add_ClosestInteractiveBoundsRequested, METH_O, nullptr },
        { "remove_closest_interactive_bounds_requested", (PyCFunction)CoreWindow_remove_ClosestInteractiveBoundsRequested, METH_O, nullptr },
        { "add_resize_completed", (PyCFunction)CoreWindow_add_ResizeCompleted, METH_O, nullptr },
        { "remove_resize_completed", (PyCFunction)CoreWindow_remove_ResizeCompleted, METH_O, nullptr },
        { "add_resize_started", (PyCFunction)CoreWindow_add_ResizeStarted, METH_O, nullptr },
        { "remove_resize_started", (PyCFunction)CoreWindow_remove_ResizeStarted, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreWindow, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreWindow[] = {
        { const_cast<char*>("pointer_position"), (getter)CoreWindow_get_PointerPosition, (setter)CoreWindow_put_PointerPosition, nullptr, nullptr },
        { const_cast<char*>("pointer_cursor"), (getter)CoreWindow_get_PointerCursor, (setter)CoreWindow_put_PointerCursor, nullptr, nullptr },
        { const_cast<char*>("flow_direction"), (getter)CoreWindow_get_FlowDirection, (setter)CoreWindow_put_FlowDirection, nullptr, nullptr },
        { const_cast<char*>("is_input_enabled"), (getter)CoreWindow_get_IsInputEnabled, (setter)CoreWindow_put_IsInputEnabled, nullptr, nullptr },
        { const_cast<char*>("dispatcher"), (getter)CoreWindow_get_Dispatcher, nullptr, nullptr, nullptr },
        { const_cast<char*>("automation_host_provider"), (getter)CoreWindow_get_AutomationHostProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("bounds"), (getter)CoreWindow_get_Bounds, nullptr, nullptr, nullptr },
        { const_cast<char*>("custom_properties"), (getter)CoreWindow_get_CustomProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("visible"), (getter)CoreWindow_get_Visible, nullptr, nullptr, nullptr },
        { const_cast<char*>("activation_mode"), (getter)CoreWindow_get_ActivationMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("dispatcher_queue"), (getter)CoreWindow_get_DispatcherQueue, nullptr, nullptr, nullptr },
        { const_cast<char*>("u_i_context"), (getter)CoreWindow_get_UIContext, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreWindow[] = 
    {
        { Py_tp_new, _new_CoreWindow },
        { Py_tp_dealloc, _dealloc_CoreWindow },
        { Py_tp_methods, _methods_CoreWindow },
        { Py_tp_getset, _getset_CoreWindow },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreWindow =
    {
        "_winrt_Windows_UI_Core.CoreWindow",
        sizeof(py::wrapper::Windows::UI::Core::CoreWindow),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreWindow
    };

    // ----- CoreWindowEventArgs class --------------------
    constexpr const char* const _type_name_CoreWindowEventArgs = "CoreWindowEventArgs";

    static PyObject* _new_CoreWindowEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreWindowEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreWindowEventArgs(py::wrapper::Windows::UI::Core::CoreWindowEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreWindowEventArgs_get_Handled(py::wrapper::Windows::UI::Core::CoreWindowEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWindowEventArgs_put_Handled(py::wrapper::Windows::UI::Core::CoreWindowEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CoreWindowEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreWindowEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreWindowEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreWindowEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreWindowEventArgs[] = {
        { const_cast<char*>("handled"), (getter)CoreWindowEventArgs_get_Handled, (setter)CoreWindowEventArgs_put_Handled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreWindowEventArgs[] = 
    {
        { Py_tp_new, _new_CoreWindowEventArgs },
        { Py_tp_dealloc, _dealloc_CoreWindowEventArgs },
        { Py_tp_methods, _methods_CoreWindowEventArgs },
        { Py_tp_getset, _getset_CoreWindowEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreWindowEventArgs =
    {
        "_winrt_Windows_UI_Core.CoreWindowEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::CoreWindowEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreWindowEventArgs
    };

    // ----- CoreWindowResizeManager class --------------------
    constexpr const char* const _type_name_CoreWindowResizeManager = "CoreWindowResizeManager";

    static PyObject* _new_CoreWindowResizeManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreWindowResizeManager);
        return nullptr;
    }

    static void _dealloc_CoreWindowResizeManager(py::wrapper::Windows::UI::Core::CoreWindowResizeManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreWindowResizeManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::Core::CoreWindowResizeManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindowResizeManager_NotifyLayoutCompleted(py::wrapper::Windows::UI::Core::CoreWindowResizeManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.NotifyLayoutCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWindowResizeManager_get_ShouldWaitForLayoutCompletion(py::wrapper::Windows::UI::Core::CoreWindowResizeManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShouldWaitForLayoutCompletion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWindowResizeManager_put_ShouldWaitForLayoutCompletion(py::wrapper::Windows::UI::Core::CoreWindowResizeManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShouldWaitForLayoutCompletion(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CoreWindowResizeManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::CoreWindowResizeManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreWindowResizeManager[] = {
        { "get_for_current_view", (PyCFunction)CoreWindowResizeManager_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "notify_layout_completed", (PyCFunction)CoreWindowResizeManager_NotifyLayoutCompleted, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreWindowResizeManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreWindowResizeManager[] = {
        { const_cast<char*>("should_wait_for_layout_completion"), (getter)CoreWindowResizeManager_get_ShouldWaitForLayoutCompletion, (setter)CoreWindowResizeManager_put_ShouldWaitForLayoutCompletion, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreWindowResizeManager[] = 
    {
        { Py_tp_new, _new_CoreWindowResizeManager },
        { Py_tp_dealloc, _dealloc_CoreWindowResizeManager },
        { Py_tp_methods, _methods_CoreWindowResizeManager },
        { Py_tp_getset, _getset_CoreWindowResizeManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreWindowResizeManager =
    {
        "_winrt_Windows_UI_Core.CoreWindowResizeManager",
        sizeof(py::wrapper::Windows::UI::Core::CoreWindowResizeManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreWindowResizeManager
    };

    // ----- IdleDispatchedHandlerArgs class --------------------
    constexpr const char* const _type_name_IdleDispatchedHandlerArgs = "IdleDispatchedHandlerArgs";

    static PyObject* _new_IdleDispatchedHandlerArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_IdleDispatchedHandlerArgs);
        return nullptr;
    }

    static void _dealloc_IdleDispatchedHandlerArgs(py::wrapper::Windows::UI::Core::IdleDispatchedHandlerArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IdleDispatchedHandlerArgs_get_IsDispatcherIdle(py::wrapper::Windows::UI::Core::IdleDispatchedHandlerArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDispatcherIdle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IdleDispatchedHandlerArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::IdleDispatchedHandlerArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IdleDispatchedHandlerArgs[] = {
        { "_from", (PyCFunction)_from_IdleDispatchedHandlerArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IdleDispatchedHandlerArgs[] = {
        { const_cast<char*>("is_dispatcher_idle"), (getter)IdleDispatchedHandlerArgs_get_IsDispatcherIdle, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IdleDispatchedHandlerArgs[] = 
    {
        { Py_tp_new, _new_IdleDispatchedHandlerArgs },
        { Py_tp_dealloc, _dealloc_IdleDispatchedHandlerArgs },
        { Py_tp_methods, _methods_IdleDispatchedHandlerArgs },
        { Py_tp_getset, _getset_IdleDispatchedHandlerArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IdleDispatchedHandlerArgs =
    {
        "_winrt_Windows_UI_Core.IdleDispatchedHandlerArgs",
        sizeof(py::wrapper::Windows::UI::Core::IdleDispatchedHandlerArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IdleDispatchedHandlerArgs
    };

    // ----- InputEnabledEventArgs class --------------------
    constexpr const char* const _type_name_InputEnabledEventArgs = "InputEnabledEventArgs";

    static PyObject* _new_InputEnabledEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InputEnabledEventArgs);
        return nullptr;
    }

    static void _dealloc_InputEnabledEventArgs(py::wrapper::Windows::UI::Core::InputEnabledEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InputEnabledEventArgs_get_Handled(py::wrapper::Windows::UI::Core::InputEnabledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int InputEnabledEventArgs_put_Handled(py::wrapper::Windows::UI::Core::InputEnabledEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* InputEnabledEventArgs_get_InputEnabled(py::wrapper::Windows::UI::Core::InputEnabledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InputEnabledEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::InputEnabledEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InputEnabledEventArgs[] = {
        { "_from", (PyCFunction)_from_InputEnabledEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InputEnabledEventArgs[] = {
        { const_cast<char*>("handled"), (getter)InputEnabledEventArgs_get_Handled, (setter)InputEnabledEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("input_enabled"), (getter)InputEnabledEventArgs_get_InputEnabled, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InputEnabledEventArgs[] = 
    {
        { Py_tp_new, _new_InputEnabledEventArgs },
        { Py_tp_dealloc, _dealloc_InputEnabledEventArgs },
        { Py_tp_methods, _methods_InputEnabledEventArgs },
        { Py_tp_getset, _getset_InputEnabledEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InputEnabledEventArgs =
    {
        "_winrt_Windows_UI_Core.InputEnabledEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::InputEnabledEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InputEnabledEventArgs
    };

    // ----- KeyEventArgs class --------------------
    constexpr const char* const _type_name_KeyEventArgs = "KeyEventArgs";

    static PyObject* _new_KeyEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KeyEventArgs);
        return nullptr;
    }

    static void _dealloc_KeyEventArgs(py::wrapper::Windows::UI::Core::KeyEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* KeyEventArgs_get_Handled(py::wrapper::Windows::UI::Core::KeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int KeyEventArgs_put_Handled(py::wrapper::Windows::UI::Core::KeyEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* KeyEventArgs_get_KeyStatus(py::wrapper::Windows::UI::Core::KeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeyStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KeyEventArgs_get_VirtualKey(py::wrapper::Windows::UI::Core::KeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VirtualKey());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KeyEventArgs_get_DeviceId(py::wrapper::Windows::UI::Core::KeyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_KeyEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::KeyEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KeyEventArgs[] = {
        { "_from", (PyCFunction)_from_KeyEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KeyEventArgs[] = {
        { const_cast<char*>("handled"), (getter)KeyEventArgs_get_Handled, (setter)KeyEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("key_status"), (getter)KeyEventArgs_get_KeyStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("virtual_key"), (getter)KeyEventArgs_get_VirtualKey, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)KeyEventArgs_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_KeyEventArgs[] = 
    {
        { Py_tp_new, _new_KeyEventArgs },
        { Py_tp_dealloc, _dealloc_KeyEventArgs },
        { Py_tp_methods, _methods_KeyEventArgs },
        { Py_tp_getset, _getset_KeyEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KeyEventArgs =
    {
        "_winrt_Windows_UI_Core.KeyEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::KeyEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KeyEventArgs
    };

    // ----- PointerEventArgs class --------------------
    constexpr const char* const _type_name_PointerEventArgs = "PointerEventArgs";

    static PyObject* _new_PointerEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PointerEventArgs);
        return nullptr;
    }

    static void _dealloc_PointerEventArgs(py::wrapper::Windows::UI::Core::PointerEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PointerEventArgs_GetIntermediatePoints(py::wrapper::Windows::UI::Core::PointerEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetIntermediatePoints());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PointerEventArgs_get_Handled(py::wrapper::Windows::UI::Core::PointerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PointerEventArgs_put_Handled(py::wrapper::Windows::UI::Core::PointerEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PointerEventArgs_get_CurrentPoint(py::wrapper::Windows::UI::Core::PointerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentPoint());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PointerEventArgs_get_KeyModifiers(py::wrapper::Windows::UI::Core::PointerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeyModifiers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PointerEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::PointerEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PointerEventArgs[] = {
        { "get_intermediate_points", (PyCFunction)PointerEventArgs_GetIntermediatePoints, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PointerEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PointerEventArgs[] = {
        { const_cast<char*>("handled"), (getter)PointerEventArgs_get_Handled, (setter)PointerEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("current_point"), (getter)PointerEventArgs_get_CurrentPoint, nullptr, nullptr, nullptr },
        { const_cast<char*>("key_modifiers"), (getter)PointerEventArgs_get_KeyModifiers, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PointerEventArgs[] = 
    {
        { Py_tp_new, _new_PointerEventArgs },
        { Py_tp_dealloc, _dealloc_PointerEventArgs },
        { Py_tp_methods, _methods_PointerEventArgs },
        { Py_tp_getset, _getset_PointerEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PointerEventArgs =
    {
        "_winrt_Windows_UI_Core.PointerEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::PointerEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PointerEventArgs
    };

    // ----- SystemNavigationManager class --------------------
    constexpr const char* const _type_name_SystemNavigationManager = "SystemNavigationManager";

    static PyObject* _new_SystemNavigationManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SystemNavigationManager);
        return nullptr;
    }

    static void _dealloc_SystemNavigationManager(py::wrapper::Windows::UI::Core::SystemNavigationManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SystemNavigationManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::Core::SystemNavigationManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SystemNavigationManager_get_AppViewBackButtonVisibility(py::wrapper::Windows::UI::Core::SystemNavigationManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppViewBackButtonVisibility());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SystemNavigationManager_put_AppViewBackButtonVisibility(py::wrapper::Windows::UI::Core::SystemNavigationManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::AppViewBackButtonVisibility>(arg);

            self->obj.AppViewBackButtonVisibility(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SystemNavigationManager_add_BackRequested(py::wrapper::Windows::UI::Core::SystemNavigationManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::Core::BackRequestedEventArgs>>(arg);

            return py::convert(self->obj.BackRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SystemNavigationManager_remove_BackRequested(py::wrapper::Windows::UI::Core::SystemNavigationManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.BackRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SystemNavigationManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::SystemNavigationManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SystemNavigationManager[] = {
        { "get_for_current_view", (PyCFunction)SystemNavigationManager_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "add_back_requested", (PyCFunction)SystemNavigationManager_add_BackRequested, METH_O, nullptr },
        { "remove_back_requested", (PyCFunction)SystemNavigationManager_remove_BackRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SystemNavigationManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SystemNavigationManager[] = {
        { const_cast<char*>("app_view_back_button_visibility"), (getter)SystemNavigationManager_get_AppViewBackButtonVisibility, (setter)SystemNavigationManager_put_AppViewBackButtonVisibility, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SystemNavigationManager[] = 
    {
        { Py_tp_new, _new_SystemNavigationManager },
        { Py_tp_dealloc, _dealloc_SystemNavigationManager },
        { Py_tp_methods, _methods_SystemNavigationManager },
        { Py_tp_getset, _getset_SystemNavigationManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SystemNavigationManager =
    {
        "_winrt_Windows_UI_Core.SystemNavigationManager",
        sizeof(py::wrapper::Windows::UI::Core::SystemNavigationManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SystemNavigationManager
    };

    // ----- TouchHitTestingEventArgs class --------------------
    constexpr const char* const _type_name_TouchHitTestingEventArgs = "TouchHitTestingEventArgs";

    static PyObject* _new_TouchHitTestingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TouchHitTestingEventArgs);
        return nullptr;
    }

    static void _dealloc_TouchHitTestingEventArgs(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TouchHitTestingEventArgs_EvaluateProximity(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                return py::convert(self->obj.EvaluateProximity(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TouchHitTestingEventArgs_get_Handled(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TouchHitTestingEventArgs_put_Handled(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TouchHitTestingEventArgs_get_ProximityEvaluation(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProximityEvaluation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TouchHitTestingEventArgs_put_ProximityEvaluation(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreProximityEvaluation>(arg);

            self->obj.ProximityEvaluation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TouchHitTestingEventArgs_get_BoundingBox(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TouchHitTestingEventArgs_get_Point(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Point());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TouchHitTestingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::TouchHitTestingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TouchHitTestingEventArgs[] = {
        { "evaluate_proximity", (PyCFunction)TouchHitTestingEventArgs_EvaluateProximity, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TouchHitTestingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TouchHitTestingEventArgs[] = {
        { const_cast<char*>("handled"), (getter)TouchHitTestingEventArgs_get_Handled, (setter)TouchHitTestingEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("proximity_evaluation"), (getter)TouchHitTestingEventArgs_get_ProximityEvaluation, (setter)TouchHitTestingEventArgs_put_ProximityEvaluation, nullptr, nullptr },
        { const_cast<char*>("bounding_box"), (getter)TouchHitTestingEventArgs_get_BoundingBox, nullptr, nullptr, nullptr },
        { const_cast<char*>("point"), (getter)TouchHitTestingEventArgs_get_Point, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TouchHitTestingEventArgs[] = 
    {
        { Py_tp_new, _new_TouchHitTestingEventArgs },
        { Py_tp_dealloc, _dealloc_TouchHitTestingEventArgs },
        { Py_tp_methods, _methods_TouchHitTestingEventArgs },
        { Py_tp_getset, _getset_TouchHitTestingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TouchHitTestingEventArgs =
    {
        "_winrt_Windows_UI_Core.TouchHitTestingEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::TouchHitTestingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TouchHitTestingEventArgs
    };

    // ----- VisibilityChangedEventArgs class --------------------
    constexpr const char* const _type_name_VisibilityChangedEventArgs = "VisibilityChangedEventArgs";

    static PyObject* _new_VisibilityChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VisibilityChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_VisibilityChangedEventArgs(py::wrapper::Windows::UI::Core::VisibilityChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VisibilityChangedEventArgs_get_Handled(py::wrapper::Windows::UI::Core::VisibilityChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int VisibilityChangedEventArgs_put_Handled(py::wrapper::Windows::UI::Core::VisibilityChangedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* VisibilityChangedEventArgs_get_Visible(py::wrapper::Windows::UI::Core::VisibilityChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Visible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VisibilityChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::VisibilityChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VisibilityChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_VisibilityChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VisibilityChangedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)VisibilityChangedEventArgs_get_Handled, (setter)VisibilityChangedEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("visible"), (getter)VisibilityChangedEventArgs_get_Visible, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VisibilityChangedEventArgs[] = 
    {
        { Py_tp_new, _new_VisibilityChangedEventArgs },
        { Py_tp_dealloc, _dealloc_VisibilityChangedEventArgs },
        { Py_tp_methods, _methods_VisibilityChangedEventArgs },
        { Py_tp_getset, _getset_VisibilityChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VisibilityChangedEventArgs =
    {
        "_winrt_Windows_UI_Core.VisibilityChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::VisibilityChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VisibilityChangedEventArgs
    };

    // ----- WindowActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WindowActivatedEventArgs = "WindowActivatedEventArgs";

    static PyObject* _new_WindowActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WindowActivatedEventArgs(py::wrapper::Windows::UI::Core::WindowActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WindowActivatedEventArgs_get_Handled(py::wrapper::Windows::UI::Core::WindowActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WindowActivatedEventArgs_put_Handled(py::wrapper::Windows::UI::Core::WindowActivatedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WindowActivatedEventArgs_get_WindowActivationState(py::wrapper::Windows::UI::Core::WindowActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WindowActivationState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WindowActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::WindowActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowActivatedEventArgs[] = {
        { "_from", (PyCFunction)_from_WindowActivatedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowActivatedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)WindowActivatedEventArgs_get_Handled, (setter)WindowActivatedEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("window_activation_state"), (getter)WindowActivatedEventArgs_get_WindowActivationState, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WindowActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WindowActivatedEventArgs },
        { Py_tp_methods, _methods_WindowActivatedEventArgs },
        { Py_tp_getset, _getset_WindowActivatedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowActivatedEventArgs =
    {
        "_winrt_Windows_UI_Core.WindowActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::WindowActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowActivatedEventArgs
    };

    // ----- WindowSizeChangedEventArgs class --------------------
    constexpr const char* const _type_name_WindowSizeChangedEventArgs = "WindowSizeChangedEventArgs";

    static PyObject* _new_WindowSizeChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowSizeChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_WindowSizeChangedEventArgs(py::wrapper::Windows::UI::Core::WindowSizeChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WindowSizeChangedEventArgs_get_Handled(py::wrapper::Windows::UI::Core::WindowSizeChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WindowSizeChangedEventArgs_put_Handled(py::wrapper::Windows::UI::Core::WindowSizeChangedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WindowSizeChangedEventArgs_get_Size(py::wrapper::Windows::UI::Core::WindowSizeChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WindowSizeChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::WindowSizeChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowSizeChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_WindowSizeChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowSizeChangedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)WindowSizeChangedEventArgs_get_Handled, (setter)WindowSizeChangedEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)WindowSizeChangedEventArgs_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowSizeChangedEventArgs[] = 
    {
        { Py_tp_new, _new_WindowSizeChangedEventArgs },
        { Py_tp_dealloc, _dealloc_WindowSizeChangedEventArgs },
        { Py_tp_methods, _methods_WindowSizeChangedEventArgs },
        { Py_tp_getset, _getset_WindowSizeChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowSizeChangedEventArgs =
    {
        "_winrt_Windows_UI_Core.WindowSizeChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::WindowSizeChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowSizeChangedEventArgs
    };

    // ----- ICoreAcceleratorKeys interface --------------------
    constexpr const char* const _type_name_ICoreAcceleratorKeys = "ICoreAcceleratorKeys";

    static PyObject* _new_ICoreAcceleratorKeys(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICoreAcceleratorKeys);
        return nullptr;
    }

    static void _dealloc_ICoreAcceleratorKeys(py::wrapper::Windows::UI::Core::ICoreAcceleratorKeys* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICoreAcceleratorKeys_add_AcceleratorKeyActivated(py::wrapper::Windows::UI::Core::ICoreAcceleratorKeys* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreDispatcher, winrt::Windows::UI::Core::AcceleratorKeyEventArgs>>(arg);

            return py::convert(self->obj.AcceleratorKeyActivated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreAcceleratorKeys_remove_AcceleratorKeyActivated(py::wrapper::Windows::UI::Core::ICoreAcceleratorKeys* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AcceleratorKeyActivated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ICoreAcceleratorKeys(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ICoreAcceleratorKeys>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICoreAcceleratorKeys[] = {
        { "add_accelerator_key_activated", (PyCFunction)ICoreAcceleratorKeys_add_AcceleratorKeyActivated, METH_O, nullptr },
        { "remove_accelerator_key_activated", (PyCFunction)ICoreAcceleratorKeys_remove_AcceleratorKeyActivated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ICoreAcceleratorKeys, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICoreAcceleratorKeys[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ICoreAcceleratorKeys[] = 
    {
        { Py_tp_new, _new_ICoreAcceleratorKeys },
        { Py_tp_dealloc, _dealloc_ICoreAcceleratorKeys },
        { Py_tp_methods, _methods_ICoreAcceleratorKeys },
        { Py_tp_getset, _getset_ICoreAcceleratorKeys },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICoreAcceleratorKeys =
    {
        "_winrt_Windows_UI_Core.ICoreAcceleratorKeys",
        sizeof(py::wrapper::Windows::UI::Core::ICoreAcceleratorKeys),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICoreAcceleratorKeys
    };

    // ----- ICoreInputSourceBase interface --------------------
    constexpr const char* const _type_name_ICoreInputSourceBase = "ICoreInputSourceBase";

    static PyObject* _new_ICoreInputSourceBase(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICoreInputSourceBase);
        return nullptr;
    }

    static void _dealloc_ICoreInputSourceBase(py::wrapper::Windows::UI::Core::ICoreInputSourceBase* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICoreInputSourceBase_get_Dispatcher(py::wrapper::Windows::UI::Core::ICoreInputSourceBase* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Dispatcher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreInputSourceBase_get_IsInputEnabled(py::wrapper::Windows::UI::Core::ICoreInputSourceBase* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsInputEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ICoreInputSourceBase_put_IsInputEnabled(py::wrapper::Windows::UI::Core::ICoreInputSourceBase* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsInputEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ICoreInputSourceBase_add_InputEnabled(py::wrapper::Windows::UI::Core::ICoreInputSourceBase* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::InputEnabledEventArgs>>(arg);

            return py::convert(self->obj.InputEnabled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreInputSourceBase_remove_InputEnabled(py::wrapper::Windows::UI::Core::ICoreInputSourceBase* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.InputEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ICoreInputSourceBase(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ICoreInputSourceBase>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICoreInputSourceBase[] = {
        { "add_input_enabled", (PyCFunction)ICoreInputSourceBase_add_InputEnabled, METH_O, nullptr },
        { "remove_input_enabled", (PyCFunction)ICoreInputSourceBase_remove_InputEnabled, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ICoreInputSourceBase, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICoreInputSourceBase[] = {
        { const_cast<char*>("dispatcher"), (getter)ICoreInputSourceBase_get_Dispatcher, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_input_enabled"), (getter)ICoreInputSourceBase_get_IsInputEnabled, (setter)ICoreInputSourceBase_put_IsInputEnabled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ICoreInputSourceBase[] = 
    {
        { Py_tp_new, _new_ICoreInputSourceBase },
        { Py_tp_dealloc, _dealloc_ICoreInputSourceBase },
        { Py_tp_methods, _methods_ICoreInputSourceBase },
        { Py_tp_getset, _getset_ICoreInputSourceBase },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICoreInputSourceBase =
    {
        "_winrt_Windows_UI_Core.ICoreInputSourceBase",
        sizeof(py::wrapper::Windows::UI::Core::ICoreInputSourceBase),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICoreInputSourceBase
    };

    // ----- ICorePointerInputSource interface --------------------
    constexpr const char* const _type_name_ICorePointerInputSource = "ICorePointerInputSource";

    static PyObject* _new_ICorePointerInputSource(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICorePointerInputSource);
        return nullptr;
    }

    static void _dealloc_ICorePointerInputSource(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICorePointerInputSource_ReleasePointerCapture(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReleasePointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_SetPointerCapture(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetPointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_get_HasCapture(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasCapture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_get_PointerCursor(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ICorePointerInputSource_put_PointerCursor(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ICorePointerInputSource_get_PointerPosition(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_add_PointerCaptureLost(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerCaptureLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_remove_PointerCaptureLost(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerCaptureLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_add_PointerEntered(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntered(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_remove_PointerEntered(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntered(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_add_PointerExited(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExited(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_remove_PointerExited(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExited(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_add_PointerMoved(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_remove_PointerMoved(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_add_PointerPressed(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_remove_PointerPressed(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_add_PointerReleased(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_remove_PointerReleased(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_add_PointerWheelChanged(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerWheelChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource_remove_PointerWheelChanged(py::wrapper::Windows::UI::Core::ICorePointerInputSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerWheelChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ICorePointerInputSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ICorePointerInputSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICorePointerInputSource[] = {
        { "release_pointer_capture", (PyCFunction)ICorePointerInputSource_ReleasePointerCapture, METH_VARARGS, nullptr },
        { "set_pointer_capture", (PyCFunction)ICorePointerInputSource_SetPointerCapture, METH_VARARGS, nullptr },
        { "add_pointer_capture_lost", (PyCFunction)ICorePointerInputSource_add_PointerCaptureLost, METH_O, nullptr },
        { "remove_pointer_capture_lost", (PyCFunction)ICorePointerInputSource_remove_PointerCaptureLost, METH_O, nullptr },
        { "add_pointer_entered", (PyCFunction)ICorePointerInputSource_add_PointerEntered, METH_O, nullptr },
        { "remove_pointer_entered", (PyCFunction)ICorePointerInputSource_remove_PointerEntered, METH_O, nullptr },
        { "add_pointer_exited", (PyCFunction)ICorePointerInputSource_add_PointerExited, METH_O, nullptr },
        { "remove_pointer_exited", (PyCFunction)ICorePointerInputSource_remove_PointerExited, METH_O, nullptr },
        { "add_pointer_moved", (PyCFunction)ICorePointerInputSource_add_PointerMoved, METH_O, nullptr },
        { "remove_pointer_moved", (PyCFunction)ICorePointerInputSource_remove_PointerMoved, METH_O, nullptr },
        { "add_pointer_pressed", (PyCFunction)ICorePointerInputSource_add_PointerPressed, METH_O, nullptr },
        { "remove_pointer_pressed", (PyCFunction)ICorePointerInputSource_remove_PointerPressed, METH_O, nullptr },
        { "add_pointer_released", (PyCFunction)ICorePointerInputSource_add_PointerReleased, METH_O, nullptr },
        { "remove_pointer_released", (PyCFunction)ICorePointerInputSource_remove_PointerReleased, METH_O, nullptr },
        { "add_pointer_wheel_changed", (PyCFunction)ICorePointerInputSource_add_PointerWheelChanged, METH_O, nullptr },
        { "remove_pointer_wheel_changed", (PyCFunction)ICorePointerInputSource_remove_PointerWheelChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ICorePointerInputSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICorePointerInputSource[] = {
        { const_cast<char*>("has_capture"), (getter)ICorePointerInputSource_get_HasCapture, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_cursor"), (getter)ICorePointerInputSource_get_PointerCursor, (setter)ICorePointerInputSource_put_PointerCursor, nullptr, nullptr },
        { const_cast<char*>("pointer_position"), (getter)ICorePointerInputSource_get_PointerPosition, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ICorePointerInputSource[] = 
    {
        { Py_tp_new, _new_ICorePointerInputSource },
        { Py_tp_dealloc, _dealloc_ICorePointerInputSource },
        { Py_tp_methods, _methods_ICorePointerInputSource },
        { Py_tp_getset, _getset_ICorePointerInputSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICorePointerInputSource =
    {
        "_winrt_Windows_UI_Core.ICorePointerInputSource",
        sizeof(py::wrapper::Windows::UI::Core::ICorePointerInputSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICorePointerInputSource
    };

    // ----- ICorePointerInputSource2 interface --------------------
    constexpr const char* const _type_name_ICorePointerInputSource2 = "ICorePointerInputSource2";

    static PyObject* _new_ICorePointerInputSource2(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICorePointerInputSource2);
        return nullptr;
    }

    static void _dealloc_ICorePointerInputSource2(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICorePointerInputSource2_ReleasePointerCapture(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReleasePointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_SetPointerCapture(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetPointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_get_DispatcherQueue(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_get_HasCapture(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasCapture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_get_PointerCursor(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ICorePointerInputSource2_put_PointerCursor(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ICorePointerInputSource2_get_PointerPosition(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_add_PointerCaptureLost(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerCaptureLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_remove_PointerCaptureLost(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerCaptureLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_add_PointerEntered(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntered(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_remove_PointerEntered(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntered(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_add_PointerExited(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExited(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_remove_PointerExited(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExited(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_add_PointerMoved(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_remove_PointerMoved(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_add_PointerPressed(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_remove_PointerPressed(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_add_PointerReleased(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_remove_PointerReleased(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_add_PointerWheelChanged(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerWheelChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerInputSource2_remove_PointerWheelChanged(py::wrapper::Windows::UI::Core::ICorePointerInputSource2* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerWheelChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ICorePointerInputSource2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ICorePointerInputSource2>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICorePointerInputSource2[] = {
        { "release_pointer_capture", (PyCFunction)ICorePointerInputSource2_ReleasePointerCapture, METH_VARARGS, nullptr },
        { "set_pointer_capture", (PyCFunction)ICorePointerInputSource2_SetPointerCapture, METH_VARARGS, nullptr },
        { "add_pointer_capture_lost", (PyCFunction)ICorePointerInputSource2_add_PointerCaptureLost, METH_O, nullptr },
        { "remove_pointer_capture_lost", (PyCFunction)ICorePointerInputSource2_remove_PointerCaptureLost, METH_O, nullptr },
        { "add_pointer_entered", (PyCFunction)ICorePointerInputSource2_add_PointerEntered, METH_O, nullptr },
        { "remove_pointer_entered", (PyCFunction)ICorePointerInputSource2_remove_PointerEntered, METH_O, nullptr },
        { "add_pointer_exited", (PyCFunction)ICorePointerInputSource2_add_PointerExited, METH_O, nullptr },
        { "remove_pointer_exited", (PyCFunction)ICorePointerInputSource2_remove_PointerExited, METH_O, nullptr },
        { "add_pointer_moved", (PyCFunction)ICorePointerInputSource2_add_PointerMoved, METH_O, nullptr },
        { "remove_pointer_moved", (PyCFunction)ICorePointerInputSource2_remove_PointerMoved, METH_O, nullptr },
        { "add_pointer_pressed", (PyCFunction)ICorePointerInputSource2_add_PointerPressed, METH_O, nullptr },
        { "remove_pointer_pressed", (PyCFunction)ICorePointerInputSource2_remove_PointerPressed, METH_O, nullptr },
        { "add_pointer_released", (PyCFunction)ICorePointerInputSource2_add_PointerReleased, METH_O, nullptr },
        { "remove_pointer_released", (PyCFunction)ICorePointerInputSource2_remove_PointerReleased, METH_O, nullptr },
        { "add_pointer_wheel_changed", (PyCFunction)ICorePointerInputSource2_add_PointerWheelChanged, METH_O, nullptr },
        { "remove_pointer_wheel_changed", (PyCFunction)ICorePointerInputSource2_remove_PointerWheelChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ICorePointerInputSource2, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICorePointerInputSource2[] = {
        { const_cast<char*>("dispatcher_queue"), (getter)ICorePointerInputSource2_get_DispatcherQueue, nullptr, nullptr, nullptr },
        { const_cast<char*>("has_capture"), (getter)ICorePointerInputSource2_get_HasCapture, nullptr, nullptr, nullptr },
        { const_cast<char*>("pointer_cursor"), (getter)ICorePointerInputSource2_get_PointerCursor, (setter)ICorePointerInputSource2_put_PointerCursor, nullptr, nullptr },
        { const_cast<char*>("pointer_position"), (getter)ICorePointerInputSource2_get_PointerPosition, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ICorePointerInputSource2[] = 
    {
        { Py_tp_new, _new_ICorePointerInputSource2 },
        { Py_tp_dealloc, _dealloc_ICorePointerInputSource2 },
        { Py_tp_methods, _methods_ICorePointerInputSource2 },
        { Py_tp_getset, _getset_ICorePointerInputSource2 },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICorePointerInputSource2 =
    {
        "_winrt_Windows_UI_Core.ICorePointerInputSource2",
        sizeof(py::wrapper::Windows::UI::Core::ICorePointerInputSource2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICorePointerInputSource2
    };

    // ----- ICorePointerRedirector interface --------------------
    constexpr const char* const _type_name_ICorePointerRedirector = "ICorePointerRedirector";

    static PyObject* _new_ICorePointerRedirector(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICorePointerRedirector);
        return nullptr;
    }

    static void _dealloc_ICorePointerRedirector(py::wrapper::Windows::UI::Core::ICorePointerRedirector* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICorePointerRedirector_add_PointerRoutedAway(py::wrapper::Windows::UI::Core::ICorePointerRedirector* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedAway(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerRedirector_remove_PointerRoutedAway(py::wrapper::Windows::UI::Core::ICorePointerRedirector* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedAway(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerRedirector_add_PointerRoutedReleased(py::wrapper::Windows::UI::Core::ICorePointerRedirector* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerRedirector_remove_PointerRoutedReleased(py::wrapper::Windows::UI::Core::ICorePointerRedirector* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerRedirector_add_PointerRoutedTo(py::wrapper::Windows::UI::Core::ICorePointerRedirector* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::ICorePointerRedirector, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerRoutedTo(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICorePointerRedirector_remove_PointerRoutedTo(py::wrapper::Windows::UI::Core::ICorePointerRedirector* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerRoutedTo(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ICorePointerRedirector(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ICorePointerRedirector>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICorePointerRedirector[] = {
        { "add_pointer_routed_away", (PyCFunction)ICorePointerRedirector_add_PointerRoutedAway, METH_O, nullptr },
        { "remove_pointer_routed_away", (PyCFunction)ICorePointerRedirector_remove_PointerRoutedAway, METH_O, nullptr },
        { "add_pointer_routed_released", (PyCFunction)ICorePointerRedirector_add_PointerRoutedReleased, METH_O, nullptr },
        { "remove_pointer_routed_released", (PyCFunction)ICorePointerRedirector_remove_PointerRoutedReleased, METH_O, nullptr },
        { "add_pointer_routed_to", (PyCFunction)ICorePointerRedirector_add_PointerRoutedTo, METH_O, nullptr },
        { "remove_pointer_routed_to", (PyCFunction)ICorePointerRedirector_remove_PointerRoutedTo, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ICorePointerRedirector, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICorePointerRedirector[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ICorePointerRedirector[] = 
    {
        { Py_tp_new, _new_ICorePointerRedirector },
        { Py_tp_dealloc, _dealloc_ICorePointerRedirector },
        { Py_tp_methods, _methods_ICorePointerRedirector },
        { Py_tp_getset, _getset_ICorePointerRedirector },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICorePointerRedirector =
    {
        "_winrt_Windows_UI_Core.ICorePointerRedirector",
        sizeof(py::wrapper::Windows::UI::Core::ICorePointerRedirector),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICorePointerRedirector
    };

    // ----- ICoreWindow interface --------------------
    constexpr const char* const _type_name_ICoreWindow = "ICoreWindow";

    static PyObject* _new_ICoreWindow(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICoreWindow);
        return nullptr;
    }

    static void _dealloc_ICoreWindow(py::wrapper::Windows::UI::Core::ICoreWindow* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICoreWindow_Activate(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Activate();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_Close(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_GetAsyncKeyState(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::VirtualKey>(args, 0);

                return py::convert(self->obj.GetAsyncKeyState(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_GetKeyState(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::VirtualKey>(args, 0);

                return py::convert(self->obj.GetKeyState(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_ReleasePointerCapture(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReleasePointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_SetPointerCapture(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetPointerCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_get_AutomationHostProvider(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutomationHostProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_get_Bounds(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_get_CustomProperties(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CustomProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_get_Dispatcher(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Dispatcher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_get_FlowDirection(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FlowDirection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ICoreWindow_put_FlowDirection(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreWindowFlowDirection>(arg);

            self->obj.FlowDirection(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ICoreWindow_get_IsInputEnabled(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsInputEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ICoreWindow_put_IsInputEnabled(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsInputEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ICoreWindow_get_PointerCursor(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ICoreWindow_put_PointerCursor(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ICoreWindow_get_PointerPosition(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PointerPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_get_Visible(py::wrapper::Windows::UI::Core::ICoreWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Visible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_Activated(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::WindowActivatedEventArgs>>(arg);

            return py::convert(self->obj.Activated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_Activated(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Activated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_AutomationProviderRequested(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::AutomationProviderRequestedEventArgs>>(arg);

            return py::convert(self->obj.AutomationProviderRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_AutomationProviderRequested(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AutomationProviderRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_CharacterReceived(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::CharacterReceivedEventArgs>>(arg);

            return py::convert(self->obj.CharacterReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_CharacterReceived(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CharacterReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_Closed(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::CoreWindowEventArgs>>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_Closed(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_InputEnabled(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::InputEnabledEventArgs>>(arg);

            return py::convert(self->obj.InputEnabled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_InputEnabled(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.InputEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_KeyDown(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::KeyEventArgs>>(arg);

            return py::convert(self->obj.KeyDown(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_KeyDown(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.KeyDown(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_KeyUp(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::KeyEventArgs>>(arg);

            return py::convert(self->obj.KeyUp(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_KeyUp(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.KeyUp(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_PointerCaptureLost(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerCaptureLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_PointerCaptureLost(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerCaptureLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_PointerEntered(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntered(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_PointerEntered(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntered(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_PointerExited(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExited(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_PointerExited(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExited(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_PointerMoved(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_PointerMoved(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_PointerPressed(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_PointerPressed(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_PointerReleased(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_PointerReleased(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_PointerWheelChanged(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerWheelChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_PointerWheelChanged(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerWheelChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_SizeChanged(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::WindowSizeChangedEventArgs>>(arg);

            return py::convert(self->obj.SizeChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_SizeChanged(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SizeChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_TouchHitTesting(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::TouchHitTestingEventArgs>>(arg);

            return py::convert(self->obj.TouchHitTesting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_TouchHitTesting(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TouchHitTesting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_add_VisibilityChanged(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Core::CoreWindow, winrt::Windows::UI::Core::VisibilityChangedEventArgs>>(arg);

            return py::convert(self->obj.VisibilityChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreWindow_remove_VisibilityChanged(py::wrapper::Windows::UI::Core::ICoreWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VisibilityChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ICoreWindow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ICoreWindow>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICoreWindow[] = {
        { "activate", (PyCFunction)ICoreWindow_Activate, METH_VARARGS, nullptr },
        { "close", (PyCFunction)ICoreWindow_Close, METH_VARARGS, nullptr },
        { "get_async_key_state", (PyCFunction)ICoreWindow_GetAsyncKeyState, METH_VARARGS, nullptr },
        { "get_key_state", (PyCFunction)ICoreWindow_GetKeyState, METH_VARARGS, nullptr },
        { "release_pointer_capture", (PyCFunction)ICoreWindow_ReleasePointerCapture, METH_VARARGS, nullptr },
        { "set_pointer_capture", (PyCFunction)ICoreWindow_SetPointerCapture, METH_VARARGS, nullptr },
        { "add_activated", (PyCFunction)ICoreWindow_add_Activated, METH_O, nullptr },
        { "remove_activated", (PyCFunction)ICoreWindow_remove_Activated, METH_O, nullptr },
        { "add_automation_provider_requested", (PyCFunction)ICoreWindow_add_AutomationProviderRequested, METH_O, nullptr },
        { "remove_automation_provider_requested", (PyCFunction)ICoreWindow_remove_AutomationProviderRequested, METH_O, nullptr },
        { "add_character_received", (PyCFunction)ICoreWindow_add_CharacterReceived, METH_O, nullptr },
        { "remove_character_received", (PyCFunction)ICoreWindow_remove_CharacterReceived, METH_O, nullptr },
        { "add_closed", (PyCFunction)ICoreWindow_add_Closed, METH_O, nullptr },
        { "remove_closed", (PyCFunction)ICoreWindow_remove_Closed, METH_O, nullptr },
        { "add_input_enabled", (PyCFunction)ICoreWindow_add_InputEnabled, METH_O, nullptr },
        { "remove_input_enabled", (PyCFunction)ICoreWindow_remove_InputEnabled, METH_O, nullptr },
        { "add_key_down", (PyCFunction)ICoreWindow_add_KeyDown, METH_O, nullptr },
        { "remove_key_down", (PyCFunction)ICoreWindow_remove_KeyDown, METH_O, nullptr },
        { "add_key_up", (PyCFunction)ICoreWindow_add_KeyUp, METH_O, nullptr },
        { "remove_key_up", (PyCFunction)ICoreWindow_remove_KeyUp, METH_O, nullptr },
        { "add_pointer_capture_lost", (PyCFunction)ICoreWindow_add_PointerCaptureLost, METH_O, nullptr },
        { "remove_pointer_capture_lost", (PyCFunction)ICoreWindow_remove_PointerCaptureLost, METH_O, nullptr },
        { "add_pointer_entered", (PyCFunction)ICoreWindow_add_PointerEntered, METH_O, nullptr },
        { "remove_pointer_entered", (PyCFunction)ICoreWindow_remove_PointerEntered, METH_O, nullptr },
        { "add_pointer_exited", (PyCFunction)ICoreWindow_add_PointerExited, METH_O, nullptr },
        { "remove_pointer_exited", (PyCFunction)ICoreWindow_remove_PointerExited, METH_O, nullptr },
        { "add_pointer_moved", (PyCFunction)ICoreWindow_add_PointerMoved, METH_O, nullptr },
        { "remove_pointer_moved", (PyCFunction)ICoreWindow_remove_PointerMoved, METH_O, nullptr },
        { "add_pointer_pressed", (PyCFunction)ICoreWindow_add_PointerPressed, METH_O, nullptr },
        { "remove_pointer_pressed", (PyCFunction)ICoreWindow_remove_PointerPressed, METH_O, nullptr },
        { "add_pointer_released", (PyCFunction)ICoreWindow_add_PointerReleased, METH_O, nullptr },
        { "remove_pointer_released", (PyCFunction)ICoreWindow_remove_PointerReleased, METH_O, nullptr },
        { "add_pointer_wheel_changed", (PyCFunction)ICoreWindow_add_PointerWheelChanged, METH_O, nullptr },
        { "remove_pointer_wheel_changed", (PyCFunction)ICoreWindow_remove_PointerWheelChanged, METH_O, nullptr },
        { "add_size_changed", (PyCFunction)ICoreWindow_add_SizeChanged, METH_O, nullptr },
        { "remove_size_changed", (PyCFunction)ICoreWindow_remove_SizeChanged, METH_O, nullptr },
        { "add_touch_hit_testing", (PyCFunction)ICoreWindow_add_TouchHitTesting, METH_O, nullptr },
        { "remove_touch_hit_testing", (PyCFunction)ICoreWindow_remove_TouchHitTesting, METH_O, nullptr },
        { "add_visibility_changed", (PyCFunction)ICoreWindow_add_VisibilityChanged, METH_O, nullptr },
        { "remove_visibility_changed", (PyCFunction)ICoreWindow_remove_VisibilityChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ICoreWindow, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICoreWindow[] = {
        { const_cast<char*>("automation_host_provider"), (getter)ICoreWindow_get_AutomationHostProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("bounds"), (getter)ICoreWindow_get_Bounds, nullptr, nullptr, nullptr },
        { const_cast<char*>("custom_properties"), (getter)ICoreWindow_get_CustomProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("dispatcher"), (getter)ICoreWindow_get_Dispatcher, nullptr, nullptr, nullptr },
        { const_cast<char*>("flow_direction"), (getter)ICoreWindow_get_FlowDirection, (setter)ICoreWindow_put_FlowDirection, nullptr, nullptr },
        { const_cast<char*>("is_input_enabled"), (getter)ICoreWindow_get_IsInputEnabled, (setter)ICoreWindow_put_IsInputEnabled, nullptr, nullptr },
        { const_cast<char*>("pointer_cursor"), (getter)ICoreWindow_get_PointerCursor, (setter)ICoreWindow_put_PointerCursor, nullptr, nullptr },
        { const_cast<char*>("pointer_position"), (getter)ICoreWindow_get_PointerPosition, nullptr, nullptr, nullptr },
        { const_cast<char*>("visible"), (getter)ICoreWindow_get_Visible, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ICoreWindow[] = 
    {
        { Py_tp_new, _new_ICoreWindow },
        { Py_tp_dealloc, _dealloc_ICoreWindow },
        { Py_tp_methods, _methods_ICoreWindow },
        { Py_tp_getset, _getset_ICoreWindow },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICoreWindow =
    {
        "_winrt_Windows_UI_Core.ICoreWindow",
        sizeof(py::wrapper::Windows::UI::Core::ICoreWindow),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICoreWindow
    };

    // ----- ICoreWindowEventArgs interface --------------------
    constexpr const char* const _type_name_ICoreWindowEventArgs = "ICoreWindowEventArgs";

    static PyObject* _new_ICoreWindowEventArgs(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICoreWindowEventArgs);
        return nullptr;
    }

    static void _dealloc_ICoreWindowEventArgs(py::wrapper::Windows::UI::Core::ICoreWindowEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICoreWindowEventArgs_get_Handled(py::wrapper::Windows::UI::Core::ICoreWindowEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ICoreWindowEventArgs_put_Handled(py::wrapper::Windows::UI::Core::ICoreWindowEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ICoreWindowEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::ICoreWindowEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICoreWindowEventArgs[] = {
        { "_from", (PyCFunction)_from_ICoreWindowEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICoreWindowEventArgs[] = {
        { const_cast<char*>("handled"), (getter)ICoreWindowEventArgs_get_Handled, (setter)ICoreWindowEventArgs_put_Handled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ICoreWindowEventArgs[] = 
    {
        { Py_tp_new, _new_ICoreWindowEventArgs },
        { Py_tp_dealloc, _dealloc_ICoreWindowEventArgs },
        { Py_tp_methods, _methods_ICoreWindowEventArgs },
        { Py_tp_getset, _getset_ICoreWindowEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICoreWindowEventArgs =
    {
        "_winrt_Windows_UI_Core.ICoreWindowEventArgs",
        sizeof(py::wrapper::Windows::UI::Core::ICoreWindowEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICoreWindowEventArgs
    };

    // ----- IInitializeWithCoreWindow interface --------------------
    constexpr const char* const _type_name_IInitializeWithCoreWindow = "IInitializeWithCoreWindow";

    static PyObject* _new_IInitializeWithCoreWindow(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IInitializeWithCoreWindow);
        return nullptr;
    }

    static void _dealloc_IInitializeWithCoreWindow(py::wrapper::Windows::UI::Core::IInitializeWithCoreWindow* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IInitializeWithCoreWindow_Initialize(py::wrapper::Windows::UI::Core::IInitializeWithCoreWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreWindow>(args, 0);

                self->obj.Initialize(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IInitializeWithCoreWindow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::IInitializeWithCoreWindow>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IInitializeWithCoreWindow[] = {
        { "initialize", (PyCFunction)IInitializeWithCoreWindow_Initialize, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IInitializeWithCoreWindow, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IInitializeWithCoreWindow[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IInitializeWithCoreWindow[] = 
    {
        { Py_tp_new, _new_IInitializeWithCoreWindow },
        { Py_tp_dealloc, _dealloc_IInitializeWithCoreWindow },
        { Py_tp_methods, _methods_IInitializeWithCoreWindow },
        { Py_tp_getset, _getset_IInitializeWithCoreWindow },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IInitializeWithCoreWindow =
    {
        "_winrt_Windows_UI_Core.IInitializeWithCoreWindow",
        sizeof(py::wrapper::Windows::UI::Core::IInitializeWithCoreWindow),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IInitializeWithCoreWindow
    };

    // ----- CorePhysicalKeyStatus struct --------------------
    constexpr const char* const _type_name_CorePhysicalKeyStatus = "CorePhysicalKeyStatus";

    PyObject* _new_CorePhysicalKeyStatus(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::UI::Core::CorePhysicalKeyStatus return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::UI::Core::CorePhysicalKeyStatus>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        uint32_t _RepeatCount{};
        uint32_t _ScanCode{};
        bool _IsExtendedKey{};
        bool _IsMenuKeyDown{};
        bool _WasKeyDown{};
        bool _IsKeyReleased{};

        static const char* kwlist[] = {"repeat_count", "scan_code", "is_extended_key", "is_menu_key_down", "was_key_down", "is_key_released", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "IIpppp", const_cast<char**>(kwlist), &_RepeatCount, &_ScanCode, &_IsExtendedKey, &_IsMenuKeyDown, &_WasKeyDown, &_IsKeyReleased))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::UI::Core::CorePhysicalKeyStatus return_value{ _RepeatCount, _ScanCode, _IsExtendedKey, _IsMenuKeyDown, _WasKeyDown, _IsKeyReleased };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_CorePhysicalKeyStatus(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self)
    {
    }

    static PyObject* CorePhysicalKeyStatus_get_RepeatCount(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RepeatCount);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CorePhysicalKeyStatus_set_RepeatCount(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.RepeatCount = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CorePhysicalKeyStatus_get_ScanCode(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ScanCode);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CorePhysicalKeyStatus_set_ScanCode(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.ScanCode = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CorePhysicalKeyStatus_get_IsExtendedKey(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsExtendedKey);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CorePhysicalKeyStatus_set_IsExtendedKey(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.IsExtendedKey = py::converter<bool>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CorePhysicalKeyStatus_get_IsMenuKeyDown(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsMenuKeyDown);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CorePhysicalKeyStatus_set_IsMenuKeyDown(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.IsMenuKeyDown = py::converter<bool>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CorePhysicalKeyStatus_get_WasKeyDown(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WasKeyDown);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CorePhysicalKeyStatus_set_WasKeyDown(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.WasKeyDown = py::converter<bool>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CorePhysicalKeyStatus_get_IsKeyReleased(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsKeyReleased);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CorePhysicalKeyStatus_set_IsKeyReleased(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.IsKeyReleased = py::converter<bool>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_CorePhysicalKeyStatus[] = {
        { const_cast<char*>("repeat_count"), (getter)CorePhysicalKeyStatus_get_RepeatCount, (setter)CorePhysicalKeyStatus_set_RepeatCount, nullptr, nullptr },
        { const_cast<char*>("scan_code"), (getter)CorePhysicalKeyStatus_get_ScanCode, (setter)CorePhysicalKeyStatus_set_ScanCode, nullptr, nullptr },
        { const_cast<char*>("is_extended_key"), (getter)CorePhysicalKeyStatus_get_IsExtendedKey, (setter)CorePhysicalKeyStatus_set_IsExtendedKey, nullptr, nullptr },
        { const_cast<char*>("is_menu_key_down"), (getter)CorePhysicalKeyStatus_get_IsMenuKeyDown, (setter)CorePhysicalKeyStatus_set_IsMenuKeyDown, nullptr, nullptr },
        { const_cast<char*>("was_key_down"), (getter)CorePhysicalKeyStatus_get_WasKeyDown, (setter)CorePhysicalKeyStatus_set_WasKeyDown, nullptr, nullptr },
        { const_cast<char*>("is_key_released"), (getter)CorePhysicalKeyStatus_get_IsKeyReleased, (setter)CorePhysicalKeyStatus_set_IsKeyReleased, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CorePhysicalKeyStatus[] = 
    {
        { Py_tp_new, _new_CorePhysicalKeyStatus },
        { Py_tp_dealloc, _dealloc_CorePhysicalKeyStatus },
        { Py_tp_getset, _getset_CorePhysicalKeyStatus },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CorePhysicalKeyStatus =
    {
        "_winrt_Windows_UI_Core.CorePhysicalKeyStatus",
        sizeof(py::wrapper::Windows::UI::Core::CorePhysicalKeyStatus),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CorePhysicalKeyStatus
    };

    // ----- CoreProximityEvaluation struct --------------------
    constexpr const char* const _type_name_CoreProximityEvaluation = "CoreProximityEvaluation";

    PyObject* _new_CoreProximityEvaluation(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::UI::Core::CoreProximityEvaluation return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::UI::Core::CoreProximityEvaluation>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        int32_t _Score{};
        PyObject* _AdjustedPoint{};

        static const char* kwlist[] = {"score", "adjusted_point", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "iO", const_cast<char**>(kwlist), &_Score, &_AdjustedPoint))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::UI::Core::CoreProximityEvaluation return_value{ _Score, py::converter<winrt::Windows::Foundation::Point>::convert_to(_AdjustedPoint) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_CoreProximityEvaluation(py::wrapper::Windows::UI::Core::CoreProximityEvaluation* self)
    {
    }

    static PyObject* CoreProximityEvaluation_get_Score(py::wrapper::Windows::UI::Core::CoreProximityEvaluation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Score);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreProximityEvaluation_set_Score(py::wrapper::Windows::UI::Core::CoreProximityEvaluation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Score = py::converter<int32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreProximityEvaluation_get_AdjustedPoint(py::wrapper::Windows::UI::Core::CoreProximityEvaluation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdjustedPoint);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreProximityEvaluation_set_AdjustedPoint(py::wrapper::Windows::UI::Core::CoreProximityEvaluation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.AdjustedPoint = py::converter<winrt::Windows::Foundation::Point>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_CoreProximityEvaluation[] = {
        { const_cast<char*>("score"), (getter)CoreProximityEvaluation_get_Score, (setter)CoreProximityEvaluation_set_Score, nullptr, nullptr },
        { const_cast<char*>("adjusted_point"), (getter)CoreProximityEvaluation_get_AdjustedPoint, (setter)CoreProximityEvaluation_set_AdjustedPoint, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreProximityEvaluation[] = 
    {
        { Py_tp_new, _new_CoreProximityEvaluation },
        { Py_tp_dealloc, _dealloc_CoreProximityEvaluation },
        { Py_tp_getset, _getset_CoreProximityEvaluation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreProximityEvaluation =
    {
        "_winrt_Windows_UI_Core.CoreProximityEvaluation",
        sizeof(py::wrapper::Windows::UI::Core::CoreProximityEvaluation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreProximityEvaluation
    };

    // ----- Windows.UI.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::Core::AcceleratorKeyEventArgs>::python_type = py::register_python_type(module, _type_name_AcceleratorKeyEventArgs, &_type_spec_AcceleratorKeyEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::AutomationProviderRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_AutomationProviderRequestedEventArgs, &_type_spec_AutomationProviderRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::BackRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_BackRequestedEventArgs, &_type_spec_BackRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CharacterReceivedEventArgs>::python_type = py::register_python_type(module, _type_name_CharacterReceivedEventArgs, &_type_spec_CharacterReceivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_ClosestInteractiveBoundsRequestedEventArgs, &_type_spec_ClosestInteractiveBoundsRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreAcceleratorKeys>::python_type = py::register_python_type(module, _type_name_CoreAcceleratorKeys, &_type_spec_CoreAcceleratorKeys, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreComponentInputSource>::python_type = py::register_python_type(module, _type_name_CoreComponentInputSource, &_type_spec_CoreComponentInputSource, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreCursor>::python_type = py::register_python_type(module, _type_name_CoreCursor, &_type_spec_CoreCursor, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreDispatcher>::python_type = py::register_python_type(module, _type_name_CoreDispatcher, &_type_spec_CoreDispatcher, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreIndependentInputSource>::python_type = py::register_python_type(module, _type_name_CoreIndependentInputSource, &_type_spec_CoreIndependentInputSource, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreIndependentInputSourceController>::python_type = py::register_python_type(module, _type_name_CoreIndependentInputSourceController, &_type_spec_CoreIndependentInputSourceController, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreWindow>::python_type = py::register_python_type(module, _type_name_CoreWindow, &_type_spec_CoreWindow, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreWindowEventArgs>::python_type = py::register_python_type(module, _type_name_CoreWindowEventArgs, &_type_spec_CoreWindowEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreWindowResizeManager>::python_type = py::register_python_type(module, _type_name_CoreWindowResizeManager, &_type_spec_CoreWindowResizeManager, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::IdleDispatchedHandlerArgs>::python_type = py::register_python_type(module, _type_name_IdleDispatchedHandlerArgs, &_type_spec_IdleDispatchedHandlerArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::InputEnabledEventArgs>::python_type = py::register_python_type(module, _type_name_InputEnabledEventArgs, &_type_spec_InputEnabledEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::KeyEventArgs>::python_type = py::register_python_type(module, _type_name_KeyEventArgs, &_type_spec_KeyEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::PointerEventArgs>::python_type = py::register_python_type(module, _type_name_PointerEventArgs, &_type_spec_PointerEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::SystemNavigationManager>::python_type = py::register_python_type(module, _type_name_SystemNavigationManager, &_type_spec_SystemNavigationManager, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::TouchHitTestingEventArgs>::python_type = py::register_python_type(module, _type_name_TouchHitTestingEventArgs, &_type_spec_TouchHitTestingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::VisibilityChangedEventArgs>::python_type = py::register_python_type(module, _type_name_VisibilityChangedEventArgs, &_type_spec_VisibilityChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::WindowActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WindowActivatedEventArgs, &_type_spec_WindowActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::WindowSizeChangedEventArgs>::python_type = py::register_python_type(module, _type_name_WindowSizeChangedEventArgs, &_type_spec_WindowSizeChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ICoreAcceleratorKeys>::python_type = py::register_python_type(module, _type_name_ICoreAcceleratorKeys, &_type_spec_ICoreAcceleratorKeys, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ICoreInputSourceBase>::python_type = py::register_python_type(module, _type_name_ICoreInputSourceBase, &_type_spec_ICoreInputSourceBase, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ICorePointerInputSource>::python_type = py::register_python_type(module, _type_name_ICorePointerInputSource, &_type_spec_ICorePointerInputSource, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ICorePointerInputSource2>::python_type = py::register_python_type(module, _type_name_ICorePointerInputSource2, &_type_spec_ICorePointerInputSource2, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ICorePointerRedirector>::python_type = py::register_python_type(module, _type_name_ICorePointerRedirector, &_type_spec_ICorePointerRedirector, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ICoreWindow>::python_type = py::register_python_type(module, _type_name_ICoreWindow, &_type_spec_ICoreWindow, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::ICoreWindowEventArgs>::python_type = py::register_python_type(module, _type_name_ICoreWindowEventArgs, &_type_spec_ICoreWindowEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::IInitializeWithCoreWindow>::python_type = py::register_python_type(module, _type_name_IInitializeWithCoreWindow, &_type_spec_IInitializeWithCoreWindow, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CorePhysicalKeyStatus>::python_type = py::register_python_type(module, _type_name_CorePhysicalKeyStatus, &_type_spec_CorePhysicalKeyStatus, bases.get());
            py::winrt_type<winrt::Windows::UI::Core::CoreProximityEvaluation>::python_type = py::register_python_type(module, _type_name_CoreProximityEvaluation, &_type_spec_CoreProximityEvaluation, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::Core::module_def);
}
