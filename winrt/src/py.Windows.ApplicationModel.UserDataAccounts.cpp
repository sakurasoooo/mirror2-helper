// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.UserDataAccounts.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccount>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>::python_type;

namespace py::cpp::Windows::ApplicationModel::UserDataAccounts
{
    // ----- UserDataAccount class --------------------
    constexpr const char* const _type_name_UserDataAccount = "UserDataAccount";

    static PyObject* _new_UserDataAccount(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccount);
        return nullptr;
    }

    static void _dealloc_UserDataAccount(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccount_DeleteAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DeleteAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindAppointmentCalendarsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindAppointmentCalendarsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindContactAnnotationListsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindContactAnnotationListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindContactGroupsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindContactGroupsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindContactListsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindContactListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindEmailMailboxesAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindEmailMailboxesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_FindUserDataTaskListsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindUserDataTaskListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_SaveAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SaveAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_TryShowCreateContactGroupAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryShowCreateContactGroupAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_UserDisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserDisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_UserDisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.UserDisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OtherAppReadAccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountOtherAppReadAccess>(arg);

            self->obj.OtherAppReadAccess(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_Icon(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Icon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_Icon(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.Icon(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_DeviceAccountTypeId(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceAccountTypeId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_Id(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_PackageFamilyName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_IsProtectedUnderLock(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsProtectedUnderLock());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_IsProtectedUnderLock(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsProtectedUnderLock(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_EnterpriseId(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EnterpriseId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_ExplictReadAccessPackageFamilyNames(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExplictReadAccessPackageFamilyNames());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccount_get_CanShowCreateContactGroup(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanShowCreateContactGroup());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataAccount_put_CanShowCreateContactGroup(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.CanShowCreateContactGroup(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataAccount_get_ProviderProperties(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccount(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccount>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccount[] = {
        { "delete_async", (PyCFunction)UserDataAccount_DeleteAsync, METH_VARARGS, nullptr },
        { "find_appointment_calendars_async", (PyCFunction)UserDataAccount_FindAppointmentCalendarsAsync, METH_VARARGS, nullptr },
        { "find_contact_annotation_lists_async", (PyCFunction)UserDataAccount_FindContactAnnotationListsAsync, METH_VARARGS, nullptr },
        { "find_contact_groups_async", (PyCFunction)UserDataAccount_FindContactGroupsAsync, METH_VARARGS, nullptr },
        { "find_contact_lists_async", (PyCFunction)UserDataAccount_FindContactListsAsync, METH_VARARGS, nullptr },
        { "find_email_mailboxes_async", (PyCFunction)UserDataAccount_FindEmailMailboxesAsync, METH_VARARGS, nullptr },
        { "find_user_data_task_lists_async", (PyCFunction)UserDataAccount_FindUserDataTaskListsAsync, METH_VARARGS, nullptr },
        { "save_async", (PyCFunction)UserDataAccount_SaveAsync, METH_VARARGS, nullptr },
        { "try_show_create_contact_group_async", (PyCFunction)UserDataAccount_TryShowCreateContactGroupAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataAccount, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccount[] = {
        { const_cast<char*>("user_display_name"), (getter)UserDataAccount_get_UserDisplayName, (setter)UserDataAccount_put_UserDisplayName, nullptr, nullptr },
        { const_cast<char*>("other_app_read_access"), (getter)UserDataAccount_get_OtherAppReadAccess, (setter)UserDataAccount_put_OtherAppReadAccess, nullptr, nullptr },
        { const_cast<char*>("icon"), (getter)UserDataAccount_get_Icon, (setter)UserDataAccount_put_Icon, nullptr, nullptr },
        { const_cast<char*>("device_account_type_id"), (getter)UserDataAccount_get_DeviceAccountTypeId, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)UserDataAccount_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("package_family_name"), (getter)UserDataAccount_get_PackageFamilyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_protected_under_lock"), (getter)UserDataAccount_get_IsProtectedUnderLock, (setter)UserDataAccount_put_IsProtectedUnderLock, nullptr, nullptr },
        { const_cast<char*>("enterprise_id"), (getter)UserDataAccount_get_EnterpriseId, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)UserDataAccount_get_DisplayName, (setter)UserDataAccount_put_DisplayName, nullptr, nullptr },
        { const_cast<char*>("explict_read_access_package_family_names"), (getter)UserDataAccount_get_ExplictReadAccessPackageFamilyNames, nullptr, nullptr, nullptr },
        { const_cast<char*>("can_show_create_contact_group"), (getter)UserDataAccount_get_CanShowCreateContactGroup, (setter)UserDataAccount_put_CanShowCreateContactGroup, nullptr, nullptr },
        { const_cast<char*>("provider_properties"), (getter)UserDataAccount_get_ProviderProperties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccount[] = 
    {
        { Py_tp_new, _new_UserDataAccount },
        { Py_tp_dealloc, _dealloc_UserDataAccount },
        { Py_tp_methods, _methods_UserDataAccount },
        { Py_tp_getset, _getset_UserDataAccount },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccount =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts.UserDataAccount",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccount),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccount
    };

    // ----- UserDataAccountManager class --------------------
    constexpr const char* const _type_name_UserDataAccountManager = "UserDataAccountManager";

    static PyObject* _new_UserDataAccountManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountManager);
        return nullptr;
    }

    static PyObject* UserDataAccountManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_RequestStoreAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreAccessType>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::RequestStoreAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_ShowAccountErrorResolverAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::ShowAccountErrorResolverAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_ShowAccountSettingsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::ShowAccountSettingsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManager_ShowAddAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountContentKinds>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager::ShowAddAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountManager[] = {
        { "get_for_user", (PyCFunction)UserDataAccountManager_GetForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "request_store_async", (PyCFunction)UserDataAccountManager_RequestStoreAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "show_account_error_resolver_async", (PyCFunction)UserDataAccountManager_ShowAccountErrorResolverAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "show_account_settings_async", (PyCFunction)UserDataAccountManager_ShowAccountSettingsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "show_add_account_async", (PyCFunction)UserDataAccountManager_ShowAddAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountManager[] = 
    {
        { Py_tp_new, _new_UserDataAccountManager },
        { Py_tp_methods, _methods_UserDataAccountManager },
        { Py_tp_getset, _getset_UserDataAccountManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountManager =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts.UserDataAccountManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountManager
    };

    // ----- UserDataAccountManagerForUser class --------------------
    constexpr const char* const _type_name_UserDataAccountManagerForUser = "UserDataAccountManagerForUser";

    static PyObject* _new_UserDataAccountManagerForUser(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountManagerForUser);
        return nullptr;
    }

    static void _dealloc_UserDataAccountManagerForUser(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccountManagerForUser_RequestStoreAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreAccessType>(args, 0);

                return py::convert(self->obj.RequestStoreAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountManagerForUser_get_User(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccountManagerForUser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountManagerForUser[] = {
        { "request_store_async", (PyCFunction)UserDataAccountManagerForUser_RequestStoreAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataAccountManagerForUser, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountManagerForUser[] = {
        { const_cast<char*>("user"), (getter)UserDataAccountManagerForUser_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountManagerForUser[] = 
    {
        { Py_tp_new, _new_UserDataAccountManagerForUser },
        { Py_tp_dealloc, _dealloc_UserDataAccountManagerForUser },
        { Py_tp_methods, _methods_UserDataAccountManagerForUser },
        { Py_tp_getset, _getset_UserDataAccountManagerForUser },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountManagerForUser =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts.UserDataAccountManagerForUser",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountManagerForUser
    };

    // ----- UserDataAccountStore class --------------------
    constexpr const char* const _type_name_UserDataAccountStore = "UserDataAccountStore";

    static PyObject* _new_UserDataAccountStore(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountStore);
        return nullptr;
    }

    static void _dealloc_UserDataAccountStore(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccountStore_CreateAccountAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.CreateAccountAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.CreateAccountAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_FindAccountsAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindAccountsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_GetAccountAsync(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_add_StoreChanged(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore, winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>>(arg);

            return py::convert(self->obj.StoreChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountStore_remove_StoreChanged(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StoreChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccountStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountStore[] = {
        { "create_account_async", (PyCFunction)UserDataAccountStore_CreateAccountAsync, METH_VARARGS, nullptr },
        { "find_accounts_async", (PyCFunction)UserDataAccountStore_FindAccountsAsync, METH_VARARGS, nullptr },
        { "get_account_async", (PyCFunction)UserDataAccountStore_GetAccountAsync, METH_VARARGS, nullptr },
        { "add_store_changed", (PyCFunction)UserDataAccountStore_add_StoreChanged, METH_O, nullptr },
        { "remove_store_changed", (PyCFunction)UserDataAccountStore_remove_StoreChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_UserDataAccountStore, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountStore[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountStore[] = 
    {
        { Py_tp_new, _new_UserDataAccountStore },
        { Py_tp_dealloc, _dealloc_UserDataAccountStore },
        { Py_tp_methods, _methods_UserDataAccountStore },
        { Py_tp_getset, _getset_UserDataAccountStore },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountStore =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts.UserDataAccountStore",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountStore
    };

    // ----- UserDataAccountStoreChangedEventArgs class --------------------
    constexpr const char* const _type_name_UserDataAccountStoreChangedEventArgs = "UserDataAccountStoreChangedEventArgs";

    static PyObject* _new_UserDataAccountStoreChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountStoreChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_UserDataAccountStoreChangedEventArgs(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccountStoreChangedEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccountStoreChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountStoreChangedEventArgs[] = {
        { "get_deferral", (PyCFunction)UserDataAccountStoreChangedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataAccountStoreChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountStoreChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountStoreChangedEventArgs[] = 
    {
        { Py_tp_new, _new_UserDataAccountStoreChangedEventArgs },
        { Py_tp_dealloc, _dealloc_UserDataAccountStoreChangedEventArgs },
        { Py_tp_methods, _methods_UserDataAccountStoreChangedEventArgs },
        { Py_tp_getset, _getset_UserDataAccountStoreChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountStoreChangedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts.UserDataAccountStoreChangedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountStoreChangedEventArgs
    };

    // ----- Windows.ApplicationModel.UserDataAccounts Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccount>::python_type = py::register_python_type(module, _type_name_UserDataAccount, &_type_spec_UserDataAccount, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManager>::python_type = py::register_python_type(module, _type_name_UserDataAccountManager, &_type_spec_UserDataAccountManager, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountManagerForUser>::python_type = py::register_python_type(module, _type_name_UserDataAccountManagerForUser, &_type_spec_UserDataAccountManagerForUser, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore>::python_type = py::register_python_type(module, _type_name_UserDataAccountStore, &_type_spec_UserDataAccountStore, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreChangedEventArgs>::python_type = py::register_python_type(module, _type_name_UserDataAccountStoreChangedEventArgs, &_type_spec_UserDataAccountStoreChangedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.UserDataAccounts");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_UserDataAccounts",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::UserDataAccounts

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_UserDataAccounts (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::UserDataAccounts::module_def);
}
