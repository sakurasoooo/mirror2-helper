// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.WindowManagement.Preview.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::Preview::WindowManagementPreview>::python_type;

namespace py::cpp::Windows::UI::WindowManagement::Preview
{
    // ----- WindowManagementPreview class --------------------
    constexpr const char* const _type_name_WindowManagementPreview = "WindowManagementPreview";

    static PyObject* _new_WindowManagementPreview(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowManagementPreview);
        return nullptr;
    }

    static void _dealloc_WindowManagementPreview(py::wrapper::Windows::UI::WindowManagement::Preview::WindowManagementPreview* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WindowManagementPreview_SetPreferredMinSize(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindow>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Size>(args, 1);

                winrt::Windows::UI::WindowManagement::Preview::WindowManagementPreview::SetPreferredMinSize(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_WindowManagementPreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::Preview::WindowManagementPreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowManagementPreview[] = {
        { "set_preferred_min_size", (PyCFunction)WindowManagementPreview_SetPreferredMinSize, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_WindowManagementPreview, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowManagementPreview[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowManagementPreview[] = 
    {
        { Py_tp_new, _new_WindowManagementPreview },
        { Py_tp_dealloc, _dealloc_WindowManagementPreview },
        { Py_tp_methods, _methods_WindowManagementPreview },
        { Py_tp_getset, _getset_WindowManagementPreview },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowManagementPreview =
    {
        "_winrt_Windows_UI_WindowManagement_Preview.WindowManagementPreview",
        sizeof(py::wrapper::Windows::UI::WindowManagement::Preview::WindowManagementPreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowManagementPreview
    };

    // ----- Windows.UI.WindowManagement.Preview Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::WindowManagement::Preview::WindowManagementPreview>::python_type = py::register_python_type(module, _type_name_WindowManagementPreview, &_type_spec_WindowManagementPreview, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.WindowManagement.Preview");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_WindowManagement_Preview",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::WindowManagement::Preview

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_WindowManagement_Preview (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::WindowManagement::Preview::module_def);
}
