// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.UserDataTasks.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskList>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore>::python_type;

namespace py::cpp::Windows::ApplicationModel::UserDataTasks
{
    // ----- UserDataTask class --------------------
    constexpr const char* const _type_name_UserDataTask = "UserDataTask";

    static PyObject* _new_UserDataTask(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTask(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTask_get_RegenerationProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RegenerationProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_RegenerationProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties>(arg);

            self->obj.RegenerationProperties(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Priority(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Priority());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Priority(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskPriority>(arg);

            self->obj.Priority(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_CompletedDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CompletedDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_CompletedDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.CompletedDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_DueDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DueDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_DueDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.DueDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_DetailsKind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DetailsKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_DetailsKind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskDetailsKind>(arg);

            self->obj.DetailsKind(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_StartDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_StartDate(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.StartDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Details(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Details());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Details(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Details(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Subject(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Subject(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Subject(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Sensitivity(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Sensitivity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Sensitivity(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskSensitivity>(arg);

            self->obj.Sensitivity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_RemoteId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RemoteId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_RemoteId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.RemoteId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Reminder(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reminder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_Reminder(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.Reminder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_RecurrenceProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecurrenceProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTask_put_RecurrenceProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties>(arg);

            self->obj.RecurrenceProperties(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTask_get_Id(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTask_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTask_get_ListId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ListId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTask(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTask[] = {
        { "_from", (PyCFunction)_from_UserDataTask, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTask[] = {
        { const_cast<char*>("regeneration_properties"), (getter)UserDataTask_get_RegenerationProperties, (setter)UserDataTask_put_RegenerationProperties, nullptr, nullptr },
        { const_cast<char*>("priority"), (getter)UserDataTask_get_Priority, (setter)UserDataTask_put_Priority, nullptr, nullptr },
        { const_cast<char*>("completed_date"), (getter)UserDataTask_get_CompletedDate, (setter)UserDataTask_put_CompletedDate, nullptr, nullptr },
        { const_cast<char*>("due_date"), (getter)UserDataTask_get_DueDate, (setter)UserDataTask_put_DueDate, nullptr, nullptr },
        { const_cast<char*>("details_kind"), (getter)UserDataTask_get_DetailsKind, (setter)UserDataTask_put_DetailsKind, nullptr, nullptr },
        { const_cast<char*>("start_date"), (getter)UserDataTask_get_StartDate, (setter)UserDataTask_put_StartDate, nullptr, nullptr },
        { const_cast<char*>("details"), (getter)UserDataTask_get_Details, (setter)UserDataTask_put_Details, nullptr, nullptr },
        { const_cast<char*>("subject"), (getter)UserDataTask_get_Subject, (setter)UserDataTask_put_Subject, nullptr, nullptr },
        { const_cast<char*>("sensitivity"), (getter)UserDataTask_get_Sensitivity, (setter)UserDataTask_put_Sensitivity, nullptr, nullptr },
        { const_cast<char*>("remote_id"), (getter)UserDataTask_get_RemoteId, (setter)UserDataTask_put_RemoteId, nullptr, nullptr },
        { const_cast<char*>("reminder"), (getter)UserDataTask_get_Reminder, (setter)UserDataTask_put_Reminder, nullptr, nullptr },
        { const_cast<char*>("recurrence_properties"), (getter)UserDataTask_get_RecurrenceProperties, (setter)UserDataTask_put_RecurrenceProperties, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)UserDataTask_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)UserDataTask_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("list_id"), (getter)UserDataTask_get_ListId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTask[] = 
    {
        { Py_tp_new, _new_UserDataTask },
        { Py_tp_dealloc, _dealloc_UserDataTask },
        { Py_tp_methods, _methods_UserDataTask },
        { Py_tp_getset, _getset_UserDataTask },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTask =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTask",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTask),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTask
    };

    // ----- UserDataTaskBatch class --------------------
    constexpr const char* const _type_name_UserDataTaskBatch = "UserDataTaskBatch";

    static PyObject* _new_UserDataTaskBatch(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataTaskBatch);
        return nullptr;
    }

    static void _dealloc_UserDataTaskBatch(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskBatch_get_Tasks(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Tasks());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTaskBatch(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskBatch[] = {
        { "_from", (PyCFunction)_from_UserDataTaskBatch, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskBatch[] = {
        { const_cast<char*>("tasks"), (getter)UserDataTaskBatch_get_Tasks, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskBatch[] = 
    {
        { Py_tp_new, _new_UserDataTaskBatch },
        { Py_tp_dealloc, _dealloc_UserDataTaskBatch },
        { Py_tp_methods, _methods_UserDataTaskBatch },
        { Py_tp_getset, _getset_UserDataTaskBatch },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskBatch =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskBatch",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskBatch
    };

    // ----- UserDataTaskList class --------------------
    constexpr const char* const _type_name_UserDataTaskList = "UserDataTaskList";

    static PyObject* _new_UserDataTaskList(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataTaskList);
        return nullptr;
    }

    static void _dealloc_UserDataTaskList(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskList_DeleteAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DeleteAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_DeleteTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_GetTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_GetTaskReader(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetTaskReader());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions>(args, 0);

                return py::convert(self->obj.GetTaskReader(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_RegisterSyncManagerAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.RegisterSyncManagerAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_SaveAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SaveAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_SaveTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>(args, 0);

                return py::convert(self->obj.SaveTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_OtherAppWriteAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OtherAppWriteAccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskList_put_OtherAppWriteAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListOtherAppWriteAccess>(arg);

            self->obj.OtherAppWriteAccess(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskList_get_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OtherAppReadAccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskList_put_OtherAppReadAccess(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListOtherAppReadAccess>(arg);

            self->obj.OtherAppReadAccess(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskList_get_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskList_put_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskList_get_Id(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_LimitedWriteOperations(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LimitedWriteOperations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_SourceDisplayName(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceDisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_SyncManager(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SyncManager());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskList_get_UserDataAccountId(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserDataAccountId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTaskList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskList[] = {
        { "delete_async", (PyCFunction)UserDataTaskList_DeleteAsync, METH_VARARGS, nullptr },
        { "delete_task_async", (PyCFunction)UserDataTaskList_DeleteTaskAsync, METH_VARARGS, nullptr },
        { "get_task_async", (PyCFunction)UserDataTaskList_GetTaskAsync, METH_VARARGS, nullptr },
        { "get_task_reader", (PyCFunction)UserDataTaskList_GetTaskReader, METH_VARARGS, nullptr },
        { "register_sync_manager_async", (PyCFunction)UserDataTaskList_RegisterSyncManagerAsync, METH_VARARGS, nullptr },
        { "save_async", (PyCFunction)UserDataTaskList_SaveAsync, METH_VARARGS, nullptr },
        { "save_task_async", (PyCFunction)UserDataTaskList_SaveTaskAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataTaskList, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskList[] = {
        { const_cast<char*>("other_app_write_access"), (getter)UserDataTaskList_get_OtherAppWriteAccess, (setter)UserDataTaskList_put_OtherAppWriteAccess, nullptr, nullptr },
        { const_cast<char*>("other_app_read_access"), (getter)UserDataTaskList_get_OtherAppReadAccess, (setter)UserDataTaskList_put_OtherAppReadAccess, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)UserDataTaskList_get_DisplayName, (setter)UserDataTaskList_put_DisplayName, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)UserDataTaskList_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("limited_write_operations"), (getter)UserDataTaskList_get_LimitedWriteOperations, nullptr, nullptr, nullptr },
        { const_cast<char*>("source_display_name"), (getter)UserDataTaskList_get_SourceDisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("sync_manager"), (getter)UserDataTaskList_get_SyncManager, nullptr, nullptr, nullptr },
        { const_cast<char*>("user_data_account_id"), (getter)UserDataTaskList_get_UserDataAccountId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskList[] = 
    {
        { Py_tp_new, _new_UserDataTaskList },
        { Py_tp_dealloc, _dealloc_UserDataTaskList },
        { Py_tp_methods, _methods_UserDataTaskList },
        { Py_tp_getset, _getset_UserDataTaskList },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskList =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskList",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskList
    };

    // ----- UserDataTaskListLimitedWriteOperations class --------------------
    constexpr const char* const _type_name_UserDataTaskListLimitedWriteOperations = "UserDataTaskListLimitedWriteOperations";

    static PyObject* _new_UserDataTaskListLimitedWriteOperations(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataTaskListLimitedWriteOperations);
        return nullptr;
    }

    static void _dealloc_UserDataTaskListLimitedWriteOperations(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TryCompleteTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryCompleteTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TryCreateOrUpdateTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>(args, 0);

                return py::convert(self->obj.TryCreateOrUpdateTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TryDeleteTaskAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryDeleteTaskAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListLimitedWriteOperations_TrySkipOccurrenceAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TrySkipOccurrenceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTaskListLimitedWriteOperations(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskListLimitedWriteOperations[] = {
        { "try_complete_task_async", (PyCFunction)UserDataTaskListLimitedWriteOperations_TryCompleteTaskAsync, METH_VARARGS, nullptr },
        { "try_create_or_update_task_async", (PyCFunction)UserDataTaskListLimitedWriteOperations_TryCreateOrUpdateTaskAsync, METH_VARARGS, nullptr },
        { "try_delete_task_async", (PyCFunction)UserDataTaskListLimitedWriteOperations_TryDeleteTaskAsync, METH_VARARGS, nullptr },
        { "try_skip_occurrence_async", (PyCFunction)UserDataTaskListLimitedWriteOperations_TrySkipOccurrenceAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataTaskListLimitedWriteOperations, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskListLimitedWriteOperations[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskListLimitedWriteOperations[] = 
    {
        { Py_tp_new, _new_UserDataTaskListLimitedWriteOperations },
        { Py_tp_dealloc, _dealloc_UserDataTaskListLimitedWriteOperations },
        { Py_tp_methods, _methods_UserDataTaskListLimitedWriteOperations },
        { Py_tp_getset, _getset_UserDataTaskListLimitedWriteOperations },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskListLimitedWriteOperations =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskListLimitedWriteOperations",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskListLimitedWriteOperations
    };

    // ----- UserDataTaskListSyncManager class --------------------
    constexpr const char* const _type_name_UserDataTaskListSyncManager = "UserDataTaskListSyncManager";

    static PyObject* _new_UserDataTaskListSyncManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataTaskListSyncManager);
        return nullptr;
    }

    static void _dealloc_UserDataTaskListSyncManager(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskListSyncManager_SyncAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SyncAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListSyncManager_get_Status(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskListSyncManager_put_Status(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncStatus>(arg);

            self->obj.Status(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskListSyncManager_get_LastSuccessfulSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastSuccessfulSyncTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskListSyncManager_put_LastSuccessfulSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.LastSuccessfulSyncTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskListSyncManager_get_LastAttemptedSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastAttemptedSyncTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskListSyncManager_put_LastAttemptedSyncTime(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.LastAttemptedSyncTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskListSyncManager_add_SyncStatusChanged(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.SyncStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataTaskListSyncManager_remove_SyncStatusChanged(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SyncStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTaskListSyncManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskListSyncManager[] = {
        { "sync_async", (PyCFunction)UserDataTaskListSyncManager_SyncAsync, METH_VARARGS, nullptr },
        { "add_sync_status_changed", (PyCFunction)UserDataTaskListSyncManager_add_SyncStatusChanged, METH_O, nullptr },
        { "remove_sync_status_changed", (PyCFunction)UserDataTaskListSyncManager_remove_SyncStatusChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_UserDataTaskListSyncManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskListSyncManager[] = {
        { const_cast<char*>("status"), (getter)UserDataTaskListSyncManager_get_Status, (setter)UserDataTaskListSyncManager_put_Status, nullptr, nullptr },
        { const_cast<char*>("last_successful_sync_time"), (getter)UserDataTaskListSyncManager_get_LastSuccessfulSyncTime, (setter)UserDataTaskListSyncManager_put_LastSuccessfulSyncTime, nullptr, nullptr },
        { const_cast<char*>("last_attempted_sync_time"), (getter)UserDataTaskListSyncManager_get_LastAttemptedSyncTime, (setter)UserDataTaskListSyncManager_put_LastAttemptedSyncTime, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskListSyncManager[] = 
    {
        { Py_tp_new, _new_UserDataTaskListSyncManager },
        { Py_tp_dealloc, _dealloc_UserDataTaskListSyncManager },
        { Py_tp_methods, _methods_UserDataTaskListSyncManager },
        { Py_tp_getset, _getset_UserDataTaskListSyncManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskListSyncManager =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskListSyncManager",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskListSyncManager
    };

    // ----- UserDataTaskManager class --------------------
    constexpr const char* const _type_name_UserDataTaskManager = "UserDataTaskManager";

    static PyObject* _new_UserDataTaskManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataTaskManager);
        return nullptr;
    }

    static void _dealloc_UserDataTaskManager(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskManager_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskManager_RequestStoreAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStoreAccessType>(args, 0);

                return py::convert(self->obj.RequestStoreAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskManager_get_User(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTaskManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskManager[] = {
        { "get_default", (PyCFunction)UserDataTaskManager_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_user", (PyCFunction)UserDataTaskManager_GetForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "request_store_async", (PyCFunction)UserDataTaskManager_RequestStoreAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataTaskManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskManager[] = {
        { const_cast<char*>("user"), (getter)UserDataTaskManager_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskManager[] = 
    {
        { Py_tp_new, _new_UserDataTaskManager },
        { Py_tp_dealloc, _dealloc_UserDataTaskManager },
        { Py_tp_methods, _methods_UserDataTaskManager },
        { Py_tp_getset, _getset_UserDataTaskManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskManager =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskManager",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskManager
    };

    // ----- UserDataTaskQueryOptions class --------------------
    constexpr const char* const _type_name_UserDataTaskQueryOptions = "UserDataTaskQueryOptions";

    static PyObject* _new_UserDataTaskQueryOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTaskQueryOptions(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskQueryOptions_get_SortProperty(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SortProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskQueryOptions_put_SortProperty(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQuerySortProperty>(arg);

            self->obj.SortProperty(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskQueryOptions_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskQueryOptions_put_Kind(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryKind>(arg);

            self->obj.Kind(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_UserDataTaskQueryOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskQueryOptions[] = {
        { "_from", (PyCFunction)_from_UserDataTaskQueryOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskQueryOptions[] = {
        { const_cast<char*>("sort_property"), (getter)UserDataTaskQueryOptions_get_SortProperty, (setter)UserDataTaskQueryOptions_put_SortProperty, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)UserDataTaskQueryOptions_get_Kind, (setter)UserDataTaskQueryOptions_put_Kind, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskQueryOptions[] = 
    {
        { Py_tp_new, _new_UserDataTaskQueryOptions },
        { Py_tp_dealloc, _dealloc_UserDataTaskQueryOptions },
        { Py_tp_methods, _methods_UserDataTaskQueryOptions },
        { Py_tp_getset, _getset_UserDataTaskQueryOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskQueryOptions =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskQueryOptions",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskQueryOptions
    };

    // ----- UserDataTaskReader class --------------------
    constexpr const char* const _type_name_UserDataTaskReader = "UserDataTaskReader";

    static PyObject* _new_UserDataTaskReader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataTaskReader);
        return nullptr;
    }

    static void _dealloc_UserDataTaskReader(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskReader_ReadBatchAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReadBatchAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTaskReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskReader[] = {
        { "read_batch_async", (PyCFunction)UserDataTaskReader_ReadBatchAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataTaskReader, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskReader[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskReader[] = 
    {
        { Py_tp_new, _new_UserDataTaskReader },
        { Py_tp_dealloc, _dealloc_UserDataTaskReader },
        { Py_tp_methods, _methods_UserDataTaskReader },
        { Py_tp_getset, _getset_UserDataTaskReader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskReader =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskReader",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskReader
    };

    // ----- UserDataTaskRecurrenceProperties class --------------------
    constexpr const char* const _type_name_UserDataTaskRecurrenceProperties = "UserDataTaskRecurrenceProperties";

    static PyObject* _new_UserDataTaskRecurrenceProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTaskRecurrenceProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_WeekOfMonth(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WeekOfMonth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_WeekOfMonth(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskWeekOfMonth>>(arg);

            self->obj.WeekOfMonth(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Until());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.Until(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Unit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceUnit>(arg);

            self->obj.Unit(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Occurrences());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Occurrences(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Month(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Month());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Month(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Month(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Interval());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Interval(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_DaysOfWeek(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DaysOfWeek());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_DaysOfWeek(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskDaysOfWeek>>(arg);

            self->obj.DaysOfWeek(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRecurrenceProperties_get_Day(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Day());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRecurrenceProperties_put_Day(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Day(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_UserDataTaskRecurrenceProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskRecurrenceProperties[] = {
        { "_from", (PyCFunction)_from_UserDataTaskRecurrenceProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskRecurrenceProperties[] = {
        { const_cast<char*>("week_of_month"), (getter)UserDataTaskRecurrenceProperties_get_WeekOfMonth, (setter)UserDataTaskRecurrenceProperties_put_WeekOfMonth, nullptr, nullptr },
        { const_cast<char*>("until"), (getter)UserDataTaskRecurrenceProperties_get_Until, (setter)UserDataTaskRecurrenceProperties_put_Until, nullptr, nullptr },
        { const_cast<char*>("unit"), (getter)UserDataTaskRecurrenceProperties_get_Unit, (setter)UserDataTaskRecurrenceProperties_put_Unit, nullptr, nullptr },
        { const_cast<char*>("occurrences"), (getter)UserDataTaskRecurrenceProperties_get_Occurrences, (setter)UserDataTaskRecurrenceProperties_put_Occurrences, nullptr, nullptr },
        { const_cast<char*>("month"), (getter)UserDataTaskRecurrenceProperties_get_Month, (setter)UserDataTaskRecurrenceProperties_put_Month, nullptr, nullptr },
        { const_cast<char*>("interval"), (getter)UserDataTaskRecurrenceProperties_get_Interval, (setter)UserDataTaskRecurrenceProperties_put_Interval, nullptr, nullptr },
        { const_cast<char*>("days_of_week"), (getter)UserDataTaskRecurrenceProperties_get_DaysOfWeek, (setter)UserDataTaskRecurrenceProperties_put_DaysOfWeek, nullptr, nullptr },
        { const_cast<char*>("day"), (getter)UserDataTaskRecurrenceProperties_get_Day, (setter)UserDataTaskRecurrenceProperties_put_Day, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskRecurrenceProperties[] = 
    {
        { Py_tp_new, _new_UserDataTaskRecurrenceProperties },
        { Py_tp_dealloc, _dealloc_UserDataTaskRecurrenceProperties },
        { Py_tp_methods, _methods_UserDataTaskRecurrenceProperties },
        { Py_tp_getset, _getset_UserDataTaskRecurrenceProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskRecurrenceProperties =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskRecurrenceProperties",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskRecurrenceProperties
    };

    // ----- UserDataTaskRegenerationProperties class --------------------
    constexpr const char* const _type_name_UserDataTaskRegenerationProperties = "UserDataTaskRegenerationProperties";

    static PyObject* _new_UserDataTaskRegenerationProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserDataTaskRegenerationProperties(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Until());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Until(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.Until(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Unit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Unit(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationUnit>(arg);

            self->obj.Unit(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Occurrences());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Occurrences(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<int32_t>>(arg);

            self->obj.Occurrences(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserDataTaskRegenerationProperties_get_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Interval());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserDataTaskRegenerationProperties_put_Interval(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Interval(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_UserDataTaskRegenerationProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskRegenerationProperties[] = {
        { "_from", (PyCFunction)_from_UserDataTaskRegenerationProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskRegenerationProperties[] = {
        { const_cast<char*>("until"), (getter)UserDataTaskRegenerationProperties_get_Until, (setter)UserDataTaskRegenerationProperties_put_Until, nullptr, nullptr },
        { const_cast<char*>("unit"), (getter)UserDataTaskRegenerationProperties_get_Unit, (setter)UserDataTaskRegenerationProperties_put_Unit, nullptr, nullptr },
        { const_cast<char*>("occurrences"), (getter)UserDataTaskRegenerationProperties_get_Occurrences, (setter)UserDataTaskRegenerationProperties_put_Occurrences, nullptr, nullptr },
        { const_cast<char*>("interval"), (getter)UserDataTaskRegenerationProperties_get_Interval, (setter)UserDataTaskRegenerationProperties_put_Interval, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskRegenerationProperties[] = 
    {
        { Py_tp_new, _new_UserDataTaskRegenerationProperties },
        { Py_tp_dealloc, _dealloc_UserDataTaskRegenerationProperties },
        { Py_tp_methods, _methods_UserDataTaskRegenerationProperties },
        { Py_tp_getset, _getset_UserDataTaskRegenerationProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskRegenerationProperties =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskRegenerationProperties",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskRegenerationProperties
    };

    // ----- UserDataTaskStore class --------------------
    constexpr const char* const _type_name_UserDataTaskStore = "UserDataTaskStore";

    static PyObject* _new_UserDataTaskStore(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataTaskStore);
        return nullptr;
    }

    static void _dealloc_UserDataTaskStore(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataTaskStore_CreateListAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CreateListAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.CreateListAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskStore_FindListsAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindListsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataTaskStore_GetListAsync(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetListAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UserDataTaskStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataTaskStore[] = {
        { "create_list_async", (PyCFunction)UserDataTaskStore_CreateListAsync, METH_VARARGS, nullptr },
        { "find_lists_async", (PyCFunction)UserDataTaskStore_FindListsAsync, METH_VARARGS, nullptr },
        { "get_list_async", (PyCFunction)UserDataTaskStore_GetListAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataTaskStore, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataTaskStore[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataTaskStore[] = 
    {
        { Py_tp_new, _new_UserDataTaskStore },
        { Py_tp_dealloc, _dealloc_UserDataTaskStore },
        { Py_tp_methods, _methods_UserDataTaskStore },
        { Py_tp_getset, _getset_UserDataTaskStore },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataTaskStore =
    {
        "_winrt_Windows_ApplicationModel_UserDataTasks.UserDataTaskStore",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataTaskStore
    };

    // ----- Windows.ApplicationModel.UserDataTasks Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTask>::python_type = py::register_python_type(module, _type_name_UserDataTask, &_type_spec_UserDataTask, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch>::python_type = py::register_python_type(module, _type_name_UserDataTaskBatch, &_type_spec_UserDataTaskBatch, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskList>::python_type = py::register_python_type(module, _type_name_UserDataTaskList, &_type_spec_UserDataTaskList, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations>::python_type = py::register_python_type(module, _type_name_UserDataTaskListLimitedWriteOperations, &_type_spec_UserDataTaskListLimitedWriteOperations, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager>::python_type = py::register_python_type(module, _type_name_UserDataTaskListSyncManager, &_type_spec_UserDataTaskListSyncManager, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskManager>::python_type = py::register_python_type(module, _type_name_UserDataTaskManager, &_type_spec_UserDataTaskManager, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions>::python_type = py::register_python_type(module, _type_name_UserDataTaskQueryOptions, &_type_spec_UserDataTaskQueryOptions, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskReader>::python_type = py::register_python_type(module, _type_name_UserDataTaskReader, &_type_spec_UserDataTaskReader, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties>::python_type = py::register_python_type(module, _type_name_UserDataTaskRecurrenceProperties, &_type_spec_UserDataTaskRecurrenceProperties, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties>::python_type = py::register_python_type(module, _type_name_UserDataTaskRegenerationProperties, &_type_spec_UserDataTaskRegenerationProperties, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataTasks::UserDataTaskStore>::python_type = py::register_python_type(module, _type_name_UserDataTaskStore, &_type_spec_UserDataTaskStore, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.UserDataTasks");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_UserDataTasks",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::UserDataTasks

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_UserDataTasks (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::UserDataTasks::module_def);
}
