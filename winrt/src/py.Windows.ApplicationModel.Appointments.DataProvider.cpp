// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Appointments.DataProvider.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderTriggerDetails>::python_type;

namespace py::cpp::Windows::ApplicationModel::Appointments::DataProvider
{
    // ----- AppointmentCalendarCancelMeetingRequest class --------------------
    constexpr const char* const _type_name_AppointmentCalendarCancelMeetingRequest = "AppointmentCalendarCancelMeetingRequest";

    static PyObject* _new_AppointmentCalendarCancelMeetingRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarCancelMeetingRequest);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarCancelMeetingRequest(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_ReportCompletedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportCompletedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_ReportFailedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportFailedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_get_AppointmentCalendarLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentCalendarLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_get_AppointmentLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_get_AppointmentOriginalStartTime(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentOriginalStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_get_Comment(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Comment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_get_NotifyInvitees(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NotifyInvitees());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequest_get_Subject(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarCancelMeetingRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarCancelMeetingRequest[] = {
        { "report_completed_async", (PyCFunction)AppointmentCalendarCancelMeetingRequest_ReportCompletedAsync, METH_VARARGS, nullptr },
        { "report_failed_async", (PyCFunction)AppointmentCalendarCancelMeetingRequest_ReportFailedAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarCancelMeetingRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarCancelMeetingRequest[] = {
        { const_cast<char*>("appointment_calendar_local_id"), (getter)AppointmentCalendarCancelMeetingRequest_get_AppointmentCalendarLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_local_id"), (getter)AppointmentCalendarCancelMeetingRequest_get_AppointmentLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_original_start_time"), (getter)AppointmentCalendarCancelMeetingRequest_get_AppointmentOriginalStartTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("comment"), (getter)AppointmentCalendarCancelMeetingRequest_get_Comment, nullptr, nullptr, nullptr },
        { const_cast<char*>("notify_invitees"), (getter)AppointmentCalendarCancelMeetingRequest_get_NotifyInvitees, nullptr, nullptr, nullptr },
        { const_cast<char*>("subject"), (getter)AppointmentCalendarCancelMeetingRequest_get_Subject, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarCancelMeetingRequest[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarCancelMeetingRequest },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarCancelMeetingRequest },
        { Py_tp_methods, _methods_AppointmentCalendarCancelMeetingRequest },
        { Py_tp_getset, _getset_AppointmentCalendarCancelMeetingRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarCancelMeetingRequest =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarCancelMeetingRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarCancelMeetingRequest
    };

    // ----- AppointmentCalendarCancelMeetingRequestEventArgs class --------------------
    constexpr const char* const _type_name_AppointmentCalendarCancelMeetingRequestEventArgs = "AppointmentCalendarCancelMeetingRequestEventArgs";

    static PyObject* _new_AppointmentCalendarCancelMeetingRequestEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarCancelMeetingRequestEventArgs);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarCancelMeetingRequestEventArgs(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarCancelMeetingRequestEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCancelMeetingRequestEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarCancelMeetingRequestEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarCancelMeetingRequestEventArgs[] = {
        { "get_deferral", (PyCFunction)AppointmentCalendarCancelMeetingRequestEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarCancelMeetingRequestEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarCancelMeetingRequestEventArgs[] = {
        { const_cast<char*>("request"), (getter)AppointmentCalendarCancelMeetingRequestEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarCancelMeetingRequestEventArgs[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarCancelMeetingRequestEventArgs },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarCancelMeetingRequestEventArgs },
        { Py_tp_methods, _methods_AppointmentCalendarCancelMeetingRequestEventArgs },
        { Py_tp_getset, _getset_AppointmentCalendarCancelMeetingRequestEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarCancelMeetingRequestEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarCancelMeetingRequestEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarCancelMeetingRequestEventArgs
    };

    // ----- AppointmentCalendarCreateOrUpdateAppointmentRequest class --------------------
    constexpr const char* const _type_name_AppointmentCalendarCreateOrUpdateAppointmentRequest = "AppointmentCalendarCreateOrUpdateAppointmentRequest";

    static PyObject* _new_AppointmentCalendarCreateOrUpdateAppointmentRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarCreateOrUpdateAppointmentRequest);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarCreateOrUpdateAppointmentRequest(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequest_ReportCompletedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Appointments::Appointment>(args, 0);

                return py::convert(self->obj.ReportCompletedAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequest_ReportFailedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportFailedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequest_get_Appointment(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Appointment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequest_get_AppointmentCalendarLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentCalendarLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequest_get_ChangedProperties(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChangedProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequest_get_NotifyInvitees(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NotifyInvitees());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarCreateOrUpdateAppointmentRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarCreateOrUpdateAppointmentRequest[] = {
        { "report_completed_async", (PyCFunction)AppointmentCalendarCreateOrUpdateAppointmentRequest_ReportCompletedAsync, METH_VARARGS, nullptr },
        { "report_failed_async", (PyCFunction)AppointmentCalendarCreateOrUpdateAppointmentRequest_ReportFailedAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarCreateOrUpdateAppointmentRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarCreateOrUpdateAppointmentRequest[] = {
        { const_cast<char*>("appointment"), (getter)AppointmentCalendarCreateOrUpdateAppointmentRequest_get_Appointment, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_calendar_local_id"), (getter)AppointmentCalendarCreateOrUpdateAppointmentRequest_get_AppointmentCalendarLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("changed_properties"), (getter)AppointmentCalendarCreateOrUpdateAppointmentRequest_get_ChangedProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("notify_invitees"), (getter)AppointmentCalendarCreateOrUpdateAppointmentRequest_get_NotifyInvitees, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarCreateOrUpdateAppointmentRequest[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarCreateOrUpdateAppointmentRequest },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarCreateOrUpdateAppointmentRequest },
        { Py_tp_methods, _methods_AppointmentCalendarCreateOrUpdateAppointmentRequest },
        { Py_tp_getset, _getset_AppointmentCalendarCreateOrUpdateAppointmentRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarCreateOrUpdateAppointmentRequest =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarCreateOrUpdateAppointmentRequest
    };

    // ----- AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs class --------------------
    constexpr const char* const _type_name_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs = "AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs";

    static PyObject* _new_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs[] = {
        { "get_deferral", (PyCFunction)AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs[] = {
        { const_cast<char*>("request"), (getter)AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs },
        { Py_tp_methods, _methods_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs },
        { Py_tp_getset, _getset_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs
    };

    // ----- AppointmentCalendarForwardMeetingRequest class --------------------
    constexpr const char* const _type_name_AppointmentCalendarForwardMeetingRequest = "AppointmentCalendarForwardMeetingRequest";

    static PyObject* _new_AppointmentCalendarForwardMeetingRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarForwardMeetingRequest);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarForwardMeetingRequest(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_ReportCompletedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportCompletedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_ReportFailedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportFailedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_get_AppointmentCalendarLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentCalendarLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_get_AppointmentLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_get_AppointmentOriginalStartTime(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentOriginalStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_get_Comment(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Comment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_get_ForwardHeader(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ForwardHeader());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_get_Invitees(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Invitees());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequest_get_Subject(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarForwardMeetingRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarForwardMeetingRequest[] = {
        { "report_completed_async", (PyCFunction)AppointmentCalendarForwardMeetingRequest_ReportCompletedAsync, METH_VARARGS, nullptr },
        { "report_failed_async", (PyCFunction)AppointmentCalendarForwardMeetingRequest_ReportFailedAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarForwardMeetingRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarForwardMeetingRequest[] = {
        { const_cast<char*>("appointment_calendar_local_id"), (getter)AppointmentCalendarForwardMeetingRequest_get_AppointmentCalendarLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_local_id"), (getter)AppointmentCalendarForwardMeetingRequest_get_AppointmentLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_original_start_time"), (getter)AppointmentCalendarForwardMeetingRequest_get_AppointmentOriginalStartTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("comment"), (getter)AppointmentCalendarForwardMeetingRequest_get_Comment, nullptr, nullptr, nullptr },
        { const_cast<char*>("forward_header"), (getter)AppointmentCalendarForwardMeetingRequest_get_ForwardHeader, nullptr, nullptr, nullptr },
        { const_cast<char*>("invitees"), (getter)AppointmentCalendarForwardMeetingRequest_get_Invitees, nullptr, nullptr, nullptr },
        { const_cast<char*>("subject"), (getter)AppointmentCalendarForwardMeetingRequest_get_Subject, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarForwardMeetingRequest[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarForwardMeetingRequest },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarForwardMeetingRequest },
        { Py_tp_methods, _methods_AppointmentCalendarForwardMeetingRequest },
        { Py_tp_getset, _getset_AppointmentCalendarForwardMeetingRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarForwardMeetingRequest =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarForwardMeetingRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarForwardMeetingRequest
    };

    // ----- AppointmentCalendarForwardMeetingRequestEventArgs class --------------------
    constexpr const char* const _type_name_AppointmentCalendarForwardMeetingRequestEventArgs = "AppointmentCalendarForwardMeetingRequestEventArgs";

    static PyObject* _new_AppointmentCalendarForwardMeetingRequestEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarForwardMeetingRequestEventArgs);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarForwardMeetingRequestEventArgs(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarForwardMeetingRequestEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarForwardMeetingRequestEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarForwardMeetingRequestEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarForwardMeetingRequestEventArgs[] = {
        { "get_deferral", (PyCFunction)AppointmentCalendarForwardMeetingRequestEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarForwardMeetingRequestEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarForwardMeetingRequestEventArgs[] = {
        { const_cast<char*>("request"), (getter)AppointmentCalendarForwardMeetingRequestEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarForwardMeetingRequestEventArgs[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarForwardMeetingRequestEventArgs },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarForwardMeetingRequestEventArgs },
        { Py_tp_methods, _methods_AppointmentCalendarForwardMeetingRequestEventArgs },
        { Py_tp_getset, _getset_AppointmentCalendarForwardMeetingRequestEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarForwardMeetingRequestEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarForwardMeetingRequestEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarForwardMeetingRequestEventArgs
    };

    // ----- AppointmentCalendarProposeNewTimeForMeetingRequest class --------------------
    constexpr const char* const _type_name_AppointmentCalendarProposeNewTimeForMeetingRequest = "AppointmentCalendarProposeNewTimeForMeetingRequest";

    static PyObject* _new_AppointmentCalendarProposeNewTimeForMeetingRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarProposeNewTimeForMeetingRequest);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarProposeNewTimeForMeetingRequest(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_ReportCompletedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportCompletedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_ReportFailedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportFailedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_get_AppointmentCalendarLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentCalendarLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_get_AppointmentLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_get_AppointmentOriginalStartTime(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentOriginalStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_get_Comment(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Comment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_get_NewDuration(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NewDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_get_NewStartTime(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NewStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequest_get_Subject(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarProposeNewTimeForMeetingRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarProposeNewTimeForMeetingRequest[] = {
        { "report_completed_async", (PyCFunction)AppointmentCalendarProposeNewTimeForMeetingRequest_ReportCompletedAsync, METH_VARARGS, nullptr },
        { "report_failed_async", (PyCFunction)AppointmentCalendarProposeNewTimeForMeetingRequest_ReportFailedAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarProposeNewTimeForMeetingRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarProposeNewTimeForMeetingRequest[] = {
        { const_cast<char*>("appointment_calendar_local_id"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequest_get_AppointmentCalendarLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_local_id"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequest_get_AppointmentLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_original_start_time"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequest_get_AppointmentOriginalStartTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("comment"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequest_get_Comment, nullptr, nullptr, nullptr },
        { const_cast<char*>("new_duration"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequest_get_NewDuration, nullptr, nullptr, nullptr },
        { const_cast<char*>("new_start_time"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequest_get_NewStartTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("subject"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequest_get_Subject, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarProposeNewTimeForMeetingRequest[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarProposeNewTimeForMeetingRequest },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarProposeNewTimeForMeetingRequest },
        { Py_tp_methods, _methods_AppointmentCalendarProposeNewTimeForMeetingRequest },
        { Py_tp_getset, _getset_AppointmentCalendarProposeNewTimeForMeetingRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarProposeNewTimeForMeetingRequest =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarProposeNewTimeForMeetingRequest
    };

    // ----- AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs class --------------------
    constexpr const char* const _type_name_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs = "AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs";

    static PyObject* _new_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs[] = {
        { "get_deferral", (PyCFunction)AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs[] = {
        { const_cast<char*>("request"), (getter)AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs },
        { Py_tp_methods, _methods_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs },
        { Py_tp_getset, _getset_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs
    };

    // ----- AppointmentCalendarSyncManagerSyncRequest class --------------------
    constexpr const char* const _type_name_AppointmentCalendarSyncManagerSyncRequest = "AppointmentCalendarSyncManagerSyncRequest";

    static PyObject* _new_AppointmentCalendarSyncManagerSyncRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarSyncManagerSyncRequest);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarSyncManagerSyncRequest(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarSyncManagerSyncRequest_ReportCompletedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportCompletedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarSyncManagerSyncRequest_ReportFailedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportFailedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarSyncManagerSyncRequest_get_AppointmentCalendarLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentCalendarLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarSyncManagerSyncRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarSyncManagerSyncRequest[] = {
        { "report_completed_async", (PyCFunction)AppointmentCalendarSyncManagerSyncRequest_ReportCompletedAsync, METH_VARARGS, nullptr },
        { "report_failed_async", (PyCFunction)AppointmentCalendarSyncManagerSyncRequest_ReportFailedAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarSyncManagerSyncRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarSyncManagerSyncRequest[] = {
        { const_cast<char*>("appointment_calendar_local_id"), (getter)AppointmentCalendarSyncManagerSyncRequest_get_AppointmentCalendarLocalId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarSyncManagerSyncRequest[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarSyncManagerSyncRequest },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarSyncManagerSyncRequest },
        { Py_tp_methods, _methods_AppointmentCalendarSyncManagerSyncRequest },
        { Py_tp_getset, _getset_AppointmentCalendarSyncManagerSyncRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarSyncManagerSyncRequest =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarSyncManagerSyncRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarSyncManagerSyncRequest
    };

    // ----- AppointmentCalendarSyncManagerSyncRequestEventArgs class --------------------
    constexpr const char* const _type_name_AppointmentCalendarSyncManagerSyncRequestEventArgs = "AppointmentCalendarSyncManagerSyncRequestEventArgs";

    static PyObject* _new_AppointmentCalendarSyncManagerSyncRequestEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarSyncManagerSyncRequestEventArgs);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarSyncManagerSyncRequestEventArgs(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarSyncManagerSyncRequestEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarSyncManagerSyncRequestEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarSyncManagerSyncRequestEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarSyncManagerSyncRequestEventArgs[] = {
        { "get_deferral", (PyCFunction)AppointmentCalendarSyncManagerSyncRequestEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarSyncManagerSyncRequestEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarSyncManagerSyncRequestEventArgs[] = {
        { const_cast<char*>("request"), (getter)AppointmentCalendarSyncManagerSyncRequestEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarSyncManagerSyncRequestEventArgs[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarSyncManagerSyncRequestEventArgs },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarSyncManagerSyncRequestEventArgs },
        { Py_tp_methods, _methods_AppointmentCalendarSyncManagerSyncRequestEventArgs },
        { Py_tp_getset, _getset_AppointmentCalendarSyncManagerSyncRequestEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarSyncManagerSyncRequestEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarSyncManagerSyncRequestEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarSyncManagerSyncRequestEventArgs
    };

    // ----- AppointmentCalendarUpdateMeetingResponseRequest class --------------------
    constexpr const char* const _type_name_AppointmentCalendarUpdateMeetingResponseRequest = "AppointmentCalendarUpdateMeetingResponseRequest";

    static PyObject* _new_AppointmentCalendarUpdateMeetingResponseRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarUpdateMeetingResponseRequest);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarUpdateMeetingResponseRequest(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_ReportCompletedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportCompletedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_ReportFailedAsync(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReportFailedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_get_AppointmentCalendarLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentCalendarLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_get_AppointmentLocalId(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentLocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_get_AppointmentOriginalStartTime(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppointmentOriginalStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_get_Comment(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Comment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_get_Response(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Response());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_get_SendUpdate(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SendUpdate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequest_get_Subject(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarUpdateMeetingResponseRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarUpdateMeetingResponseRequest[] = {
        { "report_completed_async", (PyCFunction)AppointmentCalendarUpdateMeetingResponseRequest_ReportCompletedAsync, METH_VARARGS, nullptr },
        { "report_failed_async", (PyCFunction)AppointmentCalendarUpdateMeetingResponseRequest_ReportFailedAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarUpdateMeetingResponseRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarUpdateMeetingResponseRequest[] = {
        { const_cast<char*>("appointment_calendar_local_id"), (getter)AppointmentCalendarUpdateMeetingResponseRequest_get_AppointmentCalendarLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_local_id"), (getter)AppointmentCalendarUpdateMeetingResponseRequest_get_AppointmentLocalId, nullptr, nullptr, nullptr },
        { const_cast<char*>("appointment_original_start_time"), (getter)AppointmentCalendarUpdateMeetingResponseRequest_get_AppointmentOriginalStartTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("comment"), (getter)AppointmentCalendarUpdateMeetingResponseRequest_get_Comment, nullptr, nullptr, nullptr },
        { const_cast<char*>("response"), (getter)AppointmentCalendarUpdateMeetingResponseRequest_get_Response, nullptr, nullptr, nullptr },
        { const_cast<char*>("send_update"), (getter)AppointmentCalendarUpdateMeetingResponseRequest_get_SendUpdate, nullptr, nullptr, nullptr },
        { const_cast<char*>("subject"), (getter)AppointmentCalendarUpdateMeetingResponseRequest_get_Subject, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarUpdateMeetingResponseRequest[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarUpdateMeetingResponseRequest },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarUpdateMeetingResponseRequest },
        { Py_tp_methods, _methods_AppointmentCalendarUpdateMeetingResponseRequest },
        { Py_tp_getset, _getset_AppointmentCalendarUpdateMeetingResponseRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarUpdateMeetingResponseRequest =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarUpdateMeetingResponseRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarUpdateMeetingResponseRequest
    };

    // ----- AppointmentCalendarUpdateMeetingResponseRequestEventArgs class --------------------
    constexpr const char* const _type_name_AppointmentCalendarUpdateMeetingResponseRequestEventArgs = "AppointmentCalendarUpdateMeetingResponseRequestEventArgs";

    static PyObject* _new_AppointmentCalendarUpdateMeetingResponseRequestEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentCalendarUpdateMeetingResponseRequestEventArgs);
        return nullptr;
    }

    static void _dealloc_AppointmentCalendarUpdateMeetingResponseRequestEventArgs(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequestEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentCalendarUpdateMeetingResponseRequestEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentCalendarUpdateMeetingResponseRequestEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentCalendarUpdateMeetingResponseRequestEventArgs[] = {
        { "get_deferral", (PyCFunction)AppointmentCalendarUpdateMeetingResponseRequestEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppointmentCalendarUpdateMeetingResponseRequestEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentCalendarUpdateMeetingResponseRequestEventArgs[] = {
        { const_cast<char*>("request"), (getter)AppointmentCalendarUpdateMeetingResponseRequestEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentCalendarUpdateMeetingResponseRequestEventArgs[] = 
    {
        { Py_tp_new, _new_AppointmentCalendarUpdateMeetingResponseRequestEventArgs },
        { Py_tp_dealloc, _dealloc_AppointmentCalendarUpdateMeetingResponseRequestEventArgs },
        { Py_tp_methods, _methods_AppointmentCalendarUpdateMeetingResponseRequestEventArgs },
        { Py_tp_getset, _getset_AppointmentCalendarUpdateMeetingResponseRequestEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentCalendarUpdateMeetingResponseRequestEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentCalendarUpdateMeetingResponseRequestEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentCalendarUpdateMeetingResponseRequestEventArgs
    };

    // ----- AppointmentDataProviderConnection class --------------------
    constexpr const char* const _type_name_AppointmentDataProviderConnection = "AppointmentDataProviderConnection";

    static PyObject* _new_AppointmentDataProviderConnection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentDataProviderConnection);
        return nullptr;
    }

    static void _dealloc_AppointmentDataProviderConnection(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentDataProviderConnection_Start(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_add_CancelMeetingRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection, winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs>>(arg);

            return py::convert(self->obj.CancelMeetingRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_remove_CancelMeetingRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CancelMeetingRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_add_CreateOrUpdateAppointmentRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection, winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs>>(arg);

            return py::convert(self->obj.CreateOrUpdateAppointmentRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_remove_CreateOrUpdateAppointmentRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CreateOrUpdateAppointmentRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_add_ForwardMeetingRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection, winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs>>(arg);

            return py::convert(self->obj.ForwardMeetingRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_remove_ForwardMeetingRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ForwardMeetingRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_add_ProposeNewTimeForMeetingRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection, winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs>>(arg);

            return py::convert(self->obj.ProposeNewTimeForMeetingRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_remove_ProposeNewTimeForMeetingRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ProposeNewTimeForMeetingRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_add_SyncRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection, winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs>>(arg);

            return py::convert(self->obj.SyncRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_remove_SyncRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SyncRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_add_UpdateMeetingResponseRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection, winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs>>(arg);

            return py::convert(self->obj.UpdateMeetingResponseRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppointmentDataProviderConnection_remove_UpdateMeetingResponseRequested(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UpdateMeetingResponseRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentDataProviderConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentDataProviderConnection[] = {
        { "start", (PyCFunction)AppointmentDataProviderConnection_Start, METH_VARARGS, nullptr },
        { "add_cancel_meeting_requested", (PyCFunction)AppointmentDataProviderConnection_add_CancelMeetingRequested, METH_O, nullptr },
        { "remove_cancel_meeting_requested", (PyCFunction)AppointmentDataProviderConnection_remove_CancelMeetingRequested, METH_O, nullptr },
        { "add_create_or_update_appointment_requested", (PyCFunction)AppointmentDataProviderConnection_add_CreateOrUpdateAppointmentRequested, METH_O, nullptr },
        { "remove_create_or_update_appointment_requested", (PyCFunction)AppointmentDataProviderConnection_remove_CreateOrUpdateAppointmentRequested, METH_O, nullptr },
        { "add_forward_meeting_requested", (PyCFunction)AppointmentDataProviderConnection_add_ForwardMeetingRequested, METH_O, nullptr },
        { "remove_forward_meeting_requested", (PyCFunction)AppointmentDataProviderConnection_remove_ForwardMeetingRequested, METH_O, nullptr },
        { "add_propose_new_time_for_meeting_requested", (PyCFunction)AppointmentDataProviderConnection_add_ProposeNewTimeForMeetingRequested, METH_O, nullptr },
        { "remove_propose_new_time_for_meeting_requested", (PyCFunction)AppointmentDataProviderConnection_remove_ProposeNewTimeForMeetingRequested, METH_O, nullptr },
        { "add_sync_requested", (PyCFunction)AppointmentDataProviderConnection_add_SyncRequested, METH_O, nullptr },
        { "remove_sync_requested", (PyCFunction)AppointmentDataProviderConnection_remove_SyncRequested, METH_O, nullptr },
        { "add_update_meeting_response_requested", (PyCFunction)AppointmentDataProviderConnection_add_UpdateMeetingResponseRequested, METH_O, nullptr },
        { "remove_update_meeting_response_requested", (PyCFunction)AppointmentDataProviderConnection_remove_UpdateMeetingResponseRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AppointmentDataProviderConnection, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentDataProviderConnection[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentDataProviderConnection[] = 
    {
        { Py_tp_new, _new_AppointmentDataProviderConnection },
        { Py_tp_dealloc, _dealloc_AppointmentDataProviderConnection },
        { Py_tp_methods, _methods_AppointmentDataProviderConnection },
        { Py_tp_getset, _getset_AppointmentDataProviderConnection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentDataProviderConnection =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentDataProviderConnection",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentDataProviderConnection
    };

    // ----- AppointmentDataProviderTriggerDetails class --------------------
    constexpr const char* const _type_name_AppointmentDataProviderTriggerDetails = "AppointmentDataProviderTriggerDetails";

    static PyObject* _new_AppointmentDataProviderTriggerDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppointmentDataProviderTriggerDetails);
        return nullptr;
    }

    static void _dealloc_AppointmentDataProviderTriggerDetails(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderTriggerDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppointmentDataProviderTriggerDetails_get_Connection(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Connection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppointmentDataProviderTriggerDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderTriggerDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppointmentDataProviderTriggerDetails[] = {
        { "_from", (PyCFunction)_from_AppointmentDataProviderTriggerDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppointmentDataProviderTriggerDetails[] = {
        { const_cast<char*>("connection"), (getter)AppointmentDataProviderTriggerDetails_get_Connection, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppointmentDataProviderTriggerDetails[] = 
    {
        { Py_tp_new, _new_AppointmentDataProviderTriggerDetails },
        { Py_tp_dealloc, _dealloc_AppointmentDataProviderTriggerDetails },
        { Py_tp_methods, _methods_AppointmentDataProviderTriggerDetails },
        { Py_tp_getset, _getset_AppointmentDataProviderTriggerDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppointmentDataProviderTriggerDetails =
    {
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider.AppointmentDataProviderTriggerDetails",
        sizeof(py::wrapper::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderTriggerDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppointmentDataProviderTriggerDetails
    };

    // ----- Windows.ApplicationModel.Appointments.DataProvider Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarCancelMeetingRequest, &_type_spec_AppointmentCalendarCancelMeetingRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarCancelMeetingRequestEventArgs, &_type_spec_AppointmentCalendarCancelMeetingRequestEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarCreateOrUpdateAppointmentRequest, &_type_spec_AppointmentCalendarCreateOrUpdateAppointmentRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs, &_type_spec_AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarForwardMeetingRequest, &_type_spec_AppointmentCalendarForwardMeetingRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarForwardMeetingRequestEventArgs, &_type_spec_AppointmentCalendarForwardMeetingRequestEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarProposeNewTimeForMeetingRequest, &_type_spec_AppointmentCalendarProposeNewTimeForMeetingRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs, &_type_spec_AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarSyncManagerSyncRequest, &_type_spec_AppointmentCalendarSyncManagerSyncRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarSyncManagerSyncRequestEventArgs, &_type_spec_AppointmentCalendarSyncManagerSyncRequestEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarUpdateMeetingResponseRequest, &_type_spec_AppointmentCalendarUpdateMeetingResponseRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs>::python_type = py::register_python_type(module, _type_name_AppointmentCalendarUpdateMeetingResponseRequestEventArgs, &_type_spec_AppointmentCalendarUpdateMeetingResponseRequestEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection>::python_type = py::register_python_type(module, _type_name_AppointmentDataProviderConnection, &_type_spec_AppointmentDataProviderConnection, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderTriggerDetails>::python_type = py::register_python_type(module, _type_name_AppointmentDataProviderTriggerDetails, &_type_spec_AppointmentDataProviderTriggerDetails, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Appointments.DataProvider");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Appointments_DataProvider",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Appointments::DataProvider

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Appointments_DataProvider (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Appointments::DataProvider::module_def);
}
