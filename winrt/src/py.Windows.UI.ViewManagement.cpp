// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.ViewManagement.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::AccessibilitySettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ActivationViewSwitcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewScaling>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewTitleBar>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewTransferContext>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::InputPane>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ProjectionManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::UISettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::UISettingsAnimationsEnabledChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::UISettingsAutoHideScrollBarsChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::UISettingsMessageDurationChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::UIViewSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::ViewManagement::ViewModePreferences>::python_type;

namespace py::cpp::Windows::UI::ViewManagement
{
    // ----- AccessibilitySettings class --------------------
    constexpr const char* const _type_name_AccessibilitySettings = "AccessibilitySettings";

    static PyObject* _new_AccessibilitySettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::ViewManagement::AccessibilitySettings instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AccessibilitySettings(py::wrapper::Windows::UI::ViewManagement::AccessibilitySettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AccessibilitySettings_get_HighContrast(py::wrapper::Windows::UI::ViewManagement::AccessibilitySettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HighContrast());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AccessibilitySettings_get_HighContrastScheme(py::wrapper::Windows::UI::ViewManagement::AccessibilitySettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HighContrastScheme());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AccessibilitySettings_add_HighContrastChanged(py::wrapper::Windows::UI::ViewManagement::AccessibilitySettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::AccessibilitySettings, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.HighContrastChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AccessibilitySettings_remove_HighContrastChanged(py::wrapper::Windows::UI::ViewManagement::AccessibilitySettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.HighContrastChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AccessibilitySettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::AccessibilitySettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AccessibilitySettings[] = {
        { "add_high_contrast_changed", (PyCFunction)AccessibilitySettings_add_HighContrastChanged, METH_O, nullptr },
        { "remove_high_contrast_changed", (PyCFunction)AccessibilitySettings_remove_HighContrastChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AccessibilitySettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AccessibilitySettings[] = {
        { const_cast<char*>("high_contrast"), (getter)AccessibilitySettings_get_HighContrast, nullptr, nullptr, nullptr },
        { const_cast<char*>("high_contrast_scheme"), (getter)AccessibilitySettings_get_HighContrastScheme, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AccessibilitySettings[] = 
    {
        { Py_tp_new, _new_AccessibilitySettings },
        { Py_tp_dealloc, _dealloc_AccessibilitySettings },
        { Py_tp_methods, _methods_AccessibilitySettings },
        { Py_tp_getset, _getset_AccessibilitySettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AccessibilitySettings =
    {
        "_winrt_Windows_UI_ViewManagement.AccessibilitySettings",
        sizeof(py::wrapper::Windows::UI::ViewManagement::AccessibilitySettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AccessibilitySettings
    };

    // ----- ActivationViewSwitcher class --------------------
    constexpr const char* const _type_name_ActivationViewSwitcher = "ActivationViewSwitcher";

    static PyObject* _new_ActivationViewSwitcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ActivationViewSwitcher);
        return nullptr;
    }

    static void _dealloc_ActivationViewSwitcher(py::wrapper::Windows::UI::ViewManagement::ActivationViewSwitcher* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ActivationViewSwitcher_IsViewPresentedOnActivationVirtualDesktop(py::wrapper::Windows::UI::ViewManagement::ActivationViewSwitcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.IsViewPresentedOnActivationVirtualDesktop(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ActivationViewSwitcher_ShowAsStandaloneAsync(py::wrapper::Windows::UI::ViewManagement::ActivationViewSwitcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.ShowAsStandaloneAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::ViewManagement::ViewSizePreference>(args, 1);

                return py::convert(self->obj.ShowAsStandaloneAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ActivationViewSwitcher(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::ActivationViewSwitcher>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ActivationViewSwitcher[] = {
        { "is_view_presented_on_activation_virtual_desktop", (PyCFunction)ActivationViewSwitcher_IsViewPresentedOnActivationVirtualDesktop, METH_VARARGS, nullptr },
        { "show_as_standalone_async", (PyCFunction)ActivationViewSwitcher_ShowAsStandaloneAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ActivationViewSwitcher, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ActivationViewSwitcher[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ActivationViewSwitcher[] = 
    {
        { Py_tp_new, _new_ActivationViewSwitcher },
        { Py_tp_dealloc, _dealloc_ActivationViewSwitcher },
        { Py_tp_methods, _methods_ActivationViewSwitcher },
        { Py_tp_getset, _getset_ActivationViewSwitcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ActivationViewSwitcher =
    {
        "_winrt_Windows_UI_ViewManagement.ActivationViewSwitcher",
        sizeof(py::wrapper::Windows::UI::ViewManagement::ActivationViewSwitcher),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ActivationViewSwitcher
    };

    // ----- ApplicationView class --------------------
    constexpr const char* const _type_name_ApplicationView = "ApplicationView";

    static PyObject* _new_ApplicationView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ApplicationView);
        return nullptr;
    }

    static void _dealloc_ApplicationView(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ApplicationView_ClearAllPersistedState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::ViewManagement::ApplicationView::ClearAllPersistedState();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_ClearPersistedState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::UI::ViewManagement::ApplicationView::ClearPersistedState(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_ExitFullScreenMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ExitFullScreenMode();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_GetApplicationViewIdForWindow(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::ICoreWindow>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::GetApplicationViewIdForWindow(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_GetDisplayRegions(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDisplayRegions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_IsViewModeSupported(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewMode>(args, 0);

                return py::convert(self->obj.IsViewModeSupported(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_SetDesiredBoundsMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewBoundsMode>(args, 0);

                return py::convert(self->obj.SetDesiredBoundsMode(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_SetPreferredMinSize(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                self->obj.SetPreferredMinSize(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_ShowStandardSystemOverlays(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ShowStandardSystemOverlays();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_TryConsolidateAsync(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryConsolidateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_TryEnterFullScreenMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryEnterFullScreenMode());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_TryEnterViewModeAsync(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewMode>(args, 0);

                return py::convert(self->obj.TryEnterViewModeAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewMode>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::ViewManagement::ViewModePreferences>(args, 1);

                return py::convert(self->obj.TryEnterViewModeAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_TryResizeView(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                return py::convert(self->obj.TryResizeView(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_TryUnsnap(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::TryUnsnap());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_TryUnsnapToFullscreen(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::TryUnsnapToFullscreen());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_Title(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationView_put_Title(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationView_get_IsScreenCaptureEnabled(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsScreenCaptureEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationView_put_IsScreenCaptureEnabled(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsScreenCaptureEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationView_get_AdjacentToLeftDisplayEdge(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdjacentToLeftDisplayEdge());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_AdjacentToRightDisplayEdge(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdjacentToRightDisplayEdge());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_Id(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_IsFullScreen(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsFullScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_IsOnLockScreen(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsOnLockScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_Orientation(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_SuppressSystemOverlays(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuppressSystemOverlays());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationView_put_SuppressSystemOverlays(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.SuppressSystemOverlays(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationView_get_VisibleBounds(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VisibleBounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_DesiredBoundsMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DesiredBoundsMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_FullScreenSystemOverlayMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FullScreenSystemOverlayMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationView_put_FullScreenSystemOverlayMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::FullScreenSystemOverlayMode>(arg);

            self->obj.FullScreenSystemOverlayMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationView_get_IsFullScreenMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsFullScreenMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_TitleBar(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_ViewMode(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViewMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_PersistedStateId(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PersistedStateId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationView_put_PersistedStateId(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PersistedStateId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationView_get_WindowingEnvironment(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_UIContext(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UIContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_Value(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_TerminateAppOnFinalViewClose(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::TerminateAppOnFinalViewClose());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_put_TerminateAppOnFinalViewClose(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<bool>(arg);

            winrt::Windows::UI::ViewManagement::ApplicationView::TerminateAppOnFinalViewClose(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_PreferredLaunchWindowingMode(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::PreferredLaunchWindowingMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_put_PreferredLaunchWindowingMode(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewWindowingMode>(arg);

            winrt::Windows::UI::ViewManagement::ApplicationView::PreferredLaunchWindowingMode(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_get_PreferredLaunchViewSize(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::ViewManagement::ApplicationView::PreferredLaunchViewSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_put_PreferredLaunchViewSize(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(arg);

            winrt::Windows::UI::ViewManagement::ApplicationView::PreferredLaunchViewSize(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_add_Consolidated(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::ApplicationView, winrt::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>>(arg);

            return py::convert(self->obj.Consolidated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_remove_Consolidated(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Consolidated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_add_VisibleBoundsChanged(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::ApplicationView, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.VisibleBoundsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationView_remove_VisibleBoundsChanged(py::wrapper::Windows::UI::ViewManagement::ApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VisibleBoundsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ApplicationView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::ApplicationView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationView[] = {
        { "clear_all_persisted_state", (PyCFunction)ApplicationView_ClearAllPersistedState, METH_VARARGS | METH_STATIC, nullptr },
        { "clear_persisted_state", (PyCFunction)ApplicationView_ClearPersistedState, METH_VARARGS | METH_STATIC, nullptr },
        { "exit_full_screen_mode", (PyCFunction)ApplicationView_ExitFullScreenMode, METH_VARARGS, nullptr },
        { "get_application_view_id_for_window", (PyCFunction)ApplicationView_GetApplicationViewIdForWindow, METH_VARARGS | METH_STATIC, nullptr },
        { "get_display_regions", (PyCFunction)ApplicationView_GetDisplayRegions, METH_VARARGS, nullptr },
        { "get_for_current_view", (PyCFunction)ApplicationView_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "is_view_mode_supported", (PyCFunction)ApplicationView_IsViewModeSupported, METH_VARARGS, nullptr },
        { "set_desired_bounds_mode", (PyCFunction)ApplicationView_SetDesiredBoundsMode, METH_VARARGS, nullptr },
        { "set_preferred_min_size", (PyCFunction)ApplicationView_SetPreferredMinSize, METH_VARARGS, nullptr },
        { "show_standard_system_overlays", (PyCFunction)ApplicationView_ShowStandardSystemOverlays, METH_VARARGS, nullptr },
        { "try_consolidate_async", (PyCFunction)ApplicationView_TryConsolidateAsync, METH_VARARGS, nullptr },
        { "try_enter_full_screen_mode", (PyCFunction)ApplicationView_TryEnterFullScreenMode, METH_VARARGS, nullptr },
        { "try_enter_view_mode_async", (PyCFunction)ApplicationView_TryEnterViewModeAsync, METH_VARARGS, nullptr },
        { "try_resize_view", (PyCFunction)ApplicationView_TryResizeView, METH_VARARGS, nullptr },
        { "try_unsnap", (PyCFunction)ApplicationView_TryUnsnap, METH_VARARGS | METH_STATIC, nullptr },
        { "try_unsnap_to_fullscreen", (PyCFunction)ApplicationView_TryUnsnapToFullscreen, METH_VARARGS | METH_STATIC, nullptr },
        { "get_value", (PyCFunction)ApplicationView_get_Value, METH_NOARGS | METH_STATIC, nullptr },
        { "get_terminate_app_on_final_view_close", (PyCFunction)ApplicationView_get_TerminateAppOnFinalViewClose, METH_NOARGS | METH_STATIC, nullptr },
        { "put_terminate_app_on_final_view_close", (PyCFunction)ApplicationView_put_TerminateAppOnFinalViewClose, METH_O | METH_STATIC, nullptr },
        { "get_preferred_launch_windowing_mode", (PyCFunction)ApplicationView_get_PreferredLaunchWindowingMode, METH_NOARGS | METH_STATIC, nullptr },
        { "put_preferred_launch_windowing_mode", (PyCFunction)ApplicationView_put_PreferredLaunchWindowingMode, METH_O | METH_STATIC, nullptr },
        { "get_preferred_launch_view_size", (PyCFunction)ApplicationView_get_PreferredLaunchViewSize, METH_NOARGS | METH_STATIC, nullptr },
        { "put_preferred_launch_view_size", (PyCFunction)ApplicationView_put_PreferredLaunchViewSize, METH_O | METH_STATIC, nullptr },
        { "add_consolidated", (PyCFunction)ApplicationView_add_Consolidated, METH_O, nullptr },
        { "remove_consolidated", (PyCFunction)ApplicationView_remove_Consolidated, METH_O, nullptr },
        { "add_visible_bounds_changed", (PyCFunction)ApplicationView_add_VisibleBoundsChanged, METH_O, nullptr },
        { "remove_visible_bounds_changed", (PyCFunction)ApplicationView_remove_VisibleBoundsChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ApplicationView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApplicationView[] = {
        { const_cast<char*>("title"), (getter)ApplicationView_get_Title, (setter)ApplicationView_put_Title, nullptr, nullptr },
        { const_cast<char*>("is_screen_capture_enabled"), (getter)ApplicationView_get_IsScreenCaptureEnabled, (setter)ApplicationView_put_IsScreenCaptureEnabled, nullptr, nullptr },
        { const_cast<char*>("adjacent_to_left_display_edge"), (getter)ApplicationView_get_AdjacentToLeftDisplayEdge, nullptr, nullptr, nullptr },
        { const_cast<char*>("adjacent_to_right_display_edge"), (getter)ApplicationView_get_AdjacentToRightDisplayEdge, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)ApplicationView_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_full_screen"), (getter)ApplicationView_get_IsFullScreen, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_on_lock_screen"), (getter)ApplicationView_get_IsOnLockScreen, nullptr, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)ApplicationView_get_Orientation, nullptr, nullptr, nullptr },
        { const_cast<char*>("suppress_system_overlays"), (getter)ApplicationView_get_SuppressSystemOverlays, (setter)ApplicationView_put_SuppressSystemOverlays, nullptr, nullptr },
        { const_cast<char*>("visible_bounds"), (getter)ApplicationView_get_VisibleBounds, nullptr, nullptr, nullptr },
        { const_cast<char*>("desired_bounds_mode"), (getter)ApplicationView_get_DesiredBoundsMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("full_screen_system_overlay_mode"), (getter)ApplicationView_get_FullScreenSystemOverlayMode, (setter)ApplicationView_put_FullScreenSystemOverlayMode, nullptr, nullptr },
        { const_cast<char*>("is_full_screen_mode"), (getter)ApplicationView_get_IsFullScreenMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("title_bar"), (getter)ApplicationView_get_TitleBar, nullptr, nullptr, nullptr },
        { const_cast<char*>("view_mode"), (getter)ApplicationView_get_ViewMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("persisted_state_id"), (getter)ApplicationView_get_PersistedStateId, (setter)ApplicationView_put_PersistedStateId, nullptr, nullptr },
        { const_cast<char*>("windowing_environment"), (getter)ApplicationView_get_WindowingEnvironment, nullptr, nullptr, nullptr },
        { const_cast<char*>("u_i_context"), (getter)ApplicationView_get_UIContext, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ApplicationView[] = 
    {
        { Py_tp_new, _new_ApplicationView },
        { Py_tp_dealloc, _dealloc_ApplicationView },
        { Py_tp_methods, _methods_ApplicationView },
        { Py_tp_getset, _getset_ApplicationView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApplicationView =
    {
        "_winrt_Windows_UI_ViewManagement.ApplicationView",
        sizeof(py::wrapper::Windows::UI::ViewManagement::ApplicationView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationView
    };

    // ----- ApplicationViewConsolidatedEventArgs class --------------------
    constexpr const char* const _type_name_ApplicationViewConsolidatedEventArgs = "ApplicationViewConsolidatedEventArgs";

    static PyObject* _new_ApplicationViewConsolidatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ApplicationViewConsolidatedEventArgs);
        return nullptr;
    }

    static void _dealloc_ApplicationViewConsolidatedEventArgs(py::wrapper::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ApplicationViewConsolidatedEventArgs_get_IsUserInitiated(py::wrapper::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsUserInitiated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationViewConsolidatedEventArgs_get_IsAppInitiated(py::wrapper::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsAppInitiated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ApplicationViewConsolidatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationViewConsolidatedEventArgs[] = {
        { "_from", (PyCFunction)_from_ApplicationViewConsolidatedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApplicationViewConsolidatedEventArgs[] = {
        { const_cast<char*>("is_user_initiated"), (getter)ApplicationViewConsolidatedEventArgs_get_IsUserInitiated, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_app_initiated"), (getter)ApplicationViewConsolidatedEventArgs_get_IsAppInitiated, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ApplicationViewConsolidatedEventArgs[] = 
    {
        { Py_tp_new, _new_ApplicationViewConsolidatedEventArgs },
        { Py_tp_dealloc, _dealloc_ApplicationViewConsolidatedEventArgs },
        { Py_tp_methods, _methods_ApplicationViewConsolidatedEventArgs },
        { Py_tp_getset, _getset_ApplicationViewConsolidatedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApplicationViewConsolidatedEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement.ApplicationViewConsolidatedEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationViewConsolidatedEventArgs
    };

    // ----- ApplicationViewScaling class --------------------
    constexpr const char* const _type_name_ApplicationViewScaling = "ApplicationViewScaling";

    static PyObject* _new_ApplicationViewScaling(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ApplicationViewScaling);
        return nullptr;
    }

    static void _dealloc_ApplicationViewScaling(py::wrapper::Windows::UI::ViewManagement::ApplicationViewScaling* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ApplicationViewScaling_TrySetDisableLayoutScaling(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewScaling::TrySetDisableLayoutScaling(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationViewScaling_get_DisableLayoutScaling(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewScaling::DisableLayoutScaling());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ApplicationViewScaling(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::ApplicationViewScaling>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationViewScaling[] = {
        { "try_set_disable_layout_scaling", (PyCFunction)ApplicationViewScaling_TrySetDisableLayoutScaling, METH_VARARGS | METH_STATIC, nullptr },
        { "get_disable_layout_scaling", (PyCFunction)ApplicationViewScaling_get_DisableLayoutScaling, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_ApplicationViewScaling, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApplicationViewScaling[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ApplicationViewScaling[] = 
    {
        { Py_tp_new, _new_ApplicationViewScaling },
        { Py_tp_dealloc, _dealloc_ApplicationViewScaling },
        { Py_tp_methods, _methods_ApplicationViewScaling },
        { Py_tp_getset, _getset_ApplicationViewScaling },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApplicationViewScaling =
    {
        "_winrt_Windows_UI_ViewManagement.ApplicationViewScaling",
        sizeof(py::wrapper::Windows::UI::ViewManagement::ApplicationViewScaling),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationViewScaling
    };

    // ----- ApplicationViewSwitcher class --------------------
    constexpr const char* const _type_name_ApplicationViewSwitcher = "ApplicationViewSwitcher";

    static PyObject* _new_ApplicationViewSwitcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ApplicationViewSwitcher);
        return nullptr;
    }

    static PyObject* ApplicationViewSwitcher_DisableShowingMainViewOnActivation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::DisableShowingMainViewOnActivation();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationViewSwitcher_DisableSystemViewActivationPolicy(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::DisableSystemViewActivationPolicy();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationViewSwitcher_PrepareForCustomAnimatedSwitchAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewSwitchingOptions>(args, 2);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::PrepareForCustomAnimatedSwitchAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationViewSwitcher_SwitchAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::SwitchAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::SwitchAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewSwitchingOptions>(args, 2);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::SwitchAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationViewSwitcher_TryShowAsStandaloneAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::TryShowAsStandaloneAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::ViewManagement::ViewSizePreference>(args, 1);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::TryShowAsStandaloneAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::ViewManagement::ViewSizePreference>(args, 1);
                auto param2 = py::convert_to<int32_t>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::UI::ViewManagement::ViewSizePreference>(args, 3);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::TryShowAsStandaloneAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationViewSwitcher_TryShowAsViewModeAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewMode>(args, 1);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::TryShowAsViewModeAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewMode>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::ViewManagement::ViewModePreferences>(args, 2);

                return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher::TryShowAsViewModeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationViewSwitcher[] = {
        { "disable_showing_main_view_on_activation", (PyCFunction)ApplicationViewSwitcher_DisableShowingMainViewOnActivation, METH_VARARGS | METH_STATIC, nullptr },
        { "disable_system_view_activation_policy", (PyCFunction)ApplicationViewSwitcher_DisableSystemViewActivationPolicy, METH_VARARGS | METH_STATIC, nullptr },
        { "prepare_for_custom_animated_switch_async", (PyCFunction)ApplicationViewSwitcher_PrepareForCustomAnimatedSwitchAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "switch_async", (PyCFunction)ApplicationViewSwitcher_SwitchAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_show_as_standalone_async", (PyCFunction)ApplicationViewSwitcher_TryShowAsStandaloneAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_show_as_view_mode_async", (PyCFunction)ApplicationViewSwitcher_TryShowAsViewModeAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApplicationViewSwitcher[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ApplicationViewSwitcher[] = 
    {
        { Py_tp_new, _new_ApplicationViewSwitcher },
        { Py_tp_methods, _methods_ApplicationViewSwitcher },
        { Py_tp_getset, _getset_ApplicationViewSwitcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApplicationViewSwitcher =
    {
        "_winrt_Windows_UI_ViewManagement.ApplicationViewSwitcher",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationViewSwitcher
    };

    // ----- ApplicationViewTitleBar class --------------------
    constexpr const char* const _type_name_ApplicationViewTitleBar = "ApplicationViewTitleBar";

    static PyObject* _new_ApplicationViewTitleBar(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ApplicationViewTitleBar);
        return nullptr;
    }

    static void _dealloc_ApplicationViewTitleBar(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ApplicationViewTitleBar_get_InactiveForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InactiveForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_InactiveForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.InactiveForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_InactiveBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InactiveBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_InactiveBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.InactiveBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonPressedForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonPressedForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonPressedForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonPressedForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonPressedBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonPressedBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonPressedBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonPressedBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonInactiveForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonInactiveForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonInactiveForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonInactiveForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonInactiveBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonInactiveBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonInactiveBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonInactiveBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonHoverForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonHoverForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonHoverForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonHoverForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonHoverBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonHoverBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonHoverBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonHoverBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonForegroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_ButtonBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_ButtonBackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTitleBar_get_BackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTitleBar_put_BackgroundColor(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.BackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ApplicationViewTitleBar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::ApplicationViewTitleBar>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationViewTitleBar[] = {
        { "_from", (PyCFunction)_from_ApplicationViewTitleBar, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApplicationViewTitleBar[] = {
        { const_cast<char*>("inactive_foreground_color"), (getter)ApplicationViewTitleBar_get_InactiveForegroundColor, (setter)ApplicationViewTitleBar_put_InactiveForegroundColor, nullptr, nullptr },
        { const_cast<char*>("inactive_background_color"), (getter)ApplicationViewTitleBar_get_InactiveBackgroundColor, (setter)ApplicationViewTitleBar_put_InactiveBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("foreground_color"), (getter)ApplicationViewTitleBar_get_ForegroundColor, (setter)ApplicationViewTitleBar_put_ForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_pressed_foreground_color"), (getter)ApplicationViewTitleBar_get_ButtonPressedForegroundColor, (setter)ApplicationViewTitleBar_put_ButtonPressedForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_pressed_background_color"), (getter)ApplicationViewTitleBar_get_ButtonPressedBackgroundColor, (setter)ApplicationViewTitleBar_put_ButtonPressedBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("button_inactive_foreground_color"), (getter)ApplicationViewTitleBar_get_ButtonInactiveForegroundColor, (setter)ApplicationViewTitleBar_put_ButtonInactiveForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_inactive_background_color"), (getter)ApplicationViewTitleBar_get_ButtonInactiveBackgroundColor, (setter)ApplicationViewTitleBar_put_ButtonInactiveBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("button_hover_foreground_color"), (getter)ApplicationViewTitleBar_get_ButtonHoverForegroundColor, (setter)ApplicationViewTitleBar_put_ButtonHoverForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_hover_background_color"), (getter)ApplicationViewTitleBar_get_ButtonHoverBackgroundColor, (setter)ApplicationViewTitleBar_put_ButtonHoverBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("button_foreground_color"), (getter)ApplicationViewTitleBar_get_ButtonForegroundColor, (setter)ApplicationViewTitleBar_put_ButtonForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_background_color"), (getter)ApplicationViewTitleBar_get_ButtonBackgroundColor, (setter)ApplicationViewTitleBar_put_ButtonBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("background_color"), (getter)ApplicationViewTitleBar_get_BackgroundColor, (setter)ApplicationViewTitleBar_put_BackgroundColor, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ApplicationViewTitleBar[] = 
    {
        { Py_tp_new, _new_ApplicationViewTitleBar },
        { Py_tp_dealloc, _dealloc_ApplicationViewTitleBar },
        { Py_tp_methods, _methods_ApplicationViewTitleBar },
        { Py_tp_getset, _getset_ApplicationViewTitleBar },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApplicationViewTitleBar =
    {
        "_winrt_Windows_UI_ViewManagement.ApplicationViewTitleBar",
        sizeof(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTitleBar),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationViewTitleBar
    };

    // ----- ApplicationViewTransferContext class --------------------
    constexpr const char* const _type_name_ApplicationViewTransferContext = "ApplicationViewTransferContext";

    static PyObject* _new_ApplicationViewTransferContext(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::ViewManagement::ApplicationViewTransferContext instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ApplicationViewTransferContext(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTransferContext* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ApplicationViewTransferContext_get_ViewId(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTransferContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ApplicationViewTransferContext_put_ViewId(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTransferContext* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.ViewId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ApplicationViewTransferContext_get_DataPackageFormatId(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::ViewManagement::ApplicationViewTransferContext::DataPackageFormatId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ApplicationViewTransferContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::ApplicationViewTransferContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationViewTransferContext[] = {
        { "get_data_package_format_id", (PyCFunction)ApplicationViewTransferContext_get_DataPackageFormatId, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_ApplicationViewTransferContext, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApplicationViewTransferContext[] = {
        { const_cast<char*>("view_id"), (getter)ApplicationViewTransferContext_get_ViewId, (setter)ApplicationViewTransferContext_put_ViewId, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ApplicationViewTransferContext[] = 
    {
        { Py_tp_new, _new_ApplicationViewTransferContext },
        { Py_tp_dealloc, _dealloc_ApplicationViewTransferContext },
        { Py_tp_methods, _methods_ApplicationViewTransferContext },
        { Py_tp_getset, _getset_ApplicationViewTransferContext },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApplicationViewTransferContext =
    {
        "_winrt_Windows_UI_ViewManagement.ApplicationViewTransferContext",
        sizeof(py::wrapper::Windows::UI::ViewManagement::ApplicationViewTransferContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationViewTransferContext
    };

    // ----- InputPane class --------------------
    constexpr const char* const _type_name_InputPane = "InputPane";

    static PyObject* _new_InputPane(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InputPane);
        return nullptr;
    }

    static void _dealloc_InputPane(py::wrapper::Windows::UI::ViewManagement::InputPane* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InputPane_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::InputPane::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InputPane_GetForUIContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::UIContext>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::InputPane::GetForUIContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InputPane_TryHide(py::wrapper::Windows::UI::ViewManagement::InputPane* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryHide());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InputPane_TryShow(py::wrapper::Windows::UI::ViewManagement::InputPane* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryShow());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InputPane_get_OccludedRect(py::wrapper::Windows::UI::ViewManagement::InputPane* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OccludedRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InputPane_get_Visible(py::wrapper::Windows::UI::ViewManagement::InputPane* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Visible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int InputPane_put_Visible(py::wrapper::Windows::UI::ViewManagement::InputPane* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Visible(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* InputPane_add_Hiding(py::wrapper::Windows::UI::ViewManagement::InputPane* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::InputPane, winrt::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>>(arg);

            return py::convert(self->obj.Hiding(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InputPane_remove_Hiding(py::wrapper::Windows::UI::ViewManagement::InputPane* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Hiding(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InputPane_add_Showing(py::wrapper::Windows::UI::ViewManagement::InputPane* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::InputPane, winrt::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>>(arg);

            return py::convert(self->obj.Showing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InputPane_remove_Showing(py::wrapper::Windows::UI::ViewManagement::InputPane* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Showing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InputPane(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::InputPane>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InputPane[] = {
        { "get_for_current_view", (PyCFunction)InputPane_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_u_i_context", (PyCFunction)InputPane_GetForUIContext, METH_VARARGS | METH_STATIC, nullptr },
        { "try_hide", (PyCFunction)InputPane_TryHide, METH_VARARGS, nullptr },
        { "try_show", (PyCFunction)InputPane_TryShow, METH_VARARGS, nullptr },
        { "add_hiding", (PyCFunction)InputPane_add_Hiding, METH_O, nullptr },
        { "remove_hiding", (PyCFunction)InputPane_remove_Hiding, METH_O, nullptr },
        { "add_showing", (PyCFunction)InputPane_add_Showing, METH_O, nullptr },
        { "remove_showing", (PyCFunction)InputPane_remove_Showing, METH_O, nullptr },
        { "_from", (PyCFunction)_from_InputPane, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InputPane[] = {
        { const_cast<char*>("occluded_rect"), (getter)InputPane_get_OccludedRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("visible"), (getter)InputPane_get_Visible, (setter)InputPane_put_Visible, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InputPane[] = 
    {
        { Py_tp_new, _new_InputPane },
        { Py_tp_dealloc, _dealloc_InputPane },
        { Py_tp_methods, _methods_InputPane },
        { Py_tp_getset, _getset_InputPane },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InputPane =
    {
        "_winrt_Windows_UI_ViewManagement.InputPane",
        sizeof(py::wrapper::Windows::UI::ViewManagement::InputPane),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InputPane
    };

    // ----- InputPaneVisibilityEventArgs class --------------------
    constexpr const char* const _type_name_InputPaneVisibilityEventArgs = "InputPaneVisibilityEventArgs";

    static PyObject* _new_InputPaneVisibilityEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InputPaneVisibilityEventArgs);
        return nullptr;
    }

    static void _dealloc_InputPaneVisibilityEventArgs(py::wrapper::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InputPaneVisibilityEventArgs_get_EnsuredFocusedElementInView(py::wrapper::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EnsuredFocusedElementInView());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int InputPaneVisibilityEventArgs_put_EnsuredFocusedElementInView(py::wrapper::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.EnsuredFocusedElementInView(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* InputPaneVisibilityEventArgs_get_OccludedRect(py::wrapper::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OccludedRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InputPaneVisibilityEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InputPaneVisibilityEventArgs[] = {
        { "_from", (PyCFunction)_from_InputPaneVisibilityEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InputPaneVisibilityEventArgs[] = {
        { const_cast<char*>("ensured_focused_element_in_view"), (getter)InputPaneVisibilityEventArgs_get_EnsuredFocusedElementInView, (setter)InputPaneVisibilityEventArgs_put_EnsuredFocusedElementInView, nullptr, nullptr },
        { const_cast<char*>("occluded_rect"), (getter)InputPaneVisibilityEventArgs_get_OccludedRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InputPaneVisibilityEventArgs[] = 
    {
        { Py_tp_new, _new_InputPaneVisibilityEventArgs },
        { Py_tp_dealloc, _dealloc_InputPaneVisibilityEventArgs },
        { Py_tp_methods, _methods_InputPaneVisibilityEventArgs },
        { Py_tp_getset, _getset_InputPaneVisibilityEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InputPaneVisibilityEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement.InputPaneVisibilityEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InputPaneVisibilityEventArgs
    };

    // ----- ProjectionManager class --------------------
    constexpr const char* const _type_name_ProjectionManager = "ProjectionManager";

    static PyObject* _new_ProjectionManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ProjectionManager);
        return nullptr;
    }

    static PyObject* ProjectionManager_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProjectionManager_RequestStartProjectingAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 2);

                return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::RequestStartProjectingAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 3);

                return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::RequestStartProjectingAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProjectionManager_StartProjectingAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);

                return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::StartProjectingAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Enumeration::DeviceInformation>(args, 2);

                return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::StartProjectingAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProjectionManager_StopProjectingAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);

                return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::StopProjectingAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProjectionManager_SwapDisplaysForViewsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);

                return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::SwapDisplaysForViewsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProjectionManager_get_ProjectionDisplayAvailable(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::ProjectionDisplayAvailable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProjectionManager_add_ProjectionDisplayAvailableChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::UI::ViewManagement::ProjectionManager::ProjectionDisplayAvailableChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProjectionManager_remove_ProjectionDisplayAvailableChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::ViewManagement::ProjectionManager::ProjectionDisplayAvailableChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProjectionManager[] = {
        { "get_device_selector", (PyCFunction)ProjectionManager_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "request_start_projecting_async", (PyCFunction)ProjectionManager_RequestStartProjectingAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "start_projecting_async", (PyCFunction)ProjectionManager_StartProjectingAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "stop_projecting_async", (PyCFunction)ProjectionManager_StopProjectingAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "swap_displays_for_views_async", (PyCFunction)ProjectionManager_SwapDisplaysForViewsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_projection_display_available", (PyCFunction)ProjectionManager_get_ProjectionDisplayAvailable, METH_NOARGS | METH_STATIC, nullptr },
        { "add_projection_display_available_changed", (PyCFunction)ProjectionManager_add_ProjectionDisplayAvailableChanged, METH_O | METH_STATIC, nullptr },
        { "remove_projection_display_available_changed", (PyCFunction)ProjectionManager_remove_ProjectionDisplayAvailableChanged, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ProjectionManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ProjectionManager[] = 
    {
        { Py_tp_new, _new_ProjectionManager },
        { Py_tp_methods, _methods_ProjectionManager },
        { Py_tp_getset, _getset_ProjectionManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ProjectionManager =
    {
        "_winrt_Windows_UI_ViewManagement.ProjectionManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProjectionManager
    };

    // ----- UISettings class --------------------
    constexpr const char* const _type_name_UISettings = "UISettings";

    static PyObject* _new_UISettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::ViewManagement::UISettings instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UISettings(py::wrapper::Windows::UI::ViewManagement::UISettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UISettings_GetColorValue(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::UIColorType>(args, 0);

                return py::convert(self->obj.GetColorValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UISettings_UIElementColor(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::UIElementType>(args, 0);

                return py::convert(self->obj.UIElementColor(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UISettings_get_AnimationsEnabled(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AnimationsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_CaretBlinkRate(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CaretBlinkRate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_CaretBrowsingEnabled(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CaretBrowsingEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_CaretWidth(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CaretWidth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_CursorSize(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CursorSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_DoubleClickTime(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DoubleClickTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_HandPreference(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HandPreference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_MessageDuration(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MessageDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_MouseHoverTime(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MouseHoverTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_ScrollBarArrowSize(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ScrollBarArrowSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_ScrollBarSize(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ScrollBarSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_ScrollBarThumbBoxSize(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ScrollBarThumbBoxSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_TextScaleFactor(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextScaleFactor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_AdvancedEffectsEnabled(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdvancedEffectsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_get_AutoHideScrollBars(py::wrapper::Windows::UI::ViewManagement::UISettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutoHideScrollBars());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_add_TextScaleFactorChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::UISettings, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.TextScaleFactorChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_remove_TextScaleFactorChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TextScaleFactorChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_add_ColorValuesChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::UISettings, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ColorValuesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_remove_ColorValuesChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ColorValuesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_add_AdvancedEffectsEnabledChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::UISettings, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.AdvancedEffectsEnabledChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_remove_AdvancedEffectsEnabledChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AdvancedEffectsEnabledChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_add_AutoHideScrollBarsChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::UISettings, winrt::Windows::UI::ViewManagement::UISettingsAutoHideScrollBarsChangedEventArgs>>(arg);

            return py::convert(self->obj.AutoHideScrollBarsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_remove_AutoHideScrollBarsChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AutoHideScrollBarsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_add_AnimationsEnabledChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::UISettings, winrt::Windows::UI::ViewManagement::UISettingsAnimationsEnabledChangedEventArgs>>(arg);

            return py::convert(self->obj.AnimationsEnabledChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_remove_AnimationsEnabledChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AnimationsEnabledChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_add_MessageDurationChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::ViewManagement::UISettings, winrt::Windows::UI::ViewManagement::UISettingsMessageDurationChangedEventArgs>>(arg);

            return py::convert(self->obj.MessageDurationChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UISettings_remove_MessageDurationChanged(py::wrapper::Windows::UI::ViewManagement::UISettings* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MessageDurationChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UISettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::UISettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UISettings[] = {
        { "get_color_value", (PyCFunction)UISettings_GetColorValue, METH_VARARGS, nullptr },
        { "u_i_element_color", (PyCFunction)UISettings_UIElementColor, METH_VARARGS, nullptr },
        { "add_text_scale_factor_changed", (PyCFunction)UISettings_add_TextScaleFactorChanged, METH_O, nullptr },
        { "remove_text_scale_factor_changed", (PyCFunction)UISettings_remove_TextScaleFactorChanged, METH_O, nullptr },
        { "add_color_values_changed", (PyCFunction)UISettings_add_ColorValuesChanged, METH_O, nullptr },
        { "remove_color_values_changed", (PyCFunction)UISettings_remove_ColorValuesChanged, METH_O, nullptr },
        { "add_advanced_effects_enabled_changed", (PyCFunction)UISettings_add_AdvancedEffectsEnabledChanged, METH_O, nullptr },
        { "remove_advanced_effects_enabled_changed", (PyCFunction)UISettings_remove_AdvancedEffectsEnabledChanged, METH_O, nullptr },
        { "add_auto_hide_scroll_bars_changed", (PyCFunction)UISettings_add_AutoHideScrollBarsChanged, METH_O, nullptr },
        { "remove_auto_hide_scroll_bars_changed", (PyCFunction)UISettings_remove_AutoHideScrollBarsChanged, METH_O, nullptr },
        { "add_animations_enabled_changed", (PyCFunction)UISettings_add_AnimationsEnabledChanged, METH_O, nullptr },
        { "remove_animations_enabled_changed", (PyCFunction)UISettings_remove_AnimationsEnabledChanged, METH_O, nullptr },
        { "add_message_duration_changed", (PyCFunction)UISettings_add_MessageDurationChanged, METH_O, nullptr },
        { "remove_message_duration_changed", (PyCFunction)UISettings_remove_MessageDurationChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_UISettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UISettings[] = {
        { const_cast<char*>("animations_enabled"), (getter)UISettings_get_AnimationsEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("caret_blink_rate"), (getter)UISettings_get_CaretBlinkRate, nullptr, nullptr, nullptr },
        { const_cast<char*>("caret_browsing_enabled"), (getter)UISettings_get_CaretBrowsingEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("caret_width"), (getter)UISettings_get_CaretWidth, nullptr, nullptr, nullptr },
        { const_cast<char*>("cursor_size"), (getter)UISettings_get_CursorSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("double_click_time"), (getter)UISettings_get_DoubleClickTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("hand_preference"), (getter)UISettings_get_HandPreference, nullptr, nullptr, nullptr },
        { const_cast<char*>("message_duration"), (getter)UISettings_get_MessageDuration, nullptr, nullptr, nullptr },
        { const_cast<char*>("mouse_hover_time"), (getter)UISettings_get_MouseHoverTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("scroll_bar_arrow_size"), (getter)UISettings_get_ScrollBarArrowSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("scroll_bar_size"), (getter)UISettings_get_ScrollBarSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("scroll_bar_thumb_box_size"), (getter)UISettings_get_ScrollBarThumbBoxSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("text_scale_factor"), (getter)UISettings_get_TextScaleFactor, nullptr, nullptr, nullptr },
        { const_cast<char*>("advanced_effects_enabled"), (getter)UISettings_get_AdvancedEffectsEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("auto_hide_scroll_bars"), (getter)UISettings_get_AutoHideScrollBars, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UISettings[] = 
    {
        { Py_tp_new, _new_UISettings },
        { Py_tp_dealloc, _dealloc_UISettings },
        { Py_tp_methods, _methods_UISettings },
        { Py_tp_getset, _getset_UISettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UISettings =
    {
        "_winrt_Windows_UI_ViewManagement.UISettings",
        sizeof(py::wrapper::Windows::UI::ViewManagement::UISettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UISettings
    };

    // ----- UISettingsAnimationsEnabledChangedEventArgs class --------------------
    constexpr const char* const _type_name_UISettingsAnimationsEnabledChangedEventArgs = "UISettingsAnimationsEnabledChangedEventArgs";

    static PyObject* _new_UISettingsAnimationsEnabledChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UISettingsAnimationsEnabledChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_UISettingsAnimationsEnabledChangedEventArgs(py::wrapper::Windows::UI::ViewManagement::UISettingsAnimationsEnabledChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_UISettingsAnimationsEnabledChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::UISettingsAnimationsEnabledChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UISettingsAnimationsEnabledChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_UISettingsAnimationsEnabledChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UISettingsAnimationsEnabledChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UISettingsAnimationsEnabledChangedEventArgs[] = 
    {
        { Py_tp_new, _new_UISettingsAnimationsEnabledChangedEventArgs },
        { Py_tp_dealloc, _dealloc_UISettingsAnimationsEnabledChangedEventArgs },
        { Py_tp_methods, _methods_UISettingsAnimationsEnabledChangedEventArgs },
        { Py_tp_getset, _getset_UISettingsAnimationsEnabledChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UISettingsAnimationsEnabledChangedEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement.UISettingsAnimationsEnabledChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::UISettingsAnimationsEnabledChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UISettingsAnimationsEnabledChangedEventArgs
    };

    // ----- UISettingsAutoHideScrollBarsChangedEventArgs class --------------------
    constexpr const char* const _type_name_UISettingsAutoHideScrollBarsChangedEventArgs = "UISettingsAutoHideScrollBarsChangedEventArgs";

    static PyObject* _new_UISettingsAutoHideScrollBarsChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UISettingsAutoHideScrollBarsChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_UISettingsAutoHideScrollBarsChangedEventArgs(py::wrapper::Windows::UI::ViewManagement::UISettingsAutoHideScrollBarsChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_UISettingsAutoHideScrollBarsChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::UISettingsAutoHideScrollBarsChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UISettingsAutoHideScrollBarsChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_UISettingsAutoHideScrollBarsChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UISettingsAutoHideScrollBarsChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UISettingsAutoHideScrollBarsChangedEventArgs[] = 
    {
        { Py_tp_new, _new_UISettingsAutoHideScrollBarsChangedEventArgs },
        { Py_tp_dealloc, _dealloc_UISettingsAutoHideScrollBarsChangedEventArgs },
        { Py_tp_methods, _methods_UISettingsAutoHideScrollBarsChangedEventArgs },
        { Py_tp_getset, _getset_UISettingsAutoHideScrollBarsChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UISettingsAutoHideScrollBarsChangedEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement.UISettingsAutoHideScrollBarsChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::UISettingsAutoHideScrollBarsChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UISettingsAutoHideScrollBarsChangedEventArgs
    };

    // ----- UISettingsMessageDurationChangedEventArgs class --------------------
    constexpr const char* const _type_name_UISettingsMessageDurationChangedEventArgs = "UISettingsMessageDurationChangedEventArgs";

    static PyObject* _new_UISettingsMessageDurationChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UISettingsMessageDurationChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_UISettingsMessageDurationChangedEventArgs(py::wrapper::Windows::UI::ViewManagement::UISettingsMessageDurationChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_UISettingsMessageDurationChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::UISettingsMessageDurationChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UISettingsMessageDurationChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_UISettingsMessageDurationChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UISettingsMessageDurationChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UISettingsMessageDurationChangedEventArgs[] = 
    {
        { Py_tp_new, _new_UISettingsMessageDurationChangedEventArgs },
        { Py_tp_dealloc, _dealloc_UISettingsMessageDurationChangedEventArgs },
        { Py_tp_methods, _methods_UISettingsMessageDurationChangedEventArgs },
        { Py_tp_getset, _getset_UISettingsMessageDurationChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UISettingsMessageDurationChangedEventArgs =
    {
        "_winrt_Windows_UI_ViewManagement.UISettingsMessageDurationChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::ViewManagement::UISettingsMessageDurationChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UISettingsMessageDurationChangedEventArgs
    };

    // ----- UIViewSettings class --------------------
    constexpr const char* const _type_name_UIViewSettings = "UIViewSettings";

    static PyObject* _new_UIViewSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UIViewSettings);
        return nullptr;
    }

    static void _dealloc_UIViewSettings(py::wrapper::Windows::UI::ViewManagement::UIViewSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UIViewSettings_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::ViewManagement::UIViewSettings::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UIViewSettings_get_UserInteractionMode(py::wrapper::Windows::UI::ViewManagement::UIViewSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserInteractionMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UIViewSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::UIViewSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UIViewSettings[] = {
        { "get_for_current_view", (PyCFunction)UIViewSettings_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_UIViewSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UIViewSettings[] = {
        { const_cast<char*>("user_interaction_mode"), (getter)UIViewSettings_get_UserInteractionMode, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UIViewSettings[] = 
    {
        { Py_tp_new, _new_UIViewSettings },
        { Py_tp_dealloc, _dealloc_UIViewSettings },
        { Py_tp_methods, _methods_UIViewSettings },
        { Py_tp_getset, _getset_UIViewSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UIViewSettings =
    {
        "_winrt_Windows_UI_ViewManagement.UIViewSettings",
        sizeof(py::wrapper::Windows::UI::ViewManagement::UIViewSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UIViewSettings
    };

    // ----- ViewModePreferences class --------------------
    constexpr const char* const _type_name_ViewModePreferences = "ViewModePreferences";

    static PyObject* _new_ViewModePreferences(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ViewModePreferences);
        return nullptr;
    }

    static void _dealloc_ViewModePreferences(py::wrapper::Windows::UI::ViewManagement::ViewModePreferences* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ViewModePreferences_CreateDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::ApplicationViewMode>(args, 0);

                return py::convert(winrt::Windows::UI::ViewManagement::ViewModePreferences::CreateDefault(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ViewModePreferences_get_ViewSizePreference(py::wrapper::Windows::UI::ViewManagement::ViewModePreferences* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViewSizePreference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ViewModePreferences_put_ViewSizePreference(py::wrapper::Windows::UI::ViewManagement::ViewModePreferences* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::ViewManagement::ViewSizePreference>(arg);

            self->obj.ViewSizePreference(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ViewModePreferences_get_CustomSize(py::wrapper::Windows::UI::ViewManagement::ViewModePreferences* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CustomSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ViewModePreferences_put_CustomSize(py::wrapper::Windows::UI::ViewManagement::ViewModePreferences* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(arg);

            self->obj.CustomSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ViewModePreferences(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ViewManagement::ViewModePreferences>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ViewModePreferences[] = {
        { "create_default", (PyCFunction)ViewModePreferences_CreateDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_ViewModePreferences, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ViewModePreferences[] = {
        { const_cast<char*>("view_size_preference"), (getter)ViewModePreferences_get_ViewSizePreference, (setter)ViewModePreferences_put_ViewSizePreference, nullptr, nullptr },
        { const_cast<char*>("custom_size"), (getter)ViewModePreferences_get_CustomSize, (setter)ViewModePreferences_put_CustomSize, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ViewModePreferences[] = 
    {
        { Py_tp_new, _new_ViewModePreferences },
        { Py_tp_dealloc, _dealloc_ViewModePreferences },
        { Py_tp_methods, _methods_ViewModePreferences },
        { Py_tp_getset, _getset_ViewModePreferences },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ViewModePreferences =
    {
        "_winrt_Windows_UI_ViewManagement.ViewModePreferences",
        sizeof(py::wrapper::Windows::UI::ViewManagement::ViewModePreferences),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ViewModePreferences
    };

    // ----- Windows.UI.ViewManagement Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::ViewManagement::AccessibilitySettings>::python_type = py::register_python_type(module, _type_name_AccessibilitySettings, &_type_spec_AccessibilitySettings, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ActivationViewSwitcher>::python_type = py::register_python_type(module, _type_name_ActivationViewSwitcher, &_type_spec_ActivationViewSwitcher, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationView>::python_type = py::register_python_type(module, _type_name_ApplicationView, &_type_spec_ApplicationView, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>::python_type = py::register_python_type(module, _type_name_ApplicationViewConsolidatedEventArgs, &_type_spec_ApplicationViewConsolidatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewScaling>::python_type = py::register_python_type(module, _type_name_ApplicationViewScaling, &_type_spec_ApplicationViewScaling, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewSwitcher>::python_type = py::register_python_type(module, _type_name_ApplicationViewSwitcher, &_type_spec_ApplicationViewSwitcher, nullptr);
            py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewTitleBar>::python_type = py::register_python_type(module, _type_name_ApplicationViewTitleBar, &_type_spec_ApplicationViewTitleBar, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ApplicationViewTransferContext>::python_type = py::register_python_type(module, _type_name_ApplicationViewTransferContext, &_type_spec_ApplicationViewTransferContext, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::InputPane>::python_type = py::register_python_type(module, _type_name_InputPane, &_type_spec_InputPane, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>::python_type = py::register_python_type(module, _type_name_InputPaneVisibilityEventArgs, &_type_spec_InputPaneVisibilityEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ProjectionManager>::python_type = py::register_python_type(module, _type_name_ProjectionManager, &_type_spec_ProjectionManager, nullptr);
            py::winrt_type<winrt::Windows::UI::ViewManagement::UISettings>::python_type = py::register_python_type(module, _type_name_UISettings, &_type_spec_UISettings, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::UISettingsAnimationsEnabledChangedEventArgs>::python_type = py::register_python_type(module, _type_name_UISettingsAnimationsEnabledChangedEventArgs, &_type_spec_UISettingsAnimationsEnabledChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::UISettingsAutoHideScrollBarsChangedEventArgs>::python_type = py::register_python_type(module, _type_name_UISettingsAutoHideScrollBarsChangedEventArgs, &_type_spec_UISettingsAutoHideScrollBarsChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::UISettingsMessageDurationChangedEventArgs>::python_type = py::register_python_type(module, _type_name_UISettingsMessageDurationChangedEventArgs, &_type_spec_UISettingsMessageDurationChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::UIViewSettings>::python_type = py::register_python_type(module, _type_name_UIViewSettings, &_type_spec_UIViewSettings, bases.get());
            py::winrt_type<winrt::Windows::UI::ViewManagement::ViewModePreferences>::python_type = py::register_python_type(module, _type_name_ViewModePreferences, &_type_spec_ViewModePreferences, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.ViewManagement");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_ViewManagement",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::ViewManagement

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_ViewManagement (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::ViewManagement::module_def);
}
