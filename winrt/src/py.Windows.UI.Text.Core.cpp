// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.Text.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextCompositionSegment>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextEditContext>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextLayoutBounds>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextLayoutRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextSelectionRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextServicesConstants>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextServicesManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextTextRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextTextRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextRange>::python_type;

PyObject* py::converter<winrt::Windows::UI::Text::Core::CoreTextRange>::convert(winrt::Windows::UI::Text::Core::CoreTextRange instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::UI::Text::Core::CoreTextRange>());
}
winrt::Windows::UI::Text::Core::CoreTextRange py::converter<winrt::Windows::UI::Text::Core::CoreTextRange>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::UI::Text::Core::CoreTextRange>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::UI::Text::Core::CoreTextRange>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::UI::Text::Core::CoreTextRange return_value{};

    PyObject* py_StartCaretPosition = PyDict_GetItemString(obj, "start_caret_position");
    if (!py_StartCaretPosition) { throw winrt::hresult_invalid_argument(); }
    return_value.StartCaretPosition = converter<int32_t>::convert_to(py_StartCaretPosition);

    PyObject* py_EndCaretPosition = PyDict_GetItemString(obj, "end_caret_position");
    if (!py_EndCaretPosition) { throw winrt::hresult_invalid_argument(); }
    return_value.EndCaretPosition = converter<int32_t>::convert_to(py_EndCaretPosition);

    return return_value;
}

namespace py::cpp::Windows::UI::Text::Core
{
    // ----- CoreTextCompositionCompletedEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextCompositionCompletedEventArgs = "CoreTextCompositionCompletedEventArgs";

    static PyObject* _new_CoreTextCompositionCompletedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextCompositionCompletedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextCompositionCompletedEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextCompositionCompletedEventArgs_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextCompositionCompletedEventArgs_get_CompositionSegments(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CompositionSegments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextCompositionCompletedEventArgs_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextCompositionCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextCompositionCompletedEventArgs[] = {
        { "get_deferral", (PyCFunction)CoreTextCompositionCompletedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextCompositionCompletedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextCompositionCompletedEventArgs[] = {
        { const_cast<char*>("composition_segments"), (getter)CoreTextCompositionCompletedEventArgs_get_CompositionSegments, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_canceled"), (getter)CoreTextCompositionCompletedEventArgs_get_IsCanceled, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextCompositionCompletedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextCompositionCompletedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextCompositionCompletedEventArgs },
        { Py_tp_methods, _methods_CoreTextCompositionCompletedEventArgs },
        { Py_tp_getset, _getset_CoreTextCompositionCompletedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextCompositionCompletedEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextCompositionCompletedEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextCompositionCompletedEventArgs
    };

    // ----- CoreTextCompositionSegment class --------------------
    constexpr const char* const _type_name_CoreTextCompositionSegment = "CoreTextCompositionSegment";

    static PyObject* _new_CoreTextCompositionSegment(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextCompositionSegment);
        return nullptr;
    }

    static void _dealloc_CoreTextCompositionSegment(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionSegment* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextCompositionSegment_get_PreconversionString(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreconversionString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextCompositionSegment_get_Range(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Range());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextCompositionSegment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextCompositionSegment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextCompositionSegment[] = {
        { "_from", (PyCFunction)_from_CoreTextCompositionSegment, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextCompositionSegment[] = {
        { const_cast<char*>("preconversion_string"), (getter)CoreTextCompositionSegment_get_PreconversionString, nullptr, nullptr, nullptr },
        { const_cast<char*>("range"), (getter)CoreTextCompositionSegment_get_Range, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextCompositionSegment[] = 
    {
        { Py_tp_new, _new_CoreTextCompositionSegment },
        { Py_tp_dealloc, _dealloc_CoreTextCompositionSegment },
        { Py_tp_methods, _methods_CoreTextCompositionSegment },
        { Py_tp_getset, _getset_CoreTextCompositionSegment },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextCompositionSegment =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextCompositionSegment",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionSegment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextCompositionSegment
    };

    // ----- CoreTextCompositionStartedEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextCompositionStartedEventArgs = "CoreTextCompositionStartedEventArgs";

    static PyObject* _new_CoreTextCompositionStartedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextCompositionStartedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextCompositionStartedEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextCompositionStartedEventArgs_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextCompositionStartedEventArgs_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextCompositionStartedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextCompositionStartedEventArgs[] = {
        { "get_deferral", (PyCFunction)CoreTextCompositionStartedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextCompositionStartedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextCompositionStartedEventArgs[] = {
        { const_cast<char*>("is_canceled"), (getter)CoreTextCompositionStartedEventArgs_get_IsCanceled, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextCompositionStartedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextCompositionStartedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextCompositionStartedEventArgs },
        { Py_tp_methods, _methods_CoreTextCompositionStartedEventArgs },
        { Py_tp_getset, _getset_CoreTextCompositionStartedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextCompositionStartedEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextCompositionStartedEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextCompositionStartedEventArgs
    };

    // ----- CoreTextEditContext class --------------------
    constexpr const char* const _type_name_CoreTextEditContext = "CoreTextEditContext";

    static PyObject* _new_CoreTextEditContext(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextEditContext);
        return nullptr;
    }

    static void _dealloc_CoreTextEditContext(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextEditContext_NotifyFocusEnter(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.NotifyFocusEnter();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_NotifyFocusLeave(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.NotifyFocusLeave();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_NotifyLayoutChanged(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.NotifyLayoutChanged();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_NotifySelectionChanged(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextRange>(args, 0);

                self->obj.NotifySelectionChanged(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_NotifyTextChanged(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextRange>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextRange>(args, 2);

                self->obj.NotifyTextChanged(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_get_Name(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextEditContext_put_Name(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextEditContext_get_IsReadOnly(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsReadOnly());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextEditContext_put_IsReadOnly(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsReadOnly(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextEditContext_get_InputScope(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputScope());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextEditContext_put_InputScope(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextInputScope>(arg);

            self->obj.InputScope(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextEditContext_get_InputPaneDisplayPolicy(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputPaneDisplayPolicy());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextEditContext_put_InputPaneDisplayPolicy(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextInputPaneDisplayPolicy>(arg);

            self->obj.InputPaneDisplayPolicy(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextEditContext_add_CompositionCompleted(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs>>(arg);

            return py::convert(self->obj.CompositionCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_CompositionCompleted(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CompositionCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_CompositionStarted(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs>>(arg);

            return py::convert(self->obj.CompositionStarted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_CompositionStarted(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CompositionStarted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_FocusRemoved(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.FocusRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_FocusRemoved(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FocusRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_FormatUpdating(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs>>(arg);

            return py::convert(self->obj.FormatUpdating(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_FormatUpdating(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FormatUpdating(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_LayoutRequested(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs>>(arg);

            return py::convert(self->obj.LayoutRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_LayoutRequested(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LayoutRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_SelectionRequested(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs>>(arg);

            return py::convert(self->obj.SelectionRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_SelectionRequested(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SelectionRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_SelectionUpdating(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs>>(arg);

            return py::convert(self->obj.SelectionUpdating(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_SelectionUpdating(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SelectionUpdating(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_TextRequested(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextTextRequestedEventArgs>>(arg);

            return py::convert(self->obj.TextRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_TextRequested(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TextRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_TextUpdating(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs>>(arg);

            return py::convert(self->obj.TextUpdating(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_TextUpdating(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TextUpdating(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_add_NotifyFocusLeaveCompleted(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextEditContext, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.NotifyFocusLeaveCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextEditContext_remove_NotifyFocusLeaveCompleted(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.NotifyFocusLeaveCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextEditContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextEditContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextEditContext[] = {
        { "notify_focus_enter", (PyCFunction)CoreTextEditContext_NotifyFocusEnter, METH_VARARGS, nullptr },
        { "notify_focus_leave", (PyCFunction)CoreTextEditContext_NotifyFocusLeave, METH_VARARGS, nullptr },
        { "notify_layout_changed", (PyCFunction)CoreTextEditContext_NotifyLayoutChanged, METH_VARARGS, nullptr },
        { "notify_selection_changed", (PyCFunction)CoreTextEditContext_NotifySelectionChanged, METH_VARARGS, nullptr },
        { "notify_text_changed", (PyCFunction)CoreTextEditContext_NotifyTextChanged, METH_VARARGS, nullptr },
        { "add_composition_completed", (PyCFunction)CoreTextEditContext_add_CompositionCompleted, METH_O, nullptr },
        { "remove_composition_completed", (PyCFunction)CoreTextEditContext_remove_CompositionCompleted, METH_O, nullptr },
        { "add_composition_started", (PyCFunction)CoreTextEditContext_add_CompositionStarted, METH_O, nullptr },
        { "remove_composition_started", (PyCFunction)CoreTextEditContext_remove_CompositionStarted, METH_O, nullptr },
        { "add_focus_removed", (PyCFunction)CoreTextEditContext_add_FocusRemoved, METH_O, nullptr },
        { "remove_focus_removed", (PyCFunction)CoreTextEditContext_remove_FocusRemoved, METH_O, nullptr },
        { "add_format_updating", (PyCFunction)CoreTextEditContext_add_FormatUpdating, METH_O, nullptr },
        { "remove_format_updating", (PyCFunction)CoreTextEditContext_remove_FormatUpdating, METH_O, nullptr },
        { "add_layout_requested", (PyCFunction)CoreTextEditContext_add_LayoutRequested, METH_O, nullptr },
        { "remove_layout_requested", (PyCFunction)CoreTextEditContext_remove_LayoutRequested, METH_O, nullptr },
        { "add_selection_requested", (PyCFunction)CoreTextEditContext_add_SelectionRequested, METH_O, nullptr },
        { "remove_selection_requested", (PyCFunction)CoreTextEditContext_remove_SelectionRequested, METH_O, nullptr },
        { "add_selection_updating", (PyCFunction)CoreTextEditContext_add_SelectionUpdating, METH_O, nullptr },
        { "remove_selection_updating", (PyCFunction)CoreTextEditContext_remove_SelectionUpdating, METH_O, nullptr },
        { "add_text_requested", (PyCFunction)CoreTextEditContext_add_TextRequested, METH_O, nullptr },
        { "remove_text_requested", (PyCFunction)CoreTextEditContext_remove_TextRequested, METH_O, nullptr },
        { "add_text_updating", (PyCFunction)CoreTextEditContext_add_TextUpdating, METH_O, nullptr },
        { "remove_text_updating", (PyCFunction)CoreTextEditContext_remove_TextUpdating, METH_O, nullptr },
        { "add_notify_focus_leave_completed", (PyCFunction)CoreTextEditContext_add_NotifyFocusLeaveCompleted, METH_O, nullptr },
        { "remove_notify_focus_leave_completed", (PyCFunction)CoreTextEditContext_remove_NotifyFocusLeaveCompleted, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreTextEditContext, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextEditContext[] = {
        { const_cast<char*>("name"), (getter)CoreTextEditContext_get_Name, (setter)CoreTextEditContext_put_Name, nullptr, nullptr },
        { const_cast<char*>("is_read_only"), (getter)CoreTextEditContext_get_IsReadOnly, (setter)CoreTextEditContext_put_IsReadOnly, nullptr, nullptr },
        { const_cast<char*>("input_scope"), (getter)CoreTextEditContext_get_InputScope, (setter)CoreTextEditContext_put_InputScope, nullptr, nullptr },
        { const_cast<char*>("input_pane_display_policy"), (getter)CoreTextEditContext_get_InputPaneDisplayPolicy, (setter)CoreTextEditContext_put_InputPaneDisplayPolicy, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextEditContext[] = 
    {
        { Py_tp_new, _new_CoreTextEditContext },
        { Py_tp_dealloc, _dealloc_CoreTextEditContext },
        { Py_tp_methods, _methods_CoreTextEditContext },
        { Py_tp_getset, _getset_CoreTextEditContext },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextEditContext =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextEditContext",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextEditContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextEditContext
    };

    // ----- CoreTextFormatUpdatingEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextFormatUpdatingEventArgs = "CoreTextFormatUpdatingEventArgs";

    static PyObject* _new_CoreTextFormatUpdatingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextFormatUpdatingEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextFormatUpdatingEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_Result(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Result());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextFormatUpdatingEventArgs_put_Result(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextFormatUpdatingResult>(arg);

            self->obj.Result(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_BackgroundColor(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_Range(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Range());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_Reason(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_TextColor(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_UnderlineColor(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UnderlineColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextFormatUpdatingEventArgs_get_UnderlineType(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UnderlineType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextFormatUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextFormatUpdatingEventArgs[] = {
        { "get_deferral", (PyCFunction)CoreTextFormatUpdatingEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextFormatUpdatingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextFormatUpdatingEventArgs[] = {
        { const_cast<char*>("result"), (getter)CoreTextFormatUpdatingEventArgs_get_Result, (setter)CoreTextFormatUpdatingEventArgs_put_Result, nullptr, nullptr },
        { const_cast<char*>("background_color"), (getter)CoreTextFormatUpdatingEventArgs_get_BackgroundColor, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_canceled"), (getter)CoreTextFormatUpdatingEventArgs_get_IsCanceled, nullptr, nullptr, nullptr },
        { const_cast<char*>("range"), (getter)CoreTextFormatUpdatingEventArgs_get_Range, nullptr, nullptr, nullptr },
        { const_cast<char*>("reason"), (getter)CoreTextFormatUpdatingEventArgs_get_Reason, nullptr, nullptr, nullptr },
        { const_cast<char*>("text_color"), (getter)CoreTextFormatUpdatingEventArgs_get_TextColor, nullptr, nullptr, nullptr },
        { const_cast<char*>("underline_color"), (getter)CoreTextFormatUpdatingEventArgs_get_UnderlineColor, nullptr, nullptr, nullptr },
        { const_cast<char*>("underline_type"), (getter)CoreTextFormatUpdatingEventArgs_get_UnderlineType, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextFormatUpdatingEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextFormatUpdatingEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextFormatUpdatingEventArgs },
        { Py_tp_methods, _methods_CoreTextFormatUpdatingEventArgs },
        { Py_tp_getset, _getset_CoreTextFormatUpdatingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextFormatUpdatingEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextFormatUpdatingEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextFormatUpdatingEventArgs
    };

    // ----- CoreTextLayoutBounds class --------------------
    constexpr const char* const _type_name_CoreTextLayoutBounds = "CoreTextLayoutBounds";

    static PyObject* _new_CoreTextLayoutBounds(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextLayoutBounds);
        return nullptr;
    }

    static void _dealloc_CoreTextLayoutBounds(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutBounds* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextLayoutBounds_get_TextBounds(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutBounds* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextBounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextLayoutBounds_put_TextBounds(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutBounds* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(arg);

            self->obj.TextBounds(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextLayoutBounds_get_ControlBounds(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutBounds* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ControlBounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextLayoutBounds_put_ControlBounds(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutBounds* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(arg);

            self->obj.ControlBounds(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CoreTextLayoutBounds(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextLayoutBounds>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextLayoutBounds[] = {
        { "_from", (PyCFunction)_from_CoreTextLayoutBounds, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextLayoutBounds[] = {
        { const_cast<char*>("text_bounds"), (getter)CoreTextLayoutBounds_get_TextBounds, (setter)CoreTextLayoutBounds_put_TextBounds, nullptr, nullptr },
        { const_cast<char*>("control_bounds"), (getter)CoreTextLayoutBounds_get_ControlBounds, (setter)CoreTextLayoutBounds_put_ControlBounds, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextLayoutBounds[] = 
    {
        { Py_tp_new, _new_CoreTextLayoutBounds },
        { Py_tp_dealloc, _dealloc_CoreTextLayoutBounds },
        { Py_tp_methods, _methods_CoreTextLayoutBounds },
        { Py_tp_getset, _getset_CoreTextLayoutBounds },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextLayoutBounds =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextLayoutBounds",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutBounds),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextLayoutBounds
    };

    // ----- CoreTextLayoutRequest class --------------------
    constexpr const char* const _type_name_CoreTextLayoutRequest = "CoreTextLayoutRequest";

    static PyObject* _new_CoreTextLayoutRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextLayoutRequest);
        return nullptr;
    }

    static void _dealloc_CoreTextLayoutRequest(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextLayoutRequest_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextLayoutRequest_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextLayoutRequest_get_LayoutBounds(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LayoutBounds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextLayoutRequest_get_Range(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Range());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextLayoutRequest_get_LayoutBoundsVisualPixels(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LayoutBoundsVisualPixels());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextLayoutRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextLayoutRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextLayoutRequest[] = {
        { "get_deferral", (PyCFunction)CoreTextLayoutRequest_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextLayoutRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextLayoutRequest[] = {
        { const_cast<char*>("is_canceled"), (getter)CoreTextLayoutRequest_get_IsCanceled, nullptr, nullptr, nullptr },
        { const_cast<char*>("layout_bounds"), (getter)CoreTextLayoutRequest_get_LayoutBounds, nullptr, nullptr, nullptr },
        { const_cast<char*>("range"), (getter)CoreTextLayoutRequest_get_Range, nullptr, nullptr, nullptr },
        { const_cast<char*>("layout_bounds_visual_pixels"), (getter)CoreTextLayoutRequest_get_LayoutBoundsVisualPixels, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextLayoutRequest[] = 
    {
        { Py_tp_new, _new_CoreTextLayoutRequest },
        { Py_tp_dealloc, _dealloc_CoreTextLayoutRequest },
        { Py_tp_methods, _methods_CoreTextLayoutRequest },
        { Py_tp_getset, _getset_CoreTextLayoutRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextLayoutRequest =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextLayoutRequest",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextLayoutRequest
    };

    // ----- CoreTextLayoutRequestedEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextLayoutRequestedEventArgs = "CoreTextLayoutRequestedEventArgs";

    static PyObject* _new_CoreTextLayoutRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextLayoutRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextLayoutRequestedEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextLayoutRequestedEventArgs_get_Request(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextLayoutRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextLayoutRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreTextLayoutRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextLayoutRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)CoreTextLayoutRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextLayoutRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextLayoutRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextLayoutRequestedEventArgs },
        { Py_tp_methods, _methods_CoreTextLayoutRequestedEventArgs },
        { Py_tp_getset, _getset_CoreTextLayoutRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextLayoutRequestedEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextLayoutRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextLayoutRequestedEventArgs
    };

    // ----- CoreTextSelectionRequest class --------------------
    constexpr const char* const _type_name_CoreTextSelectionRequest = "CoreTextSelectionRequest";

    static PyObject* _new_CoreTextSelectionRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextSelectionRequest);
        return nullptr;
    }

    static void _dealloc_CoreTextSelectionRequest(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextSelectionRequest_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextSelectionRequest_get_Selection(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Selection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextSelectionRequest_put_Selection(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequest* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextRange>(arg);

            self->obj.Selection(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextSelectionRequest_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextSelectionRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextSelectionRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextSelectionRequest[] = {
        { "get_deferral", (PyCFunction)CoreTextSelectionRequest_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextSelectionRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextSelectionRequest[] = {
        { const_cast<char*>("selection"), (getter)CoreTextSelectionRequest_get_Selection, (setter)CoreTextSelectionRequest_put_Selection, nullptr, nullptr },
        { const_cast<char*>("is_canceled"), (getter)CoreTextSelectionRequest_get_IsCanceled, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextSelectionRequest[] = 
    {
        { Py_tp_new, _new_CoreTextSelectionRequest },
        { Py_tp_dealloc, _dealloc_CoreTextSelectionRequest },
        { Py_tp_methods, _methods_CoreTextSelectionRequest },
        { Py_tp_getset, _getset_CoreTextSelectionRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextSelectionRequest =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextSelectionRequest",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextSelectionRequest
    };

    // ----- CoreTextSelectionRequestedEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextSelectionRequestedEventArgs = "CoreTextSelectionRequestedEventArgs";

    static PyObject* _new_CoreTextSelectionRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextSelectionRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextSelectionRequestedEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextSelectionRequestedEventArgs_get_Request(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextSelectionRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextSelectionRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreTextSelectionRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextSelectionRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)CoreTextSelectionRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextSelectionRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextSelectionRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextSelectionRequestedEventArgs },
        { Py_tp_methods, _methods_CoreTextSelectionRequestedEventArgs },
        { Py_tp_getset, _getset_CoreTextSelectionRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextSelectionRequestedEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextSelectionRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextSelectionRequestedEventArgs
    };

    // ----- CoreTextSelectionUpdatingEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextSelectionUpdatingEventArgs = "CoreTextSelectionUpdatingEventArgs";

    static PyObject* _new_CoreTextSelectionUpdatingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextSelectionUpdatingEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextSelectionUpdatingEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextSelectionUpdatingEventArgs_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextSelectionUpdatingEventArgs_get_Result(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Result());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextSelectionUpdatingEventArgs_put_Result(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextSelectionUpdatingResult>(arg);

            self->obj.Result(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextSelectionUpdatingEventArgs_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextSelectionUpdatingEventArgs_get_Selection(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Selection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextSelectionUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextSelectionUpdatingEventArgs[] = {
        { "get_deferral", (PyCFunction)CoreTextSelectionUpdatingEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextSelectionUpdatingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextSelectionUpdatingEventArgs[] = {
        { const_cast<char*>("result"), (getter)CoreTextSelectionUpdatingEventArgs_get_Result, (setter)CoreTextSelectionUpdatingEventArgs_put_Result, nullptr, nullptr },
        { const_cast<char*>("is_canceled"), (getter)CoreTextSelectionUpdatingEventArgs_get_IsCanceled, nullptr, nullptr, nullptr },
        { const_cast<char*>("selection"), (getter)CoreTextSelectionUpdatingEventArgs_get_Selection, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextSelectionUpdatingEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextSelectionUpdatingEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextSelectionUpdatingEventArgs },
        { Py_tp_methods, _methods_CoreTextSelectionUpdatingEventArgs },
        { Py_tp_getset, _getset_CoreTextSelectionUpdatingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextSelectionUpdatingEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextSelectionUpdatingEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextSelectionUpdatingEventArgs
    };

    // ----- CoreTextServicesConstants class --------------------
    constexpr const char* const _type_name_CoreTextServicesConstants = "CoreTextServicesConstants";

    static PyObject* _new_CoreTextServicesConstants(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextServicesConstants);
        return nullptr;
    }

    static PyObject* CoreTextServicesConstants_get_HiddenCharacter(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::Text::Core::CoreTextServicesConstants::HiddenCharacter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextServicesConstants[] = {
        { "get_hidden_character", (PyCFunction)CoreTextServicesConstants_get_HiddenCharacter, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextServicesConstants[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextServicesConstants[] = 
    {
        { Py_tp_new, _new_CoreTextServicesConstants },
        { Py_tp_methods, _methods_CoreTextServicesConstants },
        { Py_tp_getset, _getset_CoreTextServicesConstants },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextServicesConstants =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextServicesConstants",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextServicesConstants
    };

    // ----- CoreTextServicesManager class --------------------
    constexpr const char* const _type_name_CoreTextServicesManager = "CoreTextServicesManager";

    static PyObject* _new_CoreTextServicesManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextServicesManager);
        return nullptr;
    }

    static void _dealloc_CoreTextServicesManager(py::wrapper::Windows::UI::Text::Core::CoreTextServicesManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextServicesManager_CreateEditContext(py::wrapper::Windows::UI::Text::Core::CoreTextServicesManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateEditContext());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextServicesManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::Text::Core::CoreTextServicesManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextServicesManager_get_InputLanguage(py::wrapper::Windows::UI::Text::Core::CoreTextServicesManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextServicesManager_add_InputLanguageChanged(py::wrapper::Windows::UI::Text::Core::CoreTextServicesManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Text::Core::CoreTextServicesManager, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.InputLanguageChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextServicesManager_remove_InputLanguageChanged(py::wrapper::Windows::UI::Text::Core::CoreTextServicesManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.InputLanguageChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextServicesManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextServicesManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextServicesManager[] = {
        { "create_edit_context", (PyCFunction)CoreTextServicesManager_CreateEditContext, METH_VARARGS, nullptr },
        { "get_for_current_view", (PyCFunction)CoreTextServicesManager_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "add_input_language_changed", (PyCFunction)CoreTextServicesManager_add_InputLanguageChanged, METH_O, nullptr },
        { "remove_input_language_changed", (PyCFunction)CoreTextServicesManager_remove_InputLanguageChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreTextServicesManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextServicesManager[] = {
        { const_cast<char*>("input_language"), (getter)CoreTextServicesManager_get_InputLanguage, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextServicesManager[] = 
    {
        { Py_tp_new, _new_CoreTextServicesManager },
        { Py_tp_dealloc, _dealloc_CoreTextServicesManager },
        { Py_tp_methods, _methods_CoreTextServicesManager },
        { Py_tp_getset, _getset_CoreTextServicesManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextServicesManager =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextServicesManager",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextServicesManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextServicesManager
    };

    // ----- CoreTextTextRequest class --------------------
    constexpr const char* const _type_name_CoreTextTextRequest = "CoreTextTextRequest";

    static PyObject* _new_CoreTextTextRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextTextRequest);
        return nullptr;
    }

    static void _dealloc_CoreTextTextRequest(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextTextRequest_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextTextRequest_get_Text(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextTextRequest_put_Text(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequest* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Text(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextTextRequest_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextTextRequest_get_Range(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Range());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextTextRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextTextRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextTextRequest[] = {
        { "get_deferral", (PyCFunction)CoreTextTextRequest_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextTextRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextTextRequest[] = {
        { const_cast<char*>("text"), (getter)CoreTextTextRequest_get_Text, (setter)CoreTextTextRequest_put_Text, nullptr, nullptr },
        { const_cast<char*>("is_canceled"), (getter)CoreTextTextRequest_get_IsCanceled, nullptr, nullptr, nullptr },
        { const_cast<char*>("range"), (getter)CoreTextTextRequest_get_Range, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextTextRequest[] = 
    {
        { Py_tp_new, _new_CoreTextTextRequest },
        { Py_tp_dealloc, _dealloc_CoreTextTextRequest },
        { Py_tp_methods, _methods_CoreTextTextRequest },
        { Py_tp_getset, _getset_CoreTextTextRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextTextRequest =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextTextRequest",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextTextRequest
    };

    // ----- CoreTextTextRequestedEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextTextRequestedEventArgs = "CoreTextTextRequestedEventArgs";

    static PyObject* _new_CoreTextTextRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextTextRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextTextRequestedEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextTextRequestedEventArgs_get_Request(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextTextRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextTextRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextTextRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_CoreTextTextRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextTextRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)CoreTextTextRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextTextRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextTextRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextTextRequestedEventArgs },
        { Py_tp_methods, _methods_CoreTextTextRequestedEventArgs },
        { Py_tp_getset, _getset_CoreTextTextRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextTextRequestedEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextTextRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextTextRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextTextRequestedEventArgs
    };

    // ----- CoreTextTextUpdatingEventArgs class --------------------
    constexpr const char* const _type_name_CoreTextTextUpdatingEventArgs = "CoreTextTextUpdatingEventArgs";

    static PyObject* _new_CoreTextTextUpdatingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreTextTextUpdatingEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreTextTextUpdatingEventArgs(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreTextTextUpdatingEventArgs_GetDeferral(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreTextTextUpdatingEventArgs_get_Result(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Result());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextTextUpdatingEventArgs_put_Result(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextTextUpdatingResult>(arg);

            self->obj.Result(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextTextUpdatingEventArgs_get_InputLanguage(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextTextUpdatingEventArgs_get_IsCanceled(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextTextUpdatingEventArgs_get_NewSelection(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NewSelection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextTextUpdatingEventArgs_get_Range(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Range());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreTextTextUpdatingEventArgs_get_Text(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreTextTextUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreTextTextUpdatingEventArgs[] = {
        { "get_deferral", (PyCFunction)CoreTextTextUpdatingEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreTextTextUpdatingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreTextTextUpdatingEventArgs[] = {
        { const_cast<char*>("result"), (getter)CoreTextTextUpdatingEventArgs_get_Result, (setter)CoreTextTextUpdatingEventArgs_put_Result, nullptr, nullptr },
        { const_cast<char*>("input_language"), (getter)CoreTextTextUpdatingEventArgs_get_InputLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_canceled"), (getter)CoreTextTextUpdatingEventArgs_get_IsCanceled, nullptr, nullptr, nullptr },
        { const_cast<char*>("new_selection"), (getter)CoreTextTextUpdatingEventArgs_get_NewSelection, nullptr, nullptr, nullptr },
        { const_cast<char*>("range"), (getter)CoreTextTextUpdatingEventArgs_get_Range, nullptr, nullptr, nullptr },
        { const_cast<char*>("text"), (getter)CoreTextTextUpdatingEventArgs_get_Text, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextTextUpdatingEventArgs[] = 
    {
        { Py_tp_new, _new_CoreTextTextUpdatingEventArgs },
        { Py_tp_dealloc, _dealloc_CoreTextTextUpdatingEventArgs },
        { Py_tp_methods, _methods_CoreTextTextUpdatingEventArgs },
        { Py_tp_getset, _getset_CoreTextTextUpdatingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextTextUpdatingEventArgs =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextTextUpdatingEventArgs",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextTextUpdatingEventArgs
    };

    // ----- CoreTextRange struct --------------------
    constexpr const char* const _type_name_CoreTextRange = "CoreTextRange";

    PyObject* _new_CoreTextRange(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::UI::Text::Core::CoreTextRange return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextRange>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        int32_t _StartCaretPosition{};
        int32_t _EndCaretPosition{};

        static const char* kwlist[] = {"start_caret_position", "end_caret_position", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "ii", const_cast<char**>(kwlist), &_StartCaretPosition, &_EndCaretPosition))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::UI::Text::Core::CoreTextRange return_value{ _StartCaretPosition, _EndCaretPosition };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_CoreTextRange(py::wrapper::Windows::UI::Text::Core::CoreTextRange* self)
    {
    }

    static PyObject* CoreTextRange_get_StartCaretPosition(py::wrapper::Windows::UI::Text::Core::CoreTextRange* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartCaretPosition);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextRange_set_StartCaretPosition(py::wrapper::Windows::UI::Text::Core::CoreTextRange* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.StartCaretPosition = py::converter<int32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreTextRange_get_EndCaretPosition(py::wrapper::Windows::UI::Text::Core::CoreTextRange* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EndCaretPosition);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreTextRange_set_EndCaretPosition(py::wrapper::Windows::UI::Text::Core::CoreTextRange* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.EndCaretPosition = py::converter<int32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_CoreTextRange[] = {
        { const_cast<char*>("start_caret_position"), (getter)CoreTextRange_get_StartCaretPosition, (setter)CoreTextRange_set_StartCaretPosition, nullptr, nullptr },
        { const_cast<char*>("end_caret_position"), (getter)CoreTextRange_get_EndCaretPosition, (setter)CoreTextRange_set_EndCaretPosition, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreTextRange[] = 
    {
        { Py_tp_new, _new_CoreTextRange },
        { Py_tp_dealloc, _dealloc_CoreTextRange },
        { Py_tp_getset, _getset_CoreTextRange },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreTextRange =
    {
        "_winrt_Windows_UI_Text_Core.CoreTextRange",
        sizeof(py::wrapper::Windows::UI::Text::Core::CoreTextRange),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreTextRange
    };

    // ----- Windows.UI.Text.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextCompositionCompletedEventArgs, &_type_spec_CoreTextCompositionCompletedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextCompositionSegment>::python_type = py::register_python_type(module, _type_name_CoreTextCompositionSegment, &_type_spec_CoreTextCompositionSegment, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextCompositionStartedEventArgs, &_type_spec_CoreTextCompositionStartedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextEditContext>::python_type = py::register_python_type(module, _type_name_CoreTextEditContext, &_type_spec_CoreTextEditContext, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextFormatUpdatingEventArgs, &_type_spec_CoreTextFormatUpdatingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextLayoutBounds>::python_type = py::register_python_type(module, _type_name_CoreTextLayoutBounds, &_type_spec_CoreTextLayoutBounds, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextLayoutRequest>::python_type = py::register_python_type(module, _type_name_CoreTextLayoutRequest, &_type_spec_CoreTextLayoutRequest, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextLayoutRequestedEventArgs, &_type_spec_CoreTextLayoutRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextSelectionRequest>::python_type = py::register_python_type(module, _type_name_CoreTextSelectionRequest, &_type_spec_CoreTextSelectionRequest, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextSelectionRequestedEventArgs, &_type_spec_CoreTextSelectionRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextSelectionUpdatingEventArgs, &_type_spec_CoreTextSelectionUpdatingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextServicesConstants>::python_type = py::register_python_type(module, _type_name_CoreTextServicesConstants, &_type_spec_CoreTextServicesConstants, nullptr);
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextServicesManager>::python_type = py::register_python_type(module, _type_name_CoreTextServicesManager, &_type_spec_CoreTextServicesManager, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextTextRequest>::python_type = py::register_python_type(module, _type_name_CoreTextTextRequest, &_type_spec_CoreTextTextRequest, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextTextRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextTextRequestedEventArgs, &_type_spec_CoreTextTextRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs>::python_type = py::register_python_type(module, _type_name_CoreTextTextUpdatingEventArgs, &_type_spec_CoreTextTextUpdatingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::Text::Core::CoreTextRange>::python_type = py::register_python_type(module, _type_name_CoreTextRange, &_type_spec_CoreTextRange, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.Text.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_Text_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::Text::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_Text_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::Text::Core::module_def);
}
