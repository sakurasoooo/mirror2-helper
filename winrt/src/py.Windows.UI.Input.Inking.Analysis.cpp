// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.Input.Inking.Analysis.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisLine>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNode>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory>::python_type;

namespace py::cpp::Windows::UI::Input::Inking::Analysis
{
    // ----- InkAnalysisInkBullet class --------------------
    constexpr const char* const _type_name_InkAnalysisInkBullet = "InkAnalysisInkBullet";

    static PyObject* _new_InkAnalysisInkBullet(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisInkBullet);
        return nullptr;
    }

    static void _dealloc_InkAnalysisInkBullet(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisInkBullet_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkBullet_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisInkBullet(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisInkBullet[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisInkBullet_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisInkBullet, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisInkBullet[] = {
        { const_cast<char*>("recognized_text"), (getter)InkAnalysisInkBullet_get_RecognizedText, nullptr, nullptr, nullptr },
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisInkBullet_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisInkBullet_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisInkBullet_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisInkBullet_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisInkBullet_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisInkBullet_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisInkBullet[] = 
    {
        { Py_tp_new, _new_InkAnalysisInkBullet },
        { Py_tp_dealloc, _dealloc_InkAnalysisInkBullet },
        { Py_tp_methods, _methods_InkAnalysisInkBullet },
        { Py_tp_getset, _getset_InkAnalysisInkBullet },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisInkBullet =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisInkBullet",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisInkBullet
    };

    // ----- InkAnalysisInkDrawing class --------------------
    constexpr const char* const _type_name_InkAnalysisInkDrawing = "InkAnalysisInkDrawing";

    static PyObject* _new_InkAnalysisInkDrawing(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisInkDrawing);
        return nullptr;
    }

    static void _dealloc_InkAnalysisInkDrawing(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisInkDrawing_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Center(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Center());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_DrawingKind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DrawingKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Points(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Points());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkDrawing_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisInkDrawing(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisInkDrawing[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisInkDrawing_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisInkDrawing, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisInkDrawing[] = {
        { const_cast<char*>("center"), (getter)InkAnalysisInkDrawing_get_Center, nullptr, nullptr, nullptr },
        { const_cast<char*>("drawing_kind"), (getter)InkAnalysisInkDrawing_get_DrawingKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("points"), (getter)InkAnalysisInkDrawing_get_Points, nullptr, nullptr, nullptr },
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisInkDrawing_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisInkDrawing_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisInkDrawing_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisInkDrawing_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisInkDrawing_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisInkDrawing_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisInkDrawing[] = 
    {
        { Py_tp_new, _new_InkAnalysisInkDrawing },
        { Py_tp_dealloc, _dealloc_InkAnalysisInkDrawing },
        { Py_tp_methods, _methods_InkAnalysisInkDrawing },
        { Py_tp_getset, _getset_InkAnalysisInkDrawing },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisInkDrawing =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisInkDrawing",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisInkDrawing
    };

    // ----- InkAnalysisInkWord class --------------------
    constexpr const char* const _type_name_InkAnalysisInkWord = "InkAnalysisInkWord";

    static PyObject* _new_InkAnalysisInkWord(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisInkWord);
        return nullptr;
    }

    static void _dealloc_InkAnalysisInkWord(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisInkWord_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_TextAlternates(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextAlternates());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisInkWord_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisInkWord(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisInkWord[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisInkWord_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisInkWord, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisInkWord[] = {
        { const_cast<char*>("recognized_text"), (getter)InkAnalysisInkWord_get_RecognizedText, nullptr, nullptr, nullptr },
        { const_cast<char*>("text_alternates"), (getter)InkAnalysisInkWord_get_TextAlternates, nullptr, nullptr, nullptr },
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisInkWord_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisInkWord_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisInkWord_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisInkWord_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisInkWord_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisInkWord_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisInkWord[] = 
    {
        { Py_tp_new, _new_InkAnalysisInkWord },
        { Py_tp_dealloc, _dealloc_InkAnalysisInkWord },
        { Py_tp_methods, _methods_InkAnalysisInkWord },
        { Py_tp_getset, _getset_InkAnalysisInkWord },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisInkWord =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisInkWord",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisInkWord
    };

    // ----- InkAnalysisLine class --------------------
    constexpr const char* const _type_name_InkAnalysisLine = "InkAnalysisLine";

    static PyObject* _new_InkAnalysisLine(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisLine);
        return nullptr;
    }

    static void _dealloc_InkAnalysisLine(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisLine_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_IndentLevel(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IndentLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisLine_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisLine(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisLine>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisLine[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisLine_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisLine, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisLine[] = {
        { const_cast<char*>("indent_level"), (getter)InkAnalysisLine_get_IndentLevel, nullptr, nullptr, nullptr },
        { const_cast<char*>("recognized_text"), (getter)InkAnalysisLine_get_RecognizedText, nullptr, nullptr, nullptr },
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisLine_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisLine_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisLine_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisLine_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisLine_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisLine_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisLine[] = 
    {
        { Py_tp_new, _new_InkAnalysisLine },
        { Py_tp_dealloc, _dealloc_InkAnalysisLine },
        { Py_tp_methods, _methods_InkAnalysisLine },
        { Py_tp_getset, _getset_InkAnalysisLine },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisLine =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisLine",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisLine),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisLine
    };

    // ----- InkAnalysisListItem class --------------------
    constexpr const char* const _type_name_InkAnalysisListItem = "InkAnalysisListItem";

    static PyObject* _new_InkAnalysisListItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisListItem);
        return nullptr;
    }

    static void _dealloc_InkAnalysisListItem(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisListItem_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisListItem_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisListItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisListItem[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisListItem_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisListItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisListItem[] = {
        { const_cast<char*>("recognized_text"), (getter)InkAnalysisListItem_get_RecognizedText, nullptr, nullptr, nullptr },
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisListItem_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisListItem_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisListItem_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisListItem_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisListItem_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisListItem_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisListItem[] = 
    {
        { Py_tp_new, _new_InkAnalysisListItem },
        { Py_tp_dealloc, _dealloc_InkAnalysisListItem },
        { Py_tp_methods, _methods_InkAnalysisListItem },
        { Py_tp_getset, _getset_InkAnalysisListItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisListItem =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisListItem",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisListItem
    };

    // ----- InkAnalysisNode class --------------------
    constexpr const char* const _type_name_InkAnalysisNode = "InkAnalysisNode";

    static PyObject* _new_InkAnalysisNode(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisNode);
        return nullptr;
    }

    static void _dealloc_InkAnalysisNode(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisNode_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisNode_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisNode[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisNode_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisNode, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisNode[] = {
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisNode_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisNode_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisNode_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisNode_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisNode_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisNode_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisNode[] = 
    {
        { Py_tp_new, _new_InkAnalysisNode },
        { Py_tp_dealloc, _dealloc_InkAnalysisNode },
        { Py_tp_methods, _methods_InkAnalysisNode },
        { Py_tp_getset, _getset_InkAnalysisNode },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisNode =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisNode",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisNode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisNode
    };

    // ----- InkAnalysisParagraph class --------------------
    constexpr const char* const _type_name_InkAnalysisParagraph = "InkAnalysisParagraph";

    static PyObject* _new_InkAnalysisParagraph(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisParagraph);
        return nullptr;
    }

    static void _dealloc_InkAnalysisParagraph(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisParagraph_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisParagraph_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisParagraph(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisParagraph[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisParagraph_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisParagraph, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisParagraph[] = {
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisParagraph_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisParagraph_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisParagraph_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisParagraph_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisParagraph_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisParagraph_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("recognized_text"), (getter)InkAnalysisParagraph_get_RecognizedText, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisParagraph[] = 
    {
        { Py_tp_new, _new_InkAnalysisParagraph },
        { Py_tp_dealloc, _dealloc_InkAnalysisParagraph },
        { Py_tp_methods, _methods_InkAnalysisParagraph },
        { Py_tp_getset, _getset_InkAnalysisParagraph },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisParagraph =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisParagraph",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisParagraph
    };

    // ----- InkAnalysisResult class --------------------
    constexpr const char* const _type_name_InkAnalysisResult = "InkAnalysisResult";

    static PyObject* _new_InkAnalysisResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisResult);
        return nullptr;
    }

    static void _dealloc_InkAnalysisResult(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisResult_get_Status(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisResult[] = {
        { "_from", (PyCFunction)_from_InkAnalysisResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisResult[] = {
        { const_cast<char*>("status"), (getter)InkAnalysisResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisResult[] = 
    {
        { Py_tp_new, _new_InkAnalysisResult },
        { Py_tp_dealloc, _dealloc_InkAnalysisResult },
        { Py_tp_methods, _methods_InkAnalysisResult },
        { Py_tp_getset, _getset_InkAnalysisResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisResult =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisResult",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisResult
    };

    // ----- InkAnalysisRoot class --------------------
    constexpr const char* const _type_name_InkAnalysisRoot = "InkAnalysisRoot";

    static PyObject* _new_InkAnalysisRoot(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisRoot);
        return nullptr;
    }

    static void _dealloc_InkAnalysisRoot(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisRoot_FindNodes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNodeKind>(args, 0);

                return py::convert(self->obj.FindNodes(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisRoot_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisRoot(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisRoot[] = {
        { "find_nodes", (PyCFunction)InkAnalysisRoot_FindNodes, METH_VARARGS, nullptr },
        { "get_stroke_ids", (PyCFunction)InkAnalysisRoot_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisRoot, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisRoot[] = {
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisRoot_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisRoot_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisRoot_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisRoot_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisRoot_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisRoot_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("recognized_text"), (getter)InkAnalysisRoot_get_RecognizedText, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisRoot[] = 
    {
        { Py_tp_new, _new_InkAnalysisRoot },
        { Py_tp_dealloc, _dealloc_InkAnalysisRoot },
        { Py_tp_methods, _methods_InkAnalysisRoot },
        { Py_tp_getset, _getset_InkAnalysisRoot },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisRoot =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisRoot",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisRoot
    };

    // ----- InkAnalysisWritingRegion class --------------------
    constexpr const char* const _type_name_InkAnalysisWritingRegion = "InkAnalysisWritingRegion";

    static PyObject* _new_InkAnalysisWritingRegion(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InkAnalysisWritingRegion);
        return nullptr;
    }

    static void _dealloc_InkAnalysisWritingRegion(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalysisWritingRegion_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalysisWritingRegion_get_RecognizedText(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RecognizedText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalysisWritingRegion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalysisWritingRegion[] = {
        { "get_stroke_ids", (PyCFunction)InkAnalysisWritingRegion_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalysisWritingRegion, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalysisWritingRegion[] = {
        { const_cast<char*>("bounding_rect"), (getter)InkAnalysisWritingRegion_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)InkAnalysisWritingRegion_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)InkAnalysisWritingRegion_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)InkAnalysisWritingRegion_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)InkAnalysisWritingRegion_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)InkAnalysisWritingRegion_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("recognized_text"), (getter)InkAnalysisWritingRegion_get_RecognizedText, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalysisWritingRegion[] = 
    {
        { Py_tp_new, _new_InkAnalysisWritingRegion },
        { Py_tp_dealloc, _dealloc_InkAnalysisWritingRegion },
        { Py_tp_methods, _methods_InkAnalysisWritingRegion },
        { Py_tp_getset, _getset_InkAnalysisWritingRegion },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalysisWritingRegion =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalysisWritingRegion",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalysisWritingRegion
    };

    // ----- InkAnalyzer class --------------------
    constexpr const char* const _type_name_InkAnalyzer = "InkAnalyzer";

    static PyObject* _new_InkAnalyzer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_InkAnalyzer(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InkAnalyzer_AddDataForStroke(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkStroke>(args, 0);

                self->obj.AddDataForStroke(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_AddDataForStrokes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::UI::Input::Inking::InkStroke>>(args, 0);

                self->obj.AddDataForStrokes(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_AnalyzeAsync(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AnalyzeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_ClearDataForAllStrokes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ClearDataForAllStrokes();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_RemoveDataForStroke(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.RemoveDataForStroke(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_RemoveDataForStrokes(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<uint32_t>>(args, 0);

                self->obj.RemoveDataForStrokes(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_ReplaceDataForStroke(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkStroke>(args, 0);

                self->obj.ReplaceDataForStroke(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_SetStrokeDataKind(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisStrokeKind>(args, 1);

                self->obj.SetStrokeDataKind(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_get_AnalysisRoot(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AnalysisRoot());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InkAnalyzer_get_IsAnalyzing(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsAnalyzing());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InkAnalyzer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InkAnalyzer[] = {
        { "add_data_for_stroke", (PyCFunction)InkAnalyzer_AddDataForStroke, METH_VARARGS, nullptr },
        { "add_data_for_strokes", (PyCFunction)InkAnalyzer_AddDataForStrokes, METH_VARARGS, nullptr },
        { "analyze_async", (PyCFunction)InkAnalyzer_AnalyzeAsync, METH_VARARGS, nullptr },
        { "clear_data_for_all_strokes", (PyCFunction)InkAnalyzer_ClearDataForAllStrokes, METH_VARARGS, nullptr },
        { "remove_data_for_stroke", (PyCFunction)InkAnalyzer_RemoveDataForStroke, METH_VARARGS, nullptr },
        { "remove_data_for_strokes", (PyCFunction)InkAnalyzer_RemoveDataForStrokes, METH_VARARGS, nullptr },
        { "replace_data_for_stroke", (PyCFunction)InkAnalyzer_ReplaceDataForStroke, METH_VARARGS, nullptr },
        { "set_stroke_data_kind", (PyCFunction)InkAnalyzer_SetStrokeDataKind, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_InkAnalyzer, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InkAnalyzer[] = {
        { const_cast<char*>("analysis_root"), (getter)InkAnalyzer_get_AnalysisRoot, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_analyzing"), (getter)InkAnalyzer_get_IsAnalyzing, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InkAnalyzer[] = 
    {
        { Py_tp_new, _new_InkAnalyzer },
        { Py_tp_dealloc, _dealloc_InkAnalyzer },
        { Py_tp_methods, _methods_InkAnalyzer },
        { Py_tp_getset, _getset_InkAnalyzer },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InkAnalyzer =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.InkAnalyzer",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::InkAnalyzer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InkAnalyzer
    };

    // ----- IInkAnalysisNode interface --------------------
    constexpr const char* const _type_name_IInkAnalysisNode = "IInkAnalysisNode";

    static PyObject* _new_IInkAnalysisNode(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IInkAnalysisNode);
        return nullptr;
    }

    static void _dealloc_IInkAnalysisNode(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IInkAnalysisNode_GetStrokeIds(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStrokeIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Children(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Children());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Id(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Kind(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_Parent(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IInkAnalysisNode_get_RotatedBoundingRect(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RotatedBoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IInkAnalysisNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IInkAnalysisNode[] = {
        { "get_stroke_ids", (PyCFunction)IInkAnalysisNode_GetStrokeIds, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IInkAnalysisNode, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IInkAnalysisNode[] = {
        { const_cast<char*>("bounding_rect"), (getter)IInkAnalysisNode_get_BoundingRect, nullptr, nullptr, nullptr },
        { const_cast<char*>("children"), (getter)IInkAnalysisNode_get_Children, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)IInkAnalysisNode_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)IInkAnalysisNode_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("parent"), (getter)IInkAnalysisNode_get_Parent, nullptr, nullptr, nullptr },
        { const_cast<char*>("rotated_bounding_rect"), (getter)IInkAnalysisNode_get_RotatedBoundingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IInkAnalysisNode[] = 
    {
        { Py_tp_new, _new_IInkAnalysisNode },
        { Py_tp_dealloc, _dealloc_IInkAnalysisNode },
        { Py_tp_methods, _methods_IInkAnalysisNode },
        { Py_tp_getset, _getset_IInkAnalysisNode },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IInkAnalysisNode =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.IInkAnalysisNode",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IInkAnalysisNode
    };

    // ----- IInkAnalyzerFactory interface --------------------
    constexpr const char* const _type_name_IInkAnalyzerFactory = "IInkAnalyzerFactory";

    static PyObject* _new_IInkAnalyzerFactory(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IInkAnalyzerFactory);
        return nullptr;
    }

    static void _dealloc_IInkAnalyzerFactory(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IInkAnalyzerFactory_CreateAnalyzer(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateAnalyzer());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IInkAnalyzerFactory(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IInkAnalyzerFactory[] = {
        { "create_analyzer", (PyCFunction)IInkAnalyzerFactory_CreateAnalyzer, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IInkAnalyzerFactory, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IInkAnalyzerFactory[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IInkAnalyzerFactory[] = 
    {
        { Py_tp_new, _new_IInkAnalyzerFactory },
        { Py_tp_dealloc, _dealloc_IInkAnalyzerFactory },
        { Py_tp_methods, _methods_IInkAnalyzerFactory },
        { Py_tp_getset, _getset_IInkAnalyzerFactory },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IInkAnalyzerFactory =
    {
        "_winrt_Windows_UI_Input_Inking_Analysis.IInkAnalyzerFactory",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IInkAnalyzerFactory
    };

    // ----- Windows.UI.Input.Inking.Analysis Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkBullet>::python_type = py::register_python_type(module, _type_name_InkAnalysisInkBullet, &_type_spec_InkAnalysisInkBullet, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkDrawing>::python_type = py::register_python_type(module, _type_name_InkAnalysisInkDrawing, &_type_spec_InkAnalysisInkDrawing, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisInkWord>::python_type = py::register_python_type(module, _type_name_InkAnalysisInkWord, &_type_spec_InkAnalysisInkWord, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisLine>::python_type = py::register_python_type(module, _type_name_InkAnalysisLine, &_type_spec_InkAnalysisLine, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisListItem>::python_type = py::register_python_type(module, _type_name_InkAnalysisListItem, &_type_spec_InkAnalysisListItem, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisNode>::python_type = py::register_python_type(module, _type_name_InkAnalysisNode, &_type_spec_InkAnalysisNode, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisParagraph>::python_type = py::register_python_type(module, _type_name_InkAnalysisParagraph, &_type_spec_InkAnalysisParagraph, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisResult>::python_type = py::register_python_type(module, _type_name_InkAnalysisResult, &_type_spec_InkAnalysisResult, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisRoot>::python_type = py::register_python_type(module, _type_name_InkAnalysisRoot, &_type_spec_InkAnalysisRoot, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalysisWritingRegion>::python_type = py::register_python_type(module, _type_name_InkAnalysisWritingRegion, &_type_spec_InkAnalysisWritingRegion, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::InkAnalyzer>::python_type = py::register_python_type(module, _type_name_InkAnalyzer, &_type_spec_InkAnalyzer, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalysisNode>::python_type = py::register_python_type(module, _type_name_IInkAnalysisNode, &_type_spec_IInkAnalysisNode, bases.get());
            py::winrt_type<winrt::Windows::UI::Input::Inking::Analysis::IInkAnalyzerFactory>::python_type = py::register_python_type(module, _type_name_IInkAnalyzerFactory, &_type_spec_IInkAnalyzerFactory, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.Input.Inking.Analysis");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_Input_Inking_Analysis",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::Input::Inking::Analysis

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_Input_Inking_Analysis (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::Input::Inking::Analysis::module_def);
}
