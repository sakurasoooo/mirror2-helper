// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Graphics.Printing3D.h"

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTask>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3D3MFPackage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterial>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DColorMaterial>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DComponent>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterial>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMaterial>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMesh>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DModel>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DModelTexture>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DTextureResource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>::python_type;

PyObject* py::converter<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>::convert(winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>());
}
winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription py::converter<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription return_value{};

    PyObject* py_Format = PyDict_GetItemString(obj, "format");
    if (!py_Format) { throw winrt::hresult_invalid_argument(); }
    return_value.Format = converter<winrt::Windows::Graphics::Printing3D::Printing3DBufferFormat>::convert_to(py_Format);

    PyObject* py_Stride = PyDict_GetItemString(obj, "stride");
    if (!py_Stride) { throw winrt::hresult_invalid_argument(); }
    return_value.Stride = converter<uint32_t>::convert_to(py_Stride);

    return return_value;
}

namespace py::cpp::Windows::Graphics::Printing3D
{
    // ----- Print3DManager class --------------------
    constexpr const char* const _type_name_Print3DManager = "Print3DManager";

    static PyObject* _new_Print3DManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Print3DManager);
        return nullptr;
    }

    static void _dealloc_Print3DManager(py::wrapper::Windows::Graphics::Printing3D::Print3DManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Print3DManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Graphics::Printing3D::Print3DManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Print3DManager_ShowPrintUIAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Graphics::Printing3D::Print3DManager::ShowPrintUIAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Print3DManager_add_TaskRequested(py::wrapper::Windows::Graphics::Printing3D::Print3DManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing3D::Print3DManager, winrt::Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs>>(arg);

            return py::convert(self->obj.TaskRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DManager_remove_TaskRequested(py::wrapper::Windows::Graphics::Printing3D::Print3DManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TaskRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Print3DManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Print3DManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Print3DManager[] = {
        { "get_for_current_view", (PyCFunction)Print3DManager_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "show_print_u_i_async", (PyCFunction)Print3DManager_ShowPrintUIAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "add_task_requested", (PyCFunction)Print3DManager_add_TaskRequested, METH_O, nullptr },
        { "remove_task_requested", (PyCFunction)Print3DManager_remove_TaskRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_Print3DManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Print3DManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_Print3DManager[] = 
    {
        { Py_tp_new, _new_Print3DManager },
        { Py_tp_dealloc, _dealloc_Print3DManager },
        { Py_tp_methods, _methods_Print3DManager },
        { Py_tp_getset, _getset_Print3DManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Print3DManager =
    {
        "_winrt_Windows_Graphics_Printing3D.Print3DManager",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Print3DManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Print3DManager
    };

    // ----- Print3DTask class --------------------
    constexpr const char* const _type_name_Print3DTask = "Print3DTask";

    static PyObject* _new_Print3DTask(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Print3DTask);
        return nullptr;
    }

    static void _dealloc_Print3DTask(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Print3DTask_get_Source(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DTask_add_Completed(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing3D::Print3DTask, winrt::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs>>(arg);

            return py::convert(self->obj.Completed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DTask_remove_Completed(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Completed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DTask_add_SourceChanged(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing3D::Print3DTask, winrt::Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs>>(arg);

            return py::convert(self->obj.SourceChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DTask_remove_SourceChanged(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SourceChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DTask_add_Submitting(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing3D::Print3DTask, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Submitting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DTask_remove_Submitting(py::wrapper::Windows::Graphics::Printing3D::Print3DTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Submitting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Print3DTask(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Print3DTask>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Print3DTask[] = {
        { "add_completed", (PyCFunction)Print3DTask_add_Completed, METH_O, nullptr },
        { "remove_completed", (PyCFunction)Print3DTask_remove_Completed, METH_O, nullptr },
        { "add_source_changed", (PyCFunction)Print3DTask_add_SourceChanged, METH_O, nullptr },
        { "remove_source_changed", (PyCFunction)Print3DTask_remove_SourceChanged, METH_O, nullptr },
        { "add_submitting", (PyCFunction)Print3DTask_add_Submitting, METH_O, nullptr },
        { "remove_submitting", (PyCFunction)Print3DTask_remove_Submitting, METH_O, nullptr },
        { "_from", (PyCFunction)_from_Print3DTask, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Print3DTask[] = {
        { const_cast<char*>("source"), (getter)Print3DTask_get_Source, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Print3DTask[] = 
    {
        { Py_tp_new, _new_Print3DTask },
        { Py_tp_dealloc, _dealloc_Print3DTask },
        { Py_tp_methods, _methods_Print3DTask },
        { Py_tp_getset, _getset_Print3DTask },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Print3DTask =
    {
        "_winrt_Windows_Graphics_Printing3D.Print3DTask",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Print3DTask),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Print3DTask
    };

    // ----- Print3DTaskCompletedEventArgs class --------------------
    constexpr const char* const _type_name_Print3DTaskCompletedEventArgs = "Print3DTaskCompletedEventArgs";

    static PyObject* _new_Print3DTaskCompletedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Print3DTaskCompletedEventArgs);
        return nullptr;
    }

    static void _dealloc_Print3DTaskCompletedEventArgs(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Print3DTaskCompletedEventArgs_get_Completion(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Completion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Print3DTaskCompletedEventArgs_get_ExtendedStatus(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExtendedStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Print3DTaskCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Print3DTaskCompletedEventArgs[] = {
        { "_from", (PyCFunction)_from_Print3DTaskCompletedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Print3DTaskCompletedEventArgs[] = {
        { const_cast<char*>("completion"), (getter)Print3DTaskCompletedEventArgs_get_Completion, nullptr, nullptr, nullptr },
        { const_cast<char*>("extended_status"), (getter)Print3DTaskCompletedEventArgs_get_ExtendedStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Print3DTaskCompletedEventArgs[] = 
    {
        { Py_tp_new, _new_Print3DTaskCompletedEventArgs },
        { Py_tp_dealloc, _dealloc_Print3DTaskCompletedEventArgs },
        { Py_tp_methods, _methods_Print3DTaskCompletedEventArgs },
        { Py_tp_getset, _getset_Print3DTaskCompletedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Print3DTaskCompletedEventArgs =
    {
        "_winrt_Windows_Graphics_Printing3D.Print3DTaskCompletedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Print3DTaskCompletedEventArgs
    };

    // ----- Print3DTaskRequest class --------------------
    constexpr const char* const _type_name_Print3DTaskRequest = "Print3DTaskRequest";

    static PyObject* _new_Print3DTaskRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Print3DTaskRequest);
        return nullptr;
    }

    static void _dealloc_Print3DTaskRequest(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Print3DTaskRequest_CreateTask(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Graphics::Printing3D::Print3DTaskSourceRequestedHandler>(args, 2);

                return py::convert(self->obj.CreateTask(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_Print3DTaskRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Print3DTaskRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Print3DTaskRequest[] = {
        { "create_task", (PyCFunction)Print3DTaskRequest_CreateTask, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Print3DTaskRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Print3DTaskRequest[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_Print3DTaskRequest[] = 
    {
        { Py_tp_new, _new_Print3DTaskRequest },
        { Py_tp_dealloc, _dealloc_Print3DTaskRequest },
        { Py_tp_methods, _methods_Print3DTaskRequest },
        { Py_tp_getset, _getset_Print3DTaskRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Print3DTaskRequest =
    {
        "_winrt_Windows_Graphics_Printing3D.Print3DTaskRequest",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Print3DTaskRequest
    };

    // ----- Print3DTaskRequestedEventArgs class --------------------
    constexpr const char* const _type_name_Print3DTaskRequestedEventArgs = "Print3DTaskRequestedEventArgs";

    static PyObject* _new_Print3DTaskRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Print3DTaskRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_Print3DTaskRequestedEventArgs(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Print3DTaskRequestedEventArgs_get_Request(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Print3DTaskRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Print3DTaskRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_Print3DTaskRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Print3DTaskRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)Print3DTaskRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Print3DTaskRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_Print3DTaskRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_Print3DTaskRequestedEventArgs },
        { Py_tp_methods, _methods_Print3DTaskRequestedEventArgs },
        { Py_tp_getset, _getset_Print3DTaskRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Print3DTaskRequestedEventArgs =
    {
        "_winrt_Windows_Graphics_Printing3D.Print3DTaskRequestedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Print3DTaskRequestedEventArgs
    };

    // ----- Print3DTaskSourceChangedEventArgs class --------------------
    constexpr const char* const _type_name_Print3DTaskSourceChangedEventArgs = "Print3DTaskSourceChangedEventArgs";

    static PyObject* _new_Print3DTaskSourceChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Print3DTaskSourceChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_Print3DTaskSourceChangedEventArgs(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Print3DTaskSourceChangedEventArgs_get_Source(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Print3DTaskSourceChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Print3DTaskSourceChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_Print3DTaskSourceChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Print3DTaskSourceChangedEventArgs[] = {
        { const_cast<char*>("source"), (getter)Print3DTaskSourceChangedEventArgs_get_Source, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Print3DTaskSourceChangedEventArgs[] = 
    {
        { Py_tp_new, _new_Print3DTaskSourceChangedEventArgs },
        { Py_tp_dealloc, _dealloc_Print3DTaskSourceChangedEventArgs },
        { Py_tp_methods, _methods_Print3DTaskSourceChangedEventArgs },
        { Py_tp_getset, _getset_Print3DTaskSourceChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Print3DTaskSourceChangedEventArgs =
    {
        "_winrt_Windows_Graphics_Printing3D.Print3DTaskSourceChangedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Print3DTaskSourceChangedEventArgs
    };

    // ----- Print3DTaskSourceRequestedArgs class --------------------
    constexpr const char* const _type_name_Print3DTaskSourceRequestedArgs = "Print3DTaskSourceRequestedArgs";

    static PyObject* _new_Print3DTaskSourceRequestedArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Print3DTaskSourceRequestedArgs);
        return nullptr;
    }

    static void _dealloc_Print3DTaskSourceRequestedArgs(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Print3DTaskSourceRequestedArgs_SetSource(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3D3MFPackage>(args, 0);

                self->obj.SetSource(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_Print3DTaskSourceRequestedArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Print3DTaskSourceRequestedArgs[] = {
        { "set_source", (PyCFunction)Print3DTaskSourceRequestedArgs_SetSource, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Print3DTaskSourceRequestedArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Print3DTaskSourceRequestedArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_Print3DTaskSourceRequestedArgs[] = 
    {
        { Py_tp_new, _new_Print3DTaskSourceRequestedArgs },
        { Py_tp_dealloc, _dealloc_Print3DTaskSourceRequestedArgs },
        { Py_tp_methods, _methods_Print3DTaskSourceRequestedArgs },
        { Py_tp_getset, _getset_Print3DTaskSourceRequestedArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Print3DTaskSourceRequestedArgs =
    {
        "_winrt_Windows_Graphics_Printing3D.Print3DTaskSourceRequestedArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Print3DTaskSourceRequestedArgs
    };

    // ----- Printing3D3MFPackage class --------------------
    constexpr const char* const _type_name_Printing3D3MFPackage = "Printing3D3MFPackage";

    static PyObject* _new_Printing3D3MFPackage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3D3MFPackage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3D3MFPackage(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3D3MFPackage_LoadAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(winrt::Windows::Graphics::Printing3D::Printing3D3MFPackage::LoadAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3D3MFPackage_LoadModelFromPackageAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(self->obj.LoadModelFromPackageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3D3MFPackage_SaveAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SaveAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3D3MFPackage_SaveModelToPackageAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DModel>(args, 0);

                return py::convert(self->obj.SaveModelToPackageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3D3MFPackage_get_Thumbnail(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Thumbnail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3D3MFPackage_put_Thumbnail(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DTextureResource>(arg);

            self->obj.Thumbnail(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3D3MFPackage_get_PrintTicket(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PrintTicket());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3D3MFPackage_put_PrintTicket(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(arg);

            self->obj.PrintTicket(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3D3MFPackage_get_ModelPart(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ModelPart());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3D3MFPackage_put_ModelPart(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(arg);

            self->obj.ModelPart(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3D3MFPackage_get_Textures(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Textures());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3D3MFPackage_get_Compression(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Compression());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3D3MFPackage_put_Compression(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DPackageCompression>(arg);

            self->obj.Compression(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3D3MFPackage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3D3MFPackage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3D3MFPackage[] = {
        { "load_async", (PyCFunction)Printing3D3MFPackage_LoadAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "load_model_from_package_async", (PyCFunction)Printing3D3MFPackage_LoadModelFromPackageAsync, METH_VARARGS, nullptr },
        { "save_async", (PyCFunction)Printing3D3MFPackage_SaveAsync, METH_VARARGS, nullptr },
        { "save_model_to_package_async", (PyCFunction)Printing3D3MFPackage_SaveModelToPackageAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Printing3D3MFPackage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3D3MFPackage[] = {
        { const_cast<char*>("thumbnail"), (getter)Printing3D3MFPackage_get_Thumbnail, (setter)Printing3D3MFPackage_put_Thumbnail, nullptr, nullptr },
        { const_cast<char*>("print_ticket"), (getter)Printing3D3MFPackage_get_PrintTicket, (setter)Printing3D3MFPackage_put_PrintTicket, nullptr, nullptr },
        { const_cast<char*>("model_part"), (getter)Printing3D3MFPackage_get_ModelPart, (setter)Printing3D3MFPackage_put_ModelPart, nullptr, nullptr },
        { const_cast<char*>("textures"), (getter)Printing3D3MFPackage_get_Textures, nullptr, nullptr, nullptr },
        { const_cast<char*>("compression"), (getter)Printing3D3MFPackage_get_Compression, (setter)Printing3D3MFPackage_put_Compression, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3D3MFPackage[] = 
    {
        { Py_tp_new, _new_Printing3D3MFPackage },
        { Py_tp_dealloc, _dealloc_Printing3D3MFPackage },
        { Py_tp_methods, _methods_Printing3D3MFPackage },
        { Py_tp_getset, _getset_Printing3D3MFPackage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3D3MFPackage =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3D3MFPackage",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3D3MFPackage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3D3MFPackage
    };

    // ----- Printing3DBaseMaterial class --------------------
    constexpr const char* const _type_name_Printing3DBaseMaterial = "Printing3DBaseMaterial";

    static PyObject* _new_Printing3DBaseMaterial(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterial instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DBaseMaterial(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterial* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DBaseMaterial_get_Name(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DBaseMaterial_put_Name(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterial* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DBaseMaterial_get_Color(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Color());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DBaseMaterial_put_Color(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterial* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DColorMaterial>(arg);

            self->obj.Color(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DBaseMaterial_get_Abs(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterial::Abs());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DBaseMaterial_get_Pla(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterial::Pla());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DBaseMaterial(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterial>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DBaseMaterial[] = {
        { "get_abs", (PyCFunction)Printing3DBaseMaterial_get_Abs, METH_NOARGS | METH_STATIC, nullptr },
        { "get_pla", (PyCFunction)Printing3DBaseMaterial_get_Pla, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_Printing3DBaseMaterial, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DBaseMaterial[] = {
        { const_cast<char*>("name"), (getter)Printing3DBaseMaterial_get_Name, (setter)Printing3DBaseMaterial_put_Name, nullptr, nullptr },
        { const_cast<char*>("color"), (getter)Printing3DBaseMaterial_get_Color, (setter)Printing3DBaseMaterial_put_Color, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DBaseMaterial[] = 
    {
        { Py_tp_new, _new_Printing3DBaseMaterial },
        { Py_tp_dealloc, _dealloc_Printing3DBaseMaterial },
        { Py_tp_methods, _methods_Printing3DBaseMaterial },
        { Py_tp_getset, _getset_Printing3DBaseMaterial },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DBaseMaterial =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DBaseMaterial",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterial),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DBaseMaterial
    };

    // ----- Printing3DBaseMaterialGroup class --------------------
    constexpr const char* const _type_name_Printing3DBaseMaterialGroup = "Printing3DBaseMaterialGroup";

    static PyObject* _new_Printing3DBaseMaterialGroup(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DBaseMaterialGroup(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DBaseMaterialGroup_get_Bases(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bases());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DBaseMaterialGroup_get_MaterialGroupId(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialGroupId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DBaseMaterialGroup(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DBaseMaterialGroup[] = {
        { "_from", (PyCFunction)_from_Printing3DBaseMaterialGroup, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DBaseMaterialGroup[] = {
        { const_cast<char*>("bases"), (getter)Printing3DBaseMaterialGroup_get_Bases, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_group_id"), (getter)Printing3DBaseMaterialGroup_get_MaterialGroupId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DBaseMaterialGroup[] = 
    {
        { Py_tp_new, _new_Printing3DBaseMaterialGroup },
        { Py_tp_dealloc, _dealloc_Printing3DBaseMaterialGroup },
        { Py_tp_methods, _methods_Printing3DBaseMaterialGroup },
        { Py_tp_getset, _getset_Printing3DBaseMaterialGroup },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DBaseMaterialGroup =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DBaseMaterialGroup",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DBaseMaterialGroup
    };

    // ----- Printing3DColorMaterial class --------------------
    constexpr const char* const _type_name_Printing3DColorMaterial = "Printing3DColorMaterial";

    static PyObject* _new_Printing3DColorMaterial(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DColorMaterial instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DColorMaterial(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterial* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DColorMaterial_get_Value(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DColorMaterial_put_Value(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterial* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Value(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DColorMaterial_get_Color(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Color());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DColorMaterial_put_Color(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterial* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.Color(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DColorMaterial(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DColorMaterial>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DColorMaterial[] = {
        { "_from", (PyCFunction)_from_Printing3DColorMaterial, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DColorMaterial[] = {
        { const_cast<char*>("value"), (getter)Printing3DColorMaterial_get_Value, (setter)Printing3DColorMaterial_put_Value, nullptr, nullptr },
        { const_cast<char*>("color"), (getter)Printing3DColorMaterial_get_Color, (setter)Printing3DColorMaterial_put_Color, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DColorMaterial[] = 
    {
        { Py_tp_new, _new_Printing3DColorMaterial },
        { Py_tp_dealloc, _dealloc_Printing3DColorMaterial },
        { Py_tp_methods, _methods_Printing3DColorMaterial },
        { Py_tp_getset, _getset_Printing3DColorMaterial },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DColorMaterial =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DColorMaterial",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterial),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DColorMaterial
    };

    // ----- Printing3DColorMaterialGroup class --------------------
    constexpr const char* const _type_name_Printing3DColorMaterialGroup = "Printing3DColorMaterialGroup";

    static PyObject* _new_Printing3DColorMaterialGroup(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DColorMaterialGroup(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DColorMaterialGroup_get_Colors(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Colors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DColorMaterialGroup_get_MaterialGroupId(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialGroupId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DColorMaterialGroup(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DColorMaterialGroup[] = {
        { "_from", (PyCFunction)_from_Printing3DColorMaterialGroup, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DColorMaterialGroup[] = {
        { const_cast<char*>("colors"), (getter)Printing3DColorMaterialGroup_get_Colors, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_group_id"), (getter)Printing3DColorMaterialGroup_get_MaterialGroupId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DColorMaterialGroup[] = 
    {
        { Py_tp_new, _new_Printing3DColorMaterialGroup },
        { Py_tp_dealloc, _dealloc_Printing3DColorMaterialGroup },
        { Py_tp_methods, _methods_Printing3DColorMaterialGroup },
        { Py_tp_getset, _getset_Printing3DColorMaterialGroup },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DColorMaterialGroup =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DColorMaterialGroup",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DColorMaterialGroup
    };

    // ----- Printing3DComponent class --------------------
    constexpr const char* const _type_name_Printing3DComponent = "Printing3DComponent";

    static PyObject* _new_Printing3DComponent(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DComponent instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DComponent(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DComponent_get_Type(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DComponent_put_Type(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DObjectType>(arg);

            self->obj.Type(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DComponent_get_Thumbnail(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Thumbnail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DComponent_put_Thumbnail(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DTextureResource>(arg);

            self->obj.Thumbnail(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DComponent_get_PartNumber(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PartNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DComponent_put_PartNumber(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PartNumber(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DComponent_get_Name(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DComponent_put_Name(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DComponent_get_Mesh(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Mesh());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DComponent_put_Mesh(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DMesh>(arg);

            self->obj.Mesh(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DComponent_get_Components(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Components());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DComponent(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DComponent>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DComponent[] = {
        { "_from", (PyCFunction)_from_Printing3DComponent, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DComponent[] = {
        { const_cast<char*>("type"), (getter)Printing3DComponent_get_Type, (setter)Printing3DComponent_put_Type, nullptr, nullptr },
        { const_cast<char*>("thumbnail"), (getter)Printing3DComponent_get_Thumbnail, (setter)Printing3DComponent_put_Thumbnail, nullptr, nullptr },
        { const_cast<char*>("part_number"), (getter)Printing3DComponent_get_PartNumber, (setter)Printing3DComponent_put_PartNumber, nullptr, nullptr },
        { const_cast<char*>("name"), (getter)Printing3DComponent_get_Name, (setter)Printing3DComponent_put_Name, nullptr, nullptr },
        { const_cast<char*>("mesh"), (getter)Printing3DComponent_get_Mesh, (setter)Printing3DComponent_put_Mesh, nullptr, nullptr },
        { const_cast<char*>("components"), (getter)Printing3DComponent_get_Components, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DComponent[] = 
    {
        { Py_tp_new, _new_Printing3DComponent },
        { Py_tp_dealloc, _dealloc_Printing3DComponent },
        { Py_tp_methods, _methods_Printing3DComponent },
        { Py_tp_getset, _getset_Printing3DComponent },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DComponent =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DComponent",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponent),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DComponent
    };

    // ----- Printing3DComponentWithMatrix class --------------------
    constexpr const char* const _type_name_Printing3DComponentWithMatrix = "Printing3DComponentWithMatrix";

    static PyObject* _new_Printing3DComponentWithMatrix(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DComponentWithMatrix(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DComponentWithMatrix_get_Matrix(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Matrix());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DComponentWithMatrix_put_Matrix(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float4x4>(arg);

            self->obj.Matrix(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DComponentWithMatrix_get_Component(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Component());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DComponentWithMatrix_put_Component(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DComponent>(arg);

            self->obj.Component(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DComponentWithMatrix(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DComponentWithMatrix[] = {
        { "_from", (PyCFunction)_from_Printing3DComponentWithMatrix, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DComponentWithMatrix[] = {
        { const_cast<char*>("matrix"), (getter)Printing3DComponentWithMatrix_get_Matrix, (setter)Printing3DComponentWithMatrix_put_Matrix, nullptr, nullptr },
        { const_cast<char*>("component"), (getter)Printing3DComponentWithMatrix_get_Component, (setter)Printing3DComponentWithMatrix_put_Component, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DComponentWithMatrix[] = 
    {
        { Py_tp_new, _new_Printing3DComponentWithMatrix },
        { Py_tp_dealloc, _dealloc_Printing3DComponentWithMatrix },
        { Py_tp_methods, _methods_Printing3DComponentWithMatrix },
        { Py_tp_getset, _getset_Printing3DComponentWithMatrix },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DComponentWithMatrix =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DComponentWithMatrix",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DComponentWithMatrix
    };

    // ----- Printing3DCompositeMaterial class --------------------
    constexpr const char* const _type_name_Printing3DCompositeMaterial = "Printing3DCompositeMaterial";

    static PyObject* _new_Printing3DCompositeMaterial(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterial instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DCompositeMaterial(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterial* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DCompositeMaterial_get_Values(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Values());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DCompositeMaterial(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterial>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DCompositeMaterial[] = {
        { "_from", (PyCFunction)_from_Printing3DCompositeMaterial, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DCompositeMaterial[] = {
        { const_cast<char*>("values"), (getter)Printing3DCompositeMaterial_get_Values, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DCompositeMaterial[] = 
    {
        { Py_tp_new, _new_Printing3DCompositeMaterial },
        { Py_tp_dealloc, _dealloc_Printing3DCompositeMaterial },
        { Py_tp_methods, _methods_Printing3DCompositeMaterial },
        { Py_tp_getset, _getset_Printing3DCompositeMaterial },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DCompositeMaterial =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DCompositeMaterial",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterial),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DCompositeMaterial
    };

    // ----- Printing3DCompositeMaterialGroup class --------------------
    constexpr const char* const _type_name_Printing3DCompositeMaterialGroup = "Printing3DCompositeMaterialGroup";

    static PyObject* _new_Printing3DCompositeMaterialGroup(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DCompositeMaterialGroup(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DCompositeMaterialGroup_get_Composites(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Composites());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DCompositeMaterialGroup_get_MaterialGroupId(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialGroupId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DCompositeMaterialGroup_get_MaterialIndices(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialIndices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DCompositeMaterialGroup_get_BaseMaterialGroup(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BaseMaterialGroup());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DCompositeMaterialGroup_put_BaseMaterialGroup(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup>(arg);

            self->obj.BaseMaterialGroup(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DCompositeMaterialGroup(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DCompositeMaterialGroup[] = {
        { "_from", (PyCFunction)_from_Printing3DCompositeMaterialGroup, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DCompositeMaterialGroup[] = {
        { const_cast<char*>("composites"), (getter)Printing3DCompositeMaterialGroup_get_Composites, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_group_id"), (getter)Printing3DCompositeMaterialGroup_get_MaterialGroupId, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_indices"), (getter)Printing3DCompositeMaterialGroup_get_MaterialIndices, nullptr, nullptr, nullptr },
        { const_cast<char*>("base_material_group"), (getter)Printing3DCompositeMaterialGroup_get_BaseMaterialGroup, (setter)Printing3DCompositeMaterialGroup_put_BaseMaterialGroup, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DCompositeMaterialGroup[] = 
    {
        { Py_tp_new, _new_Printing3DCompositeMaterialGroup },
        { Py_tp_dealloc, _dealloc_Printing3DCompositeMaterialGroup },
        { Py_tp_methods, _methods_Printing3DCompositeMaterialGroup },
        { Py_tp_getset, _getset_Printing3DCompositeMaterialGroup },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DCompositeMaterialGroup =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DCompositeMaterialGroup",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DCompositeMaterialGroup
    };

    // ----- Printing3DFaceReductionOptions class --------------------
    constexpr const char* const _type_name_Printing3DFaceReductionOptions = "Printing3DFaceReductionOptions";

    static PyObject* _new_Printing3DFaceReductionOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DFaceReductionOptions(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DFaceReductionOptions_get_TargetTriangleCount(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TargetTriangleCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DFaceReductionOptions_put_TargetTriangleCount(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.TargetTriangleCount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DFaceReductionOptions_get_MaxReductionArea(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxReductionArea());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DFaceReductionOptions_put_MaxReductionArea(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.MaxReductionArea(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DFaceReductionOptions_get_MaxEdgeLength(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxEdgeLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DFaceReductionOptions_put_MaxEdgeLength(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.MaxEdgeLength(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DFaceReductionOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DFaceReductionOptions[] = {
        { "_from", (PyCFunction)_from_Printing3DFaceReductionOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DFaceReductionOptions[] = {
        { const_cast<char*>("target_triangle_count"), (getter)Printing3DFaceReductionOptions_get_TargetTriangleCount, (setter)Printing3DFaceReductionOptions_put_TargetTriangleCount, nullptr, nullptr },
        { const_cast<char*>("max_reduction_area"), (getter)Printing3DFaceReductionOptions_get_MaxReductionArea, (setter)Printing3DFaceReductionOptions_put_MaxReductionArea, nullptr, nullptr },
        { const_cast<char*>("max_edge_length"), (getter)Printing3DFaceReductionOptions_get_MaxEdgeLength, (setter)Printing3DFaceReductionOptions_put_MaxEdgeLength, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DFaceReductionOptions[] = 
    {
        { Py_tp_new, _new_Printing3DFaceReductionOptions },
        { Py_tp_dealloc, _dealloc_Printing3DFaceReductionOptions },
        { Py_tp_methods, _methods_Printing3DFaceReductionOptions },
        { Py_tp_getset, _getset_Printing3DFaceReductionOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DFaceReductionOptions =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DFaceReductionOptions",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DFaceReductionOptions
    };

    // ----- Printing3DMaterial class --------------------
    constexpr const char* const _type_name_Printing3DMaterial = "Printing3DMaterial";

    static PyObject* _new_Printing3DMaterial(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DMaterial instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DMaterial(py::wrapper::Windows::Graphics::Printing3D::Printing3DMaterial* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DMaterial_get_BaseGroups(py::wrapper::Windows::Graphics::Printing3D::Printing3DMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BaseGroups());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMaterial_get_ColorGroups(py::wrapper::Windows::Graphics::Printing3D::Printing3DMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ColorGroups());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMaterial_get_CompositeGroups(py::wrapper::Windows::Graphics::Printing3D::Printing3DMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CompositeGroups());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMaterial_get_MultiplePropertyGroups(py::wrapper::Windows::Graphics::Printing3D::Printing3DMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MultiplePropertyGroups());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMaterial_get_Texture2CoordGroups(py::wrapper::Windows::Graphics::Printing3D::Printing3DMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Texture2CoordGroups());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DMaterial(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DMaterial>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DMaterial[] = {
        { "_from", (PyCFunction)_from_Printing3DMaterial, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DMaterial[] = {
        { const_cast<char*>("base_groups"), (getter)Printing3DMaterial_get_BaseGroups, nullptr, nullptr, nullptr },
        { const_cast<char*>("color_groups"), (getter)Printing3DMaterial_get_ColorGroups, nullptr, nullptr, nullptr },
        { const_cast<char*>("composite_groups"), (getter)Printing3DMaterial_get_CompositeGroups, nullptr, nullptr, nullptr },
        { const_cast<char*>("multiple_property_groups"), (getter)Printing3DMaterial_get_MultiplePropertyGroups, nullptr, nullptr, nullptr },
        { const_cast<char*>("texture2_coord_groups"), (getter)Printing3DMaterial_get_Texture2CoordGroups, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DMaterial[] = 
    {
        { Py_tp_new, _new_Printing3DMaterial },
        { Py_tp_dealloc, _dealloc_Printing3DMaterial },
        { Py_tp_methods, _methods_Printing3DMaterial },
        { Py_tp_getset, _getset_Printing3DMaterial },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DMaterial =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DMaterial",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DMaterial),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DMaterial
    };

    // ----- Printing3DMesh class --------------------
    constexpr const char* const _type_name_Printing3DMesh = "Printing3DMesh";

    static PyObject* _new_Printing3DMesh(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DMesh instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DMesh(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DMesh_CreateTriangleIndices(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.CreateTriangleIndices(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_CreateTriangleMaterialIndices(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.CreateTriangleMaterialIndices(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_CreateVertexNormals(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.CreateVertexNormals(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_CreateVertexPositions(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.CreateVertexPositions(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_GetTriangleIndices(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetTriangleIndices());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_GetTriangleMaterialIndices(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetTriangleMaterialIndices());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_GetVertexNormals(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetVertexNormals());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_GetVertexPositions(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetVertexPositions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_VerifyAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DMeshVerificationMode>(args, 0);

                return py::convert(self->obj.VerifyAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_get_VertexPositionsDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VertexPositionsDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DMesh_put_VertexPositionsDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>(arg);

            self->obj.VertexPositionsDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DMesh_get_VertexNormalsDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VertexNormalsDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DMesh_put_VertexNormalsDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>(arg);

            self->obj.VertexNormalsDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DMesh_get_VertexCount(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VertexCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DMesh_put_VertexCount(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.VertexCount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DMesh_get_TriangleMaterialIndicesDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TriangleMaterialIndicesDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DMesh_put_TriangleMaterialIndicesDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>(arg);

            self->obj.TriangleMaterialIndicesDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DMesh_get_TriangleIndicesDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TriangleIndicesDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DMesh_put_TriangleIndicesDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>(arg);

            self->obj.TriangleIndicesDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DMesh_get_IndexCount(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IndexCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DMesh_put_IndexCount(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.IndexCount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DMesh_get_BufferDescriptionSet(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BufferDescriptionSet());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMesh_get_BufferSet(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BufferSet());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DMesh(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DMesh>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DMesh[] = {
        { "create_triangle_indices", (PyCFunction)Printing3DMesh_CreateTriangleIndices, METH_VARARGS, nullptr },
        { "create_triangle_material_indices", (PyCFunction)Printing3DMesh_CreateTriangleMaterialIndices, METH_VARARGS, nullptr },
        { "create_vertex_normals", (PyCFunction)Printing3DMesh_CreateVertexNormals, METH_VARARGS, nullptr },
        { "create_vertex_positions", (PyCFunction)Printing3DMesh_CreateVertexPositions, METH_VARARGS, nullptr },
        { "get_triangle_indices", (PyCFunction)Printing3DMesh_GetTriangleIndices, METH_VARARGS, nullptr },
        { "get_triangle_material_indices", (PyCFunction)Printing3DMesh_GetTriangleMaterialIndices, METH_VARARGS, nullptr },
        { "get_vertex_normals", (PyCFunction)Printing3DMesh_GetVertexNormals, METH_VARARGS, nullptr },
        { "get_vertex_positions", (PyCFunction)Printing3DMesh_GetVertexPositions, METH_VARARGS, nullptr },
        { "verify_async", (PyCFunction)Printing3DMesh_VerifyAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Printing3DMesh, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DMesh[] = {
        { const_cast<char*>("vertex_positions_description"), (getter)Printing3DMesh_get_VertexPositionsDescription, (setter)Printing3DMesh_put_VertexPositionsDescription, nullptr, nullptr },
        { const_cast<char*>("vertex_normals_description"), (getter)Printing3DMesh_get_VertexNormalsDescription, (setter)Printing3DMesh_put_VertexNormalsDescription, nullptr, nullptr },
        { const_cast<char*>("vertex_count"), (getter)Printing3DMesh_get_VertexCount, (setter)Printing3DMesh_put_VertexCount, nullptr, nullptr },
        { const_cast<char*>("triangle_material_indices_description"), (getter)Printing3DMesh_get_TriangleMaterialIndicesDescription, (setter)Printing3DMesh_put_TriangleMaterialIndicesDescription, nullptr, nullptr },
        { const_cast<char*>("triangle_indices_description"), (getter)Printing3DMesh_get_TriangleIndicesDescription, (setter)Printing3DMesh_put_TriangleIndicesDescription, nullptr, nullptr },
        { const_cast<char*>("index_count"), (getter)Printing3DMesh_get_IndexCount, (setter)Printing3DMesh_put_IndexCount, nullptr, nullptr },
        { const_cast<char*>("buffer_description_set"), (getter)Printing3DMesh_get_BufferDescriptionSet, nullptr, nullptr, nullptr },
        { const_cast<char*>("buffer_set"), (getter)Printing3DMesh_get_BufferSet, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DMesh[] = 
    {
        { Py_tp_new, _new_Printing3DMesh },
        { Py_tp_dealloc, _dealloc_Printing3DMesh },
        { Py_tp_methods, _methods_Printing3DMesh },
        { Py_tp_getset, _getset_Printing3DMesh },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DMesh =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DMesh",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DMesh),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DMesh
    };

    // ----- Printing3DMeshVerificationResult class --------------------
    constexpr const char* const _type_name_Printing3DMeshVerificationResult = "Printing3DMeshVerificationResult";

    static PyObject* _new_Printing3DMeshVerificationResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Printing3DMeshVerificationResult);
        return nullptr;
    }

    static void _dealloc_Printing3DMeshVerificationResult(py::wrapper::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DMeshVerificationResult_get_IsValid(py::wrapper::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsValid());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMeshVerificationResult_get_NonmanifoldTriangles(py::wrapper::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NonmanifoldTriangles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMeshVerificationResult_get_ReversedNormalTriangles(py::wrapper::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ReversedNormalTriangles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DMeshVerificationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DMeshVerificationResult[] = {
        { "_from", (PyCFunction)_from_Printing3DMeshVerificationResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DMeshVerificationResult[] = {
        { const_cast<char*>("is_valid"), (getter)Printing3DMeshVerificationResult_get_IsValid, nullptr, nullptr, nullptr },
        { const_cast<char*>("nonmanifold_triangles"), (getter)Printing3DMeshVerificationResult_get_NonmanifoldTriangles, nullptr, nullptr, nullptr },
        { const_cast<char*>("reversed_normal_triangles"), (getter)Printing3DMeshVerificationResult_get_ReversedNormalTriangles, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DMeshVerificationResult[] = 
    {
        { Py_tp_new, _new_Printing3DMeshVerificationResult },
        { Py_tp_dealloc, _dealloc_Printing3DMeshVerificationResult },
        { Py_tp_methods, _methods_Printing3DMeshVerificationResult },
        { Py_tp_getset, _getset_Printing3DMeshVerificationResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DMeshVerificationResult =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DMeshVerificationResult",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DMeshVerificationResult
    };

    // ----- Printing3DModel class --------------------
    constexpr const char* const _type_name_Printing3DModel = "Printing3DModel";

    static PyObject* _new_Printing3DModel(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DModel instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DModel(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DModel_Clone(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Clone());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_RepairAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.RepairAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_RepairWithProgressAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.RepairWithProgressAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_TryPartialRepairAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryPartialRepairAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 0);

                return py::convert(self->obj.TryPartialRepairAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_TryReduceFacesAsync(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryReduceFacesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions>(args, 0);

                return py::convert(self->obj.TryReduceFacesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 1);

                return py::convert(self->obj.TryReduceFacesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_get_Version(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Version());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DModel_put_Version(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Version(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DModel_get_Unit(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Unit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DModel_put_Unit(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DModelUnit>(arg);

            self->obj.Unit(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DModel_get_Material(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Material());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DModel_put_Material(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DMaterial>(arg);

            self->obj.Material(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DModel_get_Build(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Build());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DModel_put_Build(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DComponent>(arg);

            self->obj.Build(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DModel_get_Components(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Components());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_get_Meshes(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Meshes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_get_Metadata(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Metadata());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_get_RequiredExtensions(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequiredExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DModel_get_Textures(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Textures());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DModel(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DModel>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DModel[] = {
        { "clone", (PyCFunction)Printing3DModel_Clone, METH_VARARGS, nullptr },
        { "repair_async", (PyCFunction)Printing3DModel_RepairAsync, METH_VARARGS, nullptr },
        { "repair_with_progress_async", (PyCFunction)Printing3DModel_RepairWithProgressAsync, METH_VARARGS, nullptr },
        { "try_partial_repair_async", (PyCFunction)Printing3DModel_TryPartialRepairAsync, METH_VARARGS, nullptr },
        { "try_reduce_faces_async", (PyCFunction)Printing3DModel_TryReduceFacesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Printing3DModel, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DModel[] = {
        { const_cast<char*>("version"), (getter)Printing3DModel_get_Version, (setter)Printing3DModel_put_Version, nullptr, nullptr },
        { const_cast<char*>("unit"), (getter)Printing3DModel_get_Unit, (setter)Printing3DModel_put_Unit, nullptr, nullptr },
        { const_cast<char*>("material"), (getter)Printing3DModel_get_Material, (setter)Printing3DModel_put_Material, nullptr, nullptr },
        { const_cast<char*>("build"), (getter)Printing3DModel_get_Build, (setter)Printing3DModel_put_Build, nullptr, nullptr },
        { const_cast<char*>("components"), (getter)Printing3DModel_get_Components, nullptr, nullptr, nullptr },
        { const_cast<char*>("meshes"), (getter)Printing3DModel_get_Meshes, nullptr, nullptr, nullptr },
        { const_cast<char*>("metadata"), (getter)Printing3DModel_get_Metadata, nullptr, nullptr, nullptr },
        { const_cast<char*>("required_extensions"), (getter)Printing3DModel_get_RequiredExtensions, nullptr, nullptr, nullptr },
        { const_cast<char*>("textures"), (getter)Printing3DModel_get_Textures, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DModel[] = 
    {
        { Py_tp_new, _new_Printing3DModel },
        { Py_tp_dealloc, _dealloc_Printing3DModel },
        { Py_tp_methods, _methods_Printing3DModel },
        { Py_tp_getset, _getset_Printing3DModel },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DModel =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DModel",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DModel),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DModel
    };

    // ----- Printing3DModelTexture class --------------------
    constexpr const char* const _type_name_Printing3DModelTexture = "Printing3DModelTexture";

    static PyObject* _new_Printing3DModelTexture(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DModelTexture instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DModelTexture(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DModelTexture_get_TileStyleV(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TileStyleV());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DModelTexture_put_TileStyleV(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior>(arg);

            self->obj.TileStyleV(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DModelTexture_get_TileStyleU(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TileStyleU());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DModelTexture_put_TileStyleU(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior>(arg);

            self->obj.TileStyleU(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DModelTexture_get_TextureResource(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextureResource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DModelTexture_put_TextureResource(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DTextureResource>(arg);

            self->obj.TextureResource(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DModelTexture(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DModelTexture>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DModelTexture[] = {
        { "_from", (PyCFunction)_from_Printing3DModelTexture, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DModelTexture[] = {
        { const_cast<char*>("tile_style_v"), (getter)Printing3DModelTexture_get_TileStyleV, (setter)Printing3DModelTexture_put_TileStyleV, nullptr, nullptr },
        { const_cast<char*>("tile_style_u"), (getter)Printing3DModelTexture_get_TileStyleU, (setter)Printing3DModelTexture_put_TileStyleU, nullptr, nullptr },
        { const_cast<char*>("texture_resource"), (getter)Printing3DModelTexture_get_TextureResource, (setter)Printing3DModelTexture_put_TextureResource, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DModelTexture[] = 
    {
        { Py_tp_new, _new_Printing3DModelTexture },
        { Py_tp_dealloc, _dealloc_Printing3DModelTexture },
        { Py_tp_methods, _methods_Printing3DModelTexture },
        { Py_tp_getset, _getset_Printing3DModelTexture },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DModelTexture =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DModelTexture",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DModelTexture),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DModelTexture
    };

    // ----- Printing3DMultiplePropertyMaterial class --------------------
    constexpr const char* const _type_name_Printing3DMultiplePropertyMaterial = "Printing3DMultiplePropertyMaterial";

    static PyObject* _new_Printing3DMultiplePropertyMaterial(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DMultiplePropertyMaterial(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DMultiplePropertyMaterial_get_MaterialIndices(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialIndices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DMultiplePropertyMaterial(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DMultiplePropertyMaterial[] = {
        { "_from", (PyCFunction)_from_Printing3DMultiplePropertyMaterial, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DMultiplePropertyMaterial[] = {
        { const_cast<char*>("material_indices"), (getter)Printing3DMultiplePropertyMaterial_get_MaterialIndices, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DMultiplePropertyMaterial[] = 
    {
        { Py_tp_new, _new_Printing3DMultiplePropertyMaterial },
        { Py_tp_dealloc, _dealloc_Printing3DMultiplePropertyMaterial },
        { Py_tp_methods, _methods_Printing3DMultiplePropertyMaterial },
        { Py_tp_getset, _getset_Printing3DMultiplePropertyMaterial },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DMultiplePropertyMaterial =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DMultiplePropertyMaterial",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DMultiplePropertyMaterial
    };

    // ----- Printing3DMultiplePropertyMaterialGroup class --------------------
    constexpr const char* const _type_name_Printing3DMultiplePropertyMaterialGroup = "Printing3DMultiplePropertyMaterialGroup";

    static PyObject* _new_Printing3DMultiplePropertyMaterialGroup(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DMultiplePropertyMaterialGroup(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DMultiplePropertyMaterialGroup_get_MaterialGroupId(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialGroupId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMultiplePropertyMaterialGroup_get_MaterialGroupIndices(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialGroupIndices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DMultiplePropertyMaterialGroup_get_MultipleProperties(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MultipleProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Printing3DMultiplePropertyMaterialGroup(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DMultiplePropertyMaterialGroup[] = {
        { "_from", (PyCFunction)_from_Printing3DMultiplePropertyMaterialGroup, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DMultiplePropertyMaterialGroup[] = {
        { const_cast<char*>("material_group_id"), (getter)Printing3DMultiplePropertyMaterialGroup_get_MaterialGroupId, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_group_indices"), (getter)Printing3DMultiplePropertyMaterialGroup_get_MaterialGroupIndices, nullptr, nullptr, nullptr },
        { const_cast<char*>("multiple_properties"), (getter)Printing3DMultiplePropertyMaterialGroup_get_MultipleProperties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DMultiplePropertyMaterialGroup[] = 
    {
        { Py_tp_new, _new_Printing3DMultiplePropertyMaterialGroup },
        { Py_tp_dealloc, _dealloc_Printing3DMultiplePropertyMaterialGroup },
        { Py_tp_methods, _methods_Printing3DMultiplePropertyMaterialGroup },
        { Py_tp_getset, _getset_Printing3DMultiplePropertyMaterialGroup },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DMultiplePropertyMaterialGroup =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DMultiplePropertyMaterialGroup",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DMultiplePropertyMaterialGroup
    };

    // ----- Printing3DTexture2CoordMaterial class --------------------
    constexpr const char* const _type_name_Printing3DTexture2CoordMaterial = "Printing3DTexture2CoordMaterial";

    static PyObject* _new_Printing3DTexture2CoordMaterial(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DTexture2CoordMaterial(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DTexture2CoordMaterial_get_V(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.V());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DTexture2CoordMaterial_put_V(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.V(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DTexture2CoordMaterial_get_U(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.U());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DTexture2CoordMaterial_put_U(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.U(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DTexture2CoordMaterial_get_Texture(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Texture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DTexture2CoordMaterial_put_Texture(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DModelTexture>(arg);

            self->obj.Texture(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DTexture2CoordMaterial(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DTexture2CoordMaterial[] = {
        { "_from", (PyCFunction)_from_Printing3DTexture2CoordMaterial, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DTexture2CoordMaterial[] = {
        { const_cast<char*>("v"), (getter)Printing3DTexture2CoordMaterial_get_V, (setter)Printing3DTexture2CoordMaterial_put_V, nullptr, nullptr },
        { const_cast<char*>("u"), (getter)Printing3DTexture2CoordMaterial_get_U, (setter)Printing3DTexture2CoordMaterial_put_U, nullptr, nullptr },
        { const_cast<char*>("texture"), (getter)Printing3DTexture2CoordMaterial_get_Texture, (setter)Printing3DTexture2CoordMaterial_put_Texture, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DTexture2CoordMaterial[] = 
    {
        { Py_tp_new, _new_Printing3DTexture2CoordMaterial },
        { Py_tp_dealloc, _dealloc_Printing3DTexture2CoordMaterial },
        { Py_tp_methods, _methods_Printing3DTexture2CoordMaterial },
        { Py_tp_getset, _getset_Printing3DTexture2CoordMaterial },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DTexture2CoordMaterial =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DTexture2CoordMaterial",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DTexture2CoordMaterial
    };

    // ----- Printing3DTexture2CoordMaterialGroup class --------------------
    constexpr const char* const _type_name_Printing3DTexture2CoordMaterialGroup = "Printing3DTexture2CoordMaterialGroup";

    static PyObject* _new_Printing3DTexture2CoordMaterialGroup(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DTexture2CoordMaterialGroup(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DTexture2CoordMaterialGroup_get_MaterialGroupId(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialGroupId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DTexture2CoordMaterialGroup_get_Texture2Coords(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Texture2Coords());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Printing3DTexture2CoordMaterialGroup_get_Texture(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Texture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DTexture2CoordMaterialGroup_put_Texture(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DModelTexture>(arg);

            self->obj.Texture(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DTexture2CoordMaterialGroup(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DTexture2CoordMaterialGroup[] = {
        { "_from", (PyCFunction)_from_Printing3DTexture2CoordMaterialGroup, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DTexture2CoordMaterialGroup[] = {
        { const_cast<char*>("material_group_id"), (getter)Printing3DTexture2CoordMaterialGroup_get_MaterialGroupId, nullptr, nullptr, nullptr },
        { const_cast<char*>("texture2_coords"), (getter)Printing3DTexture2CoordMaterialGroup_get_Texture2Coords, nullptr, nullptr, nullptr },
        { const_cast<char*>("texture"), (getter)Printing3DTexture2CoordMaterialGroup_get_Texture, (setter)Printing3DTexture2CoordMaterialGroup_put_Texture, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DTexture2CoordMaterialGroup[] = 
    {
        { Py_tp_new, _new_Printing3DTexture2CoordMaterialGroup },
        { Py_tp_dealloc, _dealloc_Printing3DTexture2CoordMaterialGroup },
        { Py_tp_methods, _methods_Printing3DTexture2CoordMaterialGroup },
        { Py_tp_getset, _getset_Printing3DTexture2CoordMaterialGroup },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DTexture2CoordMaterialGroup =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DTexture2CoordMaterialGroup",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DTexture2CoordMaterialGroup
    };

    // ----- Printing3DTextureResource class --------------------
    constexpr const char* const _type_name_Printing3DTextureResource = "Printing3DTextureResource";

    static PyObject* _new_Printing3DTextureResource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DTextureResource instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Printing3DTextureResource(py::wrapper::Windows::Graphics::Printing3D::Printing3DTextureResource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Printing3DTextureResource_get_TextureData(py::wrapper::Windows::Graphics::Printing3D::Printing3DTextureResource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TextureData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DTextureResource_put_TextureData(py::wrapper::Windows::Graphics::Printing3D::Printing3DTextureResource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamWithContentType>(arg);

            self->obj.TextureData(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DTextureResource_get_Name(py::wrapper::Windows::Graphics::Printing3D::Printing3DTextureResource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DTextureResource_put_Name(py::wrapper::Windows::Graphics::Printing3D::Printing3DTextureResource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_Printing3DTextureResource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing3D::Printing3DTextureResource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Printing3DTextureResource[] = {
        { "_from", (PyCFunction)_from_Printing3DTextureResource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Printing3DTextureResource[] = {
        { const_cast<char*>("texture_data"), (getter)Printing3DTextureResource_get_TextureData, (setter)Printing3DTextureResource_put_TextureData, nullptr, nullptr },
        { const_cast<char*>("name"), (getter)Printing3DTextureResource_get_Name, (setter)Printing3DTextureResource_put_Name, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DTextureResource[] = 
    {
        { Py_tp_new, _new_Printing3DTextureResource },
        { Py_tp_dealloc, _dealloc_Printing3DTextureResource },
        { Py_tp_methods, _methods_Printing3DTextureResource },
        { Py_tp_getset, _getset_Printing3DTextureResource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DTextureResource =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DTextureResource",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DTextureResource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DTextureResource
    };

    // ----- Printing3DBufferDescription struct --------------------
    constexpr const char* const _type_name_Printing3DBufferDescription = "Printing3DBufferDescription";

    PyObject* _new_Printing3DBufferDescription(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        int32_t _Format{};
        uint32_t _Stride{};

        static const char* kwlist[] = {"format", "stride", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "iI", const_cast<char**>(kwlist), &_Format, &_Stride))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription return_value{ static_cast<winrt::Windows::Graphics::Printing3D::Printing3DBufferFormat>(_Format), _Stride };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_Printing3DBufferDescription(py::wrapper::Windows::Graphics::Printing3D::Printing3DBufferDescription* self)
    {
    }

    static PyObject* Printing3DBufferDescription_get_Format(py::wrapper::Windows::Graphics::Printing3D::Printing3DBufferDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Format);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DBufferDescription_set_Format(py::wrapper::Windows::Graphics::Printing3D::Printing3DBufferDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Format = py::converter<winrt::Windows::Graphics::Printing3D::Printing3DBufferFormat>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Printing3DBufferDescription_get_Stride(py::wrapper::Windows::Graphics::Printing3D::Printing3DBufferDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Stride);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Printing3DBufferDescription_set_Stride(py::wrapper::Windows::Graphics::Printing3D::Printing3DBufferDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Stride = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Printing3DBufferDescription[] = {
        { const_cast<char*>("format"), (getter)Printing3DBufferDescription_get_Format, (setter)Printing3DBufferDescription_set_Format, nullptr, nullptr },
        { const_cast<char*>("stride"), (getter)Printing3DBufferDescription_get_Stride, (setter)Printing3DBufferDescription_set_Stride, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Printing3DBufferDescription[] = 
    {
        { Py_tp_new, _new_Printing3DBufferDescription },
        { Py_tp_dealloc, _dealloc_Printing3DBufferDescription },
        { Py_tp_getset, _getset_Printing3DBufferDescription },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Printing3DBufferDescription =
    {
        "_winrt_Windows_Graphics_Printing3D.Printing3DBufferDescription",
        sizeof(py::wrapper::Windows::Graphics::Printing3D::Printing3DBufferDescription),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Printing3DBufferDescription
    };

    // ----- Windows.Graphics.Printing3D Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DManager>::python_type = py::register_python_type(module, _type_name_Print3DManager, &_type_spec_Print3DManager, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTask>::python_type = py::register_python_type(module, _type_name_Print3DTask, &_type_spec_Print3DTask, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs>::python_type = py::register_python_type(module, _type_name_Print3DTaskCompletedEventArgs, &_type_spec_Print3DTaskCompletedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskRequest>::python_type = py::register_python_type(module, _type_name_Print3DTaskRequest, &_type_spec_Print3DTaskRequest, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_Print3DTaskRequestedEventArgs, &_type_spec_Print3DTaskRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs>::python_type = py::register_python_type(module, _type_name_Print3DTaskSourceChangedEventArgs, &_type_spec_Print3DTaskSourceChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs>::python_type = py::register_python_type(module, _type_name_Print3DTaskSourceRequestedArgs, &_type_spec_Print3DTaskSourceRequestedArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3D3MFPackage>::python_type = py::register_python_type(module, _type_name_Printing3D3MFPackage, &_type_spec_Printing3D3MFPackage, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterial>::python_type = py::register_python_type(module, _type_name_Printing3DBaseMaterial, &_type_spec_Printing3DBaseMaterial, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup>::python_type = py::register_python_type(module, _type_name_Printing3DBaseMaterialGroup, &_type_spec_Printing3DBaseMaterialGroup, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DColorMaterial>::python_type = py::register_python_type(module, _type_name_Printing3DColorMaterial, &_type_spec_Printing3DColorMaterial, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DColorMaterialGroup>::python_type = py::register_python_type(module, _type_name_Printing3DColorMaterialGroup, &_type_spec_Printing3DColorMaterialGroup, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DComponent>::python_type = py::register_python_type(module, _type_name_Printing3DComponent, &_type_spec_Printing3DComponent, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DComponentWithMatrix>::python_type = py::register_python_type(module, _type_name_Printing3DComponentWithMatrix, &_type_spec_Printing3DComponentWithMatrix, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterial>::python_type = py::register_python_type(module, _type_name_Printing3DCompositeMaterial, &_type_spec_Printing3DCompositeMaterial, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup>::python_type = py::register_python_type(module, _type_name_Printing3DCompositeMaterialGroup, &_type_spec_Printing3DCompositeMaterialGroup, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DFaceReductionOptions>::python_type = py::register_python_type(module, _type_name_Printing3DFaceReductionOptions, &_type_spec_Printing3DFaceReductionOptions, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMaterial>::python_type = py::register_python_type(module, _type_name_Printing3DMaterial, &_type_spec_Printing3DMaterial, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMesh>::python_type = py::register_python_type(module, _type_name_Printing3DMesh, &_type_spec_Printing3DMesh, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMeshVerificationResult>::python_type = py::register_python_type(module, _type_name_Printing3DMeshVerificationResult, &_type_spec_Printing3DMeshVerificationResult, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DModel>::python_type = py::register_python_type(module, _type_name_Printing3DModel, &_type_spec_Printing3DModel, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DModelTexture>::python_type = py::register_python_type(module, _type_name_Printing3DModelTexture, &_type_spec_Printing3DModelTexture, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial>::python_type = py::register_python_type(module, _type_name_Printing3DMultiplePropertyMaterial, &_type_spec_Printing3DMultiplePropertyMaterial, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup>::python_type = py::register_python_type(module, _type_name_Printing3DMultiplePropertyMaterialGroup, &_type_spec_Printing3DMultiplePropertyMaterialGroup, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial>::python_type = py::register_python_type(module, _type_name_Printing3DTexture2CoordMaterial, &_type_spec_Printing3DTexture2CoordMaterial, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup>::python_type = py::register_python_type(module, _type_name_Printing3DTexture2CoordMaterialGroup, &_type_spec_Printing3DTexture2CoordMaterialGroup, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DTextureResource>::python_type = py::register_python_type(module, _type_name_Printing3DTextureResource, &_type_spec_Printing3DTextureResource, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing3D::Printing3DBufferDescription>::python_type = py::register_python_type(module, _type_name_Printing3DBufferDescription, &_type_spec_Printing3DBufferDescription, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Graphics.Printing3D");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Graphics_Printing3D",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Graphics::Printing3D

PyMODINIT_FUNC
PyInit__winrt_Windows_Graphics_Printing3D (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Graphics::Printing3D::module_def);
}
