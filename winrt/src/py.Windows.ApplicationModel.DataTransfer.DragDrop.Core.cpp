// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.DataTransfer.DragDrop.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget>::python_type;

namespace py::cpp::Windows::ApplicationModel::DataTransfer::DragDrop::Core
{
    // ----- CoreDragDropManager class --------------------
    constexpr const char* const _type_name_CoreDragDropManager = "CoreDragDropManager";

    static PyObject* _new_CoreDragDropManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreDragDropManager);
        return nullptr;
    }

    static void _dealloc_CoreDragDropManager(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreDragDropManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDragDropManager_get_AreConcurrentOperationsEnabled(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AreConcurrentOperationsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDragDropManager_put_AreConcurrentOperationsEnabled(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AreConcurrentOperationsEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreDragDropManager_add_TargetRequested(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager, winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs>>(arg);

            return py::convert(self->obj.TargetRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreDragDropManager_remove_TargetRequested(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TargetRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreDragDropManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreDragDropManager[] = {
        { "get_for_current_view", (PyCFunction)CoreDragDropManager_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "add_target_requested", (PyCFunction)CoreDragDropManager_add_TargetRequested, METH_O, nullptr },
        { "remove_target_requested", (PyCFunction)CoreDragDropManager_remove_TargetRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreDragDropManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreDragDropManager[] = {
        { const_cast<char*>("are_concurrent_operations_enabled"), (getter)CoreDragDropManager_get_AreConcurrentOperationsEnabled, (setter)CoreDragDropManager_put_AreConcurrentOperationsEnabled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreDragDropManager[] = 
    {
        { Py_tp_new, _new_CoreDragDropManager },
        { Py_tp_dealloc, _dealloc_CoreDragDropManager },
        { Py_tp_methods, _methods_CoreDragDropManager },
        { Py_tp_getset, _getset_CoreDragDropManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreDragDropManager =
    {
        "_winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core.CoreDragDropManager",
        sizeof(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreDragDropManager
    };

    // ----- CoreDragInfo class --------------------
    constexpr const char* const _type_name_CoreDragInfo = "CoreDragInfo";

    static PyObject* _new_CoreDragInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreDragInfo);
        return nullptr;
    }

    static void _dealloc_CoreDragInfo(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreDragInfo_get_Data(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Data());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreDragInfo_get_Modifiers(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Modifiers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreDragInfo_get_Position(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreDragInfo_get_AllowedOperations(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowedOperations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreDragInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreDragInfo[] = {
        { "_from", (PyCFunction)_from_CoreDragInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreDragInfo[] = {
        { const_cast<char*>("data"), (getter)CoreDragInfo_get_Data, nullptr, nullptr, nullptr },
        { const_cast<char*>("modifiers"), (getter)CoreDragInfo_get_Modifiers, nullptr, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)CoreDragInfo_get_Position, nullptr, nullptr, nullptr },
        { const_cast<char*>("allowed_operations"), (getter)CoreDragInfo_get_AllowedOperations, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreDragInfo[] = 
    {
        { Py_tp_new, _new_CoreDragInfo },
        { Py_tp_dealloc, _dealloc_CoreDragInfo },
        { Py_tp_methods, _methods_CoreDragInfo },
        { Py_tp_getset, _getset_CoreDragInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreDragInfo =
    {
        "_winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core.CoreDragInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreDragInfo
    };

    // ----- CoreDragOperation class --------------------
    constexpr const char* const _type_name_CoreDragOperation = "CoreDragOperation";

    static PyObject* _new_CoreDragOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CoreDragOperation(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreDragOperation_SetDragUIContentFromSoftwareBitmap(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);

                self->obj.SetDragUIContentFromSoftwareBitmap(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Point>(args, 1);

                self->obj.SetDragUIContentFromSoftwareBitmap(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDragOperation_SetPointerId(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.SetPointerId(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDragOperation_StartAsync(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StartAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDragOperation_get_DragUIContentMode(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DragUIContentMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDragOperation_put_DragUIContentMode(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIContentMode>(arg);

            self->obj.DragUIContentMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreDragOperation_get_Data(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Data());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreDragOperation_get_AllowedOperations(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowedOperations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDragOperation_put_AllowedOperations(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation>(arg);

            self->obj.AllowedOperations(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CoreDragOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreDragOperation[] = {
        { "set_drag_u_i_content_from_software_bitmap", (PyCFunction)CoreDragOperation_SetDragUIContentFromSoftwareBitmap, METH_VARARGS, nullptr },
        { "set_pointer_id", (PyCFunction)CoreDragOperation_SetPointerId, METH_VARARGS, nullptr },
        { "start_async", (PyCFunction)CoreDragOperation_StartAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreDragOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreDragOperation[] = {
        { const_cast<char*>("drag_u_i_content_mode"), (getter)CoreDragOperation_get_DragUIContentMode, (setter)CoreDragOperation_put_DragUIContentMode, nullptr, nullptr },
        { const_cast<char*>("data"), (getter)CoreDragOperation_get_Data, nullptr, nullptr, nullptr },
        { const_cast<char*>("allowed_operations"), (getter)CoreDragOperation_get_AllowedOperations, (setter)CoreDragOperation_put_AllowedOperations, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreDragOperation[] = 
    {
        { Py_tp_new, _new_CoreDragOperation },
        { Py_tp_dealloc, _dealloc_CoreDragOperation },
        { Py_tp_methods, _methods_CoreDragOperation },
        { Py_tp_getset, _getset_CoreDragOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreDragOperation =
    {
        "_winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core.CoreDragOperation",
        sizeof(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreDragOperation
    };

    // ----- CoreDragUIOverride class --------------------
    constexpr const char* const _type_name_CoreDragUIOverride = "CoreDragUIOverride";

    static PyObject* _new_CoreDragUIOverride(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreDragUIOverride);
        return nullptr;
    }

    static void _dealloc_CoreDragUIOverride(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreDragUIOverride_Clear(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDragUIOverride_SetContentFromSoftwareBitmap(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);

                self->obj.SetContentFromSoftwareBitmap(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Point>(args, 1);

                self->obj.SetContentFromSoftwareBitmap(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreDragUIOverride_get_IsGlyphVisible(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGlyphVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDragUIOverride_put_IsGlyphVisible(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGlyphVisible(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreDragUIOverride_get_IsContentVisible(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsContentVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDragUIOverride_put_IsContentVisible(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsContentVisible(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreDragUIOverride_get_IsCaptionVisible(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCaptionVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDragUIOverride_put_IsCaptionVisible(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsCaptionVisible(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreDragUIOverride_get_Caption(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Caption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreDragUIOverride_put_Caption(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Caption(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CoreDragUIOverride(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreDragUIOverride[] = {
        { "clear", (PyCFunction)CoreDragUIOverride_Clear, METH_VARARGS, nullptr },
        { "set_content_from_software_bitmap", (PyCFunction)CoreDragUIOverride_SetContentFromSoftwareBitmap, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreDragUIOverride, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreDragUIOverride[] = {
        { const_cast<char*>("is_glyph_visible"), (getter)CoreDragUIOverride_get_IsGlyphVisible, (setter)CoreDragUIOverride_put_IsGlyphVisible, nullptr, nullptr },
        { const_cast<char*>("is_content_visible"), (getter)CoreDragUIOverride_get_IsContentVisible, (setter)CoreDragUIOverride_put_IsContentVisible, nullptr, nullptr },
        { const_cast<char*>("is_caption_visible"), (getter)CoreDragUIOverride_get_IsCaptionVisible, (setter)CoreDragUIOverride_put_IsCaptionVisible, nullptr, nullptr },
        { const_cast<char*>("caption"), (getter)CoreDragUIOverride_get_Caption, (setter)CoreDragUIOverride_put_Caption, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreDragUIOverride[] = 
    {
        { Py_tp_new, _new_CoreDragUIOverride },
        { Py_tp_dealloc, _dealloc_CoreDragUIOverride },
        { Py_tp_methods, _methods_CoreDragUIOverride },
        { Py_tp_getset, _getset_CoreDragUIOverride },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreDragUIOverride =
    {
        "_winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core.CoreDragUIOverride",
        sizeof(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreDragUIOverride
    };

    // ----- CoreDropOperationTargetRequestedEventArgs class --------------------
    constexpr const char* const _type_name_CoreDropOperationTargetRequestedEventArgs = "CoreDropOperationTargetRequestedEventArgs";

    static PyObject* _new_CoreDropOperationTargetRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreDropOperationTargetRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_CoreDropOperationTargetRequestedEventArgs(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreDropOperationTargetRequestedEventArgs_SetTarget(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget>(args, 0);

                self->obj.SetTarget(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_CoreDropOperationTargetRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreDropOperationTargetRequestedEventArgs[] = {
        { "set_target", (PyCFunction)CoreDropOperationTargetRequestedEventArgs_SetTarget, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CoreDropOperationTargetRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreDropOperationTargetRequestedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreDropOperationTargetRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_CoreDropOperationTargetRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_CoreDropOperationTargetRequestedEventArgs },
        { Py_tp_methods, _methods_CoreDropOperationTargetRequestedEventArgs },
        { Py_tp_getset, _getset_CoreDropOperationTargetRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreDropOperationTargetRequestedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core.CoreDropOperationTargetRequestedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreDropOperationTargetRequestedEventArgs
    };

    // ----- ICoreDropOperationTarget interface --------------------
    constexpr const char* const _type_name_ICoreDropOperationTarget = "ICoreDropOperationTarget";

    static PyObject* _new_ICoreDropOperationTarget(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICoreDropOperationTarget);
        return nullptr;
    }

    static void _dealloc_ICoreDropOperationTarget(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICoreDropOperationTarget_DropAsync(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo>(args, 0);

                return py::convert(self->obj.DropAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreDropOperationTarget_EnterAsync(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride>(args, 1);

                return py::convert(self->obj.EnterAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreDropOperationTarget_LeaveAsync(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo>(args, 0);

                return py::convert(self->obj.LeaveAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ICoreDropOperationTarget_OverAsync(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride>(args, 1);

                return py::convert(self->obj.OverAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ICoreDropOperationTarget(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICoreDropOperationTarget[] = {
        { "drop_async", (PyCFunction)ICoreDropOperationTarget_DropAsync, METH_VARARGS, nullptr },
        { "enter_async", (PyCFunction)ICoreDropOperationTarget_EnterAsync, METH_VARARGS, nullptr },
        { "leave_async", (PyCFunction)ICoreDropOperationTarget_LeaveAsync, METH_VARARGS, nullptr },
        { "over_async", (PyCFunction)ICoreDropOperationTarget_OverAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ICoreDropOperationTarget, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICoreDropOperationTarget[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ICoreDropOperationTarget[] = 
    {
        { Py_tp_new, _new_ICoreDropOperationTarget },
        { Py_tp_dealloc, _dealloc_ICoreDropOperationTarget },
        { Py_tp_methods, _methods_ICoreDropOperationTarget },
        { Py_tp_getset, _getset_ICoreDropOperationTarget },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICoreDropOperationTarget =
    {
        "_winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDropOperationTarget",
        sizeof(py::wrapper::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICoreDropOperationTarget
    };

    // ----- Windows.ApplicationModel.DataTransfer.DragDrop.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager>::python_type = py::register_python_type(module, _type_name_CoreDragDropManager, &_type_spec_CoreDragDropManager, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo>::python_type = py::register_python_type(module, _type_name_CoreDragInfo, &_type_spec_CoreDragInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation>::python_type = py::register_python_type(module, _type_name_CoreDragOperation, &_type_spec_CoreDragOperation, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride>::python_type = py::register_python_type(module, _type_name_CoreDragUIOverride, &_type_spec_CoreDragUIOverride, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_CoreDropOperationTargetRequestedEventArgs, &_type_spec_CoreDropOperationTargetRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget>::python_type = py::register_python_type(module, _type_name_ICoreDropOperationTarget, &_type_spec_ICoreDropOperationTarget, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.DataTransfer.DragDrop.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::DataTransfer::DragDrop::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_DataTransfer_DragDrop_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::DataTransfer::DragDrop::Core::module_def);
}
