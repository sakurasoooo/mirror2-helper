// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Data.Text.h"

PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::AlternateWordForm>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::SelectableWordSegment>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::SelectableWordsSegmenter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::SemanticTextQuery>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextConversionGenerator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextPhoneme>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextPredictionGenerator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextReverseConversionGenerator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::UnicodeCharacters>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::WordSegment>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::WordsSegmenter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Text::TextSegment>::python_type;

PyObject* py::converter<winrt::Windows::Data::Text::TextSegment>::convert(winrt::Windows::Data::Text::TextSegment instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Data::Text::TextSegment>());
}
winrt::Windows::Data::Text::TextSegment py::converter<winrt::Windows::Data::Text::TextSegment>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Data::Text::TextSegment>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Data::Text::TextSegment>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Data::Text::TextSegment return_value{};

    PyObject* py_StartPosition = PyDict_GetItemString(obj, "start_position");
    if (!py_StartPosition) { throw winrt::hresult_invalid_argument(); }
    return_value.StartPosition = converter<uint32_t>::convert_to(py_StartPosition);

    PyObject* py_Length = PyDict_GetItemString(obj, "length");
    if (!py_Length) { throw winrt::hresult_invalid_argument(); }
    return_value.Length = converter<uint32_t>::convert_to(py_Length);

    return return_value;
}

namespace py::cpp::Windows::Data::Text
{
    // ----- AlternateWordForm class --------------------
    constexpr const char* const _type_name_AlternateWordForm = "AlternateWordForm";

    static PyObject* _new_AlternateWordForm(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AlternateWordForm);
        return nullptr;
    }

    static void _dealloc_AlternateWordForm(py::wrapper::Windows::Data::Text::AlternateWordForm* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AlternateWordForm_get_AlternateText(py::wrapper::Windows::Data::Text::AlternateWordForm* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlternateText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AlternateWordForm_get_NormalizationFormat(py::wrapper::Windows::Data::Text::AlternateWordForm* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NormalizationFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AlternateWordForm_get_SourceTextSegment(py::wrapper::Windows::Data::Text::AlternateWordForm* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceTextSegment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AlternateWordForm(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::AlternateWordForm>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AlternateWordForm[] = {
        { "_from", (PyCFunction)_from_AlternateWordForm, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AlternateWordForm[] = {
        { const_cast<char*>("alternate_text"), (getter)AlternateWordForm_get_AlternateText, nullptr, nullptr, nullptr },
        { const_cast<char*>("normalization_format"), (getter)AlternateWordForm_get_NormalizationFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("source_text_segment"), (getter)AlternateWordForm_get_SourceTextSegment, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AlternateWordForm[] = 
    {
        { Py_tp_new, _new_AlternateWordForm },
        { Py_tp_dealloc, _dealloc_AlternateWordForm },
        { Py_tp_methods, _methods_AlternateWordForm },
        { Py_tp_getset, _getset_AlternateWordForm },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AlternateWordForm =
    {
        "_winrt_Windows_Data_Text.AlternateWordForm",
        sizeof(py::wrapper::Windows::Data::Text::AlternateWordForm),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AlternateWordForm
    };

    // ----- SelectableWordSegment class --------------------
    constexpr const char* const _type_name_SelectableWordSegment = "SelectableWordSegment";

    static PyObject* _new_SelectableWordSegment(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SelectableWordSegment);
        return nullptr;
    }

    static void _dealloc_SelectableWordSegment(py::wrapper::Windows::Data::Text::SelectableWordSegment* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SelectableWordSegment_get_SourceTextSegment(py::wrapper::Windows::Data::Text::SelectableWordSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceTextSegment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SelectableWordSegment_get_Text(py::wrapper::Windows::Data::Text::SelectableWordSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SelectableWordSegment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::SelectableWordSegment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SelectableWordSegment[] = {
        { "_from", (PyCFunction)_from_SelectableWordSegment, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SelectableWordSegment[] = {
        { const_cast<char*>("source_text_segment"), (getter)SelectableWordSegment_get_SourceTextSegment, nullptr, nullptr, nullptr },
        { const_cast<char*>("text"), (getter)SelectableWordSegment_get_Text, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SelectableWordSegment[] = 
    {
        { Py_tp_new, _new_SelectableWordSegment },
        { Py_tp_dealloc, _dealloc_SelectableWordSegment },
        { Py_tp_methods, _methods_SelectableWordSegment },
        { Py_tp_getset, _getset_SelectableWordSegment },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SelectableWordSegment =
    {
        "_winrt_Windows_Data_Text.SelectableWordSegment",
        sizeof(py::wrapper::Windows::Data::Text::SelectableWordSegment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SelectableWordSegment
    };

    // ----- SelectableWordsSegmenter class --------------------
    constexpr const char* const _type_name_SelectableWordsSegmenter = "SelectableWordsSegmenter";

    static PyObject* _new_SelectableWordsSegmenter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::SelectableWordsSegmenter instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SelectableWordsSegmenter(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SelectableWordsSegmenter_GetTokenAt(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetTokenAt(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SelectableWordsSegmenter_GetTokens(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetTokens(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SelectableWordsSegmenter_Tokenize(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Data::Text::SelectableWordSegmentsTokenizingHandler>(args, 2);

                self->obj.Tokenize(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SelectableWordsSegmenter_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SelectableWordsSegmenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::SelectableWordsSegmenter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SelectableWordsSegmenter[] = {
        { "get_token_at", (PyCFunction)SelectableWordsSegmenter_GetTokenAt, METH_VARARGS, nullptr },
        { "get_tokens", (PyCFunction)SelectableWordsSegmenter_GetTokens, METH_VARARGS, nullptr },
        { "tokenize", (PyCFunction)SelectableWordsSegmenter_Tokenize, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SelectableWordsSegmenter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SelectableWordsSegmenter[] = {
        { const_cast<char*>("resolved_language"), (getter)SelectableWordsSegmenter_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SelectableWordsSegmenter[] = 
    {
        { Py_tp_new, _new_SelectableWordsSegmenter },
        { Py_tp_dealloc, _dealloc_SelectableWordsSegmenter },
        { Py_tp_methods, _methods_SelectableWordsSegmenter },
        { Py_tp_getset, _getset_SelectableWordsSegmenter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SelectableWordsSegmenter =
    {
        "_winrt_Windows_Data_Text.SelectableWordsSegmenter",
        sizeof(py::wrapper::Windows::Data::Text::SelectableWordsSegmenter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SelectableWordsSegmenter
    };

    // ----- SemanticTextQuery class --------------------
    constexpr const char* const _type_name_SemanticTextQuery = "SemanticTextQuery";

    static PyObject* _new_SemanticTextQuery(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::SemanticTextQuery instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Data::Text::SemanticTextQuery instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SemanticTextQuery(py::wrapper::Windows::Data::Text::SemanticTextQuery* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SemanticTextQuery_Find(py::wrapper::Windows::Data::Text::SemanticTextQuery* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Find(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SemanticTextQuery_FindInProperty(py::wrapper::Windows::Data::Text::SemanticTextQuery* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.FindInProperty(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SemanticTextQuery(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::SemanticTextQuery>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SemanticTextQuery[] = {
        { "find", (PyCFunction)SemanticTextQuery_Find, METH_VARARGS, nullptr },
        { "find_in_property", (PyCFunction)SemanticTextQuery_FindInProperty, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SemanticTextQuery, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SemanticTextQuery[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SemanticTextQuery[] = 
    {
        { Py_tp_new, _new_SemanticTextQuery },
        { Py_tp_dealloc, _dealloc_SemanticTextQuery },
        { Py_tp_methods, _methods_SemanticTextQuery },
        { Py_tp_getset, _getset_SemanticTextQuery },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SemanticTextQuery =
    {
        "_winrt_Windows_Data_Text.SemanticTextQuery",
        sizeof(py::wrapper::Windows::Data::Text::SemanticTextQuery),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SemanticTextQuery
    };

    // ----- TextConversionGenerator class --------------------
    constexpr const char* const _type_name_TextConversionGenerator = "TextConversionGenerator";

    static PyObject* _new_TextConversionGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::TextConversionGenerator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_TextConversionGenerator(py::wrapper::Windows::Data::Text::TextConversionGenerator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TextConversionGenerator_GetCandidatesAsync(py::wrapper::Windows::Data::Text::TextConversionGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetCandidatesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetCandidatesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextConversionGenerator_get_LanguageAvailableButNotInstalled(py::wrapper::Windows::Data::Text::TextConversionGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LanguageAvailableButNotInstalled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextConversionGenerator_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::TextConversionGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TextConversionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextConversionGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextConversionGenerator[] = {
        { "get_candidates_async", (PyCFunction)TextConversionGenerator_GetCandidatesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TextConversionGenerator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TextConversionGenerator[] = {
        { const_cast<char*>("language_available_but_not_installed"), (getter)TextConversionGenerator_get_LanguageAvailableButNotInstalled, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)TextConversionGenerator_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TextConversionGenerator[] = 
    {
        { Py_tp_new, _new_TextConversionGenerator },
        { Py_tp_dealloc, _dealloc_TextConversionGenerator },
        { Py_tp_methods, _methods_TextConversionGenerator },
        { Py_tp_getset, _getset_TextConversionGenerator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TextConversionGenerator =
    {
        "_winrt_Windows_Data_Text.TextConversionGenerator",
        sizeof(py::wrapper::Windows::Data::Text::TextConversionGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextConversionGenerator
    };

    // ----- TextPhoneme class --------------------
    constexpr const char* const _type_name_TextPhoneme = "TextPhoneme";

    static PyObject* _new_TextPhoneme(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TextPhoneme);
        return nullptr;
    }

    static void _dealloc_TextPhoneme(py::wrapper::Windows::Data::Text::TextPhoneme* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TextPhoneme_get_DisplayText(py::wrapper::Windows::Data::Text::TextPhoneme* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextPhoneme_get_ReadingText(py::wrapper::Windows::Data::Text::TextPhoneme* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ReadingText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TextPhoneme(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextPhoneme>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextPhoneme[] = {
        { "_from", (PyCFunction)_from_TextPhoneme, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TextPhoneme[] = {
        { const_cast<char*>("display_text"), (getter)TextPhoneme_get_DisplayText, nullptr, nullptr, nullptr },
        { const_cast<char*>("reading_text"), (getter)TextPhoneme_get_ReadingText, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TextPhoneme[] = 
    {
        { Py_tp_new, _new_TextPhoneme },
        { Py_tp_dealloc, _dealloc_TextPhoneme },
        { Py_tp_methods, _methods_TextPhoneme },
        { Py_tp_getset, _getset_TextPhoneme },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TextPhoneme =
    {
        "_winrt_Windows_Data_Text.TextPhoneme",
        sizeof(py::wrapper::Windows::Data::Text::TextPhoneme),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextPhoneme
    };

    // ----- TextPredictionGenerator class --------------------
    constexpr const char* const _type_name_TextPredictionGenerator = "TextPredictionGenerator";

    static PyObject* _new_TextPredictionGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::TextPredictionGenerator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_TextPredictionGenerator(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TextPredictionGenerator_GetCandidatesAsync(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetCandidatesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetCandidatesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Data::Text::TextPredictionOptions>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 3);

                return py::convert(self->obj.GetCandidatesAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_GetNextWordCandidatesAsync(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(self->obj.GetNextWordCandidatesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_get_LanguageAvailableButNotInstalled(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LanguageAvailableButNotInstalled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextPredictionGenerator_get_InputScope(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputScope());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TextPredictionGenerator_put_InputScope(py::wrapper::Windows::Data::Text::TextPredictionGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Text::Core::CoreTextInputScope>(arg);

            self->obj.InputScope(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_TextPredictionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextPredictionGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextPredictionGenerator[] = {
        { "get_candidates_async", (PyCFunction)TextPredictionGenerator_GetCandidatesAsync, METH_VARARGS, nullptr },
        { "get_next_word_candidates_async", (PyCFunction)TextPredictionGenerator_GetNextWordCandidatesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TextPredictionGenerator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TextPredictionGenerator[] = {
        { const_cast<char*>("language_available_but_not_installed"), (getter)TextPredictionGenerator_get_LanguageAvailableButNotInstalled, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)TextPredictionGenerator_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("input_scope"), (getter)TextPredictionGenerator_get_InputScope, (setter)TextPredictionGenerator_put_InputScope, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TextPredictionGenerator[] = 
    {
        { Py_tp_new, _new_TextPredictionGenerator },
        { Py_tp_dealloc, _dealloc_TextPredictionGenerator },
        { Py_tp_methods, _methods_TextPredictionGenerator },
        { Py_tp_getset, _getset_TextPredictionGenerator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TextPredictionGenerator =
    {
        "_winrt_Windows_Data_Text.TextPredictionGenerator",
        sizeof(py::wrapper::Windows::Data::Text::TextPredictionGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextPredictionGenerator
    };

    // ----- TextReverseConversionGenerator class --------------------
    constexpr const char* const _type_name_TextReverseConversionGenerator = "TextReverseConversionGenerator";

    static PyObject* _new_TextReverseConversionGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::TextReverseConversionGenerator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_TextReverseConversionGenerator(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TextReverseConversionGenerator_ConvertBackAsync(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ConvertBackAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextReverseConversionGenerator_GetPhonemesAsync(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetPhonemesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TextReverseConversionGenerator_get_LanguageAvailableButNotInstalled(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LanguageAvailableButNotInstalled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TextReverseConversionGenerator_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TextReverseConversionGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::TextReverseConversionGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TextReverseConversionGenerator[] = {
        { "convert_back_async", (PyCFunction)TextReverseConversionGenerator_ConvertBackAsync, METH_VARARGS, nullptr },
        { "get_phonemes_async", (PyCFunction)TextReverseConversionGenerator_GetPhonemesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TextReverseConversionGenerator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TextReverseConversionGenerator[] = {
        { const_cast<char*>("language_available_but_not_installed"), (getter)TextReverseConversionGenerator_get_LanguageAvailableButNotInstalled, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)TextReverseConversionGenerator_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TextReverseConversionGenerator[] = 
    {
        { Py_tp_new, _new_TextReverseConversionGenerator },
        { Py_tp_dealloc, _dealloc_TextReverseConversionGenerator },
        { Py_tp_methods, _methods_TextReverseConversionGenerator },
        { Py_tp_getset, _getset_TextReverseConversionGenerator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TextReverseConversionGenerator =
    {
        "_winrt_Windows_Data_Text.TextReverseConversionGenerator",
        sizeof(py::wrapper::Windows::Data::Text::TextReverseConversionGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextReverseConversionGenerator
    };

    // ----- UnicodeCharacters class --------------------
    constexpr const char* const _type_name_UnicodeCharacters = "UnicodeCharacters";

    static PyObject* _new_UnicodeCharacters(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UnicodeCharacters);
        return nullptr;
    }

    static PyObject* UnicodeCharacters_GetCodepointFromSurrogatePair(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::GetCodepointFromSurrogatePair(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_GetGeneralCategory(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::GetGeneralCategory(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_GetNumericType(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::GetNumericType(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_GetSurrogatePairFromCodepoint(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                char16_t param1 {  };
                char16_t param2 {  };

                winrt::Windows::Data::Text::UnicodeCharacters::GetSurrogatePairFromCodepoint(param0, param1, param2);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out1.get(), out2.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsAlphabetic(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsAlphabetic(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsCased(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsCased(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsGraphemeBase(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsGraphemeBase(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsGraphemeExtend(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsGraphemeExtend(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsHighSurrogate(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsHighSurrogate(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsIdContinue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsIdContinue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsIdStart(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsIdStart(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsLowSurrogate(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsLowSurrogate(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsLowercase(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsLowercase(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsNoncharacter(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsNoncharacter(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsSupplementary(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsSupplementary(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsUppercase(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsUppercase(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnicodeCharacters_IsWhitespace(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Text::UnicodeCharacters::IsWhitespace(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_UnicodeCharacters[] = {
        { "get_codepoint_from_surrogate_pair", (PyCFunction)UnicodeCharacters_GetCodepointFromSurrogatePair, METH_VARARGS | METH_STATIC, nullptr },
        { "get_general_category", (PyCFunction)UnicodeCharacters_GetGeneralCategory, METH_VARARGS | METH_STATIC, nullptr },
        { "get_numeric_type", (PyCFunction)UnicodeCharacters_GetNumericType, METH_VARARGS | METH_STATIC, nullptr },
        { "get_surrogate_pair_from_codepoint", (PyCFunction)UnicodeCharacters_GetSurrogatePairFromCodepoint, METH_VARARGS | METH_STATIC, nullptr },
        { "is_alphabetic", (PyCFunction)UnicodeCharacters_IsAlphabetic, METH_VARARGS | METH_STATIC, nullptr },
        { "is_cased", (PyCFunction)UnicodeCharacters_IsCased, METH_VARARGS | METH_STATIC, nullptr },
        { "is_grapheme_base", (PyCFunction)UnicodeCharacters_IsGraphemeBase, METH_VARARGS | METH_STATIC, nullptr },
        { "is_grapheme_extend", (PyCFunction)UnicodeCharacters_IsGraphemeExtend, METH_VARARGS | METH_STATIC, nullptr },
        { "is_high_surrogate", (PyCFunction)UnicodeCharacters_IsHighSurrogate, METH_VARARGS | METH_STATIC, nullptr },
        { "is_id_continue", (PyCFunction)UnicodeCharacters_IsIdContinue, METH_VARARGS | METH_STATIC, nullptr },
        { "is_id_start", (PyCFunction)UnicodeCharacters_IsIdStart, METH_VARARGS | METH_STATIC, nullptr },
        { "is_low_surrogate", (PyCFunction)UnicodeCharacters_IsLowSurrogate, METH_VARARGS | METH_STATIC, nullptr },
        { "is_lowercase", (PyCFunction)UnicodeCharacters_IsLowercase, METH_VARARGS | METH_STATIC, nullptr },
        { "is_noncharacter", (PyCFunction)UnicodeCharacters_IsNoncharacter, METH_VARARGS | METH_STATIC, nullptr },
        { "is_supplementary", (PyCFunction)UnicodeCharacters_IsSupplementary, METH_VARARGS | METH_STATIC, nullptr },
        { "is_uppercase", (PyCFunction)UnicodeCharacters_IsUppercase, METH_VARARGS | METH_STATIC, nullptr },
        { "is_whitespace", (PyCFunction)UnicodeCharacters_IsWhitespace, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UnicodeCharacters[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UnicodeCharacters[] = 
    {
        { Py_tp_new, _new_UnicodeCharacters },
        { Py_tp_methods, _methods_UnicodeCharacters },
        { Py_tp_getset, _getset_UnicodeCharacters },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UnicodeCharacters =
    {
        "_winrt_Windows_Data_Text.UnicodeCharacters",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UnicodeCharacters
    };

    // ----- WordSegment class --------------------
    constexpr const char* const _type_name_WordSegment = "WordSegment";

    static PyObject* _new_WordSegment(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WordSegment);
        return nullptr;
    }

    static void _dealloc_WordSegment(py::wrapper::Windows::Data::Text::WordSegment* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WordSegment_get_AlternateForms(py::wrapper::Windows::Data::Text::WordSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlternateForms());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WordSegment_get_SourceTextSegment(py::wrapper::Windows::Data::Text::WordSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceTextSegment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WordSegment_get_Text(py::wrapper::Windows::Data::Text::WordSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WordSegment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::WordSegment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WordSegment[] = {
        { "_from", (PyCFunction)_from_WordSegment, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WordSegment[] = {
        { const_cast<char*>("alternate_forms"), (getter)WordSegment_get_AlternateForms, nullptr, nullptr, nullptr },
        { const_cast<char*>("source_text_segment"), (getter)WordSegment_get_SourceTextSegment, nullptr, nullptr, nullptr },
        { const_cast<char*>("text"), (getter)WordSegment_get_Text, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WordSegment[] = 
    {
        { Py_tp_new, _new_WordSegment },
        { Py_tp_dealloc, _dealloc_WordSegment },
        { Py_tp_methods, _methods_WordSegment },
        { Py_tp_getset, _getset_WordSegment },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WordSegment =
    {
        "_winrt_Windows_Data_Text.WordSegment",
        sizeof(py::wrapper::Windows::Data::Text::WordSegment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WordSegment
    };

    // ----- WordsSegmenter class --------------------
    constexpr const char* const _type_name_WordsSegmenter = "WordsSegmenter";

    static PyObject* _new_WordsSegmenter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Data::Text::WordsSegmenter instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WordsSegmenter(py::wrapper::Windows::Data::Text::WordsSegmenter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WordsSegmenter_GetTokenAt(py::wrapper::Windows::Data::Text::WordsSegmenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);

                return py::convert(self->obj.GetTokenAt(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WordsSegmenter_GetTokens(py::wrapper::Windows::Data::Text::WordsSegmenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetTokens(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WordsSegmenter_Tokenize(py::wrapper::Windows::Data::Text::WordsSegmenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Data::Text::WordSegmentsTokenizingHandler>(args, 2);

                self->obj.Tokenize(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WordsSegmenter_get_ResolvedLanguage(py::wrapper::Windows::Data::Text::WordsSegmenter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WordsSegmenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Text::WordsSegmenter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WordsSegmenter[] = {
        { "get_token_at", (PyCFunction)WordsSegmenter_GetTokenAt, METH_VARARGS, nullptr },
        { "get_tokens", (PyCFunction)WordsSegmenter_GetTokens, METH_VARARGS, nullptr },
        { "tokenize", (PyCFunction)WordsSegmenter_Tokenize, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WordsSegmenter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WordsSegmenter[] = {
        { const_cast<char*>("resolved_language"), (getter)WordsSegmenter_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WordsSegmenter[] = 
    {
        { Py_tp_new, _new_WordsSegmenter },
        { Py_tp_dealloc, _dealloc_WordsSegmenter },
        { Py_tp_methods, _methods_WordsSegmenter },
        { Py_tp_getset, _getset_WordsSegmenter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WordsSegmenter =
    {
        "_winrt_Windows_Data_Text.WordsSegmenter",
        sizeof(py::wrapper::Windows::Data::Text::WordsSegmenter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WordsSegmenter
    };

    // ----- TextSegment struct --------------------
    constexpr const char* const _type_name_TextSegment = "TextSegment";

    PyObject* _new_TextSegment(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Data::Text::TextSegment return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Data::Text::TextSegment>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        uint32_t _StartPosition{};
        uint32_t _Length{};

        static const char* kwlist[] = {"start_position", "length", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "II", const_cast<char**>(kwlist), &_StartPosition, &_Length))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Data::Text::TextSegment return_value{ _StartPosition, _Length };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_TextSegment(py::wrapper::Windows::Data::Text::TextSegment* self)
    {
    }

    static PyObject* TextSegment_get_StartPosition(py::wrapper::Windows::Data::Text::TextSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartPosition);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TextSegment_set_StartPosition(py::wrapper::Windows::Data::Text::TextSegment* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.StartPosition = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TextSegment_get_Length(py::wrapper::Windows::Data::Text::TextSegment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Length);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TextSegment_set_Length(py::wrapper::Windows::Data::Text::TextSegment* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Length = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_TextSegment[] = {
        { const_cast<char*>("start_position"), (getter)TextSegment_get_StartPosition, (setter)TextSegment_set_StartPosition, nullptr, nullptr },
        { const_cast<char*>("length"), (getter)TextSegment_get_Length, (setter)TextSegment_set_Length, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TextSegment[] = 
    {
        { Py_tp_new, _new_TextSegment },
        { Py_tp_dealloc, _dealloc_TextSegment },
        { Py_tp_getset, _getset_TextSegment },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TextSegment =
    {
        "_winrt_Windows_Data_Text.TextSegment",
        sizeof(py::wrapper::Windows::Data::Text::TextSegment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TextSegment
    };

    // ----- Windows.Data.Text Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Data::Text::AlternateWordForm>::python_type = py::register_python_type(module, _type_name_AlternateWordForm, &_type_spec_AlternateWordForm, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::SelectableWordSegment>::python_type = py::register_python_type(module, _type_name_SelectableWordSegment, &_type_spec_SelectableWordSegment, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::SelectableWordsSegmenter>::python_type = py::register_python_type(module, _type_name_SelectableWordsSegmenter, &_type_spec_SelectableWordsSegmenter, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::SemanticTextQuery>::python_type = py::register_python_type(module, _type_name_SemanticTextQuery, &_type_spec_SemanticTextQuery, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::TextConversionGenerator>::python_type = py::register_python_type(module, _type_name_TextConversionGenerator, &_type_spec_TextConversionGenerator, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::TextPhoneme>::python_type = py::register_python_type(module, _type_name_TextPhoneme, &_type_spec_TextPhoneme, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::TextPredictionGenerator>::python_type = py::register_python_type(module, _type_name_TextPredictionGenerator, &_type_spec_TextPredictionGenerator, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::TextReverseConversionGenerator>::python_type = py::register_python_type(module, _type_name_TextReverseConversionGenerator, &_type_spec_TextReverseConversionGenerator, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::UnicodeCharacters>::python_type = py::register_python_type(module, _type_name_UnicodeCharacters, &_type_spec_UnicodeCharacters, nullptr);
            py::winrt_type<winrt::Windows::Data::Text::WordSegment>::python_type = py::register_python_type(module, _type_name_WordSegment, &_type_spec_WordSegment, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::WordsSegmenter>::python_type = py::register_python_type(module, _type_name_WordsSegmenter, &_type_spec_WordsSegmenter, bases.get());
            py::winrt_type<winrt::Windows::Data::Text::TextSegment>::python_type = py::register_python_type(module, _type_name_TextSegment, &_type_spec_TextSegment, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Data.Text");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Data_Text",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Data::Text

PyMODINIT_FUNC
PyInit__winrt_Windows_Data_Text (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Data::Text::module_def);
}
