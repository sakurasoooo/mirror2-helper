// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::LowLevelDevicesAggregateProvider>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::LowLevelDevicesController>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::ILowLevelDevicesAggregateProvider>::python_type;

namespace py::cpp::Windows::Devices
{
    // ----- LowLevelDevicesAggregateProvider class --------------------
    constexpr const char* const _type_name_LowLevelDevicesAggregateProvider = "LowLevelDevicesAggregateProvider";

    static PyObject* _new_LowLevelDevicesAggregateProvider(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Adc::Provider::IAdcControllerProvider>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Pwm::Provider::IPwmControllerProvider>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Gpio::Provider::IGpioControllerProvider>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Devices::I2c::Provider::II2cControllerProvider>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>(args, 4);

                winrt::Windows::Devices::LowLevelDevicesAggregateProvider instance{ param0, param1, param2, param3, param4 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_LowLevelDevicesAggregateProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_AdcControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdcControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_GpioControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GpioControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_I2cControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.I2cControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_PwmControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PwmControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_SpiControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SpiControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LowLevelDevicesAggregateProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::LowLevelDevicesAggregateProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LowLevelDevicesAggregateProvider[] = {
        { "_from", (PyCFunction)_from_LowLevelDevicesAggregateProvider, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_LowLevelDevicesAggregateProvider[] = {
        { const_cast<char*>("adc_controller_provider"), (getter)LowLevelDevicesAggregateProvider_get_AdcControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("gpio_controller_provider"), (getter)LowLevelDevicesAggregateProvider_get_GpioControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("i2c_controller_provider"), (getter)LowLevelDevicesAggregateProvider_get_I2cControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("pwm_controller_provider"), (getter)LowLevelDevicesAggregateProvider_get_PwmControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("spi_controller_provider"), (getter)LowLevelDevicesAggregateProvider_get_SpiControllerProvider, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_LowLevelDevicesAggregateProvider[] = 
    {
        { Py_tp_new, _new_LowLevelDevicesAggregateProvider },
        { Py_tp_dealloc, _dealloc_LowLevelDevicesAggregateProvider },
        { Py_tp_methods, _methods_LowLevelDevicesAggregateProvider },
        { Py_tp_getset, _getset_LowLevelDevicesAggregateProvider },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_LowLevelDevicesAggregateProvider =
    {
        "_winrt_Windows_Devices.LowLevelDevicesAggregateProvider",
        sizeof(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LowLevelDevicesAggregateProvider
    };

    // ----- LowLevelDevicesController class --------------------
    constexpr const char* const _type_name_LowLevelDevicesController = "LowLevelDevicesController";

    static PyObject* _new_LowLevelDevicesController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LowLevelDevicesController);
        return nullptr;
    }

    static void _dealloc_LowLevelDevicesController(py::wrapper::Windows::Devices::LowLevelDevicesController* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LowLevelDevicesController_get_DefaultProvider(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::LowLevelDevicesController::DefaultProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesController_put_DefaultProvider(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::ILowLevelDevicesAggregateProvider>(arg);

            winrt::Windows::Devices::LowLevelDevicesController::DefaultProvider(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LowLevelDevicesController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::LowLevelDevicesController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LowLevelDevicesController[] = {
        { "get_default_provider", (PyCFunction)LowLevelDevicesController_get_DefaultProvider, METH_NOARGS | METH_STATIC, nullptr },
        { "put_default_provider", (PyCFunction)LowLevelDevicesController_put_DefaultProvider, METH_O | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_LowLevelDevicesController, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_LowLevelDevicesController[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_LowLevelDevicesController[] = 
    {
        { Py_tp_new, _new_LowLevelDevicesController },
        { Py_tp_dealloc, _dealloc_LowLevelDevicesController },
        { Py_tp_methods, _methods_LowLevelDevicesController },
        { Py_tp_getset, _getset_LowLevelDevicesController },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_LowLevelDevicesController =
    {
        "_winrt_Windows_Devices.LowLevelDevicesController",
        sizeof(py::wrapper::Windows::Devices::LowLevelDevicesController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LowLevelDevicesController
    };

    // ----- ILowLevelDevicesAggregateProvider interface --------------------
    constexpr const char* const _type_name_ILowLevelDevicesAggregateProvider = "ILowLevelDevicesAggregateProvider";

    static PyObject* _new_ILowLevelDevicesAggregateProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ILowLevelDevicesAggregateProvider);
        return nullptr;
    }

    static void _dealloc_ILowLevelDevicesAggregateProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_AdcControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdcControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_GpioControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GpioControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_I2cControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.I2cControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_PwmControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PwmControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_SpiControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SpiControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ILowLevelDevicesAggregateProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::ILowLevelDevicesAggregateProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ILowLevelDevicesAggregateProvider[] = {
        { "_from", (PyCFunction)_from_ILowLevelDevicesAggregateProvider, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ILowLevelDevicesAggregateProvider[] = {
        { const_cast<char*>("adc_controller_provider"), (getter)ILowLevelDevicesAggregateProvider_get_AdcControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("gpio_controller_provider"), (getter)ILowLevelDevicesAggregateProvider_get_GpioControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("i2c_controller_provider"), (getter)ILowLevelDevicesAggregateProvider_get_I2cControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("pwm_controller_provider"), (getter)ILowLevelDevicesAggregateProvider_get_PwmControllerProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("spi_controller_provider"), (getter)ILowLevelDevicesAggregateProvider_get_SpiControllerProvider, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ILowLevelDevicesAggregateProvider[] = 
    {
        { Py_tp_new, _new_ILowLevelDevicesAggregateProvider },
        { Py_tp_dealloc, _dealloc_ILowLevelDevicesAggregateProvider },
        { Py_tp_methods, _methods_ILowLevelDevicesAggregateProvider },
        { Py_tp_getset, _getset_ILowLevelDevicesAggregateProvider },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ILowLevelDevicesAggregateProvider =
    {
        "_winrt_Windows_Devices.ILowLevelDevicesAggregateProvider",
        sizeof(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ILowLevelDevicesAggregateProvider
    };

    // ----- Windows.Devices Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::LowLevelDevicesAggregateProvider>::python_type = py::register_python_type(module, _type_name_LowLevelDevicesAggregateProvider, &_type_spec_LowLevelDevicesAggregateProvider, bases.get());
            py::winrt_type<winrt::Windows::Devices::LowLevelDevicesController>::python_type = py::register_python_type(module, _type_name_LowLevelDevicesController, &_type_spec_LowLevelDevicesController, bases.get());
            py::winrt_type<winrt::Windows::Devices::ILowLevelDevicesAggregateProvider>::python_type = py::register_python_type(module, _type_name_ILowLevelDevicesAggregateProvider, &_type_spec_ILowLevelDevicesAggregateProvider, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::module_def);
}
