// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Gaming.Input.ForceFeedback.h"

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::RampForceEffect>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>::python_type;

namespace py::cpp::Windows::Gaming::Input::ForceFeedback
{
    // ----- ConditionForceEffect class --------------------
    constexpr const char* const _type_name_ConditionForceEffect = "ConditionForceEffect";

    static PyObject* _new_ConditionForceEffect(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Gaming::Input::ForceFeedback::ConditionForceEffectKind>(args, 0);

                winrt::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ConditionForceEffect(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ConditionForceEffect_SetParameters(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 7)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<float>(args, 1);
                auto param2 = py::convert_to<float>(args, 2);
                auto param3 = py::convert_to<float>(args, 3);
                auto param4 = py::convert_to<float>(args, 4);
                auto param5 = py::convert_to<float>(args, 5);
                auto param6 = py::convert_to<float>(args, 6);

                self->obj.SetParameters(param0, param1, param2, param3, param4, param5, param6);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ConditionForceEffect_Start(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ConditionForceEffect_Stop(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ConditionForceEffect_get_Kind(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ConditionForceEffect_get_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Gain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ConditionForceEffect_put_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Gain(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ConditionForceEffect_get_State(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ConditionForceEffect(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ConditionForceEffect[] = {
        { "set_parameters", (PyCFunction)ConditionForceEffect_SetParameters, METH_VARARGS, nullptr },
        { "start", (PyCFunction)ConditionForceEffect_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)ConditionForceEffect_Stop, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ConditionForceEffect, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ConditionForceEffect[] = {
        { const_cast<char*>("kind"), (getter)ConditionForceEffect_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("gain"), (getter)ConditionForceEffect_get_Gain, (setter)ConditionForceEffect_put_Gain, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)ConditionForceEffect_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ConditionForceEffect[] = 
    {
        { Py_tp_new, _new_ConditionForceEffect },
        { Py_tp_dealloc, _dealloc_ConditionForceEffect },
        { Py_tp_methods, _methods_ConditionForceEffect },
        { Py_tp_getset, _getset_ConditionForceEffect },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ConditionForceEffect =
    {
        "_winrt_Windows_Gaming_Input_ForceFeedback.ConditionForceEffect",
        sizeof(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ConditionForceEffect
    };

    // ----- ConstantForceEffect class --------------------
    constexpr const char* const _type_name_ConstantForceEffect = "ConstantForceEffect";

    static PyObject* _new_ConstantForceEffect(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ConstantForceEffect(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ConstantForceEffect_SetParameters(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 1);

                self->obj.SetParameters(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ConstantForceEffect_SetParametersWithEnvelope(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 9)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<float>(args, 1);
                auto param2 = py::convert_to<float>(args, 2);
                auto param3 = py::convert_to<float>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 5);
                auto param6 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 6);
                auto param7 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 7);
                auto param8 = py::convert_to<uint32_t>(args, 8);

                self->obj.SetParametersWithEnvelope(param0, param1, param2, param3, param4, param5, param6, param7, param8);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ConstantForceEffect_Start(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ConstantForceEffect_Stop(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ConstantForceEffect_get_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Gain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ConstantForceEffect_put_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Gain(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ConstantForceEffect_get_State(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ConstantForceEffect(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ConstantForceEffect[] = {
        { "set_parameters", (PyCFunction)ConstantForceEffect_SetParameters, METH_VARARGS, nullptr },
        { "set_parameters_with_envelope", (PyCFunction)ConstantForceEffect_SetParametersWithEnvelope, METH_VARARGS, nullptr },
        { "start", (PyCFunction)ConstantForceEffect_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)ConstantForceEffect_Stop, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ConstantForceEffect, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ConstantForceEffect[] = {
        { const_cast<char*>("gain"), (getter)ConstantForceEffect_get_Gain, (setter)ConstantForceEffect_put_Gain, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)ConstantForceEffect_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ConstantForceEffect[] = 
    {
        { Py_tp_new, _new_ConstantForceEffect },
        { Py_tp_dealloc, _dealloc_ConstantForceEffect },
        { Py_tp_methods, _methods_ConstantForceEffect },
        { Py_tp_getset, _getset_ConstantForceEffect },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ConstantForceEffect =
    {
        "_winrt_Windows_Gaming_Input_ForceFeedback.ConstantForceEffect",
        sizeof(py::wrapper::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ConstantForceEffect
    };

    // ----- ForceFeedbackMotor class --------------------
    constexpr const char* const _type_name_ForceFeedbackMotor = "ForceFeedbackMotor";

    static PyObject* _new_ForceFeedbackMotor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ForceFeedbackMotor);
        return nullptr;
    }

    static void _dealloc_ForceFeedbackMotor(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ForceFeedbackMotor_LoadEffectAsync(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>(args, 0);

                return py::convert(self->obj.LoadEffectAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_PauseAllEffects(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.PauseAllEffects();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_ResumeAllEffects(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ResumeAllEffects();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_StopAllEffects(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.StopAllEffects();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_TryDisableAsync(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryDisableAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_TryEnableAsync(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryEnableAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_TryResetAsync(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryResetAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_TryUnloadEffectAsync(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>(args, 0);

                return py::convert(self->obj.TryUnloadEffectAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_get_MasterGain(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MasterGain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ForceFeedbackMotor_put_MasterGain(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.MasterGain(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ForceFeedbackMotor_get_AreEffectsPaused(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AreEffectsPaused());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_get_IsEnabled(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForceFeedbackMotor_get_SupportedAxes(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedAxes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ForceFeedbackMotor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ForceFeedbackMotor[] = {
        { "load_effect_async", (PyCFunction)ForceFeedbackMotor_LoadEffectAsync, METH_VARARGS, nullptr },
        { "pause_all_effects", (PyCFunction)ForceFeedbackMotor_PauseAllEffects, METH_VARARGS, nullptr },
        { "resume_all_effects", (PyCFunction)ForceFeedbackMotor_ResumeAllEffects, METH_VARARGS, nullptr },
        { "stop_all_effects", (PyCFunction)ForceFeedbackMotor_StopAllEffects, METH_VARARGS, nullptr },
        { "try_disable_async", (PyCFunction)ForceFeedbackMotor_TryDisableAsync, METH_VARARGS, nullptr },
        { "try_enable_async", (PyCFunction)ForceFeedbackMotor_TryEnableAsync, METH_VARARGS, nullptr },
        { "try_reset_async", (PyCFunction)ForceFeedbackMotor_TryResetAsync, METH_VARARGS, nullptr },
        { "try_unload_effect_async", (PyCFunction)ForceFeedbackMotor_TryUnloadEffectAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ForceFeedbackMotor, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ForceFeedbackMotor[] = {
        { const_cast<char*>("master_gain"), (getter)ForceFeedbackMotor_get_MasterGain, (setter)ForceFeedbackMotor_put_MasterGain, nullptr, nullptr },
        { const_cast<char*>("are_effects_paused"), (getter)ForceFeedbackMotor_get_AreEffectsPaused, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_enabled"), (getter)ForceFeedbackMotor_get_IsEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_axes"), (getter)ForceFeedbackMotor_get_SupportedAxes, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ForceFeedbackMotor[] = 
    {
        { Py_tp_new, _new_ForceFeedbackMotor },
        { Py_tp_dealloc, _dealloc_ForceFeedbackMotor },
        { Py_tp_methods, _methods_ForceFeedbackMotor },
        { Py_tp_getset, _getset_ForceFeedbackMotor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ForceFeedbackMotor =
    {
        "_winrt_Windows_Gaming_Input_ForceFeedback.ForceFeedbackMotor",
        sizeof(py::wrapper::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ForceFeedbackMotor
    };

    // ----- PeriodicForceEffect class --------------------
    constexpr const char* const _type_name_PeriodicForceEffect = "PeriodicForceEffect";

    static PyObject* _new_PeriodicForceEffect(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffectKind>(args, 0);

                winrt::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PeriodicForceEffect(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PeriodicForceEffect_SetParameters(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<float>(args, 1);
                auto param2 = py::convert_to<float>(args, 2);
                auto param3 = py::convert_to<float>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 4);

                self->obj.SetParameters(param0, param1, param2, param3, param4);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeriodicForceEffect_SetParametersWithEnvelope(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 12)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<float>(args, 1);
                auto param2 = py::convert_to<float>(args, 2);
                auto param3 = py::convert_to<float>(args, 3);
                auto param4 = py::convert_to<float>(args, 4);
                auto param5 = py::convert_to<float>(args, 5);
                auto param6 = py::convert_to<float>(args, 6);
                auto param7 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 7);
                auto param8 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 8);
                auto param9 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 9);
                auto param10 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 10);
                auto param11 = py::convert_to<uint32_t>(args, 11);

                self->obj.SetParametersWithEnvelope(param0, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeriodicForceEffect_Start(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeriodicForceEffect_Stop(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeriodicForceEffect_get_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Gain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PeriodicForceEffect_put_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Gain(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PeriodicForceEffect_get_State(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeriodicForceEffect_get_Kind(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PeriodicForceEffect(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PeriodicForceEffect[] = {
        { "set_parameters", (PyCFunction)PeriodicForceEffect_SetParameters, METH_VARARGS, nullptr },
        { "set_parameters_with_envelope", (PyCFunction)PeriodicForceEffect_SetParametersWithEnvelope, METH_VARARGS, nullptr },
        { "start", (PyCFunction)PeriodicForceEffect_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)PeriodicForceEffect_Stop, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PeriodicForceEffect, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PeriodicForceEffect[] = {
        { const_cast<char*>("gain"), (getter)PeriodicForceEffect_get_Gain, (setter)PeriodicForceEffect_put_Gain, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)PeriodicForceEffect_get_State, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)PeriodicForceEffect_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PeriodicForceEffect[] = 
    {
        { Py_tp_new, _new_PeriodicForceEffect },
        { Py_tp_dealloc, _dealloc_PeriodicForceEffect },
        { Py_tp_methods, _methods_PeriodicForceEffect },
        { Py_tp_getset, _getset_PeriodicForceEffect },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PeriodicForceEffect =
    {
        "_winrt_Windows_Gaming_Input_ForceFeedback.PeriodicForceEffect",
        sizeof(py::wrapper::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PeriodicForceEffect
    };

    // ----- RampForceEffect class --------------------
    constexpr const char* const _type_name_RampForceEffect = "RampForceEffect";

    static PyObject* _new_RampForceEffect(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Gaming::Input::ForceFeedback::RampForceEffect instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_RampForceEffect(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* RampForceEffect_SetParameters(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 2);

                self->obj.SetParameters(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RampForceEffect_SetParametersWithEnvelope(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 10)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<float>(args, 2);
                auto param3 = py::convert_to<float>(args, 3);
                auto param4 = py::convert_to<float>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 5);
                auto param6 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 6);
                auto param7 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 7);
                auto param8 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 8);
                auto param9 = py::convert_to<uint32_t>(args, 9);

                self->obj.SetParametersWithEnvelope(param0, param1, param2, param3, param4, param5, param6, param7, param8, param9);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RampForceEffect_Start(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RampForceEffect_Stop(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RampForceEffect_get_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Gain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int RampForceEffect_put_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Gain(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* RampForceEffect_get_State(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_RampForceEffect(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::Input::ForceFeedback::RampForceEffect>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RampForceEffect[] = {
        { "set_parameters", (PyCFunction)RampForceEffect_SetParameters, METH_VARARGS, nullptr },
        { "set_parameters_with_envelope", (PyCFunction)RampForceEffect_SetParametersWithEnvelope, METH_VARARGS, nullptr },
        { "start", (PyCFunction)RampForceEffect_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)RampForceEffect_Stop, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_RampForceEffect, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_RampForceEffect[] = {
        { const_cast<char*>("gain"), (getter)RampForceEffect_get_Gain, (setter)RampForceEffect_put_Gain, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)RampForceEffect_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_RampForceEffect[] = 
    {
        { Py_tp_new, _new_RampForceEffect },
        { Py_tp_dealloc, _dealloc_RampForceEffect },
        { Py_tp_methods, _methods_RampForceEffect },
        { Py_tp_getset, _getset_RampForceEffect },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_RampForceEffect =
    {
        "_winrt_Windows_Gaming_Input_ForceFeedback.RampForceEffect",
        sizeof(py::wrapper::Windows::Gaming::Input::ForceFeedback::RampForceEffect),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RampForceEffect
    };

    // ----- IForceFeedbackEffect interface --------------------
    constexpr const char* const _type_name_IForceFeedbackEffect = "IForceFeedbackEffect";

    static PyObject* _new_IForceFeedbackEffect(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IForceFeedbackEffect);
        return nullptr;
    }

    static void _dealloc_IForceFeedbackEffect(py::wrapper::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IForceFeedbackEffect_Start(py::wrapper::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IForceFeedbackEffect_Stop(py::wrapper::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IForceFeedbackEffect_get_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Gain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IForceFeedbackEffect_put_Gain(py::wrapper::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Gain(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IForceFeedbackEffect_get_State(py::wrapper::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IForceFeedbackEffect(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IForceFeedbackEffect[] = {
        { "start", (PyCFunction)IForceFeedbackEffect_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)IForceFeedbackEffect_Stop, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IForceFeedbackEffect, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IForceFeedbackEffect[] = {
        { const_cast<char*>("gain"), (getter)IForceFeedbackEffect_get_Gain, (setter)IForceFeedbackEffect_put_Gain, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)IForceFeedbackEffect_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IForceFeedbackEffect[] = 
    {
        { Py_tp_new, _new_IForceFeedbackEffect },
        { Py_tp_dealloc, _dealloc_IForceFeedbackEffect },
        { Py_tp_methods, _methods_IForceFeedbackEffect },
        { Py_tp_getset, _getset_IForceFeedbackEffect },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IForceFeedbackEffect =
    {
        "_winrt_Windows_Gaming_Input_ForceFeedback.IForceFeedbackEffect",
        sizeof(py::wrapper::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IForceFeedbackEffect
    };

    // ----- Windows.Gaming.Input.ForceFeedback Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::ConditionForceEffect>::python_type = py::register_python_type(module, _type_name_ConditionForceEffect, &_type_spec_ConditionForceEffect, bases.get());
            py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::ConstantForceEffect>::python_type = py::register_python_type(module, _type_name_ConstantForceEffect, &_type_spec_ConstantForceEffect, bases.get());
            py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::ForceFeedbackMotor>::python_type = py::register_python_type(module, _type_name_ForceFeedbackMotor, &_type_spec_ForceFeedbackMotor, bases.get());
            py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::PeriodicForceEffect>::python_type = py::register_python_type(module, _type_name_PeriodicForceEffect, &_type_spec_PeriodicForceEffect, bases.get());
            py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::RampForceEffect>::python_type = py::register_python_type(module, _type_name_RampForceEffect, &_type_spec_RampForceEffect, bases.get());
            py::winrt_type<winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>::python_type = py::register_python_type(module, _type_name_IForceFeedbackEffect, &_type_spec_IForceFeedbackEffect, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Gaming.Input.ForceFeedback");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Gaming_Input_ForceFeedback",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Gaming::Input::ForceFeedback

PyMODINIT_FUNC
PyInit__winrt_Windows_Gaming_Input_ForceFeedback (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Gaming::Input::ForceFeedback::module_def);
}
