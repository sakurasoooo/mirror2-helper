// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Media.Transcoding.h"

PyTypeObject* py::winrt_type<winrt::Windows::Media::Transcoding::MediaTranscoder>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Transcoding::PrepareTranscodeResult>::python_type;

namespace py::cpp::Windows::Media::Transcoding
{
    // ----- MediaTranscoder class --------------------
    constexpr const char* const _type_name_MediaTranscoder = "MediaTranscoder";

    static PyObject* _new_MediaTranscoder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::Transcoding::MediaTranscoder instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MediaTranscoder(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaTranscoder_AddAudioEffect(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AddAudioEffect(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 2);

                self->obj.AddAudioEffect(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_AddVideoEffect(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AddVideoEffect(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 2);

                self->obj.AddVideoEffect(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_ClearEffects(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ClearEffects();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_PrepareFileTranscodeAsync(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Media::MediaProperties::MediaEncodingProfile>(args, 2);

                return py::convert(self->obj.PrepareFileTranscodeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_PrepareMediaStreamSourceTranscodeAsync(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Core::IMediaSource>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Media::MediaProperties::MediaEncodingProfile>(args, 2);

                return py::convert(self->obj.PrepareMediaStreamSourceTranscodeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_PrepareStreamTranscodeAsync(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Media::MediaProperties::MediaEncodingProfile>(args, 2);

                return py::convert(self->obj.PrepareStreamTranscodeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_get_TrimStopTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TrimStopTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_TrimStopTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.TrimStopTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_TrimStartTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TrimStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_TrimStartTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.TrimStartTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_HardwareAccelerationEnabled(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HardwareAccelerationEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_HardwareAccelerationEnabled(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.HardwareAccelerationEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_AlwaysReencode(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlwaysReencode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_AlwaysReencode(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AlwaysReencode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_VideoProcessingAlgorithm(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoProcessingAlgorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_VideoProcessingAlgorithm(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Transcoding::MediaVideoProcessingAlgorithm>(arg);

            self->obj.VideoProcessingAlgorithm(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_MediaTranscoder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Transcoding::MediaTranscoder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaTranscoder[] = {
        { "add_audio_effect", (PyCFunction)MediaTranscoder_AddAudioEffect, METH_VARARGS, nullptr },
        { "add_video_effect", (PyCFunction)MediaTranscoder_AddVideoEffect, METH_VARARGS, nullptr },
        { "clear_effects", (PyCFunction)MediaTranscoder_ClearEffects, METH_VARARGS, nullptr },
        { "prepare_file_transcode_async", (PyCFunction)MediaTranscoder_PrepareFileTranscodeAsync, METH_VARARGS, nullptr },
        { "prepare_media_stream_source_transcode_async", (PyCFunction)MediaTranscoder_PrepareMediaStreamSourceTranscodeAsync, METH_VARARGS, nullptr },
        { "prepare_stream_transcode_async", (PyCFunction)MediaTranscoder_PrepareStreamTranscodeAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MediaTranscoder, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaTranscoder[] = {
        { const_cast<char*>("trim_stop_time"), (getter)MediaTranscoder_get_TrimStopTime, (setter)MediaTranscoder_put_TrimStopTime, nullptr, nullptr },
        { const_cast<char*>("trim_start_time"), (getter)MediaTranscoder_get_TrimStartTime, (setter)MediaTranscoder_put_TrimStartTime, nullptr, nullptr },
        { const_cast<char*>("hardware_acceleration_enabled"), (getter)MediaTranscoder_get_HardwareAccelerationEnabled, (setter)MediaTranscoder_put_HardwareAccelerationEnabled, nullptr, nullptr },
        { const_cast<char*>("always_reencode"), (getter)MediaTranscoder_get_AlwaysReencode, (setter)MediaTranscoder_put_AlwaysReencode, nullptr, nullptr },
        { const_cast<char*>("video_processing_algorithm"), (getter)MediaTranscoder_get_VideoProcessingAlgorithm, (setter)MediaTranscoder_put_VideoProcessingAlgorithm, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaTranscoder[] = 
    {
        { Py_tp_new, _new_MediaTranscoder },
        { Py_tp_dealloc, _dealloc_MediaTranscoder },
        { Py_tp_methods, _methods_MediaTranscoder },
        { Py_tp_getset, _getset_MediaTranscoder },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaTranscoder =
    {
        "_winrt_Windows_Media_Transcoding.MediaTranscoder",
        sizeof(py::wrapper::Windows::Media::Transcoding::MediaTranscoder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaTranscoder
    };

    // ----- PrepareTranscodeResult class --------------------
    constexpr const char* const _type_name_PrepareTranscodeResult = "PrepareTranscodeResult";

    static PyObject* _new_PrepareTranscodeResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrepareTranscodeResult);
        return nullptr;
    }

    static void _dealloc_PrepareTranscodeResult(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrepareTranscodeResult_TranscodeAsync(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TranscodeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrepareTranscodeResult_get_CanTranscode(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanTranscode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrepareTranscodeResult_get_FailureReason(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FailureReason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrepareTranscodeResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Transcoding::PrepareTranscodeResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrepareTranscodeResult[] = {
        { "transcode_async", (PyCFunction)PrepareTranscodeResult_TranscodeAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PrepareTranscodeResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrepareTranscodeResult[] = {
        { const_cast<char*>("can_transcode"), (getter)PrepareTranscodeResult_get_CanTranscode, nullptr, nullptr, nullptr },
        { const_cast<char*>("failure_reason"), (getter)PrepareTranscodeResult_get_FailureReason, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrepareTranscodeResult[] = 
    {
        { Py_tp_new, _new_PrepareTranscodeResult },
        { Py_tp_dealloc, _dealloc_PrepareTranscodeResult },
        { Py_tp_methods, _methods_PrepareTranscodeResult },
        { Py_tp_getset, _getset_PrepareTranscodeResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrepareTranscodeResult =
    {
        "_winrt_Windows_Media_Transcoding.PrepareTranscodeResult",
        sizeof(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrepareTranscodeResult
    };

    // ----- Windows.Media.Transcoding Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Media::Transcoding::MediaTranscoder>::python_type = py::register_python_type(module, _type_name_MediaTranscoder, &_type_spec_MediaTranscoder, bases.get());
            py::winrt_type<winrt::Windows::Media::Transcoding::PrepareTranscodeResult>::python_type = py::register_python_type(module, _type_name_PrepareTranscodeResult, &_type_spec_PrepareTranscodeResult, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Media.Transcoding");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Media_Transcoding",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Media::Transcoding

PyMODINIT_FUNC
PyInit__winrt_Windows_Media_Transcoding (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Media::Transcoding::module_def);
}
