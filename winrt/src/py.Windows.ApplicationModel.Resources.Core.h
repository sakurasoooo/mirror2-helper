// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#pragma once

#include "pybase.h"

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#if __has_include("py.Windows.Storage.h")
#include "py.Windows.Storage.h"
#endif

#if __has_include("py.Windows.Storage.Streams.h")
#include "py.Windows.Storage.Streams.h"
#endif

#if __has_include("py.Windows.UI.h")
#include "py.Windows.UI.h"
#endif

#include <winrt/Windows.ApplicationModel.Resources.Core.h>

namespace py::proj::Windows::ApplicationModel::Resources::Core
{}

namespace py::impl::Windows::ApplicationModel::Resources::Core
{}

namespace py::wrapper::Windows::ApplicationModel::Resources::Core
{
    using NamedResource = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>;
    using ResourceCandidate = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>;
    using ResourceCandidateVectorView = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>;
    using ResourceContext = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>;
    using ResourceContextLanguagesVectorView = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>;
    using ResourceManager = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>;
    using ResourceMap = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>;
    using ResourceMapIterator = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>;
    using ResourceMapMapView = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>;
    using ResourceMapMapViewIterator = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>;
    using ResourceQualifier = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>;
    using ResourceQualifierMapView = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>;
    using ResourceQualifierObservableMap = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>;
    using ResourceQualifierVectorView = py::winrt_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>;
    using ResourceLayoutInfo = py::winrt_struct_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>;
}

namespace py
{
    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct converter<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>
    {
        static PyObject* convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo instance) noexcept;
        static winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo convert_to(PyObject* obj);
    };

}
