// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Perception.People.h"

PyTypeObject* py::winrt_type<winrt::Windows::Perception::People::EyesPose>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::People::HandMeshObserver>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::People::HandMeshVertexState>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::People::HandPose>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::People::HeadPose>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::People::HandMeshVertex>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::People::JointPose>::python_type;

PyObject* py::converter<winrt::Windows::Perception::People::HandMeshVertex>::convert(winrt::Windows::Perception::People::HandMeshVertex instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Perception::People::HandMeshVertex>());
}
winrt::Windows::Perception::People::HandMeshVertex py::converter<winrt::Windows::Perception::People::HandMeshVertex>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Perception::People::HandMeshVertex>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Perception::People::HandMeshVertex>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Perception::People::HandMeshVertex return_value{};

    PyObject* py_Position = PyDict_GetItemString(obj, "position");
    if (!py_Position) { throw winrt::hresult_invalid_argument(); }
    return_value.Position = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Position);

    PyObject* py_Normal = PyDict_GetItemString(obj, "normal");
    if (!py_Normal) { throw winrt::hresult_invalid_argument(); }
    return_value.Normal = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Normal);

    return return_value;
}

PyObject* py::converter<winrt::Windows::Perception::People::JointPose>::convert(winrt::Windows::Perception::People::JointPose instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Perception::People::JointPose>());
}
winrt::Windows::Perception::People::JointPose py::converter<winrt::Windows::Perception::People::JointPose>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Perception::People::JointPose>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Perception::People::JointPose>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Perception::People::JointPose return_value{};

    PyObject* py_Orientation = PyDict_GetItemString(obj, "orientation");
    if (!py_Orientation) { throw winrt::hresult_invalid_argument(); }
    return_value.Orientation = converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(py_Orientation);

    PyObject* py_Position = PyDict_GetItemString(obj, "position");
    if (!py_Position) { throw winrt::hresult_invalid_argument(); }
    return_value.Position = converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(py_Position);

    PyObject* py_Radius = PyDict_GetItemString(obj, "radius");
    if (!py_Radius) { throw winrt::hresult_invalid_argument(); }
    return_value.Radius = converter<float>::convert_to(py_Radius);

    PyObject* py_Accuracy = PyDict_GetItemString(obj, "accuracy");
    if (!py_Accuracy) { throw winrt::hresult_invalid_argument(); }
    return_value.Accuracy = converter<winrt::Windows::Perception::People::JointPoseAccuracy>::convert_to(py_Accuracy);

    return return_value;
}

namespace py::cpp::Windows::Perception::People
{
    // ----- EyesPose class --------------------
    constexpr const char* const _type_name_EyesPose = "EyesPose";

    static PyObject* _new_EyesPose(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_EyesPose);
        return nullptr;
    }

    static void _dealloc_EyesPose(py::wrapper::Windows::Perception::People::EyesPose* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* EyesPose_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::People::EyesPose::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EyesPose_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Perception::People::EyesPose::RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EyesPose_get_Gaze(py::wrapper::Windows::Perception::People::EyesPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Gaze());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EyesPose_get_IsCalibrationValid(py::wrapper::Windows::Perception::People::EyesPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCalibrationValid());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EyesPose_get_UpdateTimestamp(py::wrapper::Windows::Perception::People::EyesPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UpdateTimestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_EyesPose(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::People::EyesPose>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EyesPose[] = {
        { "is_supported", (PyCFunction)EyesPose_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "request_access_async", (PyCFunction)EyesPose_RequestAccessAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_EyesPose, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_EyesPose[] = {
        { const_cast<char*>("gaze"), (getter)EyesPose_get_Gaze, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_calibration_valid"), (getter)EyesPose_get_IsCalibrationValid, nullptr, nullptr, nullptr },
        { const_cast<char*>("update_timestamp"), (getter)EyesPose_get_UpdateTimestamp, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_EyesPose[] = 
    {
        { Py_tp_new, _new_EyesPose },
        { Py_tp_dealloc, _dealloc_EyesPose },
        { Py_tp_methods, _methods_EyesPose },
        { Py_tp_getset, _getset_EyesPose },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_EyesPose =
    {
        "_winrt_Windows_Perception_People.EyesPose",
        sizeof(py::wrapper::Windows::Perception::People::EyesPose),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EyesPose
    };

    // ----- HandMeshObserver class --------------------
    constexpr const char* const _type_name_HandMeshObserver = "HandMeshObserver";

    static PyObject* _new_HandMeshObserver(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HandMeshObserver);
        return nullptr;
    }

    static void _dealloc_HandMeshObserver(py::wrapper::Windows::Perception::People::HandMeshObserver* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HandMeshObserver_GetTriangleIndices(py::wrapper::Windows::Perception::People::HandMeshObserver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<uint16_t>::size_type>(args, 0);
                winrt::com_array<uint16_t> param0 ( param0_count, py::empty_instance<uint16_t>::get() );

                self->obj.GetTriangleIndices(param0);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return out0.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HandMeshObserver_GetVertexStateForPose(py::wrapper::Windows::Perception::People::HandMeshObserver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::People::HandPose>(args, 0);

                return py::convert(self->obj.GetVertexStateForPose(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HandMeshObserver_get_ModelId(py::wrapper::Windows::Perception::People::HandMeshObserver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ModelId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HandMeshObserver_get_NeutralPose(py::wrapper::Windows::Perception::People::HandMeshObserver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NeutralPose());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HandMeshObserver_get_NeutralPoseVersion(py::wrapper::Windows::Perception::People::HandMeshObserver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NeutralPoseVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HandMeshObserver_get_Source(py::wrapper::Windows::Perception::People::HandMeshObserver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HandMeshObserver_get_TriangleIndexCount(py::wrapper::Windows::Perception::People::HandMeshObserver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TriangleIndexCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HandMeshObserver_get_VertexCount(py::wrapper::Windows::Perception::People::HandMeshObserver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VertexCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HandMeshObserver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::People::HandMeshObserver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HandMeshObserver[] = {
        { "get_triangle_indices", (PyCFunction)HandMeshObserver_GetTriangleIndices, METH_VARARGS, nullptr },
        { "get_vertex_state_for_pose", (PyCFunction)HandMeshObserver_GetVertexStateForPose, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HandMeshObserver, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HandMeshObserver[] = {
        { const_cast<char*>("model_id"), (getter)HandMeshObserver_get_ModelId, nullptr, nullptr, nullptr },
        { const_cast<char*>("neutral_pose"), (getter)HandMeshObserver_get_NeutralPose, nullptr, nullptr, nullptr },
        { const_cast<char*>("neutral_pose_version"), (getter)HandMeshObserver_get_NeutralPoseVersion, nullptr, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)HandMeshObserver_get_Source, nullptr, nullptr, nullptr },
        { const_cast<char*>("triangle_index_count"), (getter)HandMeshObserver_get_TriangleIndexCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("vertex_count"), (getter)HandMeshObserver_get_VertexCount, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HandMeshObserver[] = 
    {
        { Py_tp_new, _new_HandMeshObserver },
        { Py_tp_dealloc, _dealloc_HandMeshObserver },
        { Py_tp_methods, _methods_HandMeshObserver },
        { Py_tp_getset, _getset_HandMeshObserver },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HandMeshObserver =
    {
        "_winrt_Windows_Perception_People.HandMeshObserver",
        sizeof(py::wrapper::Windows::Perception::People::HandMeshObserver),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HandMeshObserver
    };

    // ----- HandMeshVertexState class --------------------
    constexpr const char* const _type_name_HandMeshVertexState = "HandMeshVertexState";

    static PyObject* _new_HandMeshVertexState(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HandMeshVertexState);
        return nullptr;
    }

    static void _dealloc_HandMeshVertexState(py::wrapper::Windows::Perception::People::HandMeshVertexState* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HandMeshVertexState_GetVertices(py::wrapper::Windows::Perception::People::HandMeshVertexState* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<winrt::Windows::Perception::People::HandMeshVertex>::size_type>(args, 0);
                winrt::com_array<winrt::Windows::Perception::People::HandMeshVertex> param0 ( param0_count, py::empty_instance<winrt::Windows::Perception::People::HandMeshVertex>::get() );

                self->obj.GetVertices(param0);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return out0.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HandMeshVertexState_get_CoordinateSystem(py::wrapper::Windows::Perception::People::HandMeshVertexState* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HandMeshVertexState_get_UpdateTimestamp(py::wrapper::Windows::Perception::People::HandMeshVertexState* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UpdateTimestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HandMeshVertexState(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::People::HandMeshVertexState>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HandMeshVertexState[] = {
        { "get_vertices", (PyCFunction)HandMeshVertexState_GetVertices, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HandMeshVertexState, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HandMeshVertexState[] = {
        { const_cast<char*>("coordinate_system"), (getter)HandMeshVertexState_get_CoordinateSystem, nullptr, nullptr, nullptr },
        { const_cast<char*>("update_timestamp"), (getter)HandMeshVertexState_get_UpdateTimestamp, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HandMeshVertexState[] = 
    {
        { Py_tp_new, _new_HandMeshVertexState },
        { Py_tp_dealloc, _dealloc_HandMeshVertexState },
        { Py_tp_methods, _methods_HandMeshVertexState },
        { Py_tp_getset, _getset_HandMeshVertexState },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HandMeshVertexState =
    {
        "_winrt_Windows_Perception_People.HandMeshVertexState",
        sizeof(py::wrapper::Windows::Perception::People::HandMeshVertexState),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HandMeshVertexState
    };

    // ----- HandPose class --------------------
    constexpr const char* const _type_name_HandPose = "HandPose";

    static PyObject* _new_HandPose(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HandPose);
        return nullptr;
    }

    static void _dealloc_HandPose(py::wrapper::Windows::Perception::People::HandPose* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HandPose_GetRelativeJoint(py::wrapper::Windows::Perception::People::HandPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::People::HandJointKind>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::People::HandJointKind>(args, 1);

                return py::convert(self->obj.GetRelativeJoint(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HandPose_GetRelativeJoints(py::wrapper::Windows::Perception::People::HandPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<winrt::Windows::Perception::People::HandJointKind>>(args, 0);
                auto param1 = py::convert_to<winrt::array_view<winrt::Windows::Perception::People::HandJointKind>>(args, 1);
                auto param2_count = py::convert_to<winrt::com_array<winrt::Windows::Perception::People::JointPose>::size_type>(args, 2);
                winrt::com_array<winrt::Windows::Perception::People::JointPose> param2 ( param2_count, py::empty_instance<winrt::Windows::Perception::People::JointPose>::get() );

                self->obj.GetRelativeJoints(param0, param1, param2);

                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return out2.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HandPose_TryGetJoint(py::wrapper::Windows::Perception::People::HandPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::People::HandJointKind>(args, 1);
                winrt::Windows::Perception::People::JointPose param2 {  };

                auto return_value = self->obj.TryGetJoint(param0, param1, param2);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out2.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HandPose_TryGetJoints(py::wrapper::Windows::Perception::People::HandPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::array_view<winrt::Windows::Perception::People::HandJointKind>>(args, 1);
                auto param2_count = py::convert_to<winrt::com_array<winrt::Windows::Perception::People::JointPose>::size_type>(args, 2);
                winrt::com_array<winrt::Windows::Perception::People::JointPose> param2 ( param2_count, py::empty_instance<winrt::Windows::Perception::People::JointPose>::get() );

                auto return_value = self->obj.TryGetJoints(param0, param1, param2);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out2.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_HandPose(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::People::HandPose>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HandPose[] = {
        { "get_relative_joint", (PyCFunction)HandPose_GetRelativeJoint, METH_VARARGS, nullptr },
        { "get_relative_joints", (PyCFunction)HandPose_GetRelativeJoints, METH_VARARGS, nullptr },
        { "try_get_joint", (PyCFunction)HandPose_TryGetJoint, METH_VARARGS, nullptr },
        { "try_get_joints", (PyCFunction)HandPose_TryGetJoints, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HandPose, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HandPose[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_HandPose[] = 
    {
        { Py_tp_new, _new_HandPose },
        { Py_tp_dealloc, _dealloc_HandPose },
        { Py_tp_methods, _methods_HandPose },
        { Py_tp_getset, _getset_HandPose },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HandPose =
    {
        "_winrt_Windows_Perception_People.HandPose",
        sizeof(py::wrapper::Windows::Perception::People::HandPose),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HandPose
    };

    // ----- HeadPose class --------------------
    constexpr const char* const _type_name_HeadPose = "HeadPose";

    static PyObject* _new_HeadPose(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HeadPose);
        return nullptr;
    }

    static void _dealloc_HeadPose(py::wrapper::Windows::Perception::People::HeadPose* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HeadPose_get_ForwardDirection(py::wrapper::Windows::Perception::People::HeadPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ForwardDirection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HeadPose_get_Position(py::wrapper::Windows::Perception::People::HeadPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HeadPose_get_UpDirection(py::wrapper::Windows::Perception::People::HeadPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UpDirection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HeadPose(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::People::HeadPose>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HeadPose[] = {
        { "_from", (PyCFunction)_from_HeadPose, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HeadPose[] = {
        { const_cast<char*>("forward_direction"), (getter)HeadPose_get_ForwardDirection, nullptr, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)HeadPose_get_Position, nullptr, nullptr, nullptr },
        { const_cast<char*>("up_direction"), (getter)HeadPose_get_UpDirection, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HeadPose[] = 
    {
        { Py_tp_new, _new_HeadPose },
        { Py_tp_dealloc, _dealloc_HeadPose },
        { Py_tp_methods, _methods_HeadPose },
        { Py_tp_getset, _getset_HeadPose },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HeadPose =
    {
        "_winrt_Windows_Perception_People.HeadPose",
        sizeof(py::wrapper::Windows::Perception::People::HeadPose),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HeadPose
    };

    // ----- HandMeshVertex struct --------------------
    constexpr const char* const _type_name_HandMeshVertex = "HandMeshVertex";

    PyObject* _new_HandMeshVertex(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Perception::People::HandMeshVertex return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Perception::People::HandMeshVertex>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Position{};
        PyObject* _Normal{};

        static const char* kwlist[] = {"position", "normal", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO", const_cast<char**>(kwlist), &_Position, &_Normal))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Perception::People::HandMeshVertex return_value{ py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Position), py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Normal) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_HandMeshVertex(py::wrapper::Windows::Perception::People::HandMeshVertex* self)
    {
    }

    static PyObject* HandMeshVertex_get_Position(py::wrapper::Windows::Perception::People::HandMeshVertex* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HandMeshVertex_set_Position(py::wrapper::Windows::Perception::People::HandMeshVertex* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Position = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HandMeshVertex_get_Normal(py::wrapper::Windows::Perception::People::HandMeshVertex* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Normal);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HandMeshVertex_set_Normal(py::wrapper::Windows::Perception::People::HandMeshVertex* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Normal = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_HandMeshVertex[] = {
        { const_cast<char*>("position"), (getter)HandMeshVertex_get_Position, (setter)HandMeshVertex_set_Position, nullptr, nullptr },
        { const_cast<char*>("normal"), (getter)HandMeshVertex_get_Normal, (setter)HandMeshVertex_set_Normal, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HandMeshVertex[] = 
    {
        { Py_tp_new, _new_HandMeshVertex },
        { Py_tp_dealloc, _dealloc_HandMeshVertex },
        { Py_tp_getset, _getset_HandMeshVertex },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HandMeshVertex =
    {
        "_winrt_Windows_Perception_People.HandMeshVertex",
        sizeof(py::wrapper::Windows::Perception::People::HandMeshVertex),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HandMeshVertex
    };

    // ----- JointPose struct --------------------
    constexpr const char* const _type_name_JointPose = "JointPose";

    PyObject* _new_JointPose(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Perception::People::JointPose return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Perception::People::JointPose>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Orientation{};
        PyObject* _Position{};
        float _Radius{};
        int32_t _Accuracy{};

        static const char* kwlist[] = {"orientation", "position", "radius", "accuracy", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOfi", const_cast<char**>(kwlist), &_Orientation, &_Position, &_Radius, &_Accuracy))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Perception::People::JointPose return_value{ py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(_Orientation), py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(_Position), _Radius, static_cast<winrt::Windows::Perception::People::JointPoseAccuracy>(_Accuracy) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_JointPose(py::wrapper::Windows::Perception::People::JointPose* self)
    {
    }

    static PyObject* JointPose_get_Orientation(py::wrapper::Windows::Perception::People::JointPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JointPose_set_Orientation(py::wrapper::Windows::Perception::People::JointPose* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Orientation = py::converter<winrt::Windows::Foundation::Numerics::quaternion>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JointPose_get_Position(py::wrapper::Windows::Perception::People::JointPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JointPose_set_Position(py::wrapper::Windows::Perception::People::JointPose* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Position = py::converter<winrt::Windows::Foundation::Numerics::float3>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JointPose_get_Radius(py::wrapper::Windows::Perception::People::JointPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Radius);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JointPose_set_Radius(py::wrapper::Windows::Perception::People::JointPose* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Radius = py::converter<float>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JointPose_get_Accuracy(py::wrapper::Windows::Perception::People::JointPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Accuracy);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JointPose_set_Accuracy(py::wrapper::Windows::Perception::People::JointPose* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Accuracy = py::converter<winrt::Windows::Perception::People::JointPoseAccuracy>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_JointPose[] = {
        { const_cast<char*>("orientation"), (getter)JointPose_get_Orientation, (setter)JointPose_set_Orientation, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)JointPose_get_Position, (setter)JointPose_set_Position, nullptr, nullptr },
        { const_cast<char*>("radius"), (getter)JointPose_get_Radius, (setter)JointPose_set_Radius, nullptr, nullptr },
        { const_cast<char*>("accuracy"), (getter)JointPose_get_Accuracy, (setter)JointPose_set_Accuracy, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_JointPose[] = 
    {
        { Py_tp_new, _new_JointPose },
        { Py_tp_dealloc, _dealloc_JointPose },
        { Py_tp_getset, _getset_JointPose },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_JointPose =
    {
        "_winrt_Windows_Perception_People.JointPose",
        sizeof(py::wrapper::Windows::Perception::People::JointPose),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_JointPose
    };

    // ----- Windows.Perception.People Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Perception::People::EyesPose>::python_type = py::register_python_type(module, _type_name_EyesPose, &_type_spec_EyesPose, bases.get());
            py::winrt_type<winrt::Windows::Perception::People::HandMeshObserver>::python_type = py::register_python_type(module, _type_name_HandMeshObserver, &_type_spec_HandMeshObserver, bases.get());
            py::winrt_type<winrt::Windows::Perception::People::HandMeshVertexState>::python_type = py::register_python_type(module, _type_name_HandMeshVertexState, &_type_spec_HandMeshVertexState, bases.get());
            py::winrt_type<winrt::Windows::Perception::People::HandPose>::python_type = py::register_python_type(module, _type_name_HandPose, &_type_spec_HandPose, bases.get());
            py::winrt_type<winrt::Windows::Perception::People::HeadPose>::python_type = py::register_python_type(module, _type_name_HeadPose, &_type_spec_HeadPose, bases.get());
            py::winrt_type<winrt::Windows::Perception::People::HandMeshVertex>::python_type = py::register_python_type(module, _type_name_HandMeshVertex, &_type_spec_HandMeshVertex, bases.get());
            py::winrt_type<winrt::Windows::Perception::People::JointPose>::python_type = py::register_python_type(module, _type_name_JointPose, &_type_spec_JointPose, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Perception.People");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Perception_People",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Perception::People

PyMODINIT_FUNC
PyInit__winrt_Windows_Perception_People (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Perception::People::module_def);
}
