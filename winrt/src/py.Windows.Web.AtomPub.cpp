// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Web.AtomPub.h"

PyTypeObject* py::winrt_type<winrt::Windows::Web::AtomPub::AtomPubClient>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::AtomPub::ResourceCollection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::AtomPub::ServiceDocument>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::AtomPub::Workspace>::python_type;

namespace py::cpp::Windows::Web::AtomPub
{
    // ----- AtomPubClient class --------------------
    constexpr const char* const _type_name_AtomPubClient = "AtomPubClient";

    static PyObject* _new_AtomPubClient(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(args, 0);

                winrt::Windows::Web::AtomPub::AtomPubClient instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::AtomPub::AtomPubClient instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AtomPubClient(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AtomPubClient_CancelAsyncOperations(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.CancelAsyncOperations();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_CreateMediaResourceAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 3);

                return py::convert(self->obj.CreateMediaResourceAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_CreateResourceAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationItem>(args, 2);

                return py::convert(self->obj.CreateResourceAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_DeleteResourceAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.DeleteResourceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_DeleteResourceItemAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationItem>(args, 0);

                return py::convert(self->obj.DeleteResourceItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_RetrieveFeedAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.RetrieveFeedAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_RetrieveMediaResourceAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.RetrieveMediaResourceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_RetrieveResourceAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.RetrieveResourceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_RetrieveServiceDocumentAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.RetrieveServiceDocumentAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_SetRequestHeader(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.SetRequestHeader(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_UpdateMediaResourceAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 2);

                return py::convert(self->obj.UpdateMediaResourceAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_UpdateResourceAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationItem>(args, 1);

                return py::convert(self->obj.UpdateResourceAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_UpdateResourceItemAsync(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationItem>(args, 0);

                return py::convert(self->obj.UpdateResourceItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AtomPubClient_get_Timeout(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timeout());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AtomPubClient_put_Timeout(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Timeout(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AtomPubClient_get_ServerCredential(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ServerCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AtomPubClient_put_ServerCredential(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(arg);

            self->obj.ServerCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AtomPubClient_get_ProxyCredential(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProxyCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AtomPubClient_put_ProxyCredential(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(arg);

            self->obj.ProxyCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AtomPubClient_get_MaxResponseBufferSize(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxResponseBufferSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AtomPubClient_put_MaxResponseBufferSize(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.MaxResponseBufferSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AtomPubClient_get_BypassCacheOnRetrieve(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BypassCacheOnRetrieve());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AtomPubClient_put_BypassCacheOnRetrieve(py::wrapper::Windows::Web::AtomPub::AtomPubClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.BypassCacheOnRetrieve(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_AtomPubClient(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::AtomPub::AtomPubClient>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AtomPubClient[] = {
        { "cancel_async_operations", (PyCFunction)AtomPubClient_CancelAsyncOperations, METH_VARARGS, nullptr },
        { "create_media_resource_async", (PyCFunction)AtomPubClient_CreateMediaResourceAsync, METH_VARARGS, nullptr },
        { "create_resource_async", (PyCFunction)AtomPubClient_CreateResourceAsync, METH_VARARGS, nullptr },
        { "delete_resource_async", (PyCFunction)AtomPubClient_DeleteResourceAsync, METH_VARARGS, nullptr },
        { "delete_resource_item_async", (PyCFunction)AtomPubClient_DeleteResourceItemAsync, METH_VARARGS, nullptr },
        { "retrieve_feed_async", (PyCFunction)AtomPubClient_RetrieveFeedAsync, METH_VARARGS, nullptr },
        { "retrieve_media_resource_async", (PyCFunction)AtomPubClient_RetrieveMediaResourceAsync, METH_VARARGS, nullptr },
        { "retrieve_resource_async", (PyCFunction)AtomPubClient_RetrieveResourceAsync, METH_VARARGS, nullptr },
        { "retrieve_service_document_async", (PyCFunction)AtomPubClient_RetrieveServiceDocumentAsync, METH_VARARGS, nullptr },
        { "set_request_header", (PyCFunction)AtomPubClient_SetRequestHeader, METH_VARARGS, nullptr },
        { "update_media_resource_async", (PyCFunction)AtomPubClient_UpdateMediaResourceAsync, METH_VARARGS, nullptr },
        { "update_resource_async", (PyCFunction)AtomPubClient_UpdateResourceAsync, METH_VARARGS, nullptr },
        { "update_resource_item_async", (PyCFunction)AtomPubClient_UpdateResourceItemAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AtomPubClient, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AtomPubClient[] = {
        { const_cast<char*>("timeout"), (getter)AtomPubClient_get_Timeout, (setter)AtomPubClient_put_Timeout, nullptr, nullptr },
        { const_cast<char*>("server_credential"), (getter)AtomPubClient_get_ServerCredential, (setter)AtomPubClient_put_ServerCredential, nullptr, nullptr },
        { const_cast<char*>("proxy_credential"), (getter)AtomPubClient_get_ProxyCredential, (setter)AtomPubClient_put_ProxyCredential, nullptr, nullptr },
        { const_cast<char*>("max_response_buffer_size"), (getter)AtomPubClient_get_MaxResponseBufferSize, (setter)AtomPubClient_put_MaxResponseBufferSize, nullptr, nullptr },
        { const_cast<char*>("bypass_cache_on_retrieve"), (getter)AtomPubClient_get_BypassCacheOnRetrieve, (setter)AtomPubClient_put_BypassCacheOnRetrieve, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AtomPubClient[] = 
    {
        { Py_tp_new, _new_AtomPubClient },
        { Py_tp_dealloc, _dealloc_AtomPubClient },
        { Py_tp_methods, _methods_AtomPubClient },
        { Py_tp_getset, _getset_AtomPubClient },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AtomPubClient =
    {
        "_winrt_Windows_Web_AtomPub.AtomPubClient",
        sizeof(py::wrapper::Windows::Web::AtomPub::AtomPubClient),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AtomPubClient
    };

    // ----- ResourceCollection class --------------------
    constexpr const char* const _type_name_ResourceCollection = "ResourceCollection";

    static PyObject* _new_ResourceCollection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceCollection);
        return nullptr;
    }

    static void _dealloc_ResourceCollection(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceCollection_GetXmlDocument(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCollection_get_Accepts(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Accepts());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCollection_get_Categories(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Categories());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCollection_get_Title(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCollection_get_Uri(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCollection_get_BaseUri(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceCollection_put_BaseUri(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceCollection_get_NodeValue(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceCollection_put_NodeValue(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceCollection_get_NodeNamespace(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceCollection_put_NodeNamespace(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceCollection_get_NodeName(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceCollection_put_NodeName(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceCollection_get_Language(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceCollection_put_Language(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceCollection_get_AttributeExtensions(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCollection_get_ElementExtensions(py::wrapper::Windows::Web::AtomPub::ResourceCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceCollection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::AtomPub::ResourceCollection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceCollection[] = {
        { "get_xml_document", (PyCFunction)ResourceCollection_GetXmlDocument, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceCollection, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceCollection[] = {
        { const_cast<char*>("accepts"), (getter)ResourceCollection_get_Accepts, nullptr, nullptr, nullptr },
        { const_cast<char*>("categories"), (getter)ResourceCollection_get_Categories, nullptr, nullptr, nullptr },
        { const_cast<char*>("title"), (getter)ResourceCollection_get_Title, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)ResourceCollection_get_Uri, nullptr, nullptr, nullptr },
        { const_cast<char*>("base_uri"), (getter)ResourceCollection_get_BaseUri, (setter)ResourceCollection_put_BaseUri, nullptr, nullptr },
        { const_cast<char*>("node_value"), (getter)ResourceCollection_get_NodeValue, (setter)ResourceCollection_put_NodeValue, nullptr, nullptr },
        { const_cast<char*>("node_namespace"), (getter)ResourceCollection_get_NodeNamespace, (setter)ResourceCollection_put_NodeNamespace, nullptr, nullptr },
        { const_cast<char*>("node_name"), (getter)ResourceCollection_get_NodeName, (setter)ResourceCollection_put_NodeName, nullptr, nullptr },
        { const_cast<char*>("language"), (getter)ResourceCollection_get_Language, (setter)ResourceCollection_put_Language, nullptr, nullptr },
        { const_cast<char*>("attribute_extensions"), (getter)ResourceCollection_get_AttributeExtensions, nullptr, nullptr, nullptr },
        { const_cast<char*>("element_extensions"), (getter)ResourceCollection_get_ElementExtensions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceCollection[] = 
    {
        { Py_tp_new, _new_ResourceCollection },
        { Py_tp_dealloc, _dealloc_ResourceCollection },
        { Py_tp_methods, _methods_ResourceCollection },
        { Py_tp_getset, _getset_ResourceCollection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceCollection =
    {
        "_winrt_Windows_Web_AtomPub.ResourceCollection",
        sizeof(py::wrapper::Windows::Web::AtomPub::ResourceCollection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceCollection
    };

    // ----- ServiceDocument class --------------------
    constexpr const char* const _type_name_ServiceDocument = "ServiceDocument";

    static PyObject* _new_ServiceDocument(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ServiceDocument);
        return nullptr;
    }

    static void _dealloc_ServiceDocument(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ServiceDocument_GetXmlDocument(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ServiceDocument_get_Workspaces(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Workspaces());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ServiceDocument_get_NodeValue(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ServiceDocument_put_NodeValue(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ServiceDocument_get_NodeNamespace(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ServiceDocument_put_NodeNamespace(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ServiceDocument_get_NodeName(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ServiceDocument_put_NodeName(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ServiceDocument_get_Language(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ServiceDocument_put_Language(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ServiceDocument_get_BaseUri(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ServiceDocument_put_BaseUri(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ServiceDocument_get_AttributeExtensions(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ServiceDocument_get_ElementExtensions(py::wrapper::Windows::Web::AtomPub::ServiceDocument* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ServiceDocument(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::AtomPub::ServiceDocument>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ServiceDocument[] = {
        { "get_xml_document", (PyCFunction)ServiceDocument_GetXmlDocument, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ServiceDocument, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ServiceDocument[] = {
        { const_cast<char*>("workspaces"), (getter)ServiceDocument_get_Workspaces, nullptr, nullptr, nullptr },
        { const_cast<char*>("node_value"), (getter)ServiceDocument_get_NodeValue, (setter)ServiceDocument_put_NodeValue, nullptr, nullptr },
        { const_cast<char*>("node_namespace"), (getter)ServiceDocument_get_NodeNamespace, (setter)ServiceDocument_put_NodeNamespace, nullptr, nullptr },
        { const_cast<char*>("node_name"), (getter)ServiceDocument_get_NodeName, (setter)ServiceDocument_put_NodeName, nullptr, nullptr },
        { const_cast<char*>("language"), (getter)ServiceDocument_get_Language, (setter)ServiceDocument_put_Language, nullptr, nullptr },
        { const_cast<char*>("base_uri"), (getter)ServiceDocument_get_BaseUri, (setter)ServiceDocument_put_BaseUri, nullptr, nullptr },
        { const_cast<char*>("attribute_extensions"), (getter)ServiceDocument_get_AttributeExtensions, nullptr, nullptr, nullptr },
        { const_cast<char*>("element_extensions"), (getter)ServiceDocument_get_ElementExtensions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ServiceDocument[] = 
    {
        { Py_tp_new, _new_ServiceDocument },
        { Py_tp_dealloc, _dealloc_ServiceDocument },
        { Py_tp_methods, _methods_ServiceDocument },
        { Py_tp_getset, _getset_ServiceDocument },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ServiceDocument =
    {
        "_winrt_Windows_Web_AtomPub.ServiceDocument",
        sizeof(py::wrapper::Windows::Web::AtomPub::ServiceDocument),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ServiceDocument
    };

    // ----- Workspace class --------------------
    constexpr const char* const _type_name_Workspace = "Workspace";

    static PyObject* _new_Workspace(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Workspace);
        return nullptr;
    }

    static void _dealloc_Workspace(py::wrapper::Windows::Web::AtomPub::Workspace* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Workspace_GetXmlDocument(py::wrapper::Windows::Web::AtomPub::Workspace* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Workspace_get_Collections(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Collections());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Workspace_get_Title(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Workspace_get_NodeValue(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Workspace_put_NodeValue(py::wrapper::Windows::Web::AtomPub::Workspace* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Workspace_get_NodeNamespace(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Workspace_put_NodeNamespace(py::wrapper::Windows::Web::AtomPub::Workspace* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Workspace_get_NodeName(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Workspace_put_NodeName(py::wrapper::Windows::Web::AtomPub::Workspace* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Workspace_get_Language(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Workspace_put_Language(py::wrapper::Windows::Web::AtomPub::Workspace* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Workspace_get_BaseUri(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Workspace_put_BaseUri(py::wrapper::Windows::Web::AtomPub::Workspace* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Workspace_get_AttributeExtensions(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Workspace_get_ElementExtensions(py::wrapper::Windows::Web::AtomPub::Workspace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Workspace(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::AtomPub::Workspace>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Workspace[] = {
        { "get_xml_document", (PyCFunction)Workspace_GetXmlDocument, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Workspace, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Workspace[] = {
        { const_cast<char*>("collections"), (getter)Workspace_get_Collections, nullptr, nullptr, nullptr },
        { const_cast<char*>("title"), (getter)Workspace_get_Title, nullptr, nullptr, nullptr },
        { const_cast<char*>("node_value"), (getter)Workspace_get_NodeValue, (setter)Workspace_put_NodeValue, nullptr, nullptr },
        { const_cast<char*>("node_namespace"), (getter)Workspace_get_NodeNamespace, (setter)Workspace_put_NodeNamespace, nullptr, nullptr },
        { const_cast<char*>("node_name"), (getter)Workspace_get_NodeName, (setter)Workspace_put_NodeName, nullptr, nullptr },
        { const_cast<char*>("language"), (getter)Workspace_get_Language, (setter)Workspace_put_Language, nullptr, nullptr },
        { const_cast<char*>("base_uri"), (getter)Workspace_get_BaseUri, (setter)Workspace_put_BaseUri, nullptr, nullptr },
        { const_cast<char*>("attribute_extensions"), (getter)Workspace_get_AttributeExtensions, nullptr, nullptr, nullptr },
        { const_cast<char*>("element_extensions"), (getter)Workspace_get_ElementExtensions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Workspace[] = 
    {
        { Py_tp_new, _new_Workspace },
        { Py_tp_dealloc, _dealloc_Workspace },
        { Py_tp_methods, _methods_Workspace },
        { Py_tp_getset, _getset_Workspace },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Workspace =
    {
        "_winrt_Windows_Web_AtomPub.Workspace",
        sizeof(py::wrapper::Windows::Web::AtomPub::Workspace),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Workspace
    };

    // ----- Windows.Web.AtomPub Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Web::AtomPub::AtomPubClient>::python_type = py::register_python_type(module, _type_name_AtomPubClient, &_type_spec_AtomPubClient, bases.get());
            py::winrt_type<winrt::Windows::Web::AtomPub::ResourceCollection>::python_type = py::register_python_type(module, _type_name_ResourceCollection, &_type_spec_ResourceCollection, bases.get());
            py::winrt_type<winrt::Windows::Web::AtomPub::ServiceDocument>::python_type = py::register_python_type(module, _type_name_ServiceDocument, &_type_spec_ServiceDocument, bases.get());
            py::winrt_type<winrt::Windows::Web::AtomPub::Workspace>::python_type = py::register_python_type(module, _type_name_Workspace, &_type_spec_Workspace, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Web.AtomPub");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Web_AtomPub",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Web::AtomPub

PyMODINIT_FUNC
PyInit__winrt_Windows_Web_AtomPub (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Web::AtomPub::module_def);
}
