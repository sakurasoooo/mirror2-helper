// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Graphics.Capture.h"

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Capture::Direct3D11CaptureFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCaptureAccess>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCaptureItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCapturePicker>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCaptureSession>::python_type;

namespace py::cpp::Windows::Graphics::Capture
{
    // ----- Direct3D11CaptureFrame class --------------------
    constexpr const char* const _type_name_Direct3D11CaptureFrame = "Direct3D11CaptureFrame";

    static PyObject* _new_Direct3D11CaptureFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Direct3D11CaptureFrame);
        return nullptr;
    }

    static void _dealloc_Direct3D11CaptureFrame(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Direct3D11CaptureFrame_Close(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFrame_get_ContentSize(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContentSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFrame_get_Surface(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Surface());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFrame_get_SystemRelativeTime(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Direct3D11CaptureFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Capture::Direct3D11CaptureFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_Direct3D11CaptureFrame(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_Direct3D11CaptureFrame(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Direct3D11CaptureFrame[] = {
        { "close", (PyCFunction)Direct3D11CaptureFrame_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Direct3D11CaptureFrame, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_Direct3D11CaptureFrame, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_Direct3D11CaptureFrame, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Direct3D11CaptureFrame[] = {
        { const_cast<char*>("content_size"), (getter)Direct3D11CaptureFrame_get_ContentSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("surface"), (getter)Direct3D11CaptureFrame_get_Surface, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_time"), (getter)Direct3D11CaptureFrame_get_SystemRelativeTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Direct3D11CaptureFrame[] = 
    {
        { Py_tp_new, _new_Direct3D11CaptureFrame },
        { Py_tp_dealloc, _dealloc_Direct3D11CaptureFrame },
        { Py_tp_methods, _methods_Direct3D11CaptureFrame },
        { Py_tp_getset, _getset_Direct3D11CaptureFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Direct3D11CaptureFrame =
    {
        "_winrt_Windows_Graphics_Capture.Direct3D11CaptureFrame",
        sizeof(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Direct3D11CaptureFrame
    };

    // ----- Direct3D11CaptureFramePool class --------------------
    constexpr const char* const _type_name_Direct3D11CaptureFramePool = "Direct3D11CaptureFramePool";

    static PyObject* _new_Direct3D11CaptureFramePool(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Direct3D11CaptureFramePool);
        return nullptr;
    }

    static void _dealloc_Direct3D11CaptureFramePool(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Direct3D11CaptureFramePool_Close(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_Create(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(args, 1);
                auto param2 = py::convert_to<int32_t>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Graphics::SizeInt32>(args, 3);

                return py::convert(winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool::Create(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_CreateCaptureSession(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Capture::GraphicsCaptureItem>(args, 0);

                return py::convert(self->obj.CreateCaptureSession(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_CreateFreeThreaded(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(args, 1);
                auto param2 = py::convert_to<int32_t>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Graphics::SizeInt32>(args, 3);

                return py::convert(winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool::CreateFreeThreaded(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_Recreate(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(args, 1);
                auto param2 = py::convert_to<int32_t>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Graphics::SizeInt32>(args, 3);

                self->obj.Recreate(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_TryGetNextFrame(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryGetNextFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_get_DispatcherQueue(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_add_FrameArrived(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.FrameArrived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3D11CaptureFramePool_remove_FrameArrived(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameArrived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Direct3D11CaptureFramePool(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_Direct3D11CaptureFramePool(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_Direct3D11CaptureFramePool(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Direct3D11CaptureFramePool[] = {
        { "close", (PyCFunction)Direct3D11CaptureFramePool_Close, METH_VARARGS, nullptr },
        { "create", (PyCFunction)Direct3D11CaptureFramePool_Create, METH_VARARGS | METH_STATIC, nullptr },
        { "create_capture_session", (PyCFunction)Direct3D11CaptureFramePool_CreateCaptureSession, METH_VARARGS, nullptr },
        { "create_free_threaded", (PyCFunction)Direct3D11CaptureFramePool_CreateFreeThreaded, METH_VARARGS | METH_STATIC, nullptr },
        { "recreate", (PyCFunction)Direct3D11CaptureFramePool_Recreate, METH_VARARGS, nullptr },
        { "try_get_next_frame", (PyCFunction)Direct3D11CaptureFramePool_TryGetNextFrame, METH_VARARGS, nullptr },
        { "add_frame_arrived", (PyCFunction)Direct3D11CaptureFramePool_add_FrameArrived, METH_O, nullptr },
        { "remove_frame_arrived", (PyCFunction)Direct3D11CaptureFramePool_remove_FrameArrived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_Direct3D11CaptureFramePool, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_Direct3D11CaptureFramePool, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_Direct3D11CaptureFramePool, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Direct3D11CaptureFramePool[] = {
        { const_cast<char*>("dispatcher_queue"), (getter)Direct3D11CaptureFramePool_get_DispatcherQueue, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Direct3D11CaptureFramePool[] = 
    {
        { Py_tp_new, _new_Direct3D11CaptureFramePool },
        { Py_tp_dealloc, _dealloc_Direct3D11CaptureFramePool },
        { Py_tp_methods, _methods_Direct3D11CaptureFramePool },
        { Py_tp_getset, _getset_Direct3D11CaptureFramePool },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Direct3D11CaptureFramePool =
    {
        "_winrt_Windows_Graphics_Capture.Direct3D11CaptureFramePool",
        sizeof(py::wrapper::Windows::Graphics::Capture::Direct3D11CaptureFramePool),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Direct3D11CaptureFramePool
    };

    // ----- GraphicsCaptureAccess class --------------------
    constexpr const char* const _type_name_GraphicsCaptureAccess = "GraphicsCaptureAccess";

    static PyObject* _new_GraphicsCaptureAccess(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GraphicsCaptureAccess);
        return nullptr;
    }

    static PyObject* GraphicsCaptureAccess_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Capture::GraphicsCaptureAccessKind>(args, 0);

                return py::convert(winrt::Windows::Graphics::Capture::GraphicsCaptureAccess::RequestAccessAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_GraphicsCaptureAccess[] = {
        { "request_access_async", (PyCFunction)GraphicsCaptureAccess_RequestAccessAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GraphicsCaptureAccess[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_GraphicsCaptureAccess[] = 
    {
        { Py_tp_new, _new_GraphicsCaptureAccess },
        { Py_tp_methods, _methods_GraphicsCaptureAccess },
        { Py_tp_getset, _getset_GraphicsCaptureAccess },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GraphicsCaptureAccess =
    {
        "_winrt_Windows_Graphics_Capture.GraphicsCaptureAccess",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GraphicsCaptureAccess
    };

    // ----- GraphicsCaptureItem class --------------------
    constexpr const char* const _type_name_GraphicsCaptureItem = "GraphicsCaptureItem";

    static PyObject* _new_GraphicsCaptureItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GraphicsCaptureItem);
        return nullptr;
    }

    static void _dealloc_GraphicsCaptureItem(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GraphicsCaptureItem_CreateFromVisual(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);

                return py::convert(winrt::Windows::Graphics::Capture::GraphicsCaptureItem::CreateFromVisual(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureItem_TryCreateFromDisplayId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::DisplayId>(args, 0);

                return py::convert(winrt::Windows::Graphics::Capture::GraphicsCaptureItem::TryCreateFromDisplayId(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureItem_TryCreateFromWindowId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowId>(args, 0);

                return py::convert(winrt::Windows::Graphics::Capture::GraphicsCaptureItem::TryCreateFromWindowId(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureItem_get_DisplayName(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureItem_get_Size(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureItem_add_Closed(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureItem* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Capture::GraphicsCaptureItem, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureItem_remove_Closed(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureItem* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GraphicsCaptureItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Capture::GraphicsCaptureItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GraphicsCaptureItem[] = {
        { "create_from_visual", (PyCFunction)GraphicsCaptureItem_CreateFromVisual, METH_VARARGS | METH_STATIC, nullptr },
        { "try_create_from_display_id", (PyCFunction)GraphicsCaptureItem_TryCreateFromDisplayId, METH_VARARGS | METH_STATIC, nullptr },
        { "try_create_from_window_id", (PyCFunction)GraphicsCaptureItem_TryCreateFromWindowId, METH_VARARGS | METH_STATIC, nullptr },
        { "add_closed", (PyCFunction)GraphicsCaptureItem_add_Closed, METH_O, nullptr },
        { "remove_closed", (PyCFunction)GraphicsCaptureItem_remove_Closed, METH_O, nullptr },
        { "_from", (PyCFunction)_from_GraphicsCaptureItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GraphicsCaptureItem[] = {
        { const_cast<char*>("display_name"), (getter)GraphicsCaptureItem_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)GraphicsCaptureItem_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GraphicsCaptureItem[] = 
    {
        { Py_tp_new, _new_GraphicsCaptureItem },
        { Py_tp_dealloc, _dealloc_GraphicsCaptureItem },
        { Py_tp_methods, _methods_GraphicsCaptureItem },
        { Py_tp_getset, _getset_GraphicsCaptureItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GraphicsCaptureItem =
    {
        "_winrt_Windows_Graphics_Capture.GraphicsCaptureItem",
        sizeof(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GraphicsCaptureItem
    };

    // ----- GraphicsCapturePicker class --------------------
    constexpr const char* const _type_name_GraphicsCapturePicker = "GraphicsCapturePicker";

    static PyObject* _new_GraphicsCapturePicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Capture::GraphicsCapturePicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_GraphicsCapturePicker(py::wrapper::Windows::Graphics::Capture::GraphicsCapturePicker* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GraphicsCapturePicker_PickSingleItemAsync(py::wrapper::Windows::Graphics::Capture::GraphicsCapturePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PickSingleItemAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_GraphicsCapturePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Capture::GraphicsCapturePicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GraphicsCapturePicker[] = {
        { "pick_single_item_async", (PyCFunction)GraphicsCapturePicker_PickSingleItemAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_GraphicsCapturePicker, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GraphicsCapturePicker[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_GraphicsCapturePicker[] = 
    {
        { Py_tp_new, _new_GraphicsCapturePicker },
        { Py_tp_dealloc, _dealloc_GraphicsCapturePicker },
        { Py_tp_methods, _methods_GraphicsCapturePicker },
        { Py_tp_getset, _getset_GraphicsCapturePicker },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GraphicsCapturePicker =
    {
        "_winrt_Windows_Graphics_Capture.GraphicsCapturePicker",
        sizeof(py::wrapper::Windows::Graphics::Capture::GraphicsCapturePicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GraphicsCapturePicker
    };

    // ----- GraphicsCaptureSession class --------------------
    constexpr const char* const _type_name_GraphicsCaptureSession = "GraphicsCaptureSession";

    static PyObject* _new_GraphicsCaptureSession(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_GraphicsCaptureSession);
        return nullptr;
    }

    static void _dealloc_GraphicsCaptureSession(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GraphicsCaptureSession_Close(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureSession_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Graphics::Capture::GraphicsCaptureSession::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureSession_StartCapture(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.StartCapture();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GraphicsCaptureSession_get_IsCursorCaptureEnabled(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCursorCaptureEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int GraphicsCaptureSession_put_IsCursorCaptureEnabled(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsCursorCaptureEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* GraphicsCaptureSession_get_IsBorderRequired(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsBorderRequired());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int GraphicsCaptureSession_put_IsBorderRequired(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsBorderRequired(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_GraphicsCaptureSession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Capture::GraphicsCaptureSession>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_GraphicsCaptureSession(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_GraphicsCaptureSession(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GraphicsCaptureSession[] = {
        { "close", (PyCFunction)GraphicsCaptureSession_Close, METH_VARARGS, nullptr },
        { "is_supported", (PyCFunction)GraphicsCaptureSession_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "start_capture", (PyCFunction)GraphicsCaptureSession_StartCapture, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_GraphicsCaptureSession, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_GraphicsCaptureSession, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_GraphicsCaptureSession, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GraphicsCaptureSession[] = {
        { const_cast<char*>("is_cursor_capture_enabled"), (getter)GraphicsCaptureSession_get_IsCursorCaptureEnabled, (setter)GraphicsCaptureSession_put_IsCursorCaptureEnabled, nullptr, nullptr },
        { const_cast<char*>("is_border_required"), (getter)GraphicsCaptureSession_get_IsBorderRequired, (setter)GraphicsCaptureSession_put_IsBorderRequired, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GraphicsCaptureSession[] = 
    {
        { Py_tp_new, _new_GraphicsCaptureSession },
        { Py_tp_dealloc, _dealloc_GraphicsCaptureSession },
        { Py_tp_methods, _methods_GraphicsCaptureSession },
        { Py_tp_getset, _getset_GraphicsCaptureSession },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GraphicsCaptureSession =
    {
        "_winrt_Windows_Graphics_Capture.GraphicsCaptureSession",
        sizeof(py::wrapper::Windows::Graphics::Capture::GraphicsCaptureSession),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GraphicsCaptureSession
    };

    // ----- Windows.Graphics.Capture Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Graphics::Capture::Direct3D11CaptureFrame>::python_type = py::register_python_type(module, _type_name_Direct3D11CaptureFrame, &_type_spec_Direct3D11CaptureFrame, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool>::python_type = py::register_python_type(module, _type_name_Direct3D11CaptureFramePool, &_type_spec_Direct3D11CaptureFramePool, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCaptureAccess>::python_type = py::register_python_type(module, _type_name_GraphicsCaptureAccess, &_type_spec_GraphicsCaptureAccess, nullptr);
            py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCaptureItem>::python_type = py::register_python_type(module, _type_name_GraphicsCaptureItem, &_type_spec_GraphicsCaptureItem, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCapturePicker>::python_type = py::register_python_type(module, _type_name_GraphicsCapturePicker, &_type_spec_GraphicsCapturePicker, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Capture::GraphicsCaptureSession>::python_type = py::register_python_type(module, _type_name_GraphicsCaptureSession, &_type_spec_GraphicsCaptureSession, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Graphics.Capture");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Graphics_Capture",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Graphics::Capture

PyMODINIT_FUNC
PyInit__winrt_Windows_Graphics_Capture (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Graphics::Capture::module_def);
}
