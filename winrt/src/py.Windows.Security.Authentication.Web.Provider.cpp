// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Security.Authentication.Web.Provider.h"

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation>::python_type;

namespace py::cpp::Windows::Security::Authentication::Web::Provider
{
    // ----- WebAccountClientView class --------------------
    constexpr const char* const _type_name_WebAccountClientView = "WebAccountClientView";

    static PyObject* _new_WebAccountClientView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientViewType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientViewType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WebAccountClientView(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountClientView_get_AccountPairwiseId(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AccountPairwiseId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountClientView_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountClientView_get_Type(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountClientView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountClientView[] = {
        { "_from", (PyCFunction)_from_WebAccountClientView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountClientView[] = {
        { const_cast<char*>("account_pairwise_id"), (getter)WebAccountClientView_get_AccountPairwiseId, nullptr, nullptr, nullptr },
        { const_cast<char*>("application_callback_uri"), (getter)WebAccountClientView_get_ApplicationCallbackUri, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)WebAccountClientView_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountClientView[] = 
    {
        { Py_tp_new, _new_WebAccountClientView },
        { Py_tp_dealloc, _dealloc_WebAccountClientView },
        { Py_tp_methods, _methods_WebAccountClientView },
        { Py_tp_getset, _getset_WebAccountClientView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountClientView =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountClientView",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountClientView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountClientView
    };

    // ----- WebAccountManager class --------------------
    constexpr const char* const _type_name_WebAccountManager = "WebAccountManager";

    static PyObject* _new_WebAccountManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountManager);
        return nullptr;
    }

    static PyObject* WebAccountManager_AddWebAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 3);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_AddWebAccountForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 3);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountForUserAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 4);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountForUserAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 6)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 4);
                auto param5 = py::convert_to<winrt::hstring>(args, 5);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::AddWebAccountForUserAsync(param0, param1, param2, param3, param4, param5));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_ClearPerUserFromPerAppAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::ClearPerUserFromPerAppAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_ClearViewAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::ClearViewAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_ClearWebAccountPictureAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::ClearWebAccountPictureAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_DeleteWebAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::DeleteWebAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_FindAllProviderWebAccountsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::FindAllProviderWebAccountsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_FindAllProviderWebAccountsForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::FindAllProviderWebAccountsForUserAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_GetPerUserFromPerAppAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::GetPerUserFromPerAppAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_GetScope(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::GetScope(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_GetViewsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::GetViewsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_InvalidateAppCacheForAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::InvalidateAppCacheForAccountAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_InvalidateAppCacheForAllAccountsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::InvalidateAppCacheForAllAccountsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_PullCookiesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::PullCookiesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_PushCookiesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Web::Http::HttpCookie>>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::PushCookiesAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetPerAppToPerUserAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetPerAppToPerUserAccountAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetScopeAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountScope>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetScopeAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetViewAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetViewAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_SetWebAccountPictureAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::SetWebAccountPictureAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountManager_UpdateWebAccountPropertiesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(args, 2);

                return py::convert(winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager::UpdateWebAccountPropertiesAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountManager[] = {
        { "add_web_account_async", (PyCFunction)WebAccountManager_AddWebAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "add_web_account_for_user_async", (PyCFunction)WebAccountManager_AddWebAccountForUserAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "clear_per_user_from_per_app_account_async", (PyCFunction)WebAccountManager_ClearPerUserFromPerAppAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "clear_view_async", (PyCFunction)WebAccountManager_ClearViewAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "clear_web_account_picture_async", (PyCFunction)WebAccountManager_ClearWebAccountPictureAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "delete_web_account_async", (PyCFunction)WebAccountManager_DeleteWebAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_provider_web_accounts_async", (PyCFunction)WebAccountManager_FindAllProviderWebAccountsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_provider_web_accounts_for_user_async", (PyCFunction)WebAccountManager_FindAllProviderWebAccountsForUserAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_per_user_from_per_app_account_async", (PyCFunction)WebAccountManager_GetPerUserFromPerAppAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_scope", (PyCFunction)WebAccountManager_GetScope, METH_VARARGS | METH_STATIC, nullptr },
        { "get_views_async", (PyCFunction)WebAccountManager_GetViewsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "invalidate_app_cache_for_account_async", (PyCFunction)WebAccountManager_InvalidateAppCacheForAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "invalidate_app_cache_for_all_accounts_async", (PyCFunction)WebAccountManager_InvalidateAppCacheForAllAccountsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "pull_cookies_async", (PyCFunction)WebAccountManager_PullCookiesAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "push_cookies_async", (PyCFunction)WebAccountManager_PushCookiesAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "set_per_app_to_per_user_account_async", (PyCFunction)WebAccountManager_SetPerAppToPerUserAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "set_scope_async", (PyCFunction)WebAccountManager_SetScopeAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "set_view_async", (PyCFunction)WebAccountManager_SetViewAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "set_web_account_picture_async", (PyCFunction)WebAccountManager_SetWebAccountPictureAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "update_web_account_properties_async", (PyCFunction)WebAccountManager_UpdateWebAccountPropertiesAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountManager[] = 
    {
        { Py_tp_new, _new_WebAccountManager },
        { Py_tp_methods, _methods_WebAccountManager },
        { Py_tp_getset, _getset_WebAccountManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountManager =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountManager
    };

    // ----- WebAccountProviderAddAccountOperation class --------------------
    constexpr const char* const _type_name_WebAccountProviderAddAccountOperation = "WebAccountProviderAddAccountOperation";

    static PyObject* _new_WebAccountProviderAddAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderAddAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderAddAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderAddAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderAddAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderAddAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderAddAccountOperation[] = {
        { "report_completed", (PyCFunction)WebAccountProviderAddAccountOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebAccountProviderAddAccountOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderAddAccountOperation[] = {
        { const_cast<char*>("kind"), (getter)WebAccountProviderAddAccountOperation_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderAddAccountOperation[] = 
    {
        { Py_tp_new, _new_WebAccountProviderAddAccountOperation },
        { Py_tp_dealloc, _dealloc_WebAccountProviderAddAccountOperation },
        { Py_tp_methods, _methods_WebAccountProviderAddAccountOperation },
        { Py_tp_getset, _getset_WebAccountProviderAddAccountOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderAddAccountOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderAddAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderAddAccountOperation
    };

    // ----- WebAccountProviderDeleteAccountOperation class --------------------
    constexpr const char* const _type_name_WebAccountProviderDeleteAccountOperation = "WebAccountProviderDeleteAccountOperation";

    static PyObject* _new_WebAccountProviderDeleteAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderDeleteAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderDeleteAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_get_WebAccount(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAccount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderDeleteAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderDeleteAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderDeleteAccountOperation[] = {
        { "report_completed", (PyCFunction)WebAccountProviderDeleteAccountOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)WebAccountProviderDeleteAccountOperation_ReportError, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebAccountProviderDeleteAccountOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderDeleteAccountOperation[] = {
        { const_cast<char*>("web_account"), (getter)WebAccountProviderDeleteAccountOperation_get_WebAccount, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)WebAccountProviderDeleteAccountOperation_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderDeleteAccountOperation[] = 
    {
        { Py_tp_new, _new_WebAccountProviderDeleteAccountOperation },
        { Py_tp_dealloc, _dealloc_WebAccountProviderDeleteAccountOperation },
        { Py_tp_methods, _methods_WebAccountProviderDeleteAccountOperation },
        { Py_tp_getset, _getset_WebAccountProviderDeleteAccountOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderDeleteAccountOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderDeleteAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderDeleteAccountOperation
    };

    // ----- WebAccountProviderGetTokenSilentOperation class --------------------
    constexpr const char* const _type_name_WebAccountProviderGetTokenSilentOperation = "WebAccountProviderGetTokenSilentOperation";

    static PyObject* _new_WebAccountProviderGetTokenSilentOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderGetTokenSilentOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderGetTokenSilentOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_ReportUserInteractionRequired(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportUserInteractionRequired();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportUserInteractionRequired(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CacheExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebAccountProviderGetTokenSilentOperation_put_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.CacheExpirationTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_ProviderRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderGetTokenSilentOperation_get_ProviderResponses(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderResponses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderGetTokenSilentOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderGetTokenSilentOperation[] = {
        { "report_completed", (PyCFunction)WebAccountProviderGetTokenSilentOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)WebAccountProviderGetTokenSilentOperation_ReportError, METH_VARARGS, nullptr },
        { "report_user_interaction_required", (PyCFunction)WebAccountProviderGetTokenSilentOperation_ReportUserInteractionRequired, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebAccountProviderGetTokenSilentOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderGetTokenSilentOperation[] = {
        { const_cast<char*>("kind"), (getter)WebAccountProviderGetTokenSilentOperation_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("cache_expiration_time"), (getter)WebAccountProviderGetTokenSilentOperation_get_CacheExpirationTime, (setter)WebAccountProviderGetTokenSilentOperation_put_CacheExpirationTime, nullptr, nullptr },
        { const_cast<char*>("provider_request"), (getter)WebAccountProviderGetTokenSilentOperation_get_ProviderRequest, nullptr, nullptr, nullptr },
        { const_cast<char*>("provider_responses"), (getter)WebAccountProviderGetTokenSilentOperation_get_ProviderResponses, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderGetTokenSilentOperation[] = 
    {
        { Py_tp_new, _new_WebAccountProviderGetTokenSilentOperation },
        { Py_tp_dealloc, _dealloc_WebAccountProviderGetTokenSilentOperation },
        { Py_tp_methods, _methods_WebAccountProviderGetTokenSilentOperation },
        { Py_tp_getset, _getset_WebAccountProviderGetTokenSilentOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderGetTokenSilentOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderGetTokenSilentOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderGetTokenSilentOperation
    };

    // ----- WebAccountProviderManageAccountOperation class --------------------
    constexpr const char* const _type_name_WebAccountProviderManageAccountOperation = "WebAccountProviderManageAccountOperation";

    static PyObject* _new_WebAccountProviderManageAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderManageAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderManageAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderManageAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderManageAccountOperation_get_WebAccount(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAccount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderManageAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderManageAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderManageAccountOperation[] = {
        { "report_completed", (PyCFunction)WebAccountProviderManageAccountOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebAccountProviderManageAccountOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderManageAccountOperation[] = {
        { const_cast<char*>("web_account"), (getter)WebAccountProviderManageAccountOperation_get_WebAccount, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)WebAccountProviderManageAccountOperation_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderManageAccountOperation[] = 
    {
        { Py_tp_new, _new_WebAccountProviderManageAccountOperation },
        { Py_tp_dealloc, _dealloc_WebAccountProviderManageAccountOperation },
        { Py_tp_methods, _methods_WebAccountProviderManageAccountOperation },
        { Py_tp_getset, _getset_WebAccountProviderManageAccountOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderManageAccountOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderManageAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderManageAccountOperation
    };

    // ----- WebAccountProviderRequestTokenOperation class --------------------
    constexpr const char* const _type_name_WebAccountProviderRequestTokenOperation = "WebAccountProviderRequestTokenOperation";

    static PyObject* _new_WebAccountProviderRequestTokenOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderRequestTokenOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderRequestTokenOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderRequestTokenOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_ReportUserCanceled(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportUserCanceled();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CacheExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebAccountProviderRequestTokenOperation_put_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.CacheExpirationTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_ProviderRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRequestTokenOperation_get_ProviderResponses(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderResponses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderRequestTokenOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderRequestTokenOperation[] = {
        { "report_completed", (PyCFunction)WebAccountProviderRequestTokenOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)WebAccountProviderRequestTokenOperation_ReportError, METH_VARARGS, nullptr },
        { "report_user_canceled", (PyCFunction)WebAccountProviderRequestTokenOperation_ReportUserCanceled, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebAccountProviderRequestTokenOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderRequestTokenOperation[] = {
        { const_cast<char*>("kind"), (getter)WebAccountProviderRequestTokenOperation_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("cache_expiration_time"), (getter)WebAccountProviderRequestTokenOperation_get_CacheExpirationTime, (setter)WebAccountProviderRequestTokenOperation_put_CacheExpirationTime, nullptr, nullptr },
        { const_cast<char*>("provider_request"), (getter)WebAccountProviderRequestTokenOperation_get_ProviderRequest, nullptr, nullptr, nullptr },
        { const_cast<char*>("provider_responses"), (getter)WebAccountProviderRequestTokenOperation_get_ProviderResponses, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderRequestTokenOperation[] = 
    {
        { Py_tp_new, _new_WebAccountProviderRequestTokenOperation },
        { Py_tp_dealloc, _dealloc_WebAccountProviderRequestTokenOperation },
        { Py_tp_methods, _methods_WebAccountProviderRequestTokenOperation },
        { Py_tp_getset, _getset_WebAccountProviderRequestTokenOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderRequestTokenOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderRequestTokenOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderRequestTokenOperation
    };

    // ----- WebAccountProviderRetrieveCookiesOperation class --------------------
    constexpr const char* const _type_name_WebAccountProviderRetrieveCookiesOperation = "WebAccountProviderRetrieveCookiesOperation";

    static PyObject* _new_WebAccountProviderRetrieveCookiesOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderRetrieveCookiesOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderRetrieveCookiesOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Uri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebAccountProviderRetrieveCookiesOperation_put_Uri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Uri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Context(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Context());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderRetrieveCookiesOperation_get_Cookies(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Cookies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderRetrieveCookiesOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderRetrieveCookiesOperation[] = {
        { "report_completed", (PyCFunction)WebAccountProviderRetrieveCookiesOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)WebAccountProviderRetrieveCookiesOperation_ReportError, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebAccountProviderRetrieveCookiesOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderRetrieveCookiesOperation[] = {
        { const_cast<char*>("kind"), (getter)WebAccountProviderRetrieveCookiesOperation_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebAccountProviderRetrieveCookiesOperation_get_Uri, (setter)WebAccountProviderRetrieveCookiesOperation_put_Uri, nullptr, nullptr },
        { const_cast<char*>("application_callback_uri"), (getter)WebAccountProviderRetrieveCookiesOperation_get_ApplicationCallbackUri, nullptr, nullptr, nullptr },
        { const_cast<char*>("context"), (getter)WebAccountProviderRetrieveCookiesOperation_get_Context, nullptr, nullptr, nullptr },
        { const_cast<char*>("cookies"), (getter)WebAccountProviderRetrieveCookiesOperation_get_Cookies, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderRetrieveCookiesOperation[] = 
    {
        { Py_tp_new, _new_WebAccountProviderRetrieveCookiesOperation },
        { Py_tp_dealloc, _dealloc_WebAccountProviderRetrieveCookiesOperation },
        { Py_tp_methods, _methods_WebAccountProviderRetrieveCookiesOperation },
        { Py_tp_getset, _getset_WebAccountProviderRetrieveCookiesOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderRetrieveCookiesOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderRetrieveCookiesOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderRetrieveCookiesOperation
    };

    // ----- WebAccountProviderSignOutAccountOperation class --------------------
    constexpr const char* const _type_name_WebAccountProviderSignOutAccountOperation = "WebAccountProviderSignOutAccountOperation";

    static PyObject* _new_WebAccountProviderSignOutAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderSignOutAccountOperation);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderSignOutAccountOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_ClientId(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClientId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderSignOutAccountOperation_get_WebAccount(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAccount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderSignOutAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderSignOutAccountOperation[] = {
        { "report_completed", (PyCFunction)WebAccountProviderSignOutAccountOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)WebAccountProviderSignOutAccountOperation_ReportError, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebAccountProviderSignOutAccountOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderSignOutAccountOperation[] = {
        { const_cast<char*>("kind"), (getter)WebAccountProviderSignOutAccountOperation_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("application_callback_uri"), (getter)WebAccountProviderSignOutAccountOperation_get_ApplicationCallbackUri, nullptr, nullptr, nullptr },
        { const_cast<char*>("client_id"), (getter)WebAccountProviderSignOutAccountOperation_get_ClientId, nullptr, nullptr, nullptr },
        { const_cast<char*>("web_account"), (getter)WebAccountProviderSignOutAccountOperation_get_WebAccount, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderSignOutAccountOperation[] = 
    {
        { Py_tp_new, _new_WebAccountProviderSignOutAccountOperation },
        { Py_tp_dealloc, _dealloc_WebAccountProviderSignOutAccountOperation },
        { Py_tp_methods, _methods_WebAccountProviderSignOutAccountOperation },
        { Py_tp_getset, _getset_WebAccountProviderSignOutAccountOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderSignOutAccountOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderSignOutAccountOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderSignOutAccountOperation
    };

    // ----- WebAccountProviderTriggerDetails class --------------------
    constexpr const char* const _type_name_WebAccountProviderTriggerDetails = "WebAccountProviderTriggerDetails";

    static PyObject* _new_WebAccountProviderTriggerDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountProviderTriggerDetails);
        return nullptr;
    }

    static void _dealloc_WebAccountProviderTriggerDetails(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountProviderTriggerDetails_get_Operation(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountProviderTriggerDetails_get_User(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountProviderTriggerDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountProviderTriggerDetails[] = {
        { "_from", (PyCFunction)_from_WebAccountProviderTriggerDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountProviderTriggerDetails[] = {
        { const_cast<char*>("operation"), (getter)WebAccountProviderTriggerDetails_get_Operation, nullptr, nullptr, nullptr },
        { const_cast<char*>("user"), (getter)WebAccountProviderTriggerDetails_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountProviderTriggerDetails[] = 
    {
        { Py_tp_new, _new_WebAccountProviderTriggerDetails },
        { Py_tp_dealloc, _dealloc_WebAccountProviderTriggerDetails },
        { Py_tp_methods, _methods_WebAccountProviderTriggerDetails },
        { Py_tp_getset, _getset_WebAccountProviderTriggerDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountProviderTriggerDetails =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebAccountProviderTriggerDetails",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountProviderTriggerDetails
    };

    // ----- WebProviderTokenRequest class --------------------
    constexpr const char* const _type_name_WebProviderTokenRequest = "WebProviderTokenRequest";

    static PyObject* _new_WebProviderTokenRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebProviderTokenRequest);
        return nullptr;
    }

    static void _dealloc_WebProviderTokenRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebProviderTokenRequest_CheckApplicationForCapabilityAsync(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CheckApplicationForCapabilityAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_GetApplicationTokenBindingKeyAsync(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::TokenBindingKeyType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                return py::convert(self->obj.GetApplicationTokenBindingKeyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_GetApplicationTokenBindingKeyIdAsync(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::TokenBindingKeyType>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 1);

                return py::convert(self->obj.GetApplicationTokenBindingKeyIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ApplicationCallbackUri(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ApplicationCallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ClientRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClientRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_WebAccountSelectionOptions(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAccountSelectionOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_WebAccounts(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAccounts());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ApplicationPackageFamilyName(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ApplicationPackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderTokenRequest_get_ApplicationProcessName(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ApplicationProcessName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebProviderTokenRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebProviderTokenRequest[] = {
        { "check_application_for_capability_async", (PyCFunction)WebProviderTokenRequest_CheckApplicationForCapabilityAsync, METH_VARARGS, nullptr },
        { "get_application_token_binding_key_async", (PyCFunction)WebProviderTokenRequest_GetApplicationTokenBindingKeyAsync, METH_VARARGS, nullptr },
        { "get_application_token_binding_key_id_async", (PyCFunction)WebProviderTokenRequest_GetApplicationTokenBindingKeyIdAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebProviderTokenRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebProviderTokenRequest[] = {
        { const_cast<char*>("application_callback_uri"), (getter)WebProviderTokenRequest_get_ApplicationCallbackUri, nullptr, nullptr, nullptr },
        { const_cast<char*>("client_request"), (getter)WebProviderTokenRequest_get_ClientRequest, nullptr, nullptr, nullptr },
        { const_cast<char*>("web_account_selection_options"), (getter)WebProviderTokenRequest_get_WebAccountSelectionOptions, nullptr, nullptr, nullptr },
        { const_cast<char*>("web_accounts"), (getter)WebProviderTokenRequest_get_WebAccounts, nullptr, nullptr, nullptr },
        { const_cast<char*>("application_package_family_name"), (getter)WebProviderTokenRequest_get_ApplicationPackageFamilyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("application_process_name"), (getter)WebProviderTokenRequest_get_ApplicationProcessName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebProviderTokenRequest[] = 
    {
        { Py_tp_new, _new_WebProviderTokenRequest },
        { Py_tp_dealloc, _dealloc_WebProviderTokenRequest },
        { Py_tp_methods, _methods_WebProviderTokenRequest },
        { Py_tp_getset, _getset_WebProviderTokenRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebProviderTokenRequest =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebProviderTokenRequest",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebProviderTokenRequest
    };

    // ----- WebProviderTokenResponse class --------------------
    constexpr const char* const _type_name_WebProviderTokenResponse = "WebProviderTokenResponse";

    static PyObject* _new_WebProviderTokenResponse(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse>(args, 0);

                winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WebProviderTokenResponse(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebProviderTokenResponse_get_ClientResponse(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClientResponse());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebProviderTokenResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebProviderTokenResponse[] = {
        { "_from", (PyCFunction)_from_WebProviderTokenResponse, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebProviderTokenResponse[] = {
        { const_cast<char*>("client_response"), (getter)WebProviderTokenResponse_get_ClientResponse, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebProviderTokenResponse[] = 
    {
        { Py_tp_new, _new_WebProviderTokenResponse },
        { Py_tp_dealloc, _dealloc_WebProviderTokenResponse },
        { Py_tp_methods, _methods_WebProviderTokenResponse },
        { Py_tp_getset, _getset_WebProviderTokenResponse },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebProviderTokenResponse =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.WebProviderTokenResponse",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebProviderTokenResponse
    };

    // ----- IWebAccountProviderBaseReportOperation interface --------------------
    constexpr const char* const _type_name_IWebAccountProviderBaseReportOperation = "IWebAccountProviderBaseReportOperation";

    static PyObject* _new_IWebAccountProviderBaseReportOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebAccountProviderBaseReportOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderBaseReportOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebAccountProviderBaseReportOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderBaseReportOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IWebAccountProviderBaseReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderBaseReportOperation[] = {
        { "report_completed", (PyCFunction)IWebAccountProviderBaseReportOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)IWebAccountProviderBaseReportOperation_ReportError, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IWebAccountProviderBaseReportOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebAccountProviderBaseReportOperation[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebAccountProviderBaseReportOperation[] = 
    {
        { Py_tp_new, _new_IWebAccountProviderBaseReportOperation },
        { Py_tp_dealloc, _dealloc_IWebAccountProviderBaseReportOperation },
        { Py_tp_methods, _methods_IWebAccountProviderBaseReportOperation },
        { Py_tp_getset, _getset_IWebAccountProviderBaseReportOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebAccountProviderBaseReportOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.IWebAccountProviderBaseReportOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderBaseReportOperation
    };

    // ----- IWebAccountProviderOperation interface --------------------
    constexpr const char* const _type_name_IWebAccountProviderOperation = "IWebAccountProviderOperation";

    static PyObject* _new_IWebAccountProviderOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebAccountProviderOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebAccountProviderOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IWebAccountProviderOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderOperation[] = {
        { "_from", (PyCFunction)_from_IWebAccountProviderOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebAccountProviderOperation[] = {
        { const_cast<char*>("kind"), (getter)IWebAccountProviderOperation_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebAccountProviderOperation[] = 
    {
        { Py_tp_new, _new_IWebAccountProviderOperation },
        { Py_tp_dealloc, _dealloc_IWebAccountProviderOperation },
        { Py_tp_methods, _methods_IWebAccountProviderOperation },
        { Py_tp_getset, _getset_IWebAccountProviderOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebAccountProviderOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.IWebAccountProviderOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderOperation
    };

    // ----- IWebAccountProviderSilentReportOperation interface --------------------
    constexpr const char* const _type_name_IWebAccountProviderSilentReportOperation = "IWebAccountProviderSilentReportOperation";

    static PyObject* _new_IWebAccountProviderSilentReportOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebAccountProviderSilentReportOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderSilentReportOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebAccountProviderSilentReportOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderSilentReportOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderSilentReportOperation_ReportUserInteractionRequired(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportUserInteractionRequired();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportUserInteractionRequired(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IWebAccountProviderSilentReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderSilentReportOperation[] = {
        { "report_user_interaction_required", (PyCFunction)IWebAccountProviderSilentReportOperation_ReportUserInteractionRequired, METH_VARARGS, nullptr },
        { "report_completed", (PyCFunction)IWebAccountProviderSilentReportOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)IWebAccountProviderSilentReportOperation_ReportError, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IWebAccountProviderSilentReportOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebAccountProviderSilentReportOperation[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebAccountProviderSilentReportOperation[] = 
    {
        { Py_tp_new, _new_IWebAccountProviderSilentReportOperation },
        { Py_tp_dealloc, _dealloc_IWebAccountProviderSilentReportOperation },
        { Py_tp_methods, _methods_IWebAccountProviderSilentReportOperation },
        { Py_tp_getset, _getset_IWebAccountProviderSilentReportOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebAccountProviderSilentReportOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.IWebAccountProviderSilentReportOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderSilentReportOperation
    };

    // ----- IWebAccountProviderTokenObjects interface --------------------
    constexpr const char* const _type_name_IWebAccountProviderTokenObjects = "IWebAccountProviderTokenObjects";

    static PyObject* _new_IWebAccountProviderTokenObjects(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebAccountProviderTokenObjects);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderTokenObjects(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebAccountProviderTokenObjects_get_Operation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IWebAccountProviderTokenObjects(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderTokenObjects[] = {
        { "_from", (PyCFunction)_from_IWebAccountProviderTokenObjects, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebAccountProviderTokenObjects[] = {
        { const_cast<char*>("operation"), (getter)IWebAccountProviderTokenObjects_get_Operation, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebAccountProviderTokenObjects[] = 
    {
        { Py_tp_new, _new_IWebAccountProviderTokenObjects },
        { Py_tp_dealloc, _dealloc_IWebAccountProviderTokenObjects },
        { Py_tp_methods, _methods_IWebAccountProviderTokenObjects },
        { Py_tp_getset, _getset_IWebAccountProviderTokenObjects },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebAccountProviderTokenObjects =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.IWebAccountProviderTokenObjects",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderTokenObjects
    };

    // ----- IWebAccountProviderTokenObjects2 interface --------------------
    constexpr const char* const _type_name_IWebAccountProviderTokenObjects2 = "IWebAccountProviderTokenObjects2";

    static PyObject* _new_IWebAccountProviderTokenObjects2(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebAccountProviderTokenObjects2);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderTokenObjects2(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebAccountProviderTokenObjects2_get_User(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderTokenObjects2_get_Operation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IWebAccountProviderTokenObjects2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderTokenObjects2[] = {
        { "_from", (PyCFunction)_from_IWebAccountProviderTokenObjects2, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebAccountProviderTokenObjects2[] = {
        { const_cast<char*>("user"), (getter)IWebAccountProviderTokenObjects2_get_User, nullptr, nullptr, nullptr },
        { const_cast<char*>("operation"), (getter)IWebAccountProviderTokenObjects2_get_Operation, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebAccountProviderTokenObjects2[] = 
    {
        { Py_tp_new, _new_IWebAccountProviderTokenObjects2 },
        { Py_tp_dealloc, _dealloc_IWebAccountProviderTokenObjects2 },
        { Py_tp_methods, _methods_IWebAccountProviderTokenObjects2 },
        { Py_tp_getset, _getset_IWebAccountProviderTokenObjects2 },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebAccountProviderTokenObjects2 =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.IWebAccountProviderTokenObjects2",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderTokenObjects2
    };

    // ----- IWebAccountProviderTokenOperation interface --------------------
    constexpr const char* const _type_name_IWebAccountProviderTokenOperation = "IWebAccountProviderTokenOperation";

    static PyObject* _new_IWebAccountProviderTokenOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebAccountProviderTokenOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderTokenOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebAccountProviderTokenOperation_get_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CacheExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IWebAccountProviderTokenOperation_put_CacheExpirationTime(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.CacheExpirationTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IWebAccountProviderTokenOperation_get_ProviderRequest(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderTokenOperation_get_ProviderResponses(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderResponses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderTokenOperation_get_Kind(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IWebAccountProviderTokenOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderTokenOperation[] = {
        { "_from", (PyCFunction)_from_IWebAccountProviderTokenOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebAccountProviderTokenOperation[] = {
        { const_cast<char*>("cache_expiration_time"), (getter)IWebAccountProviderTokenOperation_get_CacheExpirationTime, (setter)IWebAccountProviderTokenOperation_put_CacheExpirationTime, nullptr, nullptr },
        { const_cast<char*>("provider_request"), (getter)IWebAccountProviderTokenOperation_get_ProviderRequest, nullptr, nullptr, nullptr },
        { const_cast<char*>("provider_responses"), (getter)IWebAccountProviderTokenOperation_get_ProviderResponses, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)IWebAccountProviderTokenOperation_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebAccountProviderTokenOperation[] = 
    {
        { Py_tp_new, _new_IWebAccountProviderTokenOperation },
        { Py_tp_dealloc, _dealloc_IWebAccountProviderTokenOperation },
        { Py_tp_methods, _methods_IWebAccountProviderTokenOperation },
        { Py_tp_getset, _getset_IWebAccountProviderTokenOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebAccountProviderTokenOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.IWebAccountProviderTokenOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderTokenOperation
    };

    // ----- IWebAccountProviderUIReportOperation interface --------------------
    constexpr const char* const _type_name_IWebAccountProviderUIReportOperation = "IWebAccountProviderUIReportOperation";

    static PyObject* _new_IWebAccountProviderUIReportOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebAccountProviderUIReportOperation);
        return nullptr;
    }

    static void _dealloc_IWebAccountProviderUIReportOperation(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebAccountProviderUIReportOperation_ReportCompleted(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderUIReportOperation_ReportError(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 0);

                self->obj.ReportError(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebAccountProviderUIReportOperation_ReportUserCanceled(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportUserCanceled();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IWebAccountProviderUIReportOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebAccountProviderUIReportOperation[] = {
        { "report_user_canceled", (PyCFunction)IWebAccountProviderUIReportOperation_ReportUserCanceled, METH_VARARGS, nullptr },
        { "report_completed", (PyCFunction)IWebAccountProviderUIReportOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "report_error", (PyCFunction)IWebAccountProviderUIReportOperation_ReportError, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IWebAccountProviderUIReportOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebAccountProviderUIReportOperation[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebAccountProviderUIReportOperation[] = 
    {
        { Py_tp_new, _new_IWebAccountProviderUIReportOperation },
        { Py_tp_dealloc, _dealloc_IWebAccountProviderUIReportOperation },
        { Py_tp_methods, _methods_IWebAccountProviderUIReportOperation },
        { Py_tp_getset, _getset_IWebAccountProviderUIReportOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebAccountProviderUIReportOperation =
    {
        "_winrt_Windows_Security_Authentication_Web_Provider.IWebAccountProviderUIReportOperation",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebAccountProviderUIReportOperation
    };

    // ----- Windows.Security.Authentication.Web.Provider Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountClientView>::python_type = py::register_python_type(module, _type_name_WebAccountClientView, &_type_spec_WebAccountClientView, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager>::python_type = py::register_python_type(module, _type_name_WebAccountManager, &_type_spec_WebAccountManager, nullptr);
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation>::python_type = py::register_python_type(module, _type_name_WebAccountProviderAddAccountOperation, &_type_spec_WebAccountProviderAddAccountOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation>::python_type = py::register_python_type(module, _type_name_WebAccountProviderDeleteAccountOperation, &_type_spec_WebAccountProviderDeleteAccountOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation>::python_type = py::register_python_type(module, _type_name_WebAccountProviderGetTokenSilentOperation, &_type_spec_WebAccountProviderGetTokenSilentOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation>::python_type = py::register_python_type(module, _type_name_WebAccountProviderManageAccountOperation, &_type_spec_WebAccountProviderManageAccountOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation>::python_type = py::register_python_type(module, _type_name_WebAccountProviderRequestTokenOperation, &_type_spec_WebAccountProviderRequestTokenOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation>::python_type = py::register_python_type(module, _type_name_WebAccountProviderRetrieveCookiesOperation, &_type_spec_WebAccountProviderRetrieveCookiesOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation>::python_type = py::register_python_type(module, _type_name_WebAccountProviderSignOutAccountOperation, &_type_spec_WebAccountProviderSignOutAccountOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails>::python_type = py::register_python_type(module, _type_name_WebAccountProviderTriggerDetails, &_type_spec_WebAccountProviderTriggerDetails, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest>::python_type = py::register_python_type(module, _type_name_WebProviderTokenRequest, &_type_spec_WebProviderTokenRequest, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse>::python_type = py::register_python_type(module, _type_name_WebProviderTokenResponse, &_type_spec_WebProviderTokenResponse, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>::python_type = py::register_python_type(module, _type_name_IWebAccountProviderBaseReportOperation, &_type_spec_IWebAccountProviderBaseReportOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>::python_type = py::register_python_type(module, _type_name_IWebAccountProviderOperation, &_type_spec_IWebAccountProviderOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation>::python_type = py::register_python_type(module, _type_name_IWebAccountProviderSilentReportOperation, &_type_spec_IWebAccountProviderSilentReportOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects>::python_type = py::register_python_type(module, _type_name_IWebAccountProviderTokenObjects, &_type_spec_IWebAccountProviderTokenObjects, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2>::python_type = py::register_python_type(module, _type_name_IWebAccountProviderTokenObjects2, &_type_spec_IWebAccountProviderTokenObjects2, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation>::python_type = py::register_python_type(module, _type_name_IWebAccountProviderTokenOperation, &_type_spec_IWebAccountProviderTokenOperation, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation>::python_type = py::register_python_type(module, _type_name_IWebAccountProviderUIReportOperation, &_type_spec_IWebAccountProviderUIReportOperation, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Security.Authentication.Web.Provider");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Security_Authentication_Web_Provider",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Security::Authentication::Web::Provider

PyMODINIT_FUNC
PyInit__winrt_Windows_Security_Authentication_Web_Provider (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Security::Authentication::Web::Provider::module_def);
}
