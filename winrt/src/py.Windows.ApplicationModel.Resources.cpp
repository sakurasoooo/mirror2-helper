// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Resources.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::ResourceLoader>::python_type;

namespace py::cpp::Windows::ApplicationModel::Resources
{
    // ----- ResourceLoader class --------------------
    constexpr const char* const _type_name_ResourceLoader = "ResourceLoader";

    static PyObject* _new_ResourceLoader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Resources::ResourceLoader instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Resources::ResourceLoader instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ResourceLoader(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceLoader_GetDefaultPriPath(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetDefaultPriPath(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForCurrentView(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetForUIContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::UIContext>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForUIContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetForViewIndependentUse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForViewIndependentUse());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForViewIndependentUse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetString(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetStringForReference(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetStringForReference(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetStringForUri(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.GetStringForUri(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ResourceLoader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::ResourceLoader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceLoader[] = {
        { "get_default_pri_path", (PyCFunction)ResourceLoader_GetDefaultPriPath, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_current_view", (PyCFunction)ResourceLoader_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_u_i_context", (PyCFunction)ResourceLoader_GetForUIContext, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_view_independent_use", (PyCFunction)ResourceLoader_GetForViewIndependentUse, METH_VARARGS | METH_STATIC, nullptr },
        { "get_string", (PyCFunction)ResourceLoader_GetString, METH_VARARGS, nullptr },
        { "get_string_for_reference", (PyCFunction)ResourceLoader_GetStringForReference, METH_VARARGS | METH_STATIC, nullptr },
        { "get_string_for_uri", (PyCFunction)ResourceLoader_GetStringForUri, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceLoader, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceLoader[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceLoader[] = 
    {
        { Py_tp_new, _new_ResourceLoader },
        { Py_tp_dealloc, _dealloc_ResourceLoader },
        { Py_tp_methods, _methods_ResourceLoader },
        { Py_tp_getset, _getset_ResourceLoader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceLoader =
    {
        "_winrt_Windows_ApplicationModel_Resources.ResourceLoader",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceLoader
    };

    // ----- Windows.ApplicationModel.Resources Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Resources::ResourceLoader>::python_type = py::register_python_type(module, _type_name_ResourceLoader, &_type_spec_ResourceLoader, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Resources");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Resources",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Resources

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Resources (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Resources::module_def);
}
