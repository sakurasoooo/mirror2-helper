// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Services.TargetedContent.h"

PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentAction>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentCollection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentContainer>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentFile>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentImage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentItemState>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentObject>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentSubscription>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentValue>::python_type;

namespace py::cpp::Windows::Services::TargetedContent
{
    // ----- TargetedContentAction class --------------------
    constexpr const char* const _type_name_TargetedContentAction = "TargetedContentAction";

    static PyObject* _new_TargetedContentAction(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentAction);
        return nullptr;
    }

    static void _dealloc_TargetedContentAction(py::wrapper::Windows::Services::TargetedContent::TargetedContentAction* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentAction_InvokeAsync(py::wrapper::Windows::Services::TargetedContent::TargetedContentAction* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.InvokeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentAction(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentAction>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentAction[] = {
        { "invoke_async", (PyCFunction)TargetedContentAction_InvokeAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentAction, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentAction[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentAction[] = 
    {
        { Py_tp_new, _new_TargetedContentAction },
        { Py_tp_dealloc, _dealloc_TargetedContentAction },
        { Py_tp_methods, _methods_TargetedContentAction },
        { Py_tp_getset, _getset_TargetedContentAction },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentAction =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentAction",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentAction),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentAction
    };

    // ----- TargetedContentAvailabilityChangedEventArgs class --------------------
    constexpr const char* const _type_name_TargetedContentAvailabilityChangedEventArgs = "TargetedContentAvailabilityChangedEventArgs";

    static PyObject* _new_TargetedContentAvailabilityChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentAvailabilityChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_TargetedContentAvailabilityChangedEventArgs(py::wrapper::Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentAvailabilityChangedEventArgs_GetDeferral(py::wrapper::Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentAvailabilityChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentAvailabilityChangedEventArgs[] = {
        { "get_deferral", (PyCFunction)TargetedContentAvailabilityChangedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentAvailabilityChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentAvailabilityChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentAvailabilityChangedEventArgs[] = 
    {
        { Py_tp_new, _new_TargetedContentAvailabilityChangedEventArgs },
        { Py_tp_dealloc, _dealloc_TargetedContentAvailabilityChangedEventArgs },
        { Py_tp_methods, _methods_TargetedContentAvailabilityChangedEventArgs },
        { Py_tp_getset, _getset_TargetedContentAvailabilityChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentAvailabilityChangedEventArgs =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentAvailabilityChangedEventArgs",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentAvailabilityChangedEventArgs
    };

    // ----- TargetedContentChangedEventArgs class --------------------
    constexpr const char* const _type_name_TargetedContentChangedEventArgs = "TargetedContentChangedEventArgs";

    static PyObject* _new_TargetedContentChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_TargetedContentChangedEventArgs(py::wrapper::Windows::Services::TargetedContent::TargetedContentChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentChangedEventArgs_GetDeferral(py::wrapper::Windows::Services::TargetedContent::TargetedContentChangedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentChangedEventArgs_get_HasPreviousContentExpired(py::wrapper::Windows::Services::TargetedContent::TargetedContentChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasPreviousContentExpired());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentChangedEventArgs[] = {
        { "get_deferral", (PyCFunction)TargetedContentChangedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentChangedEventArgs[] = {
        { const_cast<char*>("has_previous_content_expired"), (getter)TargetedContentChangedEventArgs_get_HasPreviousContentExpired, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentChangedEventArgs[] = 
    {
        { Py_tp_new, _new_TargetedContentChangedEventArgs },
        { Py_tp_dealloc, _dealloc_TargetedContentChangedEventArgs },
        { Py_tp_methods, _methods_TargetedContentChangedEventArgs },
        { Py_tp_getset, _getset_TargetedContentChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentChangedEventArgs =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentChangedEventArgs",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentChangedEventArgs
    };

    // ----- TargetedContentCollection class --------------------
    constexpr const char* const _type_name_TargetedContentCollection = "TargetedContentCollection";

    static PyObject* _new_TargetedContentCollection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentCollection);
        return nullptr;
    }

    static void _dealloc_TargetedContentCollection(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentCollection_ReportCustomInteraction(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.ReportCustomInteraction(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentCollection_ReportInteraction(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Services::TargetedContent::TargetedContentInteraction>(args, 0);

                self->obj.ReportInteraction(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentCollection_get_Collections(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Collections());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentCollection_get_Id(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentCollection_get_Items(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Items());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentCollection_get_Path(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Path());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentCollection_get_Properties(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentCollection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentCollection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentCollection[] = {
        { "report_custom_interaction", (PyCFunction)TargetedContentCollection_ReportCustomInteraction, METH_VARARGS, nullptr },
        { "report_interaction", (PyCFunction)TargetedContentCollection_ReportInteraction, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentCollection, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentCollection[] = {
        { const_cast<char*>("collections"), (getter)TargetedContentCollection_get_Collections, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)TargetedContentCollection_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("items"), (getter)TargetedContentCollection_get_Items, nullptr, nullptr, nullptr },
        { const_cast<char*>("path"), (getter)TargetedContentCollection_get_Path, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)TargetedContentCollection_get_Properties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentCollection[] = 
    {
        { Py_tp_new, _new_TargetedContentCollection },
        { Py_tp_dealloc, _dealloc_TargetedContentCollection },
        { Py_tp_methods, _methods_TargetedContentCollection },
        { Py_tp_getset, _getset_TargetedContentCollection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentCollection =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentCollection",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentCollection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentCollection
    };

    // ----- TargetedContentContainer class --------------------
    constexpr const char* const _type_name_TargetedContentContainer = "TargetedContentContainer";

    static PyObject* _new_TargetedContentContainer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentContainer);
        return nullptr;
    }

    static void _dealloc_TargetedContentContainer(py::wrapper::Windows::Services::TargetedContent::TargetedContentContainer* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentContainer_GetAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Services::TargetedContent::TargetedContentContainer::GetAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentContainer_SelectSingleObject(py::wrapper::Windows::Services::TargetedContent::TargetedContentContainer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.SelectSingleObject(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentContainer_get_Availability(py::wrapper::Windows::Services::TargetedContent::TargetedContentContainer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Availability());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentContainer_get_Content(py::wrapper::Windows::Services::TargetedContent::TargetedContentContainer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentContainer_get_Id(py::wrapper::Windows::Services::TargetedContent::TargetedContentContainer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentContainer_get_Timestamp(py::wrapper::Windows::Services::TargetedContent::TargetedContentContainer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentContainer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentContainer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentContainer[] = {
        { "get_async", (PyCFunction)TargetedContentContainer_GetAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "select_single_object", (PyCFunction)TargetedContentContainer_SelectSingleObject, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentContainer, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentContainer[] = {
        { const_cast<char*>("availability"), (getter)TargetedContentContainer_get_Availability, nullptr, nullptr, nullptr },
        { const_cast<char*>("content"), (getter)TargetedContentContainer_get_Content, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)TargetedContentContainer_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)TargetedContentContainer_get_Timestamp, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentContainer[] = 
    {
        { Py_tp_new, _new_TargetedContentContainer },
        { Py_tp_dealloc, _dealloc_TargetedContentContainer },
        { Py_tp_methods, _methods_TargetedContentContainer },
        { Py_tp_getset, _getset_TargetedContentContainer },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentContainer =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentContainer",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentContainer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentContainer
    };

    // ----- TargetedContentFile class --------------------
    constexpr const char* const _type_name_TargetedContentFile = "TargetedContentFile";

    static PyObject* _new_TargetedContentFile(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentFile);
        return nullptr;
    }

    static void _dealloc_TargetedContentFile(py::wrapper::Windows::Services::TargetedContent::TargetedContentFile* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentFile_OpenReadAsync(py::wrapper::Windows::Services::TargetedContent::TargetedContentFile* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.OpenReadAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentFile(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentFile>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentFile[] = {
        { "open_read_async", (PyCFunction)TargetedContentFile_OpenReadAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentFile, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentFile[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentFile[] = 
    {
        { Py_tp_new, _new_TargetedContentFile },
        { Py_tp_dealloc, _dealloc_TargetedContentFile },
        { Py_tp_methods, _methods_TargetedContentFile },
        { Py_tp_getset, _getset_TargetedContentFile },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentFile =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentFile",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentFile),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentFile
    };

    // ----- TargetedContentImage class --------------------
    constexpr const char* const _type_name_TargetedContentImage = "TargetedContentImage";

    static PyObject* _new_TargetedContentImage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentImage);
        return nullptr;
    }

    static void _dealloc_TargetedContentImage(py::wrapper::Windows::Services::TargetedContent::TargetedContentImage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentImage_OpenReadAsync(py::wrapper::Windows::Services::TargetedContent::TargetedContentImage* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.OpenReadAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentImage_get_Height(py::wrapper::Windows::Services::TargetedContent::TargetedContentImage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentImage_get_Width(py::wrapper::Windows::Services::TargetedContent::TargetedContentImage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Width());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentImage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentImage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentImage[] = {
        { "open_read_async", (PyCFunction)TargetedContentImage_OpenReadAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentImage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentImage[] = {
        { const_cast<char*>("height"), (getter)TargetedContentImage_get_Height, nullptr, nullptr, nullptr },
        { const_cast<char*>("width"), (getter)TargetedContentImage_get_Width, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentImage[] = 
    {
        { Py_tp_new, _new_TargetedContentImage },
        { Py_tp_dealloc, _dealloc_TargetedContentImage },
        { Py_tp_methods, _methods_TargetedContentImage },
        { Py_tp_getset, _getset_TargetedContentImage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentImage =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentImage",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentImage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentImage
    };

    // ----- TargetedContentItem class --------------------
    constexpr const char* const _type_name_TargetedContentItem = "TargetedContentItem";

    static PyObject* _new_TargetedContentItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentItem);
        return nullptr;
    }

    static void _dealloc_TargetedContentItem(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentItem_ReportCustomInteraction(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.ReportCustomInteraction(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentItem_ReportInteraction(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Services::TargetedContent::TargetedContentInteraction>(args, 0);

                self->obj.ReportInteraction(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentItem_get_Collections(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Collections());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentItem_get_Path(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Path());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentItem_get_Properties(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentItem_get_State(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentItem[] = {
        { "report_custom_interaction", (PyCFunction)TargetedContentItem_ReportCustomInteraction, METH_VARARGS, nullptr },
        { "report_interaction", (PyCFunction)TargetedContentItem_ReportInteraction, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentItem[] = {
        { const_cast<char*>("collections"), (getter)TargetedContentItem_get_Collections, nullptr, nullptr, nullptr },
        { const_cast<char*>("path"), (getter)TargetedContentItem_get_Path, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)TargetedContentItem_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)TargetedContentItem_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentItem[] = 
    {
        { Py_tp_new, _new_TargetedContentItem },
        { Py_tp_dealloc, _dealloc_TargetedContentItem },
        { Py_tp_methods, _methods_TargetedContentItem },
        { Py_tp_getset, _getset_TargetedContentItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentItem =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentItem",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentItem
    };

    // ----- TargetedContentItemState class --------------------
    constexpr const char* const _type_name_TargetedContentItemState = "TargetedContentItemState";

    static PyObject* _new_TargetedContentItemState(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentItemState);
        return nullptr;
    }

    static void _dealloc_TargetedContentItemState(py::wrapper::Windows::Services::TargetedContent::TargetedContentItemState* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentItemState_get_AppInstallationState(py::wrapper::Windows::Services::TargetedContent::TargetedContentItemState* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppInstallationState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentItemState_get_ShouldDisplay(py::wrapper::Windows::Services::TargetedContent::TargetedContentItemState* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShouldDisplay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentItemState(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentItemState>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentItemState[] = {
        { "_from", (PyCFunction)_from_TargetedContentItemState, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentItemState[] = {
        { const_cast<char*>("app_installation_state"), (getter)TargetedContentItemState_get_AppInstallationState, nullptr, nullptr, nullptr },
        { const_cast<char*>("should_display"), (getter)TargetedContentItemState_get_ShouldDisplay, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentItemState[] = 
    {
        { Py_tp_new, _new_TargetedContentItemState },
        { Py_tp_dealloc, _dealloc_TargetedContentItemState },
        { Py_tp_methods, _methods_TargetedContentItemState },
        { Py_tp_getset, _getset_TargetedContentItemState },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentItemState =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentItemState",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentItemState),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentItemState
    };

    // ----- TargetedContentObject class --------------------
    constexpr const char* const _type_name_TargetedContentObject = "TargetedContentObject";

    static PyObject* _new_TargetedContentObject(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentObject);
        return nullptr;
    }

    static void _dealloc_TargetedContentObject(py::wrapper::Windows::Services::TargetedContent::TargetedContentObject* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentObject_get_Collection(py::wrapper::Windows::Services::TargetedContent::TargetedContentObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Collection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentObject_get_Item(py::wrapper::Windows::Services::TargetedContent::TargetedContentObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Item());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentObject_get_ObjectKind(py::wrapper::Windows::Services::TargetedContent::TargetedContentObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ObjectKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentObject_get_Value(py::wrapper::Windows::Services::TargetedContent::TargetedContentObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentObject(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentObject>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentObject[] = {
        { "_from", (PyCFunction)_from_TargetedContentObject, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentObject[] = {
        { const_cast<char*>("collection"), (getter)TargetedContentObject_get_Collection, nullptr, nullptr, nullptr },
        { const_cast<char*>("item"), (getter)TargetedContentObject_get_Item, nullptr, nullptr, nullptr },
        { const_cast<char*>("object_kind"), (getter)TargetedContentObject_get_ObjectKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)TargetedContentObject_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentObject[] = 
    {
        { Py_tp_new, _new_TargetedContentObject },
        { Py_tp_dealloc, _dealloc_TargetedContentObject },
        { Py_tp_methods, _methods_TargetedContentObject },
        { Py_tp_getset, _getset_TargetedContentObject },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentObject =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentObject",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentObject),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentObject
    };

    // ----- TargetedContentStateChangedEventArgs class --------------------
    constexpr const char* const _type_name_TargetedContentStateChangedEventArgs = "TargetedContentStateChangedEventArgs";

    static PyObject* _new_TargetedContentStateChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentStateChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_TargetedContentStateChangedEventArgs(py::wrapper::Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentStateChangedEventArgs_GetDeferral(py::wrapper::Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentStateChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentStateChangedEventArgs[] = {
        { "get_deferral", (PyCFunction)TargetedContentStateChangedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentStateChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentStateChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentStateChangedEventArgs[] = 
    {
        { Py_tp_new, _new_TargetedContentStateChangedEventArgs },
        { Py_tp_dealloc, _dealloc_TargetedContentStateChangedEventArgs },
        { Py_tp_methods, _methods_TargetedContentStateChangedEventArgs },
        { Py_tp_getset, _getset_TargetedContentStateChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentStateChangedEventArgs =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentStateChangedEventArgs",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentStateChangedEventArgs
    };

    // ----- TargetedContentSubscription class --------------------
    constexpr const char* const _type_name_TargetedContentSubscription = "TargetedContentSubscription";

    static PyObject* _new_TargetedContentSubscription(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentSubscription);
        return nullptr;
    }

    static void _dealloc_TargetedContentSubscription(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentSubscription_GetAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Services::TargetedContent::TargetedContentSubscription::GetAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_GetContentContainerAsync(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetContentContainerAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_GetOptions(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Services::TargetedContent::TargetedContentSubscription::GetOptions(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_get_Id(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_add_AvailabilityChanged(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Services::TargetedContent::TargetedContentSubscription, winrt::Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs>>(arg);

            return py::convert(self->obj.AvailabilityChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_remove_AvailabilityChanged(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AvailabilityChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_add_ContentChanged(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Services::TargetedContent::TargetedContentSubscription, winrt::Windows::Services::TargetedContent::TargetedContentChangedEventArgs>>(arg);

            return py::convert(self->obj.ContentChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_remove_ContentChanged(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ContentChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_add_StateChanged(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Services::TargetedContent::TargetedContentSubscription, winrt::Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs>>(arg);

            return py::convert(self->obj.StateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscription_remove_StateChanged(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentSubscription(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentSubscription>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentSubscription[] = {
        { "get_async", (PyCFunction)TargetedContentSubscription_GetAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_content_container_async", (PyCFunction)TargetedContentSubscription_GetContentContainerAsync, METH_VARARGS, nullptr },
        { "get_options", (PyCFunction)TargetedContentSubscription_GetOptions, METH_VARARGS | METH_STATIC, nullptr },
        { "add_availability_changed", (PyCFunction)TargetedContentSubscription_add_AvailabilityChanged, METH_O, nullptr },
        { "remove_availability_changed", (PyCFunction)TargetedContentSubscription_remove_AvailabilityChanged, METH_O, nullptr },
        { "add_content_changed", (PyCFunction)TargetedContentSubscription_add_ContentChanged, METH_O, nullptr },
        { "remove_content_changed", (PyCFunction)TargetedContentSubscription_remove_ContentChanged, METH_O, nullptr },
        { "add_state_changed", (PyCFunction)TargetedContentSubscription_add_StateChanged, METH_O, nullptr },
        { "remove_state_changed", (PyCFunction)TargetedContentSubscription_remove_StateChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentSubscription, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentSubscription[] = {
        { const_cast<char*>("id"), (getter)TargetedContentSubscription_get_Id, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentSubscription[] = 
    {
        { Py_tp_new, _new_TargetedContentSubscription },
        { Py_tp_dealloc, _dealloc_TargetedContentSubscription },
        { Py_tp_methods, _methods_TargetedContentSubscription },
        { Py_tp_getset, _getset_TargetedContentSubscription },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentSubscription =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentSubscription",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscription),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentSubscription
    };

    // ----- TargetedContentSubscriptionOptions class --------------------
    constexpr const char* const _type_name_TargetedContentSubscriptionOptions = "TargetedContentSubscriptionOptions";

    static PyObject* _new_TargetedContentSubscriptionOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentSubscriptionOptions);
        return nullptr;
    }

    static void _dealloc_TargetedContentSubscriptionOptions(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentSubscriptionOptions_Update(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Update();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscriptionOptions_get_AllowPartialContentAvailability(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowPartialContentAvailability());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TargetedContentSubscriptionOptions_put_AllowPartialContentAvailability(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowPartialContentAvailability(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TargetedContentSubscriptionOptions_get_CloudQueryParameters(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CloudQueryParameters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscriptionOptions_get_LocalFilters(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LocalFilters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentSubscriptionOptions_get_SubscriptionId(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SubscriptionId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentSubscriptionOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentSubscriptionOptions[] = {
        { "update", (PyCFunction)TargetedContentSubscriptionOptions_Update, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetedContentSubscriptionOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentSubscriptionOptions[] = {
        { const_cast<char*>("allow_partial_content_availability"), (getter)TargetedContentSubscriptionOptions_get_AllowPartialContentAvailability, (setter)TargetedContentSubscriptionOptions_put_AllowPartialContentAvailability, nullptr, nullptr },
        { const_cast<char*>("cloud_query_parameters"), (getter)TargetedContentSubscriptionOptions_get_CloudQueryParameters, nullptr, nullptr, nullptr },
        { const_cast<char*>("local_filters"), (getter)TargetedContentSubscriptionOptions_get_LocalFilters, nullptr, nullptr, nullptr },
        { const_cast<char*>("subscription_id"), (getter)TargetedContentSubscriptionOptions_get_SubscriptionId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentSubscriptionOptions[] = 
    {
        { Py_tp_new, _new_TargetedContentSubscriptionOptions },
        { Py_tp_dealloc, _dealloc_TargetedContentSubscriptionOptions },
        { Py_tp_methods, _methods_TargetedContentSubscriptionOptions },
        { Py_tp_getset, _getset_TargetedContentSubscriptionOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentSubscriptionOptions =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentSubscriptionOptions",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentSubscriptionOptions
    };

    // ----- TargetedContentValue class --------------------
    constexpr const char* const _type_name_TargetedContentValue = "TargetedContentValue";

    static PyObject* _new_TargetedContentValue(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetedContentValue);
        return nullptr;
    }

    static void _dealloc_TargetedContentValue(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetedContentValue_get_Action(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Action());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Actions(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Actions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Boolean(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Boolean());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Booleans(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Booleans());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_File(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.File());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Files(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Files());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_ImageFile(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ImageFile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_ImageFiles(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ImageFiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Number(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Number());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Numbers(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Numbers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Path(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Path());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_String(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.String());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Strings(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Strings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Uri(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_Uris(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uris());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TargetedContentValue_get_ValueKind(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ValueKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetedContentValue(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::TargetedContent::TargetedContentValue>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetedContentValue[] = {
        { "_from", (PyCFunction)_from_TargetedContentValue, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetedContentValue[] = {
        { const_cast<char*>("action"), (getter)TargetedContentValue_get_Action, nullptr, nullptr, nullptr },
        { const_cast<char*>("actions"), (getter)TargetedContentValue_get_Actions, nullptr, nullptr, nullptr },
        { const_cast<char*>("boolean"), (getter)TargetedContentValue_get_Boolean, nullptr, nullptr, nullptr },
        { const_cast<char*>("booleans"), (getter)TargetedContentValue_get_Booleans, nullptr, nullptr, nullptr },
        { const_cast<char*>("file"), (getter)TargetedContentValue_get_File, nullptr, nullptr, nullptr },
        { const_cast<char*>("files"), (getter)TargetedContentValue_get_Files, nullptr, nullptr, nullptr },
        { const_cast<char*>("image_file"), (getter)TargetedContentValue_get_ImageFile, nullptr, nullptr, nullptr },
        { const_cast<char*>("image_files"), (getter)TargetedContentValue_get_ImageFiles, nullptr, nullptr, nullptr },
        { const_cast<char*>("number"), (getter)TargetedContentValue_get_Number, nullptr, nullptr, nullptr },
        { const_cast<char*>("numbers"), (getter)TargetedContentValue_get_Numbers, nullptr, nullptr, nullptr },
        { const_cast<char*>("path"), (getter)TargetedContentValue_get_Path, nullptr, nullptr, nullptr },
        { const_cast<char*>("string"), (getter)TargetedContentValue_get_String, nullptr, nullptr, nullptr },
        { const_cast<char*>("strings"), (getter)TargetedContentValue_get_Strings, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)TargetedContentValue_get_Uri, nullptr, nullptr, nullptr },
        { const_cast<char*>("uris"), (getter)TargetedContentValue_get_Uris, nullptr, nullptr, nullptr },
        { const_cast<char*>("value_kind"), (getter)TargetedContentValue_get_ValueKind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetedContentValue[] = 
    {
        { Py_tp_new, _new_TargetedContentValue },
        { Py_tp_dealloc, _dealloc_TargetedContentValue },
        { Py_tp_methods, _methods_TargetedContentValue },
        { Py_tp_getset, _getset_TargetedContentValue },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetedContentValue =
    {
        "_winrt_Windows_Services_TargetedContent.TargetedContentValue",
        sizeof(py::wrapper::Windows::Services::TargetedContent::TargetedContentValue),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetedContentValue
    };

    // ----- Windows.Services.TargetedContent Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentAction>::python_type = py::register_python_type(module, _type_name_TargetedContentAction, &_type_spec_TargetedContentAction, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs>::python_type = py::register_python_type(module, _type_name_TargetedContentAvailabilityChangedEventArgs, &_type_spec_TargetedContentAvailabilityChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentChangedEventArgs>::python_type = py::register_python_type(module, _type_name_TargetedContentChangedEventArgs, &_type_spec_TargetedContentChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentCollection>::python_type = py::register_python_type(module, _type_name_TargetedContentCollection, &_type_spec_TargetedContentCollection, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentContainer>::python_type = py::register_python_type(module, _type_name_TargetedContentContainer, &_type_spec_TargetedContentContainer, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentFile>::python_type = py::register_python_type(module, _type_name_TargetedContentFile, &_type_spec_TargetedContentFile, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentImage>::python_type = py::register_python_type(module, _type_name_TargetedContentImage, &_type_spec_TargetedContentImage, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentItem>::python_type = py::register_python_type(module, _type_name_TargetedContentItem, &_type_spec_TargetedContentItem, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentItemState>::python_type = py::register_python_type(module, _type_name_TargetedContentItemState, &_type_spec_TargetedContentItemState, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentObject>::python_type = py::register_python_type(module, _type_name_TargetedContentObject, &_type_spec_TargetedContentObject, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs>::python_type = py::register_python_type(module, _type_name_TargetedContentStateChangedEventArgs, &_type_spec_TargetedContentStateChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentSubscription>::python_type = py::register_python_type(module, _type_name_TargetedContentSubscription, &_type_spec_TargetedContentSubscription, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentSubscriptionOptions>::python_type = py::register_python_type(module, _type_name_TargetedContentSubscriptionOptions, &_type_spec_TargetedContentSubscriptionOptions, bases.get());
            py::winrt_type<winrt::Windows::Services::TargetedContent::TargetedContentValue>::python_type = py::register_python_type(module, _type_name_TargetedContentValue, &_type_spec_TargetedContentValue, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Services.TargetedContent");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Services_TargetedContent",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Services::TargetedContent

PyMODINIT_FUNC
PyInit__winrt_Windows_Services_TargetedContent (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Services::TargetedContent::module_def);
}
