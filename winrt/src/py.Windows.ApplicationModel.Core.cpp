// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::AppListEntry>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::CoreApplication>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::CoreApplicationView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::UnhandledError>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::IFrameworkView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>::python_type;

namespace py::cpp::Windows::ApplicationModel::Core
{
    // ----- AppListEntry class --------------------
    constexpr const char* const _type_name_AppListEntry = "AppListEntry";

    static PyObject* _new_AppListEntry(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppListEntry);
        return nullptr;
    }

    static void _dealloc_AppListEntry(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppListEntry_LaunchAsync(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.LaunchAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppListEntry_LaunchForUserAsync(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(self->obj.LaunchForUserAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppListEntry_get_DisplayInfo(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppListEntry_get_AppUserModelId(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppUserModelId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppListEntry_get_AppInfo(py::wrapper::Windows::ApplicationModel::Core::AppListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppListEntry(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::AppListEntry>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppListEntry[] = {
        { "launch_async", (PyCFunction)AppListEntry_LaunchAsync, METH_VARARGS, nullptr },
        { "launch_for_user_async", (PyCFunction)AppListEntry_LaunchForUserAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppListEntry, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppListEntry[] = {
        { const_cast<char*>("display_info"), (getter)AppListEntry_get_DisplayInfo, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_user_model_id"), (getter)AppListEntry_get_AppUserModelId, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_info"), (getter)AppListEntry_get_AppInfo, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppListEntry[] = 
    {
        { Py_tp_new, _new_AppListEntry },
        { Py_tp_dealloc, _dealloc_AppListEntry },
        { Py_tp_methods, _methods_AppListEntry },
        { Py_tp_getset, _getset_AppListEntry },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppListEntry =
    {
        "_winrt_Windows_ApplicationModel_Core.AppListEntry",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::AppListEntry),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppListEntry
    };

    // ----- CoreApplication class --------------------
    constexpr const char* const _type_name_CoreApplication = "CoreApplication";

    static PyObject* _new_CoreApplication(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreApplication);
        return nullptr;
    }

    static PyObject* CoreApplication_CreateNewView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::CreateNewView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::CreateNewView(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::CreateNewView(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_DecrementApplicationUseCount(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Core::CoreApplication::DecrementApplicationUseCount();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_EnablePrelaunch(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                winrt::Windows::ApplicationModel::Core::CoreApplication::EnablePrelaunch(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_Exit(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Core::CoreApplication::Exit();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_GetCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::GetCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_IncrementApplicationUseCount(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Core::CoreApplication::IncrementApplicationUseCount();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_RequestRestartAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::RequestRestartAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_RequestRestartForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::RequestRestartForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_Run(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>(args, 0);

                winrt::Windows::ApplicationModel::Core::CoreApplication::Run(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_RunWithActivationFactories(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::IGetActivationFactory>(args, 0);

                winrt::Windows::ApplicationModel::Core::CoreApplication::RunWithActivationFactories(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_Id(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_Properties(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_MainView(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::MainView());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_get_Views(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Views());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_UnhandledErrorDetected(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::UnhandledErrorDetected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_UnhandledErrorDetected(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::UnhandledErrorDetected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_Exiting(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Exiting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_Exiting(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::Exiting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_BackgroundActivated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::Activation::BackgroundActivatedEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::BackgroundActivated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_BackgroundActivated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::BackgroundActivated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_EnteredBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::EnteredBackgroundEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::EnteredBackground(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_EnteredBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::EnteredBackground(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_LeavingBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::LeavingBackgroundEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::LeavingBackground(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_LeavingBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::LeavingBackground(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_Resuming(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Resuming(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_Resuming(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::Resuming(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_add_Suspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::SuspendingEventArgs>>(arg);

            return py::convert(winrt::Windows::ApplicationModel::Core::CoreApplication::Suspending(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplication_remove_Suspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::ApplicationModel::Core::CoreApplication::Suspending(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreApplication[] = {
        { "create_new_view", (PyCFunction)CoreApplication_CreateNewView, METH_VARARGS | METH_STATIC, nullptr },
        { "decrement_application_use_count", (PyCFunction)CoreApplication_DecrementApplicationUseCount, METH_VARARGS | METH_STATIC, nullptr },
        { "enable_prelaunch", (PyCFunction)CoreApplication_EnablePrelaunch, METH_VARARGS | METH_STATIC, nullptr },
        { "exit", (PyCFunction)CoreApplication_Exit, METH_VARARGS | METH_STATIC, nullptr },
        { "get_current_view", (PyCFunction)CoreApplication_GetCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "increment_application_use_count", (PyCFunction)CoreApplication_IncrementApplicationUseCount, METH_VARARGS | METH_STATIC, nullptr },
        { "request_restart_async", (PyCFunction)CoreApplication_RequestRestartAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "request_restart_for_user_async", (PyCFunction)CoreApplication_RequestRestartForUserAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "run", (PyCFunction)CoreApplication_Run, METH_VARARGS | METH_STATIC, nullptr },
        { "run_with_activation_factories", (PyCFunction)CoreApplication_RunWithActivationFactories, METH_VARARGS | METH_STATIC, nullptr },
        { "get_id", (PyCFunction)CoreApplication_get_Id, METH_NOARGS | METH_STATIC, nullptr },
        { "get_properties", (PyCFunction)CoreApplication_get_Properties, METH_NOARGS | METH_STATIC, nullptr },
        { "get_main_view", (PyCFunction)CoreApplication_get_MainView, METH_NOARGS | METH_STATIC, nullptr },
        { "get_views", (PyCFunction)CoreApplication_get_Views, METH_NOARGS | METH_STATIC, nullptr },
        { "add_unhandled_error_detected", (PyCFunction)CoreApplication_add_UnhandledErrorDetected, METH_O | METH_STATIC, nullptr },
        { "remove_unhandled_error_detected", (PyCFunction)CoreApplication_remove_UnhandledErrorDetected, METH_O | METH_STATIC, nullptr },
        { "add_exiting", (PyCFunction)CoreApplication_add_Exiting, METH_O | METH_STATIC, nullptr },
        { "remove_exiting", (PyCFunction)CoreApplication_remove_Exiting, METH_O | METH_STATIC, nullptr },
        { "add_background_activated", (PyCFunction)CoreApplication_add_BackgroundActivated, METH_O | METH_STATIC, nullptr },
        { "remove_background_activated", (PyCFunction)CoreApplication_remove_BackgroundActivated, METH_O | METH_STATIC, nullptr },
        { "add_entered_background", (PyCFunction)CoreApplication_add_EnteredBackground, METH_O | METH_STATIC, nullptr },
        { "remove_entered_background", (PyCFunction)CoreApplication_remove_EnteredBackground, METH_O | METH_STATIC, nullptr },
        { "add_leaving_background", (PyCFunction)CoreApplication_add_LeavingBackground, METH_O | METH_STATIC, nullptr },
        { "remove_leaving_background", (PyCFunction)CoreApplication_remove_LeavingBackground, METH_O | METH_STATIC, nullptr },
        { "add_resuming", (PyCFunction)CoreApplication_add_Resuming, METH_O | METH_STATIC, nullptr },
        { "remove_resuming", (PyCFunction)CoreApplication_remove_Resuming, METH_O | METH_STATIC, nullptr },
        { "add_suspending", (PyCFunction)CoreApplication_add_Suspending, METH_O | METH_STATIC, nullptr },
        { "remove_suspending", (PyCFunction)CoreApplication_remove_Suspending, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreApplication[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreApplication[] = 
    {
        { Py_tp_new, _new_CoreApplication },
        { Py_tp_methods, _methods_CoreApplication },
        { Py_tp_getset, _getset_CoreApplication },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreApplication =
    {
        "_winrt_Windows_ApplicationModel_Core.CoreApplication",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreApplication
    };

    // ----- CoreApplicationView class --------------------
    constexpr const char* const _type_name_CoreApplicationView = "CoreApplicationView";

    static PyObject* _new_CoreApplicationView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreApplicationView);
        return nullptr;
    }

    static void _dealloc_CoreApplicationView(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreApplicationView_get_CoreWindow(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CoreWindow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_IsHosted(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsHosted());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_IsMain(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsMain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_Dispatcher(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Dispatcher());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_IsComponent(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsComponent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_TitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_Properties(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_get_DispatcherQueue(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_add_Activated(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationView, winrt::Windows::ApplicationModel::Activation::IActivatedEventArgs>>(arg);

            return py::convert(self->obj.Activated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_remove_Activated(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Activated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_add_HostedViewClosing(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationView, winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>>(arg);

            return py::convert(self->obj.HostedViewClosing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationView_remove_HostedViewClosing(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.HostedViewClosing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreApplicationView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::CoreApplicationView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreApplicationView[] = {
        { "add_activated", (PyCFunction)CoreApplicationView_add_Activated, METH_O, nullptr },
        { "remove_activated", (PyCFunction)CoreApplicationView_remove_Activated, METH_O, nullptr },
        { "add_hosted_view_closing", (PyCFunction)CoreApplicationView_add_HostedViewClosing, METH_O, nullptr },
        { "remove_hosted_view_closing", (PyCFunction)CoreApplicationView_remove_HostedViewClosing, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreApplicationView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreApplicationView[] = {
        { const_cast<char*>("core_window"), (getter)CoreApplicationView_get_CoreWindow, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_hosted"), (getter)CoreApplicationView_get_IsHosted, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_main"), (getter)CoreApplicationView_get_IsMain, nullptr, nullptr, nullptr },
        { const_cast<char*>("dispatcher"), (getter)CoreApplicationView_get_Dispatcher, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_component"), (getter)CoreApplicationView_get_IsComponent, nullptr, nullptr, nullptr },
        { const_cast<char*>("title_bar"), (getter)CoreApplicationView_get_TitleBar, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)CoreApplicationView_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("dispatcher_queue"), (getter)CoreApplicationView_get_DispatcherQueue, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreApplicationView[] = 
    {
        { Py_tp_new, _new_CoreApplicationView },
        { Py_tp_dealloc, _dealloc_CoreApplicationView },
        { Py_tp_methods, _methods_CoreApplicationView },
        { Py_tp_getset, _getset_CoreApplicationView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreApplicationView =
    {
        "_winrt_Windows_ApplicationModel_Core.CoreApplicationView",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreApplicationView
    };

    // ----- CoreApplicationViewTitleBar class --------------------
    constexpr const char* const _type_name_CoreApplicationViewTitleBar = "CoreApplicationViewTitleBar";

    static PyObject* _new_CoreApplicationViewTitleBar(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CoreApplicationViewTitleBar);
        return nullptr;
    }

    static void _dealloc_CoreApplicationViewTitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CoreApplicationViewTitleBar_get_ExtendViewIntoTitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExtendViewIntoTitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreApplicationViewTitleBar_put_ExtendViewIntoTitleBar(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ExtendViewIntoTitleBar(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_Height(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_IsVisible(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_SystemOverlayLeftInset(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemOverlayLeftInset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_get_SystemOverlayRightInset(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemOverlayRightInset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_add_IsVisibleChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.IsVisibleChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_remove_IsVisibleChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.IsVisibleChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_add_LayoutMetricsChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.LayoutMetricsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreApplicationViewTitleBar_remove_LayoutMetricsChanged(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LayoutMetricsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CoreApplicationViewTitleBar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreApplicationViewTitleBar[] = {
        { "add_is_visible_changed", (PyCFunction)CoreApplicationViewTitleBar_add_IsVisibleChanged, METH_O, nullptr },
        { "remove_is_visible_changed", (PyCFunction)CoreApplicationViewTitleBar_remove_IsVisibleChanged, METH_O, nullptr },
        { "add_layout_metrics_changed", (PyCFunction)CoreApplicationViewTitleBar_add_LayoutMetricsChanged, METH_O, nullptr },
        { "remove_layout_metrics_changed", (PyCFunction)CoreApplicationViewTitleBar_remove_LayoutMetricsChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_CoreApplicationViewTitleBar, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CoreApplicationViewTitleBar[] = {
        { const_cast<char*>("extend_view_into_title_bar"), (getter)CoreApplicationViewTitleBar_get_ExtendViewIntoTitleBar, (setter)CoreApplicationViewTitleBar_put_ExtendViewIntoTitleBar, nullptr, nullptr },
        { const_cast<char*>("height"), (getter)CoreApplicationViewTitleBar_get_Height, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_visible"), (getter)CoreApplicationViewTitleBar_get_IsVisible, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_overlay_left_inset"), (getter)CoreApplicationViewTitleBar_get_SystemOverlayLeftInset, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_overlay_right_inset"), (getter)CoreApplicationViewTitleBar_get_SystemOverlayRightInset, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CoreApplicationViewTitleBar[] = 
    {
        { Py_tp_new, _new_CoreApplicationViewTitleBar },
        { Py_tp_dealloc, _dealloc_CoreApplicationViewTitleBar },
        { Py_tp_methods, _methods_CoreApplicationViewTitleBar },
        { Py_tp_getset, _getset_CoreApplicationViewTitleBar },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CoreApplicationViewTitleBar =
    {
        "_winrt_Windows_ApplicationModel_Core.CoreApplicationViewTitleBar",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreApplicationViewTitleBar
    };

    // ----- HostedViewClosingEventArgs class --------------------
    constexpr const char* const _type_name_HostedViewClosingEventArgs = "HostedViewClosingEventArgs";

    static PyObject* _new_HostedViewClosingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HostedViewClosingEventArgs);
        return nullptr;
    }

    static void _dealloc_HostedViewClosingEventArgs(py::wrapper::Windows::ApplicationModel::Core::HostedViewClosingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HostedViewClosingEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::Core::HostedViewClosingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_HostedViewClosingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HostedViewClosingEventArgs[] = {
        { "get_deferral", (PyCFunction)HostedViewClosingEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HostedViewClosingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HostedViewClosingEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_HostedViewClosingEventArgs[] = 
    {
        { Py_tp_new, _new_HostedViewClosingEventArgs },
        { Py_tp_dealloc, _dealloc_HostedViewClosingEventArgs },
        { Py_tp_methods, _methods_HostedViewClosingEventArgs },
        { Py_tp_getset, _getset_HostedViewClosingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HostedViewClosingEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Core.HostedViewClosingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::HostedViewClosingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HostedViewClosingEventArgs
    };

    // ----- UnhandledError class --------------------
    constexpr const char* const _type_name_UnhandledError = "UnhandledError";

    static PyObject* _new_UnhandledError(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UnhandledError);
        return nullptr;
    }

    static void _dealloc_UnhandledError(py::wrapper::Windows::ApplicationModel::Core::UnhandledError* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UnhandledError_Propagate(py::wrapper::Windows::ApplicationModel::Core::UnhandledError* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Propagate();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UnhandledError_get_Handled(py::wrapper::Windows::ApplicationModel::Core::UnhandledError* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UnhandledError(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::UnhandledError>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UnhandledError[] = {
        { "propagate", (PyCFunction)UnhandledError_Propagate, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UnhandledError, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UnhandledError[] = {
        { const_cast<char*>("handled"), (getter)UnhandledError_get_Handled, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UnhandledError[] = 
    {
        { Py_tp_new, _new_UnhandledError },
        { Py_tp_dealloc, _dealloc_UnhandledError },
        { Py_tp_methods, _methods_UnhandledError },
        { Py_tp_getset, _getset_UnhandledError },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UnhandledError =
    {
        "_winrt_Windows_ApplicationModel_Core.UnhandledError",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::UnhandledError),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UnhandledError
    };

    // ----- UnhandledErrorDetectedEventArgs class --------------------
    constexpr const char* const _type_name_UnhandledErrorDetectedEventArgs = "UnhandledErrorDetectedEventArgs";

    static PyObject* _new_UnhandledErrorDetectedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UnhandledErrorDetectedEventArgs);
        return nullptr;
    }

    static void _dealloc_UnhandledErrorDetectedEventArgs(py::wrapper::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UnhandledErrorDetectedEventArgs_get_UnhandledError(py::wrapper::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UnhandledError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UnhandledErrorDetectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UnhandledErrorDetectedEventArgs[] = {
        { "_from", (PyCFunction)_from_UnhandledErrorDetectedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UnhandledErrorDetectedEventArgs[] = {
        { const_cast<char*>("unhandled_error"), (getter)UnhandledErrorDetectedEventArgs_get_UnhandledError, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UnhandledErrorDetectedEventArgs[] = 
    {
        { Py_tp_new, _new_UnhandledErrorDetectedEventArgs },
        { Py_tp_dealloc, _dealloc_UnhandledErrorDetectedEventArgs },
        { Py_tp_methods, _methods_UnhandledErrorDetectedEventArgs },
        { Py_tp_getset, _getset_UnhandledErrorDetectedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UnhandledErrorDetectedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_Core.UnhandledErrorDetectedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UnhandledErrorDetectedEventArgs
    };

    // ----- ICoreApplicationUnhandledError interface --------------------
    constexpr const char* const _type_name_ICoreApplicationUnhandledError = "ICoreApplicationUnhandledError";

    static PyObject* _new_ICoreApplicationUnhandledError(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ICoreApplicationUnhandledError);
        return nullptr;
    }

    static void _dealloc_ICoreApplicationUnhandledError(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ICoreApplicationUnhandledError_add_UnhandledErrorDetected(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>>(arg);

            return py::convert(self->obj.UnhandledErrorDetected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ICoreApplicationUnhandledError_remove_UnhandledErrorDetected(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnhandledErrorDetected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ICoreApplicationUnhandledError(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ICoreApplicationUnhandledError[] = {
        { "add_unhandled_error_detected", (PyCFunction)ICoreApplicationUnhandledError_add_UnhandledErrorDetected, METH_O, nullptr },
        { "remove_unhandled_error_detected", (PyCFunction)ICoreApplicationUnhandledError_remove_UnhandledErrorDetected, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ICoreApplicationUnhandledError, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ICoreApplicationUnhandledError[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ICoreApplicationUnhandledError[] = 
    {
        { Py_tp_new, _new_ICoreApplicationUnhandledError },
        { Py_tp_dealloc, _dealloc_ICoreApplicationUnhandledError },
        { Py_tp_methods, _methods_ICoreApplicationUnhandledError },
        { Py_tp_getset, _getset_ICoreApplicationUnhandledError },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ICoreApplicationUnhandledError =
    {
        "_winrt_Windows_ApplicationModel_Core.ICoreApplicationUnhandledError",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ICoreApplicationUnhandledError
    };

    // ----- IFrameworkView interface --------------------
    constexpr const char* const _type_name_IFrameworkView = "IFrameworkView";

    static PyObject* _new_IFrameworkView(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IFrameworkView);
        return nullptr;
    }

    static void _dealloc_IFrameworkView(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IFrameworkView_Initialize(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::CoreApplicationView>(args, 0);

                self->obj.Initialize(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_Load(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Load(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_Run(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Run();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_SetWindow(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreWindow>(args, 0);

                self->obj.SetWindow(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IFrameworkView_Uninitialize(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Uninitialize();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IFrameworkView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::IFrameworkView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IFrameworkView[] = {
        { "initialize", (PyCFunction)IFrameworkView_Initialize, METH_VARARGS, nullptr },
        { "load", (PyCFunction)IFrameworkView_Load, METH_VARARGS, nullptr },
        { "run", (PyCFunction)IFrameworkView_Run, METH_VARARGS, nullptr },
        { "set_window", (PyCFunction)IFrameworkView_SetWindow, METH_VARARGS, nullptr },
        { "uninitialize", (PyCFunction)IFrameworkView_Uninitialize, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IFrameworkView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IFrameworkView[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IFrameworkView[] = 
    {
        { Py_tp_new, _new_IFrameworkView },
        { Py_tp_dealloc, _dealloc_IFrameworkView },
        { Py_tp_methods, _methods_IFrameworkView },
        { Py_tp_getset, _getset_IFrameworkView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IFrameworkView =
    {
        "_winrt_Windows_ApplicationModel_Core.IFrameworkView",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::IFrameworkView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IFrameworkView
    };

    // ----- IFrameworkViewSource interface --------------------
    constexpr const char* const _type_name_IFrameworkViewSource = "IFrameworkViewSource";

    static PyObject* _new_IFrameworkViewSource(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IFrameworkViewSource);
        return nullptr;
    }

    static void _dealloc_IFrameworkViewSource(py::wrapper::Windows::ApplicationModel::Core::IFrameworkViewSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IFrameworkViewSource_CreateView(py::wrapper::Windows::ApplicationModel::Core::IFrameworkViewSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IFrameworkViewSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IFrameworkViewSource[] = {
        { "create_view", (PyCFunction)IFrameworkViewSource_CreateView, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IFrameworkViewSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IFrameworkViewSource[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IFrameworkViewSource[] = 
    {
        { Py_tp_new, _new_IFrameworkViewSource },
        { Py_tp_dealloc, _dealloc_IFrameworkViewSource },
        { Py_tp_methods, _methods_IFrameworkViewSource },
        { Py_tp_getset, _getset_IFrameworkViewSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IFrameworkViewSource =
    {
        "_winrt_Windows_ApplicationModel_Core.IFrameworkViewSource",
        sizeof(py::wrapper::Windows::ApplicationModel::Core::IFrameworkViewSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IFrameworkViewSource
    };

    // ----- Windows.ApplicationModel.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Core::AppListEntry>::python_type = py::register_python_type(module, _type_name_AppListEntry, &_type_spec_AppListEntry, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::CoreApplication>::python_type = py::register_python_type(module, _type_name_CoreApplication, &_type_spec_CoreApplication, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::Core::CoreApplicationView>::python_type = py::register_python_type(module, _type_name_CoreApplicationView, &_type_spec_CoreApplicationView, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>::python_type = py::register_python_type(module, _type_name_CoreApplicationViewTitleBar, &_type_spec_CoreApplicationViewTitleBar, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::HostedViewClosingEventArgs>::python_type = py::register_python_type(module, _type_name_HostedViewClosingEventArgs, &_type_spec_HostedViewClosingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::UnhandledError>::python_type = py::register_python_type(module, _type_name_UnhandledError, &_type_spec_UnhandledError, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>::python_type = py::register_python_type(module, _type_name_UnhandledErrorDetectedEventArgs, &_type_spec_UnhandledErrorDetectedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>::python_type = py::register_python_type(module, _type_name_ICoreApplicationUnhandledError, &_type_spec_ICoreApplicationUnhandledError, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::IFrameworkView>::python_type = py::register_python_type(module, _type_name_IFrameworkView, &_type_spec_IFrameworkView, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Core::IFrameworkViewSource>::python_type = py::register_python_type(module, _type_name_IFrameworkViewSource, &_type_spec_IFrameworkViewSource, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Core::module_def);
}
