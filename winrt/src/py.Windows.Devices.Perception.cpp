// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Perception.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::KnownCameraIntrinsicsProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionColorFrameSourceProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionDepthFrameSourceProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionVideoProfileProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameReader>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionControlSession>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameReader>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameReader>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Perception::PerceptionVideoProfile>::python_type;

namespace py::cpp::Windows::Devices::Perception
{
    // ----- KnownCameraIntrinsicsProperties class --------------------
    constexpr const char* const _type_name_KnownCameraIntrinsicsProperties = "KnownCameraIntrinsicsProperties";

    static PyObject* _new_KnownCameraIntrinsicsProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownCameraIntrinsicsProperties);
        return nullptr;
    }

    static PyObject* KnownCameraIntrinsicsProperties_get_FocalLength(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownCameraIntrinsicsProperties::FocalLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownCameraIntrinsicsProperties_get_PrincipalPoint(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownCameraIntrinsicsProperties::PrincipalPoint());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownCameraIntrinsicsProperties_get_RadialDistortion(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownCameraIntrinsicsProperties::RadialDistortion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownCameraIntrinsicsProperties_get_TangentialDistortion(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownCameraIntrinsicsProperties::TangentialDistortion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownCameraIntrinsicsProperties[] = {
        { "get_focal_length", (PyCFunction)KnownCameraIntrinsicsProperties_get_FocalLength, METH_NOARGS | METH_STATIC, nullptr },
        { "get_principal_point", (PyCFunction)KnownCameraIntrinsicsProperties_get_PrincipalPoint, METH_NOARGS | METH_STATIC, nullptr },
        { "get_radial_distortion", (PyCFunction)KnownCameraIntrinsicsProperties_get_RadialDistortion, METH_NOARGS | METH_STATIC, nullptr },
        { "get_tangential_distortion", (PyCFunction)KnownCameraIntrinsicsProperties_get_TangentialDistortion, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownCameraIntrinsicsProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownCameraIntrinsicsProperties[] = 
    {
        { Py_tp_new, _new_KnownCameraIntrinsicsProperties },
        { Py_tp_methods, _methods_KnownCameraIntrinsicsProperties },
        { Py_tp_getset, _getset_KnownCameraIntrinsicsProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownCameraIntrinsicsProperties =
    {
        "_winrt_Windows_Devices_Perception.KnownCameraIntrinsicsProperties",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownCameraIntrinsicsProperties
    };

    // ----- KnownPerceptionColorFrameSourceProperties class --------------------
    constexpr const char* const _type_name_KnownPerceptionColorFrameSourceProperties = "KnownPerceptionColorFrameSourceProperties";

    static PyObject* _new_KnownPerceptionColorFrameSourceProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownPerceptionColorFrameSourceProperties);
        return nullptr;
    }

    static PyObject* KnownPerceptionColorFrameSourceProperties_get_AutoExposureEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionColorFrameSourceProperties::AutoExposureEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionColorFrameSourceProperties_get_Exposure(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionColorFrameSourceProperties::Exposure());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionColorFrameSourceProperties_get_ExposureCompensation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionColorFrameSourceProperties::ExposureCompensation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownPerceptionColorFrameSourceProperties[] = {
        { "get_auto_exposure_enabled", (PyCFunction)KnownPerceptionColorFrameSourceProperties_get_AutoExposureEnabled, METH_NOARGS | METH_STATIC, nullptr },
        { "get_exposure", (PyCFunction)KnownPerceptionColorFrameSourceProperties_get_Exposure, METH_NOARGS | METH_STATIC, nullptr },
        { "get_exposure_compensation", (PyCFunction)KnownPerceptionColorFrameSourceProperties_get_ExposureCompensation, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownPerceptionColorFrameSourceProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownPerceptionColorFrameSourceProperties[] = 
    {
        { Py_tp_new, _new_KnownPerceptionColorFrameSourceProperties },
        { Py_tp_methods, _methods_KnownPerceptionColorFrameSourceProperties },
        { Py_tp_getset, _getset_KnownPerceptionColorFrameSourceProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownPerceptionColorFrameSourceProperties =
    {
        "_winrt_Windows_Devices_Perception.KnownPerceptionColorFrameSourceProperties",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownPerceptionColorFrameSourceProperties
    };

    // ----- KnownPerceptionDepthFrameSourceProperties class --------------------
    constexpr const char* const _type_name_KnownPerceptionDepthFrameSourceProperties = "KnownPerceptionDepthFrameSourceProperties";

    static PyObject* _new_KnownPerceptionDepthFrameSourceProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownPerceptionDepthFrameSourceProperties);
        return nullptr;
    }

    static PyObject* KnownPerceptionDepthFrameSourceProperties_get_MaxDepth(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionDepthFrameSourceProperties::MaxDepth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionDepthFrameSourceProperties_get_MinDepth(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionDepthFrameSourceProperties::MinDepth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownPerceptionDepthFrameSourceProperties[] = {
        { "get_max_depth", (PyCFunction)KnownPerceptionDepthFrameSourceProperties_get_MaxDepth, METH_NOARGS | METH_STATIC, nullptr },
        { "get_min_depth", (PyCFunction)KnownPerceptionDepthFrameSourceProperties_get_MinDepth, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownPerceptionDepthFrameSourceProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownPerceptionDepthFrameSourceProperties[] = 
    {
        { Py_tp_new, _new_KnownPerceptionDepthFrameSourceProperties },
        { Py_tp_methods, _methods_KnownPerceptionDepthFrameSourceProperties },
        { Py_tp_getset, _getset_KnownPerceptionDepthFrameSourceProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownPerceptionDepthFrameSourceProperties =
    {
        "_winrt_Windows_Devices_Perception.KnownPerceptionDepthFrameSourceProperties",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownPerceptionDepthFrameSourceProperties
    };

    // ----- KnownPerceptionFrameSourceProperties class --------------------
    constexpr const char* const _type_name_KnownPerceptionFrameSourceProperties = "KnownPerceptionFrameSourceProperties";

    static PyObject* _new_KnownPerceptionFrameSourceProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownPerceptionFrameSourceProperties);
        return nullptr;
    }

    static PyObject* KnownPerceptionFrameSourceProperties_get_DeviceModelVersion(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties::DeviceModelVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionFrameSourceProperties_get_EnclosureLocation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties::EnclosureLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionFrameSourceProperties_get_FrameKind(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties::FrameKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionFrameSourceProperties_get_Id(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties::Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionFrameSourceProperties_get_PhysicalDeviceIds(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties::PhysicalDeviceIds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionFrameSourceProperties_get_DeviceId(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties::DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownPerceptionFrameSourceProperties[] = {
        { "get_device_model_version", (PyCFunction)KnownPerceptionFrameSourceProperties_get_DeviceModelVersion, METH_NOARGS | METH_STATIC, nullptr },
        { "get_enclosure_location", (PyCFunction)KnownPerceptionFrameSourceProperties_get_EnclosureLocation, METH_NOARGS | METH_STATIC, nullptr },
        { "get_frame_kind", (PyCFunction)KnownPerceptionFrameSourceProperties_get_FrameKind, METH_NOARGS | METH_STATIC, nullptr },
        { "get_id", (PyCFunction)KnownPerceptionFrameSourceProperties_get_Id, METH_NOARGS | METH_STATIC, nullptr },
        { "get_physical_device_ids", (PyCFunction)KnownPerceptionFrameSourceProperties_get_PhysicalDeviceIds, METH_NOARGS | METH_STATIC, nullptr },
        { "get_device_id", (PyCFunction)KnownPerceptionFrameSourceProperties_get_DeviceId, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownPerceptionFrameSourceProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownPerceptionFrameSourceProperties[] = 
    {
        { Py_tp_new, _new_KnownPerceptionFrameSourceProperties },
        { Py_tp_methods, _methods_KnownPerceptionFrameSourceProperties },
        { Py_tp_getset, _getset_KnownPerceptionFrameSourceProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownPerceptionFrameSourceProperties =
    {
        "_winrt_Windows_Devices_Perception.KnownPerceptionFrameSourceProperties",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownPerceptionFrameSourceProperties
    };

    // ----- KnownPerceptionInfraredFrameSourceProperties class --------------------
    constexpr const char* const _type_name_KnownPerceptionInfraredFrameSourceProperties = "KnownPerceptionInfraredFrameSourceProperties";

    static PyObject* _new_KnownPerceptionInfraredFrameSourceProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownPerceptionInfraredFrameSourceProperties);
        return nullptr;
    }

    static PyObject* KnownPerceptionInfraredFrameSourceProperties_get_ActiveIlluminationEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties::ActiveIlluminationEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionInfraredFrameSourceProperties_get_AmbientSubtractionEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties::AmbientSubtractionEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionInfraredFrameSourceProperties_get_AutoExposureEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties::AutoExposureEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionInfraredFrameSourceProperties_get_Exposure(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties::Exposure());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionInfraredFrameSourceProperties_get_ExposureCompensation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties::ExposureCompensation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionInfraredFrameSourceProperties_get_InterleavedIlluminationEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties::InterleavedIlluminationEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionInfraredFrameSourceProperties_get_StructureLightPatternEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties::StructureLightPatternEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownPerceptionInfraredFrameSourceProperties[] = {
        { "get_active_illumination_enabled", (PyCFunction)KnownPerceptionInfraredFrameSourceProperties_get_ActiveIlluminationEnabled, METH_NOARGS | METH_STATIC, nullptr },
        { "get_ambient_subtraction_enabled", (PyCFunction)KnownPerceptionInfraredFrameSourceProperties_get_AmbientSubtractionEnabled, METH_NOARGS | METH_STATIC, nullptr },
        { "get_auto_exposure_enabled", (PyCFunction)KnownPerceptionInfraredFrameSourceProperties_get_AutoExposureEnabled, METH_NOARGS | METH_STATIC, nullptr },
        { "get_exposure", (PyCFunction)KnownPerceptionInfraredFrameSourceProperties_get_Exposure, METH_NOARGS | METH_STATIC, nullptr },
        { "get_exposure_compensation", (PyCFunction)KnownPerceptionInfraredFrameSourceProperties_get_ExposureCompensation, METH_NOARGS | METH_STATIC, nullptr },
        { "get_interleaved_illumination_enabled", (PyCFunction)KnownPerceptionInfraredFrameSourceProperties_get_InterleavedIlluminationEnabled, METH_NOARGS | METH_STATIC, nullptr },
        { "get_structure_light_pattern_enabled", (PyCFunction)KnownPerceptionInfraredFrameSourceProperties_get_StructureLightPatternEnabled, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownPerceptionInfraredFrameSourceProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownPerceptionInfraredFrameSourceProperties[] = 
    {
        { Py_tp_new, _new_KnownPerceptionInfraredFrameSourceProperties },
        { Py_tp_methods, _methods_KnownPerceptionInfraredFrameSourceProperties },
        { Py_tp_getset, _getset_KnownPerceptionInfraredFrameSourceProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownPerceptionInfraredFrameSourceProperties =
    {
        "_winrt_Windows_Devices_Perception.KnownPerceptionInfraredFrameSourceProperties",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownPerceptionInfraredFrameSourceProperties
    };

    // ----- KnownPerceptionVideoFrameSourceProperties class --------------------
    constexpr const char* const _type_name_KnownPerceptionVideoFrameSourceProperties = "KnownPerceptionVideoFrameSourceProperties";

    static PyObject* _new_KnownPerceptionVideoFrameSourceProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownPerceptionVideoFrameSourceProperties);
        return nullptr;
    }

    static PyObject* KnownPerceptionVideoFrameSourceProperties_get_AvailableVideoProfiles(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties::AvailableVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoFrameSourceProperties_get_CameraIntrinsics(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties::CameraIntrinsics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoFrameSourceProperties_get_IsMirrored(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties::IsMirrored());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoFrameSourceProperties_get_SupportedVideoProfiles(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties::SupportedVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoFrameSourceProperties_get_VideoProfile(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties::VideoProfile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownPerceptionVideoFrameSourceProperties[] = {
        { "get_available_video_profiles", (PyCFunction)KnownPerceptionVideoFrameSourceProperties_get_AvailableVideoProfiles, METH_NOARGS | METH_STATIC, nullptr },
        { "get_camera_intrinsics", (PyCFunction)KnownPerceptionVideoFrameSourceProperties_get_CameraIntrinsics, METH_NOARGS | METH_STATIC, nullptr },
        { "get_is_mirrored", (PyCFunction)KnownPerceptionVideoFrameSourceProperties_get_IsMirrored, METH_NOARGS | METH_STATIC, nullptr },
        { "get_supported_video_profiles", (PyCFunction)KnownPerceptionVideoFrameSourceProperties_get_SupportedVideoProfiles, METH_NOARGS | METH_STATIC, nullptr },
        { "get_video_profile", (PyCFunction)KnownPerceptionVideoFrameSourceProperties_get_VideoProfile, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownPerceptionVideoFrameSourceProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownPerceptionVideoFrameSourceProperties[] = 
    {
        { Py_tp_new, _new_KnownPerceptionVideoFrameSourceProperties },
        { Py_tp_methods, _methods_KnownPerceptionVideoFrameSourceProperties },
        { Py_tp_getset, _getset_KnownPerceptionVideoFrameSourceProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownPerceptionVideoFrameSourceProperties =
    {
        "_winrt_Windows_Devices_Perception.KnownPerceptionVideoFrameSourceProperties",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownPerceptionVideoFrameSourceProperties
    };

    // ----- KnownPerceptionVideoProfileProperties class --------------------
    constexpr const char* const _type_name_KnownPerceptionVideoProfileProperties = "KnownPerceptionVideoProfileProperties";

    static PyObject* _new_KnownPerceptionVideoProfileProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownPerceptionVideoProfileProperties);
        return nullptr;
    }

    static PyObject* KnownPerceptionVideoProfileProperties_get_BitmapAlphaMode(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoProfileProperties::BitmapAlphaMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoProfileProperties_get_BitmapPixelFormat(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoProfileProperties::BitmapPixelFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoProfileProperties_get_FrameDuration(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoProfileProperties::FrameDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoProfileProperties_get_Height(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoProfileProperties::Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownPerceptionVideoProfileProperties_get_Width(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Perception::KnownPerceptionVideoProfileProperties::Width());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownPerceptionVideoProfileProperties[] = {
        { "get_bitmap_alpha_mode", (PyCFunction)KnownPerceptionVideoProfileProperties_get_BitmapAlphaMode, METH_NOARGS | METH_STATIC, nullptr },
        { "get_bitmap_pixel_format", (PyCFunction)KnownPerceptionVideoProfileProperties_get_BitmapPixelFormat, METH_NOARGS | METH_STATIC, nullptr },
        { "get_frame_duration", (PyCFunction)KnownPerceptionVideoProfileProperties_get_FrameDuration, METH_NOARGS | METH_STATIC, nullptr },
        { "get_height", (PyCFunction)KnownPerceptionVideoProfileProperties_get_Height, METH_NOARGS | METH_STATIC, nullptr },
        { "get_width", (PyCFunction)KnownPerceptionVideoProfileProperties_get_Width, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownPerceptionVideoProfileProperties[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownPerceptionVideoProfileProperties[] = 
    {
        { Py_tp_new, _new_KnownPerceptionVideoProfileProperties },
        { Py_tp_methods, _methods_KnownPerceptionVideoProfileProperties },
        { Py_tp_getset, _getset_KnownPerceptionVideoProfileProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownPerceptionVideoProfileProperties =
    {
        "_winrt_Windows_Devices_Perception.KnownPerceptionVideoProfileProperties",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownPerceptionVideoProfileProperties
    };

    // ----- PerceptionColorFrame class --------------------
    constexpr const char* const _type_name_PerceptionColorFrame = "PerceptionColorFrame";

    static PyObject* _new_PerceptionColorFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionColorFrame);
        return nullptr;
    }

    static void _dealloc_PerceptionColorFrame(py::wrapper::Windows::Devices::Perception::PerceptionColorFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionColorFrame_Close(py::wrapper::Windows::Devices::Perception::PerceptionColorFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrame_get_VideoFrame(py::wrapper::Windows::Devices::Perception::PerceptionColorFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionColorFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionColorFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PerceptionColorFrame(py::wrapper::Windows::Devices::Perception::PerceptionColorFrame* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_PerceptionColorFrame(py::wrapper::Windows::Devices::Perception::PerceptionColorFrame* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionColorFrame[] = {
        { "close", (PyCFunction)PerceptionColorFrame_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionColorFrame, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_PerceptionColorFrame, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_PerceptionColorFrame, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionColorFrame[] = {
        { const_cast<char*>("video_frame"), (getter)PerceptionColorFrame_get_VideoFrame, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionColorFrame[] = 
    {
        { Py_tp_new, _new_PerceptionColorFrame },
        { Py_tp_dealloc, _dealloc_PerceptionColorFrame },
        { Py_tp_methods, _methods_PerceptionColorFrame },
        { Py_tp_getset, _getset_PerceptionColorFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionColorFrame =
    {
        "_winrt_Windows_Devices_Perception.PerceptionColorFrame",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionColorFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionColorFrame
    };

    // ----- PerceptionColorFrameArrivedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionColorFrameArrivedEventArgs = "PerceptionColorFrameArrivedEventArgs";

    static PyObject* _new_PerceptionColorFrameArrivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionColorFrameArrivedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionColorFrameArrivedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionColorFrameArrivedEventArgs_TryOpenFrame(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryOpenFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameArrivedEventArgs_get_RelativeTime(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelativeTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionColorFrameArrivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionColorFrameArrivedEventArgs[] = {
        { "try_open_frame", (PyCFunction)PerceptionColorFrameArrivedEventArgs_TryOpenFrame, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionColorFrameArrivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionColorFrameArrivedEventArgs[] = {
        { const_cast<char*>("relative_time"), (getter)PerceptionColorFrameArrivedEventArgs_get_RelativeTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionColorFrameArrivedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionColorFrameArrivedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionColorFrameArrivedEventArgs },
        { Py_tp_methods, _methods_PerceptionColorFrameArrivedEventArgs },
        { Py_tp_getset, _getset_PerceptionColorFrameArrivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionColorFrameArrivedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionColorFrameArrivedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionColorFrameArrivedEventArgs
    };

    // ----- PerceptionColorFrameReader class --------------------
    constexpr const char* const _type_name_PerceptionColorFrameReader = "PerceptionColorFrameReader";

    static PyObject* _new_PerceptionColorFrameReader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionColorFrameReader);
        return nullptr;
    }

    static void _dealloc_PerceptionColorFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionColorFrameReader_Close(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameReader_TryReadLatestFrame(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryReadLatestFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameReader_get_IsPaused(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPaused());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PerceptionColorFrameReader_put_IsPaused(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPaused(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PerceptionColorFrameReader_get_Source(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameReader_add_FrameArrived(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameReader, winrt::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs>>(arg);

            return py::convert(self->obj.FrameArrived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameReader_remove_FrameArrived(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameArrived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionColorFrameReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionColorFrameReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PerceptionColorFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_PerceptionColorFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionColorFrameReader[] = {
        { "close", (PyCFunction)PerceptionColorFrameReader_Close, METH_VARARGS, nullptr },
        { "try_read_latest_frame", (PyCFunction)PerceptionColorFrameReader_TryReadLatestFrame, METH_VARARGS, nullptr },
        { "add_frame_arrived", (PyCFunction)PerceptionColorFrameReader_add_FrameArrived, METH_O, nullptr },
        { "remove_frame_arrived", (PyCFunction)PerceptionColorFrameReader_remove_FrameArrived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionColorFrameReader, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_PerceptionColorFrameReader, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_PerceptionColorFrameReader, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionColorFrameReader[] = {
        { const_cast<char*>("is_paused"), (getter)PerceptionColorFrameReader_get_IsPaused, (setter)PerceptionColorFrameReader_put_IsPaused, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)PerceptionColorFrameReader_get_Source, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionColorFrameReader[] = 
    {
        { Py_tp_new, _new_PerceptionColorFrameReader },
        { Py_tp_dealloc, _dealloc_PerceptionColorFrameReader },
        { Py_tp_methods, _methods_PerceptionColorFrameReader },
        { Py_tp_getset, _getset_PerceptionColorFrameReader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionColorFrameReader =
    {
        "_winrt_Windows_Devices_Perception.PerceptionColorFrameReader",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionColorFrameReader
    };

    // ----- PerceptionColorFrameSource class --------------------
    constexpr const char* const _type_name_PerceptionColorFrameSource = "PerceptionColorFrameSource";

    static PyObject* _new_PerceptionColorFrameSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionColorFrameSource);
        return nullptr;
    }

    static void _dealloc_PerceptionColorFrameSource(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionColorFrameSource_AcquireControlSession(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AcquireControlSession());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_CanControlIndependentlyFrom(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CanControlIndependentlyFrom(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_CreateWatcher(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionColorFrameSource::CreateWatcher());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_FindAllAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionColorFrameSource::FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Perception::PerceptionColorFrameSource::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_IsCorrelatedWith(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.IsCorrelatedWith(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_OpenReader(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.OpenReader());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionColorFrameSource::RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_TryGetDepthCorrelatedCameraIntrinsicsAsync(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>(args, 0);

                return py::convert(self->obj.TryGetDepthCorrelatedCameraIntrinsicsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_TryGetDepthCorrelatedCoordinateMapperAsync(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>(args, 1);

                return py::convert(self->obj.TryGetDepthCorrelatedCoordinateMapperAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_TryGetTransformTo(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                winrt::Windows::Foundation::Numerics::float4x4 param1 {  };

                auto return_value = self->obj.TryGetTransformTo(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_TrySetVideoProfileAsync(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionControlSession>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionVideoProfile>(args, 1);

                return py::convert(self->obj.TrySetVideoProfileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_Active(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Active());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_Available(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Available());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_AvailableVideoProfiles(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AvailableVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_CameraIntrinsics(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CameraIntrinsics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_DeviceKind(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_DisplayName(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_Id(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_IsControlled(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsControlled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_Properties(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_SupportedVideoProfiles(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_VideoProfile(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoProfile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_get_DeviceId(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_add_ActiveChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ActiveChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_remove_ActiveChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ActiveChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_add_AvailableChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.AvailableChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_remove_AvailableChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AvailableChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_add_CameraIntrinsicsChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.CameraIntrinsicsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_remove_CameraIntrinsicsChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CameraIntrinsicsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_add_PropertiesChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSource, winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>>(arg);

            return py::convert(self->obj.PropertiesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_remove_PropertiesChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PropertiesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_add_VideoProfileChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.VideoProfileChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSource_remove_VideoProfileChanged(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VideoProfileChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionColorFrameSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionColorFrameSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionColorFrameSource[] = {
        { "acquire_control_session", (PyCFunction)PerceptionColorFrameSource_AcquireControlSession, METH_VARARGS, nullptr },
        { "can_control_independently_from", (PyCFunction)PerceptionColorFrameSource_CanControlIndependentlyFrom, METH_VARARGS, nullptr },
        { "create_watcher", (PyCFunction)PerceptionColorFrameSource_CreateWatcher, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_async", (PyCFunction)PerceptionColorFrameSource_FindAllAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "from_id_async", (PyCFunction)PerceptionColorFrameSource_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "is_correlated_with", (PyCFunction)PerceptionColorFrameSource_IsCorrelatedWith, METH_VARARGS, nullptr },
        { "open_reader", (PyCFunction)PerceptionColorFrameSource_OpenReader, METH_VARARGS, nullptr },
        { "request_access_async", (PyCFunction)PerceptionColorFrameSource_RequestAccessAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_get_depth_correlated_camera_intrinsics_async", (PyCFunction)PerceptionColorFrameSource_TryGetDepthCorrelatedCameraIntrinsicsAsync, METH_VARARGS, nullptr },
        { "try_get_depth_correlated_coordinate_mapper_async", (PyCFunction)PerceptionColorFrameSource_TryGetDepthCorrelatedCoordinateMapperAsync, METH_VARARGS, nullptr },
        { "try_get_transform_to", (PyCFunction)PerceptionColorFrameSource_TryGetTransformTo, METH_VARARGS, nullptr },
        { "try_set_video_profile_async", (PyCFunction)PerceptionColorFrameSource_TrySetVideoProfileAsync, METH_VARARGS, nullptr },
        { "add_active_changed", (PyCFunction)PerceptionColorFrameSource_add_ActiveChanged, METH_O, nullptr },
        { "remove_active_changed", (PyCFunction)PerceptionColorFrameSource_remove_ActiveChanged, METH_O, nullptr },
        { "add_available_changed", (PyCFunction)PerceptionColorFrameSource_add_AvailableChanged, METH_O, nullptr },
        { "remove_available_changed", (PyCFunction)PerceptionColorFrameSource_remove_AvailableChanged, METH_O, nullptr },
        { "add_camera_intrinsics_changed", (PyCFunction)PerceptionColorFrameSource_add_CameraIntrinsicsChanged, METH_O, nullptr },
        { "remove_camera_intrinsics_changed", (PyCFunction)PerceptionColorFrameSource_remove_CameraIntrinsicsChanged, METH_O, nullptr },
        { "add_properties_changed", (PyCFunction)PerceptionColorFrameSource_add_PropertiesChanged, METH_O, nullptr },
        { "remove_properties_changed", (PyCFunction)PerceptionColorFrameSource_remove_PropertiesChanged, METH_O, nullptr },
        { "add_video_profile_changed", (PyCFunction)PerceptionColorFrameSource_add_VideoProfileChanged, METH_O, nullptr },
        { "remove_video_profile_changed", (PyCFunction)PerceptionColorFrameSource_remove_VideoProfileChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionColorFrameSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionColorFrameSource[] = {
        { const_cast<char*>("active"), (getter)PerceptionColorFrameSource_get_Active, nullptr, nullptr, nullptr },
        { const_cast<char*>("available"), (getter)PerceptionColorFrameSource_get_Available, nullptr, nullptr, nullptr },
        { const_cast<char*>("available_video_profiles"), (getter)PerceptionColorFrameSource_get_AvailableVideoProfiles, nullptr, nullptr, nullptr },
        { const_cast<char*>("camera_intrinsics"), (getter)PerceptionColorFrameSource_get_CameraIntrinsics, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_kind"), (getter)PerceptionColorFrameSource_get_DeviceKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)PerceptionColorFrameSource_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)PerceptionColorFrameSource_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_controlled"), (getter)PerceptionColorFrameSource_get_IsControlled, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)PerceptionColorFrameSource_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_video_profiles"), (getter)PerceptionColorFrameSource_get_SupportedVideoProfiles, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_profile"), (getter)PerceptionColorFrameSource_get_VideoProfile, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)PerceptionColorFrameSource_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionColorFrameSource[] = 
    {
        { Py_tp_new, _new_PerceptionColorFrameSource },
        { Py_tp_dealloc, _dealloc_PerceptionColorFrameSource },
        { Py_tp_methods, _methods_PerceptionColorFrameSource },
        { Py_tp_getset, _getset_PerceptionColorFrameSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionColorFrameSource =
    {
        "_winrt_Windows_Devices_Perception.PerceptionColorFrameSource",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionColorFrameSource
    };

    // ----- PerceptionColorFrameSourceAddedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionColorFrameSourceAddedEventArgs = "PerceptionColorFrameSourceAddedEventArgs";

    static PyObject* _new_PerceptionColorFrameSourceAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionColorFrameSourceAddedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionColorFrameSourceAddedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionColorFrameSourceAddedEventArgs_get_FrameSource(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionColorFrameSourceAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionColorFrameSourceAddedEventArgs[] = {
        { "_from", (PyCFunction)_from_PerceptionColorFrameSourceAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionColorFrameSourceAddedEventArgs[] = {
        { const_cast<char*>("frame_source"), (getter)PerceptionColorFrameSourceAddedEventArgs_get_FrameSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionColorFrameSourceAddedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionColorFrameSourceAddedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionColorFrameSourceAddedEventArgs },
        { Py_tp_methods, _methods_PerceptionColorFrameSourceAddedEventArgs },
        { Py_tp_getset, _getset_PerceptionColorFrameSourceAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionColorFrameSourceAddedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionColorFrameSourceAddedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionColorFrameSourceAddedEventArgs
    };

    // ----- PerceptionColorFrameSourceRemovedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionColorFrameSourceRemovedEventArgs = "PerceptionColorFrameSourceRemovedEventArgs";

    static PyObject* _new_PerceptionColorFrameSourceRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionColorFrameSourceRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionColorFrameSourceRemovedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionColorFrameSourceRemovedEventArgs_get_FrameSource(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionColorFrameSourceRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionColorFrameSourceRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_PerceptionColorFrameSourceRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionColorFrameSourceRemovedEventArgs[] = {
        { const_cast<char*>("frame_source"), (getter)PerceptionColorFrameSourceRemovedEventArgs_get_FrameSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionColorFrameSourceRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionColorFrameSourceRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionColorFrameSourceRemovedEventArgs },
        { Py_tp_methods, _methods_PerceptionColorFrameSourceRemovedEventArgs },
        { Py_tp_getset, _getset_PerceptionColorFrameSourceRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionColorFrameSourceRemovedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionColorFrameSourceRemovedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionColorFrameSourceRemovedEventArgs
    };

    // ----- PerceptionColorFrameSourceWatcher class --------------------
    constexpr const char* const _type_name_PerceptionColorFrameSourceWatcher = "PerceptionColorFrameSourceWatcher";

    static PyObject* _new_PerceptionColorFrameSourceWatcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionColorFrameSourceWatcher);
        return nullptr;
    }

    static void _dealloc_PerceptionColorFrameSourceWatcher(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionColorFrameSourceWatcher_Start(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_Stop(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_get_Status(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_add_EnumerationCompleted(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.EnumerationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_remove_EnumerationCompleted(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.EnumerationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_add_SourceAdded(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, winrt::Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs>>(arg);

            return py::convert(self->obj.SourceAdded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_remove_SourceAdded(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SourceAdded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_add_SourceRemoved(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, winrt::Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs>>(arg);

            return py::convert(self->obj.SourceRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_remove_SourceRemoved(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SourceRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_add_Stopped(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Stopped(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionColorFrameSourceWatcher_remove_Stopped(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Stopped(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionColorFrameSourceWatcher(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionColorFrameSourceWatcher[] = {
        { "start", (PyCFunction)PerceptionColorFrameSourceWatcher_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)PerceptionColorFrameSourceWatcher_Stop, METH_VARARGS, nullptr },
        { "add_enumeration_completed", (PyCFunction)PerceptionColorFrameSourceWatcher_add_EnumerationCompleted, METH_O, nullptr },
        { "remove_enumeration_completed", (PyCFunction)PerceptionColorFrameSourceWatcher_remove_EnumerationCompleted, METH_O, nullptr },
        { "add_source_added", (PyCFunction)PerceptionColorFrameSourceWatcher_add_SourceAdded, METH_O, nullptr },
        { "remove_source_added", (PyCFunction)PerceptionColorFrameSourceWatcher_remove_SourceAdded, METH_O, nullptr },
        { "add_source_removed", (PyCFunction)PerceptionColorFrameSourceWatcher_add_SourceRemoved, METH_O, nullptr },
        { "remove_source_removed", (PyCFunction)PerceptionColorFrameSourceWatcher_remove_SourceRemoved, METH_O, nullptr },
        { "add_stopped", (PyCFunction)PerceptionColorFrameSourceWatcher_add_Stopped, METH_O, nullptr },
        { "remove_stopped", (PyCFunction)PerceptionColorFrameSourceWatcher_remove_Stopped, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionColorFrameSourceWatcher, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionColorFrameSourceWatcher[] = {
        { const_cast<char*>("status"), (getter)PerceptionColorFrameSourceWatcher_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionColorFrameSourceWatcher[] = 
    {
        { Py_tp_new, _new_PerceptionColorFrameSourceWatcher },
        { Py_tp_dealloc, _dealloc_PerceptionColorFrameSourceWatcher },
        { Py_tp_methods, _methods_PerceptionColorFrameSourceWatcher },
        { Py_tp_getset, _getset_PerceptionColorFrameSourceWatcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionColorFrameSourceWatcher =
    {
        "_winrt_Windows_Devices_Perception.PerceptionColorFrameSourceWatcher",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionColorFrameSourceWatcher
    };

    // ----- PerceptionControlSession class --------------------
    constexpr const char* const _type_name_PerceptionControlSession = "PerceptionControlSession";

    static PyObject* _new_PerceptionControlSession(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionControlSession);
        return nullptr;
    }

    static void _dealloc_PerceptionControlSession(py::wrapper::Windows::Devices::Perception::PerceptionControlSession* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionControlSession_Close(py::wrapper::Windows::Devices::Perception::PerceptionControlSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionControlSession_TrySetPropertyAsync(py::wrapper::Windows::Devices::Perception::PerceptionControlSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::IInspectable>(args, 1);

                return py::convert(self->obj.TrySetPropertyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionControlSession_add_ControlLost(py::wrapper::Windows::Devices::Perception::PerceptionControlSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionControlSession, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ControlLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionControlSession_remove_ControlLost(py::wrapper::Windows::Devices::Perception::PerceptionControlSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ControlLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionControlSession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionControlSession>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PerceptionControlSession(py::wrapper::Windows::Devices::Perception::PerceptionControlSession* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_PerceptionControlSession(py::wrapper::Windows::Devices::Perception::PerceptionControlSession* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionControlSession[] = {
        { "close", (PyCFunction)PerceptionControlSession_Close, METH_VARARGS, nullptr },
        { "try_set_property_async", (PyCFunction)PerceptionControlSession_TrySetPropertyAsync, METH_VARARGS, nullptr },
        { "add_control_lost", (PyCFunction)PerceptionControlSession_add_ControlLost, METH_O, nullptr },
        { "remove_control_lost", (PyCFunction)PerceptionControlSession_remove_ControlLost, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionControlSession, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_PerceptionControlSession, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_PerceptionControlSession, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionControlSession[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionControlSession[] = 
    {
        { Py_tp_new, _new_PerceptionControlSession },
        { Py_tp_dealloc, _dealloc_PerceptionControlSession },
        { Py_tp_methods, _methods_PerceptionControlSession },
        { Py_tp_getset, _getset_PerceptionControlSession },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionControlSession =
    {
        "_winrt_Windows_Devices_Perception.PerceptionControlSession",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionControlSession),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionControlSession
    };

    // ----- PerceptionDepthCorrelatedCameraIntrinsics class --------------------
    constexpr const char* const _type_name_PerceptionDepthCorrelatedCameraIntrinsics = "PerceptionDepthCorrelatedCameraIntrinsics";

    static PyObject* _new_PerceptionDepthCorrelatedCameraIntrinsics(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthCorrelatedCameraIntrinsics);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthCorrelatedCameraIntrinsics(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthCorrelatedCameraIntrinsics_UnprojectAllPixelsAtCorrelatedDepthAsync(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Numerics::float3>::size_type>(args, 1);
                winrt::com_array<winrt::Windows::Foundation::Numerics::float3> param1 ( param1_count, py::empty_instance<winrt::Windows::Foundation::Numerics::float3>::get() );

                auto return_value = self->obj.UnprojectAllPixelsAtCorrelatedDepthAsync(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthCorrelatedCameraIntrinsics_UnprojectPixelAtCorrelatedDepth(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Point>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 1);

                return py::convert(self->obj.UnprojectPixelAtCorrelatedDepth(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthCorrelatedCameraIntrinsics_UnprojectPixelsAtCorrelatedDepth(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<winrt::Windows::Foundation::Point>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 1);
                auto param2_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Numerics::float3>::size_type>(args, 2);
                winrt::com_array<winrt::Windows::Foundation::Numerics::float3> param2 ( param2_count, py::empty_instance<winrt::Windows::Foundation::Numerics::float3>::get() );

                self->obj.UnprojectPixelsAtCorrelatedDepth(param0, param1, param2);

                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return out2.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthCorrelatedCameraIntrinsics_UnprojectRegionPixelsAtCorrelatedDepthAsync(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 1);
                auto param2_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Numerics::float3>::size_type>(args, 2);
                winrt::com_array<winrt::Windows::Foundation::Numerics::float3> param2 ( param2_count, py::empty_instance<winrt::Windows::Foundation::Numerics::float3>::get() );

                auto return_value = self->obj.UnprojectRegionPixelsAtCorrelatedDepthAsync(param0, param1, param2);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out2.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthCorrelatedCameraIntrinsics(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthCorrelatedCameraIntrinsics[] = {
        { "unproject_all_pixels_at_correlated_depth_async", (PyCFunction)PerceptionDepthCorrelatedCameraIntrinsics_UnprojectAllPixelsAtCorrelatedDepthAsync, METH_VARARGS, nullptr },
        { "unproject_pixel_at_correlated_depth", (PyCFunction)PerceptionDepthCorrelatedCameraIntrinsics_UnprojectPixelAtCorrelatedDepth, METH_VARARGS, nullptr },
        { "unproject_pixels_at_correlated_depth", (PyCFunction)PerceptionDepthCorrelatedCameraIntrinsics_UnprojectPixelsAtCorrelatedDepth, METH_VARARGS, nullptr },
        { "unproject_region_pixels_at_correlated_depth_async", (PyCFunction)PerceptionDepthCorrelatedCameraIntrinsics_UnprojectRegionPixelsAtCorrelatedDepthAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionDepthCorrelatedCameraIntrinsics, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthCorrelatedCameraIntrinsics[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthCorrelatedCameraIntrinsics[] = 
    {
        { Py_tp_new, _new_PerceptionDepthCorrelatedCameraIntrinsics },
        { Py_tp_dealloc, _dealloc_PerceptionDepthCorrelatedCameraIntrinsics },
        { Py_tp_methods, _methods_PerceptionDepthCorrelatedCameraIntrinsics },
        { Py_tp_getset, _getset_PerceptionDepthCorrelatedCameraIntrinsics },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthCorrelatedCameraIntrinsics =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthCorrelatedCameraIntrinsics",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthCorrelatedCameraIntrinsics
    };

    // ----- PerceptionDepthCorrelatedCoordinateMapper class --------------------
    constexpr const char* const _type_name_PerceptionDepthCorrelatedCoordinateMapper = "PerceptionDepthCorrelatedCoordinateMapper";

    static PyObject* _new_PerceptionDepthCorrelatedCoordinateMapper(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthCorrelatedCoordinateMapper);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthCorrelatedCoordinateMapper(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthCorrelatedCoordinateMapper_MapAllPixelsToTargetAsync(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Point>::size_type>(args, 1);
                winrt::com_array<winrt::Windows::Foundation::Point> param1 ( param1_count, py::empty_instance<winrt::Windows::Foundation::Point>::get() );

                auto return_value = self->obj.MapAllPixelsToTargetAsync(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthCorrelatedCoordinateMapper_MapPixelToTarget(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Point>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 1);

                return py::convert(self->obj.MapPixelToTarget(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthCorrelatedCoordinateMapper_MapPixelsToTarget(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<winrt::Windows::Foundation::Point>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 1);
                auto param2_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Point>::size_type>(args, 2);
                winrt::com_array<winrt::Windows::Foundation::Point> param2 ( param2_count, py::empty_instance<winrt::Windows::Foundation::Point>::get() );

                self->obj.MapPixelsToTarget(param0, param1, param2);

                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return out2.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthCorrelatedCoordinateMapper_MapRegionOfPixelsToTargetAsync(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrame>(args, 1);
                auto param2_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Point>::size_type>(args, 2);
                winrt::com_array<winrt::Windows::Foundation::Point> param2 ( param2_count, py::empty_instance<winrt::Windows::Foundation::Point>::get() );

                auto return_value = self->obj.MapRegionOfPixelsToTargetAsync(param0, param1, param2);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out2{ py::convert(param2) };
                if (!out2)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out2.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthCorrelatedCoordinateMapper(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthCorrelatedCoordinateMapper[] = {
        { "map_all_pixels_to_target_async", (PyCFunction)PerceptionDepthCorrelatedCoordinateMapper_MapAllPixelsToTargetAsync, METH_VARARGS, nullptr },
        { "map_pixel_to_target", (PyCFunction)PerceptionDepthCorrelatedCoordinateMapper_MapPixelToTarget, METH_VARARGS, nullptr },
        { "map_pixels_to_target", (PyCFunction)PerceptionDepthCorrelatedCoordinateMapper_MapPixelsToTarget, METH_VARARGS, nullptr },
        { "map_region_of_pixels_to_target_async", (PyCFunction)PerceptionDepthCorrelatedCoordinateMapper_MapRegionOfPixelsToTargetAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionDepthCorrelatedCoordinateMapper, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthCorrelatedCoordinateMapper[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthCorrelatedCoordinateMapper[] = 
    {
        { Py_tp_new, _new_PerceptionDepthCorrelatedCoordinateMapper },
        { Py_tp_dealloc, _dealloc_PerceptionDepthCorrelatedCoordinateMapper },
        { Py_tp_methods, _methods_PerceptionDepthCorrelatedCoordinateMapper },
        { Py_tp_getset, _getset_PerceptionDepthCorrelatedCoordinateMapper },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthCorrelatedCoordinateMapper =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthCorrelatedCoordinateMapper",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthCorrelatedCoordinateMapper
    };

    // ----- PerceptionDepthFrame class --------------------
    constexpr const char* const _type_name_PerceptionDepthFrame = "PerceptionDepthFrame";

    static PyObject* _new_PerceptionDepthFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthFrame);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthFrame(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthFrame_Close(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrame_get_VideoFrame(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PerceptionDepthFrame(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrame* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_PerceptionDepthFrame(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrame* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthFrame[] = {
        { "close", (PyCFunction)PerceptionDepthFrame_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionDepthFrame, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_PerceptionDepthFrame, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_PerceptionDepthFrame, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthFrame[] = {
        { const_cast<char*>("video_frame"), (getter)PerceptionDepthFrame_get_VideoFrame, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthFrame[] = 
    {
        { Py_tp_new, _new_PerceptionDepthFrame },
        { Py_tp_dealloc, _dealloc_PerceptionDepthFrame },
        { Py_tp_methods, _methods_PerceptionDepthFrame },
        { Py_tp_getset, _getset_PerceptionDepthFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthFrame =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthFrame",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthFrame
    };

    // ----- PerceptionDepthFrameArrivedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionDepthFrameArrivedEventArgs = "PerceptionDepthFrameArrivedEventArgs";

    static PyObject* _new_PerceptionDepthFrameArrivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthFrameArrivedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthFrameArrivedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthFrameArrivedEventArgs_TryOpenFrame(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryOpenFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameArrivedEventArgs_get_RelativeTime(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelativeTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthFrameArrivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthFrameArrivedEventArgs[] = {
        { "try_open_frame", (PyCFunction)PerceptionDepthFrameArrivedEventArgs_TryOpenFrame, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionDepthFrameArrivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthFrameArrivedEventArgs[] = {
        { const_cast<char*>("relative_time"), (getter)PerceptionDepthFrameArrivedEventArgs_get_RelativeTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthFrameArrivedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionDepthFrameArrivedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionDepthFrameArrivedEventArgs },
        { Py_tp_methods, _methods_PerceptionDepthFrameArrivedEventArgs },
        { Py_tp_getset, _getset_PerceptionDepthFrameArrivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthFrameArrivedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthFrameArrivedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthFrameArrivedEventArgs
    };

    // ----- PerceptionDepthFrameReader class --------------------
    constexpr const char* const _type_name_PerceptionDepthFrameReader = "PerceptionDepthFrameReader";

    static PyObject* _new_PerceptionDepthFrameReader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthFrameReader);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthFrameReader_Close(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameReader_TryReadLatestFrame(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryReadLatestFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameReader_get_IsPaused(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPaused());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PerceptionDepthFrameReader_put_IsPaused(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPaused(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PerceptionDepthFrameReader_get_Source(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameReader_add_FrameArrived(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameReader, winrt::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs>>(arg);

            return py::convert(self->obj.FrameArrived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameReader_remove_FrameArrived(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameArrived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthFrameReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthFrameReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PerceptionDepthFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_PerceptionDepthFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthFrameReader[] = {
        { "close", (PyCFunction)PerceptionDepthFrameReader_Close, METH_VARARGS, nullptr },
        { "try_read_latest_frame", (PyCFunction)PerceptionDepthFrameReader_TryReadLatestFrame, METH_VARARGS, nullptr },
        { "add_frame_arrived", (PyCFunction)PerceptionDepthFrameReader_add_FrameArrived, METH_O, nullptr },
        { "remove_frame_arrived", (PyCFunction)PerceptionDepthFrameReader_remove_FrameArrived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionDepthFrameReader, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_PerceptionDepthFrameReader, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_PerceptionDepthFrameReader, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthFrameReader[] = {
        { const_cast<char*>("is_paused"), (getter)PerceptionDepthFrameReader_get_IsPaused, (setter)PerceptionDepthFrameReader_put_IsPaused, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)PerceptionDepthFrameReader_get_Source, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthFrameReader[] = 
    {
        { Py_tp_new, _new_PerceptionDepthFrameReader },
        { Py_tp_dealloc, _dealloc_PerceptionDepthFrameReader },
        { Py_tp_methods, _methods_PerceptionDepthFrameReader },
        { Py_tp_getset, _getset_PerceptionDepthFrameReader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthFrameReader =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthFrameReader",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthFrameReader
    };

    // ----- PerceptionDepthFrameSource class --------------------
    constexpr const char* const _type_name_PerceptionDepthFrameSource = "PerceptionDepthFrameSource";

    static PyObject* _new_PerceptionDepthFrameSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthFrameSource);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthFrameSource(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthFrameSource_AcquireControlSession(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AcquireControlSession());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_CanControlIndependentlyFrom(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CanControlIndependentlyFrom(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_CreateWatcher(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionDepthFrameSource::CreateWatcher());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_FindAllAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionDepthFrameSource::FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Perception::PerceptionDepthFrameSource::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_IsCorrelatedWith(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.IsCorrelatedWith(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_OpenReader(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.OpenReader());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionDepthFrameSource::RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_TryGetDepthCorrelatedCameraIntrinsicsAsync(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>(args, 0);

                return py::convert(self->obj.TryGetDepthCorrelatedCameraIntrinsicsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_TryGetDepthCorrelatedCoordinateMapperAsync(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>(args, 1);

                return py::convert(self->obj.TryGetDepthCorrelatedCoordinateMapperAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_TryGetTransformTo(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                winrt::Windows::Foundation::Numerics::float4x4 param1 {  };

                auto return_value = self->obj.TryGetTransformTo(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_TrySetVideoProfileAsync(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionControlSession>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionVideoProfile>(args, 1);

                return py::convert(self->obj.TrySetVideoProfileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_Active(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Active());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_Available(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Available());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_AvailableVideoProfiles(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AvailableVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_CameraIntrinsics(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CameraIntrinsics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_DeviceKind(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_DisplayName(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_Id(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_IsControlled(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsControlled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_Properties(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_SupportedVideoProfiles(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_VideoProfile(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoProfile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_get_DeviceId(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_add_ActiveChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ActiveChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_remove_ActiveChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ActiveChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_add_AvailableChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.AvailableChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_remove_AvailableChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AvailableChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_add_CameraIntrinsicsChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.CameraIntrinsicsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_remove_CameraIntrinsicsChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CameraIntrinsicsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_add_PropertiesChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource, winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>>(arg);

            return py::convert(self->obj.PropertiesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_remove_PropertiesChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PropertiesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_add_VideoProfileChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.VideoProfileChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSource_remove_VideoProfileChanged(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VideoProfileChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthFrameSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthFrameSource[] = {
        { "acquire_control_session", (PyCFunction)PerceptionDepthFrameSource_AcquireControlSession, METH_VARARGS, nullptr },
        { "can_control_independently_from", (PyCFunction)PerceptionDepthFrameSource_CanControlIndependentlyFrom, METH_VARARGS, nullptr },
        { "create_watcher", (PyCFunction)PerceptionDepthFrameSource_CreateWatcher, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_async", (PyCFunction)PerceptionDepthFrameSource_FindAllAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "from_id_async", (PyCFunction)PerceptionDepthFrameSource_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "is_correlated_with", (PyCFunction)PerceptionDepthFrameSource_IsCorrelatedWith, METH_VARARGS, nullptr },
        { "open_reader", (PyCFunction)PerceptionDepthFrameSource_OpenReader, METH_VARARGS, nullptr },
        { "request_access_async", (PyCFunction)PerceptionDepthFrameSource_RequestAccessAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_get_depth_correlated_camera_intrinsics_async", (PyCFunction)PerceptionDepthFrameSource_TryGetDepthCorrelatedCameraIntrinsicsAsync, METH_VARARGS, nullptr },
        { "try_get_depth_correlated_coordinate_mapper_async", (PyCFunction)PerceptionDepthFrameSource_TryGetDepthCorrelatedCoordinateMapperAsync, METH_VARARGS, nullptr },
        { "try_get_transform_to", (PyCFunction)PerceptionDepthFrameSource_TryGetTransformTo, METH_VARARGS, nullptr },
        { "try_set_video_profile_async", (PyCFunction)PerceptionDepthFrameSource_TrySetVideoProfileAsync, METH_VARARGS, nullptr },
        { "add_active_changed", (PyCFunction)PerceptionDepthFrameSource_add_ActiveChanged, METH_O, nullptr },
        { "remove_active_changed", (PyCFunction)PerceptionDepthFrameSource_remove_ActiveChanged, METH_O, nullptr },
        { "add_available_changed", (PyCFunction)PerceptionDepthFrameSource_add_AvailableChanged, METH_O, nullptr },
        { "remove_available_changed", (PyCFunction)PerceptionDepthFrameSource_remove_AvailableChanged, METH_O, nullptr },
        { "add_camera_intrinsics_changed", (PyCFunction)PerceptionDepthFrameSource_add_CameraIntrinsicsChanged, METH_O, nullptr },
        { "remove_camera_intrinsics_changed", (PyCFunction)PerceptionDepthFrameSource_remove_CameraIntrinsicsChanged, METH_O, nullptr },
        { "add_properties_changed", (PyCFunction)PerceptionDepthFrameSource_add_PropertiesChanged, METH_O, nullptr },
        { "remove_properties_changed", (PyCFunction)PerceptionDepthFrameSource_remove_PropertiesChanged, METH_O, nullptr },
        { "add_video_profile_changed", (PyCFunction)PerceptionDepthFrameSource_add_VideoProfileChanged, METH_O, nullptr },
        { "remove_video_profile_changed", (PyCFunction)PerceptionDepthFrameSource_remove_VideoProfileChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionDepthFrameSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthFrameSource[] = {
        { const_cast<char*>("active"), (getter)PerceptionDepthFrameSource_get_Active, nullptr, nullptr, nullptr },
        { const_cast<char*>("available"), (getter)PerceptionDepthFrameSource_get_Available, nullptr, nullptr, nullptr },
        { const_cast<char*>("available_video_profiles"), (getter)PerceptionDepthFrameSource_get_AvailableVideoProfiles, nullptr, nullptr, nullptr },
        { const_cast<char*>("camera_intrinsics"), (getter)PerceptionDepthFrameSource_get_CameraIntrinsics, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_kind"), (getter)PerceptionDepthFrameSource_get_DeviceKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)PerceptionDepthFrameSource_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)PerceptionDepthFrameSource_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_controlled"), (getter)PerceptionDepthFrameSource_get_IsControlled, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)PerceptionDepthFrameSource_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_video_profiles"), (getter)PerceptionDepthFrameSource_get_SupportedVideoProfiles, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_profile"), (getter)PerceptionDepthFrameSource_get_VideoProfile, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)PerceptionDepthFrameSource_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthFrameSource[] = 
    {
        { Py_tp_new, _new_PerceptionDepthFrameSource },
        { Py_tp_dealloc, _dealloc_PerceptionDepthFrameSource },
        { Py_tp_methods, _methods_PerceptionDepthFrameSource },
        { Py_tp_getset, _getset_PerceptionDepthFrameSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthFrameSource =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthFrameSource",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthFrameSource
    };

    // ----- PerceptionDepthFrameSourceAddedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionDepthFrameSourceAddedEventArgs = "PerceptionDepthFrameSourceAddedEventArgs";

    static PyObject* _new_PerceptionDepthFrameSourceAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthFrameSourceAddedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthFrameSourceAddedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthFrameSourceAddedEventArgs_get_FrameSource(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthFrameSourceAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthFrameSourceAddedEventArgs[] = {
        { "_from", (PyCFunction)_from_PerceptionDepthFrameSourceAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthFrameSourceAddedEventArgs[] = {
        { const_cast<char*>("frame_source"), (getter)PerceptionDepthFrameSourceAddedEventArgs_get_FrameSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthFrameSourceAddedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionDepthFrameSourceAddedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionDepthFrameSourceAddedEventArgs },
        { Py_tp_methods, _methods_PerceptionDepthFrameSourceAddedEventArgs },
        { Py_tp_getset, _getset_PerceptionDepthFrameSourceAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthFrameSourceAddedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthFrameSourceAddedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthFrameSourceAddedEventArgs
    };

    // ----- PerceptionDepthFrameSourceRemovedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionDepthFrameSourceRemovedEventArgs = "PerceptionDepthFrameSourceRemovedEventArgs";

    static PyObject* _new_PerceptionDepthFrameSourceRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthFrameSourceRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthFrameSourceRemovedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthFrameSourceRemovedEventArgs_get_FrameSource(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthFrameSourceRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthFrameSourceRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_PerceptionDepthFrameSourceRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthFrameSourceRemovedEventArgs[] = {
        { const_cast<char*>("frame_source"), (getter)PerceptionDepthFrameSourceRemovedEventArgs_get_FrameSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthFrameSourceRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionDepthFrameSourceRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionDepthFrameSourceRemovedEventArgs },
        { Py_tp_methods, _methods_PerceptionDepthFrameSourceRemovedEventArgs },
        { Py_tp_getset, _getset_PerceptionDepthFrameSourceRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthFrameSourceRemovedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthFrameSourceRemovedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthFrameSourceRemovedEventArgs
    };

    // ----- PerceptionDepthFrameSourceWatcher class --------------------
    constexpr const char* const _type_name_PerceptionDepthFrameSourceWatcher = "PerceptionDepthFrameSourceWatcher";

    static PyObject* _new_PerceptionDepthFrameSourceWatcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionDepthFrameSourceWatcher);
        return nullptr;
    }

    static void _dealloc_PerceptionDepthFrameSourceWatcher(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_Start(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_Stop(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_get_Status(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_add_EnumerationCompleted(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.EnumerationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_remove_EnumerationCompleted(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.EnumerationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_add_SourceAdded(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs>>(arg);

            return py::convert(self->obj.SourceAdded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_remove_SourceAdded(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SourceAdded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_add_SourceRemoved(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs>>(arg);

            return py::convert(self->obj.SourceRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_remove_SourceRemoved(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SourceRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_add_Stopped(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Stopped(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionDepthFrameSourceWatcher_remove_Stopped(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Stopped(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionDepthFrameSourceWatcher(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionDepthFrameSourceWatcher[] = {
        { "start", (PyCFunction)PerceptionDepthFrameSourceWatcher_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)PerceptionDepthFrameSourceWatcher_Stop, METH_VARARGS, nullptr },
        { "add_enumeration_completed", (PyCFunction)PerceptionDepthFrameSourceWatcher_add_EnumerationCompleted, METH_O, nullptr },
        { "remove_enumeration_completed", (PyCFunction)PerceptionDepthFrameSourceWatcher_remove_EnumerationCompleted, METH_O, nullptr },
        { "add_source_added", (PyCFunction)PerceptionDepthFrameSourceWatcher_add_SourceAdded, METH_O, nullptr },
        { "remove_source_added", (PyCFunction)PerceptionDepthFrameSourceWatcher_remove_SourceAdded, METH_O, nullptr },
        { "add_source_removed", (PyCFunction)PerceptionDepthFrameSourceWatcher_add_SourceRemoved, METH_O, nullptr },
        { "remove_source_removed", (PyCFunction)PerceptionDepthFrameSourceWatcher_remove_SourceRemoved, METH_O, nullptr },
        { "add_stopped", (PyCFunction)PerceptionDepthFrameSourceWatcher_add_Stopped, METH_O, nullptr },
        { "remove_stopped", (PyCFunction)PerceptionDepthFrameSourceWatcher_remove_Stopped, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionDepthFrameSourceWatcher, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionDepthFrameSourceWatcher[] = {
        { const_cast<char*>("status"), (getter)PerceptionDepthFrameSourceWatcher_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionDepthFrameSourceWatcher[] = 
    {
        { Py_tp_new, _new_PerceptionDepthFrameSourceWatcher },
        { Py_tp_dealloc, _dealloc_PerceptionDepthFrameSourceWatcher },
        { Py_tp_methods, _methods_PerceptionDepthFrameSourceWatcher },
        { Py_tp_getset, _getset_PerceptionDepthFrameSourceWatcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionDepthFrameSourceWatcher =
    {
        "_winrt_Windows_Devices_Perception.PerceptionDepthFrameSourceWatcher",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionDepthFrameSourceWatcher
    };

    // ----- PerceptionFrameSourcePropertiesChangedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionFrameSourcePropertiesChangedEventArgs = "PerceptionFrameSourcePropertiesChangedEventArgs";

    static PyObject* _new_PerceptionFrameSourcePropertiesChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionFrameSourcePropertiesChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionFrameSourcePropertiesChangedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionFrameSourcePropertiesChangedEventArgs_get_CollectionChange(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CollectionChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionFrameSourcePropertiesChangedEventArgs_get_Key(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Key());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionFrameSourcePropertiesChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionFrameSourcePropertiesChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_PerceptionFrameSourcePropertiesChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionFrameSourcePropertiesChangedEventArgs[] = {
        { const_cast<char*>("collection_change"), (getter)PerceptionFrameSourcePropertiesChangedEventArgs_get_CollectionChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("key"), (getter)PerceptionFrameSourcePropertiesChangedEventArgs_get_Key, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionFrameSourcePropertiesChangedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionFrameSourcePropertiesChangedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionFrameSourcePropertiesChangedEventArgs },
        { Py_tp_methods, _methods_PerceptionFrameSourcePropertiesChangedEventArgs },
        { Py_tp_getset, _getset_PerceptionFrameSourcePropertiesChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionFrameSourcePropertiesChangedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionFrameSourcePropertiesChangedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionFrameSourcePropertiesChangedEventArgs
    };

    // ----- PerceptionFrameSourcePropertyChangeResult class --------------------
    constexpr const char* const _type_name_PerceptionFrameSourcePropertyChangeResult = "PerceptionFrameSourcePropertyChangeResult";

    static PyObject* _new_PerceptionFrameSourcePropertyChangeResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionFrameSourcePropertyChangeResult);
        return nullptr;
    }

    static void _dealloc_PerceptionFrameSourcePropertyChangeResult(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionFrameSourcePropertyChangeResult_get_NewValue(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NewValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionFrameSourcePropertyChangeResult_get_Status(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionFrameSourcePropertyChangeResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionFrameSourcePropertyChangeResult[] = {
        { "_from", (PyCFunction)_from_PerceptionFrameSourcePropertyChangeResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionFrameSourcePropertyChangeResult[] = {
        { const_cast<char*>("new_value"), (getter)PerceptionFrameSourcePropertyChangeResult_get_NewValue, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)PerceptionFrameSourcePropertyChangeResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionFrameSourcePropertyChangeResult[] = 
    {
        { Py_tp_new, _new_PerceptionFrameSourcePropertyChangeResult },
        { Py_tp_dealloc, _dealloc_PerceptionFrameSourcePropertyChangeResult },
        { Py_tp_methods, _methods_PerceptionFrameSourcePropertyChangeResult },
        { Py_tp_getset, _getset_PerceptionFrameSourcePropertyChangeResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionFrameSourcePropertyChangeResult =
    {
        "_winrt_Windows_Devices_Perception.PerceptionFrameSourcePropertyChangeResult",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionFrameSourcePropertyChangeResult
    };

    // ----- PerceptionInfraredFrame class --------------------
    constexpr const char* const _type_name_PerceptionInfraredFrame = "PerceptionInfraredFrame";

    static PyObject* _new_PerceptionInfraredFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionInfraredFrame);
        return nullptr;
    }

    static void _dealloc_PerceptionInfraredFrame(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionInfraredFrame_Close(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrame_get_VideoFrame(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionInfraredFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionInfraredFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PerceptionInfraredFrame(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrame* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_PerceptionInfraredFrame(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrame* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionInfraredFrame[] = {
        { "close", (PyCFunction)PerceptionInfraredFrame_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionInfraredFrame, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_PerceptionInfraredFrame, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_PerceptionInfraredFrame, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionInfraredFrame[] = {
        { const_cast<char*>("video_frame"), (getter)PerceptionInfraredFrame_get_VideoFrame, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionInfraredFrame[] = 
    {
        { Py_tp_new, _new_PerceptionInfraredFrame },
        { Py_tp_dealloc, _dealloc_PerceptionInfraredFrame },
        { Py_tp_methods, _methods_PerceptionInfraredFrame },
        { Py_tp_getset, _getset_PerceptionInfraredFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionInfraredFrame =
    {
        "_winrt_Windows_Devices_Perception.PerceptionInfraredFrame",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionInfraredFrame
    };

    // ----- PerceptionInfraredFrameArrivedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionInfraredFrameArrivedEventArgs = "PerceptionInfraredFrameArrivedEventArgs";

    static PyObject* _new_PerceptionInfraredFrameArrivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionInfraredFrameArrivedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionInfraredFrameArrivedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionInfraredFrameArrivedEventArgs_TryOpenFrame(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryOpenFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameArrivedEventArgs_get_RelativeTime(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelativeTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionInfraredFrameArrivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionInfraredFrameArrivedEventArgs[] = {
        { "try_open_frame", (PyCFunction)PerceptionInfraredFrameArrivedEventArgs_TryOpenFrame, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionInfraredFrameArrivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionInfraredFrameArrivedEventArgs[] = {
        { const_cast<char*>("relative_time"), (getter)PerceptionInfraredFrameArrivedEventArgs_get_RelativeTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionInfraredFrameArrivedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionInfraredFrameArrivedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionInfraredFrameArrivedEventArgs },
        { Py_tp_methods, _methods_PerceptionInfraredFrameArrivedEventArgs },
        { Py_tp_getset, _getset_PerceptionInfraredFrameArrivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionInfraredFrameArrivedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionInfraredFrameArrivedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionInfraredFrameArrivedEventArgs
    };

    // ----- PerceptionInfraredFrameReader class --------------------
    constexpr const char* const _type_name_PerceptionInfraredFrameReader = "PerceptionInfraredFrameReader";

    static PyObject* _new_PerceptionInfraredFrameReader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionInfraredFrameReader);
        return nullptr;
    }

    static void _dealloc_PerceptionInfraredFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionInfraredFrameReader_Close(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameReader_TryReadLatestFrame(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryReadLatestFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameReader_get_IsPaused(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPaused());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PerceptionInfraredFrameReader_put_IsPaused(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPaused(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PerceptionInfraredFrameReader_get_Source(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameReader_add_FrameArrived(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameReader, winrt::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs>>(arg);

            return py::convert(self->obj.FrameArrived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameReader_remove_FrameArrived(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameArrived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionInfraredFrameReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionInfraredFrameReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PerceptionInfraredFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_PerceptionInfraredFrameReader(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionInfraredFrameReader[] = {
        { "close", (PyCFunction)PerceptionInfraredFrameReader_Close, METH_VARARGS, nullptr },
        { "try_read_latest_frame", (PyCFunction)PerceptionInfraredFrameReader_TryReadLatestFrame, METH_VARARGS, nullptr },
        { "add_frame_arrived", (PyCFunction)PerceptionInfraredFrameReader_add_FrameArrived, METH_O, nullptr },
        { "remove_frame_arrived", (PyCFunction)PerceptionInfraredFrameReader_remove_FrameArrived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionInfraredFrameReader, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_PerceptionInfraredFrameReader, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_PerceptionInfraredFrameReader, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionInfraredFrameReader[] = {
        { const_cast<char*>("is_paused"), (getter)PerceptionInfraredFrameReader_get_IsPaused, (setter)PerceptionInfraredFrameReader_put_IsPaused, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)PerceptionInfraredFrameReader_get_Source, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionInfraredFrameReader[] = 
    {
        { Py_tp_new, _new_PerceptionInfraredFrameReader },
        { Py_tp_dealloc, _dealloc_PerceptionInfraredFrameReader },
        { Py_tp_methods, _methods_PerceptionInfraredFrameReader },
        { Py_tp_getset, _getset_PerceptionInfraredFrameReader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionInfraredFrameReader =
    {
        "_winrt_Windows_Devices_Perception.PerceptionInfraredFrameReader",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionInfraredFrameReader
    };

    // ----- PerceptionInfraredFrameSource class --------------------
    constexpr const char* const _type_name_PerceptionInfraredFrameSource = "PerceptionInfraredFrameSource";

    static PyObject* _new_PerceptionInfraredFrameSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionInfraredFrameSource);
        return nullptr;
    }

    static void _dealloc_PerceptionInfraredFrameSource(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionInfraredFrameSource_AcquireControlSession(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AcquireControlSession());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_CanControlIndependentlyFrom(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.CanControlIndependentlyFrom(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_CreateWatcher(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource::CreateWatcher());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_FindAllAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource::FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_IsCorrelatedWith(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.IsCorrelatedWith(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_OpenReader(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.OpenReader());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource::RequestAccessAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_TryGetDepthCorrelatedCameraIntrinsicsAsync(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>(args, 0);

                return py::convert(self->obj.TryGetDepthCorrelatedCameraIntrinsicsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_TryGetDepthCorrelatedCoordinateMapperAsync(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>(args, 1);

                return py::convert(self->obj.TryGetDepthCorrelatedCoordinateMapperAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_TryGetTransformTo(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                winrt::Windows::Foundation::Numerics::float4x4 param1 {  };

                auto return_value = self->obj.TryGetTransformTo(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_TrySetVideoProfileAsync(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionControlSession>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionVideoProfile>(args, 1);

                return py::convert(self->obj.TrySetVideoProfileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_Active(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Active());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_Available(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Available());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_AvailableVideoProfiles(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AvailableVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_CameraIntrinsics(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CameraIntrinsics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_DeviceKind(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_DisplayName(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_Id(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_IsControlled(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsControlled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_Properties(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_SupportedVideoProfiles(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedVideoProfiles());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_VideoProfile(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoProfile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_get_DeviceId(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_add_ActiveChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ActiveChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_remove_ActiveChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ActiveChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_add_AvailableChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.AvailableChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_remove_AvailableChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AvailableChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_add_CameraIntrinsicsChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.CameraIntrinsicsChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_remove_CameraIntrinsicsChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CameraIntrinsicsChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_add_PropertiesChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource, winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>>(arg);

            return py::convert(self->obj.PropertiesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_remove_PropertiesChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PropertiesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_add_VideoProfileChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.VideoProfileChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSource_remove_VideoProfileChanged(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VideoProfileChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionInfraredFrameSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionInfraredFrameSource[] = {
        { "acquire_control_session", (PyCFunction)PerceptionInfraredFrameSource_AcquireControlSession, METH_VARARGS, nullptr },
        { "can_control_independently_from", (PyCFunction)PerceptionInfraredFrameSource_CanControlIndependentlyFrom, METH_VARARGS, nullptr },
        { "create_watcher", (PyCFunction)PerceptionInfraredFrameSource_CreateWatcher, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_async", (PyCFunction)PerceptionInfraredFrameSource_FindAllAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "from_id_async", (PyCFunction)PerceptionInfraredFrameSource_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "is_correlated_with", (PyCFunction)PerceptionInfraredFrameSource_IsCorrelatedWith, METH_VARARGS, nullptr },
        { "open_reader", (PyCFunction)PerceptionInfraredFrameSource_OpenReader, METH_VARARGS, nullptr },
        { "request_access_async", (PyCFunction)PerceptionInfraredFrameSource_RequestAccessAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_get_depth_correlated_camera_intrinsics_async", (PyCFunction)PerceptionInfraredFrameSource_TryGetDepthCorrelatedCameraIntrinsicsAsync, METH_VARARGS, nullptr },
        { "try_get_depth_correlated_coordinate_mapper_async", (PyCFunction)PerceptionInfraredFrameSource_TryGetDepthCorrelatedCoordinateMapperAsync, METH_VARARGS, nullptr },
        { "try_get_transform_to", (PyCFunction)PerceptionInfraredFrameSource_TryGetTransformTo, METH_VARARGS, nullptr },
        { "try_set_video_profile_async", (PyCFunction)PerceptionInfraredFrameSource_TrySetVideoProfileAsync, METH_VARARGS, nullptr },
        { "add_active_changed", (PyCFunction)PerceptionInfraredFrameSource_add_ActiveChanged, METH_O, nullptr },
        { "remove_active_changed", (PyCFunction)PerceptionInfraredFrameSource_remove_ActiveChanged, METH_O, nullptr },
        { "add_available_changed", (PyCFunction)PerceptionInfraredFrameSource_add_AvailableChanged, METH_O, nullptr },
        { "remove_available_changed", (PyCFunction)PerceptionInfraredFrameSource_remove_AvailableChanged, METH_O, nullptr },
        { "add_camera_intrinsics_changed", (PyCFunction)PerceptionInfraredFrameSource_add_CameraIntrinsicsChanged, METH_O, nullptr },
        { "remove_camera_intrinsics_changed", (PyCFunction)PerceptionInfraredFrameSource_remove_CameraIntrinsicsChanged, METH_O, nullptr },
        { "add_properties_changed", (PyCFunction)PerceptionInfraredFrameSource_add_PropertiesChanged, METH_O, nullptr },
        { "remove_properties_changed", (PyCFunction)PerceptionInfraredFrameSource_remove_PropertiesChanged, METH_O, nullptr },
        { "add_video_profile_changed", (PyCFunction)PerceptionInfraredFrameSource_add_VideoProfileChanged, METH_O, nullptr },
        { "remove_video_profile_changed", (PyCFunction)PerceptionInfraredFrameSource_remove_VideoProfileChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionInfraredFrameSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionInfraredFrameSource[] = {
        { const_cast<char*>("active"), (getter)PerceptionInfraredFrameSource_get_Active, nullptr, nullptr, nullptr },
        { const_cast<char*>("available"), (getter)PerceptionInfraredFrameSource_get_Available, nullptr, nullptr, nullptr },
        { const_cast<char*>("available_video_profiles"), (getter)PerceptionInfraredFrameSource_get_AvailableVideoProfiles, nullptr, nullptr, nullptr },
        { const_cast<char*>("camera_intrinsics"), (getter)PerceptionInfraredFrameSource_get_CameraIntrinsics, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_kind"), (getter)PerceptionInfraredFrameSource_get_DeviceKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)PerceptionInfraredFrameSource_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)PerceptionInfraredFrameSource_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_controlled"), (getter)PerceptionInfraredFrameSource_get_IsControlled, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)PerceptionInfraredFrameSource_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_video_profiles"), (getter)PerceptionInfraredFrameSource_get_SupportedVideoProfiles, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_profile"), (getter)PerceptionInfraredFrameSource_get_VideoProfile, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)PerceptionInfraredFrameSource_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionInfraredFrameSource[] = 
    {
        { Py_tp_new, _new_PerceptionInfraredFrameSource },
        { Py_tp_dealloc, _dealloc_PerceptionInfraredFrameSource },
        { Py_tp_methods, _methods_PerceptionInfraredFrameSource },
        { Py_tp_getset, _getset_PerceptionInfraredFrameSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionInfraredFrameSource =
    {
        "_winrt_Windows_Devices_Perception.PerceptionInfraredFrameSource",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionInfraredFrameSource
    };

    // ----- PerceptionInfraredFrameSourceAddedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionInfraredFrameSourceAddedEventArgs = "PerceptionInfraredFrameSourceAddedEventArgs";

    static PyObject* _new_PerceptionInfraredFrameSourceAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionInfraredFrameSourceAddedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionInfraredFrameSourceAddedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionInfraredFrameSourceAddedEventArgs_get_FrameSource(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionInfraredFrameSourceAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionInfraredFrameSourceAddedEventArgs[] = {
        { "_from", (PyCFunction)_from_PerceptionInfraredFrameSourceAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionInfraredFrameSourceAddedEventArgs[] = {
        { const_cast<char*>("frame_source"), (getter)PerceptionInfraredFrameSourceAddedEventArgs_get_FrameSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionInfraredFrameSourceAddedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionInfraredFrameSourceAddedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionInfraredFrameSourceAddedEventArgs },
        { Py_tp_methods, _methods_PerceptionInfraredFrameSourceAddedEventArgs },
        { Py_tp_getset, _getset_PerceptionInfraredFrameSourceAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionInfraredFrameSourceAddedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionInfraredFrameSourceAddedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionInfraredFrameSourceAddedEventArgs
    };

    // ----- PerceptionInfraredFrameSourceRemovedEventArgs class --------------------
    constexpr const char* const _type_name_PerceptionInfraredFrameSourceRemovedEventArgs = "PerceptionInfraredFrameSourceRemovedEventArgs";

    static PyObject* _new_PerceptionInfraredFrameSourceRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionInfraredFrameSourceRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_PerceptionInfraredFrameSourceRemovedEventArgs(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionInfraredFrameSourceRemovedEventArgs_get_FrameSource(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionInfraredFrameSourceRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionInfraredFrameSourceRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_PerceptionInfraredFrameSourceRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionInfraredFrameSourceRemovedEventArgs[] = {
        { const_cast<char*>("frame_source"), (getter)PerceptionInfraredFrameSourceRemovedEventArgs_get_FrameSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionInfraredFrameSourceRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_PerceptionInfraredFrameSourceRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_PerceptionInfraredFrameSourceRemovedEventArgs },
        { Py_tp_methods, _methods_PerceptionInfraredFrameSourceRemovedEventArgs },
        { Py_tp_getset, _getset_PerceptionInfraredFrameSourceRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionInfraredFrameSourceRemovedEventArgs =
    {
        "_winrt_Windows_Devices_Perception.PerceptionInfraredFrameSourceRemovedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionInfraredFrameSourceRemovedEventArgs
    };

    // ----- PerceptionInfraredFrameSourceWatcher class --------------------
    constexpr const char* const _type_name_PerceptionInfraredFrameSourceWatcher = "PerceptionInfraredFrameSourceWatcher";

    static PyObject* _new_PerceptionInfraredFrameSourceWatcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionInfraredFrameSourceWatcher);
        return nullptr;
    }

    static void _dealloc_PerceptionInfraredFrameSourceWatcher(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_Start(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_Stop(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_get_Status(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_add_EnumerationCompleted(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.EnumerationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_remove_EnumerationCompleted(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.EnumerationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_add_SourceAdded(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs>>(arg);

            return py::convert(self->obj.SourceAdded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_remove_SourceAdded(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SourceAdded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_add_SourceRemoved(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs>>(arg);

            return py::convert(self->obj.SourceRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_remove_SourceRemoved(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SourceRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_add_Stopped(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Stopped(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionInfraredFrameSourceWatcher_remove_Stopped(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Stopped(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionInfraredFrameSourceWatcher(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionInfraredFrameSourceWatcher[] = {
        { "start", (PyCFunction)PerceptionInfraredFrameSourceWatcher_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)PerceptionInfraredFrameSourceWatcher_Stop, METH_VARARGS, nullptr },
        { "add_enumeration_completed", (PyCFunction)PerceptionInfraredFrameSourceWatcher_add_EnumerationCompleted, METH_O, nullptr },
        { "remove_enumeration_completed", (PyCFunction)PerceptionInfraredFrameSourceWatcher_remove_EnumerationCompleted, METH_O, nullptr },
        { "add_source_added", (PyCFunction)PerceptionInfraredFrameSourceWatcher_add_SourceAdded, METH_O, nullptr },
        { "remove_source_added", (PyCFunction)PerceptionInfraredFrameSourceWatcher_remove_SourceAdded, METH_O, nullptr },
        { "add_source_removed", (PyCFunction)PerceptionInfraredFrameSourceWatcher_add_SourceRemoved, METH_O, nullptr },
        { "remove_source_removed", (PyCFunction)PerceptionInfraredFrameSourceWatcher_remove_SourceRemoved, METH_O, nullptr },
        { "add_stopped", (PyCFunction)PerceptionInfraredFrameSourceWatcher_add_Stopped, METH_O, nullptr },
        { "remove_stopped", (PyCFunction)PerceptionInfraredFrameSourceWatcher_remove_Stopped, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PerceptionInfraredFrameSourceWatcher, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionInfraredFrameSourceWatcher[] = {
        { const_cast<char*>("status"), (getter)PerceptionInfraredFrameSourceWatcher_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionInfraredFrameSourceWatcher[] = 
    {
        { Py_tp_new, _new_PerceptionInfraredFrameSourceWatcher },
        { Py_tp_dealloc, _dealloc_PerceptionInfraredFrameSourceWatcher },
        { Py_tp_methods, _methods_PerceptionInfraredFrameSourceWatcher },
        { Py_tp_getset, _getset_PerceptionInfraredFrameSourceWatcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionInfraredFrameSourceWatcher =
    {
        "_winrt_Windows_Devices_Perception.PerceptionInfraredFrameSourceWatcher",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionInfraredFrameSourceWatcher
    };

    // ----- PerceptionVideoProfile class --------------------
    constexpr const char* const _type_name_PerceptionVideoProfile = "PerceptionVideoProfile";

    static PyObject* _new_PerceptionVideoProfile(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionVideoProfile);
        return nullptr;
    }

    static void _dealloc_PerceptionVideoProfile(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionVideoProfile_IsEqual(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Perception::PerceptionVideoProfile>(args, 0);

                return py::convert(self->obj.IsEqual(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionVideoProfile_get_BitmapAlphaMode(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BitmapAlphaMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionVideoProfile_get_BitmapPixelFormat(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BitmapPixelFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionVideoProfile_get_FrameDuration(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionVideoProfile_get_Height(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionVideoProfile_get_Width(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Width());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionVideoProfile(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Perception::PerceptionVideoProfile>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionVideoProfile[] = {
        { "is_equal", (PyCFunction)PerceptionVideoProfile_IsEqual, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PerceptionVideoProfile, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionVideoProfile[] = {
        { const_cast<char*>("bitmap_alpha_mode"), (getter)PerceptionVideoProfile_get_BitmapAlphaMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("bitmap_pixel_format"), (getter)PerceptionVideoProfile_get_BitmapPixelFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame_duration"), (getter)PerceptionVideoProfile_get_FrameDuration, nullptr, nullptr, nullptr },
        { const_cast<char*>("height"), (getter)PerceptionVideoProfile_get_Height, nullptr, nullptr, nullptr },
        { const_cast<char*>("width"), (getter)PerceptionVideoProfile_get_Width, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionVideoProfile[] = 
    {
        { Py_tp_new, _new_PerceptionVideoProfile },
        { Py_tp_dealloc, _dealloc_PerceptionVideoProfile },
        { Py_tp_methods, _methods_PerceptionVideoProfile },
        { Py_tp_getset, _getset_PerceptionVideoProfile },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionVideoProfile =
    {
        "_winrt_Windows_Devices_Perception.PerceptionVideoProfile",
        sizeof(py::wrapper::Windows::Devices::Perception::PerceptionVideoProfile),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionVideoProfile
    };

    // ----- Windows.Devices.Perception Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Perception::KnownCameraIntrinsicsProperties>::python_type = py::register_python_type(module, _type_name_KnownCameraIntrinsicsProperties, &_type_spec_KnownCameraIntrinsicsProperties, nullptr);
            py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionColorFrameSourceProperties>::python_type = py::register_python_type(module, _type_name_KnownPerceptionColorFrameSourceProperties, &_type_spec_KnownPerceptionColorFrameSourceProperties, nullptr);
            py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionDepthFrameSourceProperties>::python_type = py::register_python_type(module, _type_name_KnownPerceptionDepthFrameSourceProperties, &_type_spec_KnownPerceptionDepthFrameSourceProperties, nullptr);
            py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionFrameSourceProperties>::python_type = py::register_python_type(module, _type_name_KnownPerceptionFrameSourceProperties, &_type_spec_KnownPerceptionFrameSourceProperties, nullptr);
            py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties>::python_type = py::register_python_type(module, _type_name_KnownPerceptionInfraredFrameSourceProperties, &_type_spec_KnownPerceptionInfraredFrameSourceProperties, nullptr);
            py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties>::python_type = py::register_python_type(module, _type_name_KnownPerceptionVideoFrameSourceProperties, &_type_spec_KnownPerceptionVideoFrameSourceProperties, nullptr);
            py::winrt_type<winrt::Windows::Devices::Perception::KnownPerceptionVideoProfileProperties>::python_type = py::register_python_type(module, _type_name_KnownPerceptionVideoProfileProperties, &_type_spec_KnownPerceptionVideoProfileProperties, nullptr);
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrame>::python_type = py::register_python_type(module, _type_name_PerceptionColorFrame, &_type_spec_PerceptionColorFrame, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionColorFrameArrivedEventArgs, &_type_spec_PerceptionColorFrameArrivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameReader>::python_type = py::register_python_type(module, _type_name_PerceptionColorFrameReader, &_type_spec_PerceptionColorFrameReader, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSource>::python_type = py::register_python_type(module, _type_name_PerceptionColorFrameSource, &_type_spec_PerceptionColorFrameSource, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionColorFrameSourceAddedEventArgs, &_type_spec_PerceptionColorFrameSourceAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionColorFrameSourceRemovedEventArgs, &_type_spec_PerceptionColorFrameSourceRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionColorFrameSourceWatcher>::python_type = py::register_python_type(module, _type_name_PerceptionColorFrameSourceWatcher, &_type_spec_PerceptionColorFrameSourceWatcher, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionControlSession>::python_type = py::register_python_type(module, _type_name_PerceptionControlSession, &_type_spec_PerceptionControlSession, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics>::python_type = py::register_python_type(module, _type_name_PerceptionDepthCorrelatedCameraIntrinsics, &_type_spec_PerceptionDepthCorrelatedCameraIntrinsics, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper>::python_type = py::register_python_type(module, _type_name_PerceptionDepthCorrelatedCoordinateMapper, &_type_spec_PerceptionDepthCorrelatedCoordinateMapper, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrame>::python_type = py::register_python_type(module, _type_name_PerceptionDepthFrame, &_type_spec_PerceptionDepthFrame, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionDepthFrameArrivedEventArgs, &_type_spec_PerceptionDepthFrameArrivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameReader>::python_type = py::register_python_type(module, _type_name_PerceptionDepthFrameReader, &_type_spec_PerceptionDepthFrameReader, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSource>::python_type = py::register_python_type(module, _type_name_PerceptionDepthFrameSource, &_type_spec_PerceptionDepthFrameSource, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionDepthFrameSourceAddedEventArgs, &_type_spec_PerceptionDepthFrameSourceAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionDepthFrameSourceRemovedEventArgs, &_type_spec_PerceptionDepthFrameSourceRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher>::python_type = py::register_python_type(module, _type_name_PerceptionDepthFrameSourceWatcher, &_type_spec_PerceptionDepthFrameSourceWatcher, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionFrameSourcePropertiesChangedEventArgs, &_type_spec_PerceptionFrameSourcePropertiesChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult>::python_type = py::register_python_type(module, _type_name_PerceptionFrameSourcePropertyChangeResult, &_type_spec_PerceptionFrameSourcePropertyChangeResult, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrame>::python_type = py::register_python_type(module, _type_name_PerceptionInfraredFrame, &_type_spec_PerceptionInfraredFrame, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionInfraredFrameArrivedEventArgs, &_type_spec_PerceptionInfraredFrameArrivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameReader>::python_type = py::register_python_type(module, _type_name_PerceptionInfraredFrameReader, &_type_spec_PerceptionInfraredFrameReader, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSource>::python_type = py::register_python_type(module, _type_name_PerceptionInfraredFrameSource, &_type_spec_PerceptionInfraredFrameSource, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionInfraredFrameSourceAddedEventArgs, &_type_spec_PerceptionInfraredFrameSourceAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_PerceptionInfraredFrameSourceRemovedEventArgs, &_type_spec_PerceptionInfraredFrameSourceRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher>::python_type = py::register_python_type(module, _type_name_PerceptionInfraredFrameSourceWatcher, &_type_spec_PerceptionInfraredFrameSourceWatcher, bases.get());
            py::winrt_type<winrt::Windows::Devices::Perception::PerceptionVideoProfile>::python_type = py::register_python_type(module, _type_name_PerceptionVideoProfile, &_type_spec_PerceptionVideoProfile, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Perception");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Perception",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Perception

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Perception (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Perception::module_def);
}
