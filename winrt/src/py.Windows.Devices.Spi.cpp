// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Spi.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::SpiBusInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::SpiConnectionSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::SpiController>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::SpiDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::ISpiDeviceStatics>::python_type;

namespace py::cpp::Windows::Devices::Spi
{
    // ----- SpiBusInfo class --------------------
    constexpr const char* const _type_name_SpiBusInfo = "SpiBusInfo";

    static PyObject* _new_SpiBusInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpiBusInfo);
        return nullptr;
    }

    static void _dealloc_SpiBusInfo(py::wrapper::Windows::Devices::Spi::SpiBusInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpiBusInfo_get_ChipSelectLineCount(py::wrapper::Windows::Devices::Spi::SpiBusInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChipSelectLineCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpiBusInfo_get_MaxClockFrequency(py::wrapper::Windows::Devices::Spi::SpiBusInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxClockFrequency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpiBusInfo_get_MinClockFrequency(py::wrapper::Windows::Devices::Spi::SpiBusInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinClockFrequency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpiBusInfo_get_SupportedDataBitLengths(py::wrapper::Windows::Devices::Spi::SpiBusInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedDataBitLengths());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpiBusInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::SpiBusInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpiBusInfo[] = {
        { "_from", (PyCFunction)_from_SpiBusInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpiBusInfo[] = {
        { const_cast<char*>("chip_select_line_count"), (getter)SpiBusInfo_get_ChipSelectLineCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_clock_frequency"), (getter)SpiBusInfo_get_MaxClockFrequency, nullptr, nullptr, nullptr },
        { const_cast<char*>("min_clock_frequency"), (getter)SpiBusInfo_get_MinClockFrequency, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_data_bit_lengths"), (getter)SpiBusInfo_get_SupportedDataBitLengths, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpiBusInfo[] = 
    {
        { Py_tp_new, _new_SpiBusInfo },
        { Py_tp_dealloc, _dealloc_SpiBusInfo },
        { Py_tp_methods, _methods_SpiBusInfo },
        { Py_tp_getset, _getset_SpiBusInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpiBusInfo =
    {
        "_winrt_Windows_Devices_Spi.SpiBusInfo",
        sizeof(py::wrapper::Windows::Devices::Spi::SpiBusInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpiBusInfo
    };

    // ----- SpiConnectionSettings class --------------------
    constexpr const char* const _type_name_SpiConnectionSettings = "SpiConnectionSettings";

    static PyObject* _new_SpiConnectionSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Devices::Spi::SpiConnectionSettings instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SpiConnectionSettings(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpiConnectionSettings_get_SharingMode(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SharingMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpiConnectionSettings_put_SharingMode(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::Spi::SpiSharingMode>(arg);

            self->obj.SharingMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpiConnectionSettings_get_Mode(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Mode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpiConnectionSettings_put_Mode(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::Spi::SpiMode>(arg);

            self->obj.Mode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpiConnectionSettings_get_DataBitLength(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DataBitLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpiConnectionSettings_put_DataBitLength(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.DataBitLength(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpiConnectionSettings_get_ClockFrequency(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClockFrequency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpiConnectionSettings_put_ClockFrequency(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.ClockFrequency(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SpiConnectionSettings_get_ChipSelectLine(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChipSelectLine());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SpiConnectionSettings_put_ChipSelectLine(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.ChipSelectLine(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SpiConnectionSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::SpiConnectionSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpiConnectionSettings[] = {
        { "_from", (PyCFunction)_from_SpiConnectionSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpiConnectionSettings[] = {
        { const_cast<char*>("sharing_mode"), (getter)SpiConnectionSettings_get_SharingMode, (setter)SpiConnectionSettings_put_SharingMode, nullptr, nullptr },
        { const_cast<char*>("mode"), (getter)SpiConnectionSettings_get_Mode, (setter)SpiConnectionSettings_put_Mode, nullptr, nullptr },
        { const_cast<char*>("data_bit_length"), (getter)SpiConnectionSettings_get_DataBitLength, (setter)SpiConnectionSettings_put_DataBitLength, nullptr, nullptr },
        { const_cast<char*>("clock_frequency"), (getter)SpiConnectionSettings_get_ClockFrequency, (setter)SpiConnectionSettings_put_ClockFrequency, nullptr, nullptr },
        { const_cast<char*>("chip_select_line"), (getter)SpiConnectionSettings_get_ChipSelectLine, (setter)SpiConnectionSettings_put_ChipSelectLine, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpiConnectionSettings[] = 
    {
        { Py_tp_new, _new_SpiConnectionSettings },
        { Py_tp_dealloc, _dealloc_SpiConnectionSettings },
        { Py_tp_methods, _methods_SpiConnectionSettings },
        { Py_tp_getset, _getset_SpiConnectionSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpiConnectionSettings =
    {
        "_winrt_Windows_Devices_Spi.SpiConnectionSettings",
        sizeof(py::wrapper::Windows::Devices::Spi::SpiConnectionSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpiConnectionSettings
    };

    // ----- SpiController class --------------------
    constexpr const char* const _type_name_SpiController = "SpiController";

    static PyObject* _new_SpiController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpiController);
        return nullptr;
    }

    static void _dealloc_SpiController(py::wrapper::Windows::Devices::Spi::SpiController* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpiController_GetControllersAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ISpiProvider>(args, 0);

                return py::convert(winrt::Windows::Devices::Spi::SpiController::GetControllersAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiController_GetDefaultAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Spi::SpiController::GetDefaultAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiController_GetDevice(py::wrapper::Windows::Devices::Spi::SpiController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Spi::SpiConnectionSettings>(args, 0);

                return py::convert(self->obj.GetDevice(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SpiController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::SpiController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpiController[] = {
        { "get_controllers_async", (PyCFunction)SpiController_GetControllersAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_default_async", (PyCFunction)SpiController_GetDefaultAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device", (PyCFunction)SpiController_GetDevice, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SpiController, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpiController[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SpiController[] = 
    {
        { Py_tp_new, _new_SpiController },
        { Py_tp_dealloc, _dealloc_SpiController },
        { Py_tp_methods, _methods_SpiController },
        { Py_tp_getset, _getset_SpiController },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpiController =
    {
        "_winrt_Windows_Devices_Spi.SpiController",
        sizeof(py::wrapper::Windows::Devices::Spi::SpiController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpiController
    };

    // ----- SpiDevice class --------------------
    constexpr const char* const _type_name_SpiDevice = "SpiDevice";

    static PyObject* _new_SpiDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SpiDevice);
        return nullptr;
    }

    static void _dealloc_SpiDevice(py::wrapper::Windows::Devices::Spi::SpiDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SpiDevice_Close(py::wrapper::Windows::Devices::Spi::SpiDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Spi::SpiConnectionSettings>(args, 1);

                return py::convert(winrt::Windows::Devices::Spi::SpiDevice::FromIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_GetBusInfo(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Spi::SpiDevice::GetBusInfo(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Spi::SpiDevice::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Spi::SpiDevice::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_Read(py::wrapper::Windows::Devices::Spi::SpiDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 0);
                winrt::com_array<uint8_t> param0 ( param0_count, py::empty_instance<uint8_t>::get() );

                self->obj.Read(param0);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return out0.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_TransferFullDuplex(py::wrapper::Windows::Devices::Spi::SpiDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 1);
                winrt::com_array<uint8_t> param1 ( param1_count, py::empty_instance<uint8_t>::get() );

                self->obj.TransferFullDuplex(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_TransferSequential(py::wrapper::Windows::Devices::Spi::SpiDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 1);
                winrt::com_array<uint8_t> param1 ( param1_count, py::empty_instance<uint8_t>::get() );

                self->obj.TransferSequential(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_Write(py::wrapper::Windows::Devices::Spi::SpiDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);

                self->obj.Write(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SpiDevice_get_ConnectionSettings(py::wrapper::Windows::Devices::Spi::SpiDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionSettings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SpiDevice_get_DeviceId(py::wrapper::Windows::Devices::Spi::SpiDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SpiDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::SpiDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_SpiDevice(py::wrapper::Windows::Devices::Spi::SpiDevice* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_SpiDevice(py::wrapper::Windows::Devices::Spi::SpiDevice* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SpiDevice[] = {
        { "close", (PyCFunction)SpiDevice_Close, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)SpiDevice_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_bus_info", (PyCFunction)SpiDevice_GetBusInfo, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)SpiDevice_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "read", (PyCFunction)SpiDevice_Read, METH_VARARGS, nullptr },
        { "transfer_full_duplex", (PyCFunction)SpiDevice_TransferFullDuplex, METH_VARARGS, nullptr },
        { "transfer_sequential", (PyCFunction)SpiDevice_TransferSequential, METH_VARARGS, nullptr },
        { "write", (PyCFunction)SpiDevice_Write, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SpiDevice, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_SpiDevice, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_SpiDevice, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SpiDevice[] = {
        { const_cast<char*>("connection_settings"), (getter)SpiDevice_get_ConnectionSettings, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)SpiDevice_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SpiDevice[] = 
    {
        { Py_tp_new, _new_SpiDevice },
        { Py_tp_dealloc, _dealloc_SpiDevice },
        { Py_tp_methods, _methods_SpiDevice },
        { Py_tp_getset, _getset_SpiDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SpiDevice =
    {
        "_winrt_Windows_Devices_Spi.SpiDevice",
        sizeof(py::wrapper::Windows::Devices::Spi::SpiDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SpiDevice
    };

    // ----- ISpiDeviceStatics interface --------------------
    constexpr const char* const _type_name_ISpiDeviceStatics = "ISpiDeviceStatics";

    static PyObject* _new_ISpiDeviceStatics(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ISpiDeviceStatics);
        return nullptr;
    }

    static void _dealloc_ISpiDeviceStatics(py::wrapper::Windows::Devices::Spi::ISpiDeviceStatics* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ISpiDeviceStatics_FromIdAsync(py::wrapper::Windows::Devices::Spi::ISpiDeviceStatics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Spi::SpiConnectionSettings>(args, 1);

                return py::convert(self->obj.FromIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceStatics_GetBusInfo(py::wrapper::Windows::Devices::Spi::ISpiDeviceStatics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetBusInfo(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceStatics_GetDeviceSelector(py::wrapper::Windows::Devices::Spi::ISpiDeviceStatics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ISpiDeviceStatics(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::ISpiDeviceStatics>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISpiDeviceStatics[] = {
        { "from_id_async", (PyCFunction)ISpiDeviceStatics_FromIdAsync, METH_VARARGS, nullptr },
        { "get_bus_info", (PyCFunction)ISpiDeviceStatics_GetBusInfo, METH_VARARGS, nullptr },
        { "get_device_selector", (PyCFunction)ISpiDeviceStatics_GetDeviceSelector, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ISpiDeviceStatics, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ISpiDeviceStatics[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ISpiDeviceStatics[] = 
    {
        { Py_tp_new, _new_ISpiDeviceStatics },
        { Py_tp_dealloc, _dealloc_ISpiDeviceStatics },
        { Py_tp_methods, _methods_ISpiDeviceStatics },
        { Py_tp_getset, _getset_ISpiDeviceStatics },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ISpiDeviceStatics =
    {
        "_winrt_Windows_Devices_Spi.ISpiDeviceStatics",
        sizeof(py::wrapper::Windows::Devices::Spi::ISpiDeviceStatics),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISpiDeviceStatics
    };

    // ----- Windows.Devices.Spi Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Spi::SpiBusInfo>::python_type = py::register_python_type(module, _type_name_SpiBusInfo, &_type_spec_SpiBusInfo, bases.get());
            py::winrt_type<winrt::Windows::Devices::Spi::SpiConnectionSettings>::python_type = py::register_python_type(module, _type_name_SpiConnectionSettings, &_type_spec_SpiConnectionSettings, bases.get());
            py::winrt_type<winrt::Windows::Devices::Spi::SpiController>::python_type = py::register_python_type(module, _type_name_SpiController, &_type_spec_SpiController, bases.get());
            py::winrt_type<winrt::Windows::Devices::Spi::SpiDevice>::python_type = py::register_python_type(module, _type_name_SpiDevice, &_type_spec_SpiDevice, bases.get());
            py::winrt_type<winrt::Windows::Devices::Spi::ISpiDeviceStatics>::python_type = py::register_python_type(module, _type_name_ISpiDeviceStatics, &_type_spec_ISpiDeviceStatics, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Spi");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Spi",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Spi

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Spi (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Spi::module_def);
}
