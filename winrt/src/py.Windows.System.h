// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#pragma once

#include "pybase.h"

#if __has_include("py.Windows.ApplicationModel.h")
#include "py.Windows.ApplicationModel.h"
#endif

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#if __has_include("py.Windows.Storage.h")
#include "py.Windows.Storage.h"
#endif

#if __has_include("py.Windows.Storage.Search.h")
#include "py.Windows.Storage.Search.h"
#endif

#if __has_include("py.Windows.Storage.Streams.h")
#include "py.Windows.Storage.Streams.h"
#endif

#if __has_include("py.Windows.System.Diagnostics.h")
#include "py.Windows.System.Diagnostics.h"
#endif

#if __has_include("py.Windows.System.RemoteSystems.h")
#include "py.Windows.System.RemoteSystems.h"
#endif

#if __has_include("py.Windows.UI.Popups.h")
#include "py.Windows.UI.Popups.h"
#endif

#if __has_include("py.Windows.UI.ViewManagement.h")
#include "py.Windows.UI.ViewManagement.h"
#endif

#include <winrt/Windows.System.h>

namespace py::proj::Windows::System
{}

namespace py::impl::Windows::System
{
    struct DispatcherQueueHandler
    {
        static winrt::Windows::System::DispatcherQueueHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)]()
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle args{ nullptr };
                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_invalid_argument();
                }
            };
        };
    };
}

namespace py::wrapper::Windows::System
{
    using AppActivationResult = py::winrt_wrapper<winrt::Windows::System::AppActivationResult>;
    using AppDiagnosticInfo = py::winrt_wrapper<winrt::Windows::System::AppDiagnosticInfo>;
    using AppDiagnosticInfoWatcher = py::winrt_wrapper<winrt::Windows::System::AppDiagnosticInfoWatcher>;
    using AppDiagnosticInfoWatcherEventArgs = py::winrt_wrapper<winrt::Windows::System::AppDiagnosticInfoWatcherEventArgs>;
    using AppExecutionStateChangeResult = py::winrt_wrapper<winrt::Windows::System::AppExecutionStateChangeResult>;
    using AppMemoryReport = py::winrt_wrapper<winrt::Windows::System::AppMemoryReport>;
    using AppMemoryUsageLimitChangingEventArgs = py::winrt_wrapper<winrt::Windows::System::AppMemoryUsageLimitChangingEventArgs>;
    using AppResourceGroupBackgroundTaskReport = py::winrt_wrapper<winrt::Windows::System::AppResourceGroupBackgroundTaskReport>;
    using AppResourceGroupInfo = py::winrt_wrapper<winrt::Windows::System::AppResourceGroupInfo>;
    using AppResourceGroupInfoWatcher = py::winrt_wrapper<winrt::Windows::System::AppResourceGroupInfoWatcher>;
    using AppResourceGroupInfoWatcherEventArgs = py::winrt_wrapper<winrt::Windows::System::AppResourceGroupInfoWatcherEventArgs>;
    using AppResourceGroupInfoWatcherExecutionStateChangedEventArgs = py::winrt_wrapper<winrt::Windows::System::AppResourceGroupInfoWatcherExecutionStateChangedEventArgs>;
    using AppResourceGroupMemoryReport = py::winrt_wrapper<winrt::Windows::System::AppResourceGroupMemoryReport>;
    using AppResourceGroupStateReport = py::winrt_wrapper<winrt::Windows::System::AppResourceGroupStateReport>;
    using AppUriHandlerHost = py::winrt_wrapper<winrt::Windows::System::AppUriHandlerHost>;
    using AppUriHandlerRegistration = py::winrt_wrapper<winrt::Windows::System::AppUriHandlerRegistration>;
    using AppUriHandlerRegistrationManager = py::winrt_wrapper<winrt::Windows::System::AppUriHandlerRegistrationManager>;
    using DateTimeSettings = py::winrt_wrapper<winrt::Windows::System::DateTimeSettings>;
    using DispatcherQueue = py::winrt_wrapper<winrt::Windows::System::DispatcherQueue>;
    using DispatcherQueueController = py::winrt_wrapper<winrt::Windows::System::DispatcherQueueController>;
    using DispatcherQueueShutdownStartingEventArgs = py::winrt_wrapper<winrt::Windows::System::DispatcherQueueShutdownStartingEventArgs>;
    using DispatcherQueueTimer = py::winrt_wrapper<winrt::Windows::System::DispatcherQueueTimer>;
    using FolderLauncherOptions = py::winrt_wrapper<winrt::Windows::System::FolderLauncherOptions>;
    using KnownUserProperties = py::winrt_wrapper<winrt::Windows::System::KnownUserProperties>;
    using LaunchUriResult = py::winrt_wrapper<winrt::Windows::System::LaunchUriResult>;
    using Launcher = py::winrt_wrapper<winrt::Windows::System::Launcher>;
    using LauncherOptions = py::winrt_wrapper<winrt::Windows::System::LauncherOptions>;
    using LauncherUIOptions = py::winrt_wrapper<winrt::Windows::System::LauncherUIOptions>;
    using MemoryManager = py::winrt_wrapper<winrt::Windows::System::MemoryManager>;
    using ProcessLauncher = py::winrt_wrapper<winrt::Windows::System::ProcessLauncher>;
    using ProcessLauncherOptions = py::winrt_wrapper<winrt::Windows::System::ProcessLauncherOptions>;
    using ProcessLauncherResult = py::winrt_wrapper<winrt::Windows::System::ProcessLauncherResult>;
    using ProcessMemoryReport = py::winrt_wrapper<winrt::Windows::System::ProcessMemoryReport>;
    using ProtocolForResultsOperation = py::winrt_wrapper<winrt::Windows::System::ProtocolForResultsOperation>;
    using RemoteLauncher = py::winrt_wrapper<winrt::Windows::System::RemoteLauncher>;
    using RemoteLauncherOptions = py::winrt_wrapper<winrt::Windows::System::RemoteLauncherOptions>;
    using ShutdownManager = py::winrt_wrapper<winrt::Windows::System::ShutdownManager>;
    using TimeZoneSettings = py::winrt_wrapper<winrt::Windows::System::TimeZoneSettings>;
    using User = py::winrt_wrapper<winrt::Windows::System::User>;
    using UserAuthenticationStatusChangeDeferral = py::winrt_wrapper<winrt::Windows::System::UserAuthenticationStatusChangeDeferral>;
    using UserAuthenticationStatusChangingEventArgs = py::winrt_wrapper<winrt::Windows::System::UserAuthenticationStatusChangingEventArgs>;
    using UserChangedEventArgs = py::winrt_wrapper<winrt::Windows::System::UserChangedEventArgs>;
    using UserDeviceAssociation = py::winrt_wrapper<winrt::Windows::System::UserDeviceAssociation>;
    using UserDeviceAssociationChangedEventArgs = py::winrt_wrapper<winrt::Windows::System::UserDeviceAssociationChangedEventArgs>;
    using UserPicker = py::winrt_wrapper<winrt::Windows::System::UserPicker>;
    using UserWatcher = py::winrt_wrapper<winrt::Windows::System::UserWatcher>;
    using ILauncherViewOptions = py::winrt_wrapper<winrt::Windows::System::ILauncherViewOptions>;
}

namespace py
{
    template<>
    struct winrt_type<winrt::Windows::System::AppActivationResult>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppDiagnosticInfo>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppDiagnosticInfoWatcher>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppDiagnosticInfoWatcherEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppExecutionStateChangeResult>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppMemoryReport>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppMemoryUsageLimitChangingEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppResourceGroupBackgroundTaskReport>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppResourceGroupInfo>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppResourceGroupInfoWatcher>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppResourceGroupInfoWatcherEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppResourceGroupInfoWatcherExecutionStateChangedEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppResourceGroupMemoryReport>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppResourceGroupStateReport>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppUriHandlerHost>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppUriHandlerRegistration>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::AppUriHandlerRegistrationManager>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::DateTimeSettings>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::DispatcherQueue>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::DispatcherQueueController>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::DispatcherQueueShutdownStartingEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::DispatcherQueueTimer>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::FolderLauncherOptions>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::KnownUserProperties>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::LaunchUriResult>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::Launcher>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::LauncherOptions>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::LauncherUIOptions>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::MemoryManager>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::ProcessLauncher>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::ProcessLauncherOptions>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::ProcessLauncherResult>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::ProcessMemoryReport>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::ProtocolForResultsOperation>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::RemoteLauncher>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::RemoteLauncherOptions>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::ShutdownManager>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::TimeZoneSettings>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::User>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::UserAuthenticationStatusChangeDeferral>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::UserAuthenticationStatusChangingEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::UserChangedEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::UserDeviceAssociation>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::UserDeviceAssociationChangedEventArgs>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::UserPicker>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::UserWatcher>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::System::ILauncherViewOptions>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template <>
    struct delegate_python_type<winrt::Windows::System::DispatcherQueueHandler>
    {
        using type = py::impl::Windows::System::DispatcherQueueHandler;
    };

}
