// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Security.Authentication.Web.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::FindAllAccountsResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebAccountEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebAccountMonitor>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequestResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse>::python_type;

namespace py::cpp::Windows::Security::Authentication::Web::Core
{
    // ----- FindAllAccountsResult class --------------------
    constexpr const char* const _type_name_FindAllAccountsResult = "FindAllAccountsResult";

    static PyObject* _new_FindAllAccountsResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_FindAllAccountsResult);
        return nullptr;
    }

    static void _dealloc_FindAllAccountsResult(py::wrapper::Windows::Security::Authentication::Web::Core::FindAllAccountsResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FindAllAccountsResult_get_Accounts(py::wrapper::Windows::Security::Authentication::Web::Core::FindAllAccountsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Accounts());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FindAllAccountsResult_get_ProviderError(py::wrapper::Windows::Security::Authentication::Web::Core::FindAllAccountsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FindAllAccountsResult_get_Status(py::wrapper::Windows::Security::Authentication::Web::Core::FindAllAccountsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FindAllAccountsResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Core::FindAllAccountsResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FindAllAccountsResult[] = {
        { "_from", (PyCFunction)_from_FindAllAccountsResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FindAllAccountsResult[] = {
        { const_cast<char*>("accounts"), (getter)FindAllAccountsResult_get_Accounts, nullptr, nullptr, nullptr },
        { const_cast<char*>("provider_error"), (getter)FindAllAccountsResult_get_ProviderError, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)FindAllAccountsResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FindAllAccountsResult[] = 
    {
        { Py_tp_new, _new_FindAllAccountsResult },
        { Py_tp_dealloc, _dealloc_FindAllAccountsResult },
        { Py_tp_methods, _methods_FindAllAccountsResult },
        { Py_tp_getset, _getset_FindAllAccountsResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FindAllAccountsResult =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.FindAllAccountsResult",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Core::FindAllAccountsResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FindAllAccountsResult
    };

    // ----- WebAccountEventArgs class --------------------
    constexpr const char* const _type_name_WebAccountEventArgs = "WebAccountEventArgs";

    static PyObject* _new_WebAccountEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountEventArgs);
        return nullptr;
    }

    static void _dealloc_WebAccountEventArgs(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountEventArgs_get_Account(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Account());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Core::WebAccountEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountEventArgs[] = {
        { "_from", (PyCFunction)_from_WebAccountEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountEventArgs[] = {
        { const_cast<char*>("account"), (getter)WebAccountEventArgs_get_Account, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountEventArgs[] = 
    {
        { Py_tp_new, _new_WebAccountEventArgs },
        { Py_tp_dealloc, _dealloc_WebAccountEventArgs },
        { Py_tp_methods, _methods_WebAccountEventArgs },
        { Py_tp_getset, _getset_WebAccountEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountEventArgs =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.WebAccountEventArgs",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountEventArgs
    };

    // ----- WebAccountMonitor class --------------------
    constexpr const char* const _type_name_WebAccountMonitor = "WebAccountMonitor";

    static PyObject* _new_WebAccountMonitor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAccountMonitor);
        return nullptr;
    }

    static void _dealloc_WebAccountMonitor(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebAccountMonitor_add_DefaultSignInAccountChanged(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Security::Authentication::Web::Core::WebAccountMonitor, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.DefaultSignInAccountChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountMonitor_remove_DefaultSignInAccountChanged(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DefaultSignInAccountChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountMonitor_add_Removed(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Security::Authentication::Web::Core::WebAccountMonitor, winrt::Windows::Security::Authentication::Web::Core::WebAccountEventArgs>>(arg);

            return py::convert(self->obj.Removed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountMonitor_remove_Removed(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Removed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountMonitor_add_Updated(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Security::Authentication::Web::Core::WebAccountMonitor, winrt::Windows::Security::Authentication::Web::Core::WebAccountEventArgs>>(arg);

            return py::convert(self->obj.Updated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountMonitor_remove_Updated(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Updated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountMonitor_add_AccountPictureUpdated(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Security::Authentication::Web::Core::WebAccountMonitor, winrt::Windows::Security::Authentication::Web::Core::WebAccountEventArgs>>(arg);

            return py::convert(self->obj.AccountPictureUpdated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebAccountMonitor_remove_AccountPictureUpdated(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AccountPictureUpdated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebAccountMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Core::WebAccountMonitor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAccountMonitor[] = {
        { "add_default_sign_in_account_changed", (PyCFunction)WebAccountMonitor_add_DefaultSignInAccountChanged, METH_O, nullptr },
        { "remove_default_sign_in_account_changed", (PyCFunction)WebAccountMonitor_remove_DefaultSignInAccountChanged, METH_O, nullptr },
        { "add_removed", (PyCFunction)WebAccountMonitor_add_Removed, METH_O, nullptr },
        { "remove_removed", (PyCFunction)WebAccountMonitor_remove_Removed, METH_O, nullptr },
        { "add_updated", (PyCFunction)WebAccountMonitor_add_Updated, METH_O, nullptr },
        { "remove_updated", (PyCFunction)WebAccountMonitor_remove_Updated, METH_O, nullptr },
        { "add_account_picture_updated", (PyCFunction)WebAccountMonitor_add_AccountPictureUpdated, METH_O, nullptr },
        { "remove_account_picture_updated", (PyCFunction)WebAccountMonitor_remove_AccountPictureUpdated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_WebAccountMonitor, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAccountMonitor[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAccountMonitor[] = 
    {
        { Py_tp_new, _new_WebAccountMonitor },
        { Py_tp_dealloc, _dealloc_WebAccountMonitor },
        { Py_tp_methods, _methods_WebAccountMonitor },
        { Py_tp_getset, _getset_WebAccountMonitor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAccountMonitor =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.WebAccountMonitor",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Core::WebAccountMonitor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAccountMonitor
    };

    // ----- WebAuthenticationCoreManager class --------------------
    constexpr const char* const _type_name_WebAuthenticationCoreManager = "WebAuthenticationCoreManager";

    static PyObject* _new_WebAuthenticationCoreManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAuthenticationCoreManager);
        return nullptr;
    }

    static PyObject* WebAuthenticationCoreManager_CreateWebAccountMonitor(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Security::Credentials::WebAccount>>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::CreateWebAccountMonitor(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAuthenticationCoreManager_FindAccountAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccountProvider>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindAccountAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAuthenticationCoreManager_FindAccountProviderAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindAccountProviderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindAccountProviderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::System::User>(args, 2);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindAccountProviderAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAuthenticationCoreManager_FindAllAccountsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccountProvider>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindAllAccountsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccountProvider>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindAllAccountsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAuthenticationCoreManager_FindSystemAccountProviderAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindSystemAccountProviderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindSystemAccountProviderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::System::User>(args, 2);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::FindSystemAccountProviderAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAuthenticationCoreManager_GetTokenSilentlyAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::GetTokenSilentlyAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::GetTokenSilentlyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebAuthenticationCoreManager_RequestTokenAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::RequestTokenAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 1);

                return py::convert(winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager::RequestTokenAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAuthenticationCoreManager[] = {
        { "create_web_account_monitor", (PyCFunction)WebAuthenticationCoreManager_CreateWebAccountMonitor, METH_VARARGS | METH_STATIC, nullptr },
        { "find_account_async", (PyCFunction)WebAuthenticationCoreManager_FindAccountAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "find_account_provider_async", (PyCFunction)WebAuthenticationCoreManager_FindAccountProviderAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_accounts_async", (PyCFunction)WebAuthenticationCoreManager_FindAllAccountsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "find_system_account_provider_async", (PyCFunction)WebAuthenticationCoreManager_FindSystemAccountProviderAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_token_silently_async", (PyCFunction)WebAuthenticationCoreManager_GetTokenSilentlyAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "request_token_async", (PyCFunction)WebAuthenticationCoreManager_RequestTokenAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAuthenticationCoreManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAuthenticationCoreManager[] = 
    {
        { Py_tp_new, _new_WebAuthenticationCoreManager },
        { Py_tp_methods, _methods_WebAuthenticationCoreManager },
        { Py_tp_getset, _getset_WebAuthenticationCoreManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAuthenticationCoreManager =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.WebAuthenticationCoreManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAuthenticationCoreManager
    };

    // ----- WebProviderError class --------------------
    constexpr const char* const _type_name_WebProviderError = "WebProviderError";

    static PyObject* _new_WebProviderError(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Security::Authentication::Web::Core::WebProviderError instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WebProviderError(py::wrapper::Windows::Security::Authentication::Web::Core::WebProviderError* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebProviderError_get_ErrorCode(py::wrapper::Windows::Security::Authentication::Web::Core::WebProviderError* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderError_get_ErrorMessage(py::wrapper::Windows::Security::Authentication::Web::Core::WebProviderError* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ErrorMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebProviderError_get_Properties(py::wrapper::Windows::Security::Authentication::Web::Core::WebProviderError* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebProviderError(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebProviderError[] = {
        { "_from", (PyCFunction)_from_WebProviderError, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebProviderError[] = {
        { const_cast<char*>("error_code"), (getter)WebProviderError_get_ErrorCode, nullptr, nullptr, nullptr },
        { const_cast<char*>("error_message"), (getter)WebProviderError_get_ErrorMessage, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)WebProviderError_get_Properties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebProviderError[] = 
    {
        { Py_tp_new, _new_WebProviderError },
        { Py_tp_dealloc, _dealloc_WebProviderError },
        { Py_tp_methods, _methods_WebProviderError },
        { Py_tp_getset, _getset_WebProviderError },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebProviderError =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.WebProviderError",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Core::WebProviderError),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebProviderError
    };

    // ----- WebTokenRequest class --------------------
    constexpr const char* const _type_name_WebTokenRequest = "WebTokenRequest";

    static PyObject* _new_WebTokenRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccountProvider>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccountProvider>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType>(args, 3);

                winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccountProvider>(args, 0);

                winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccountProvider>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WebTokenRequest(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebTokenRequest_get_ClientId(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClientId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequest_get_PromptType(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PromptType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequest_get_Properties(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequest_get_Scope(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Scope());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequest_get_WebAccountProvider(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAccountProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequest_get_AppProperties(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequest_get_CorrelationId(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CorrelationId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebTokenRequest_put_CorrelationId(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CorrelationId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_WebTokenRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebTokenRequest[] = {
        { "_from", (PyCFunction)_from_WebTokenRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebTokenRequest[] = {
        { const_cast<char*>("client_id"), (getter)WebTokenRequest_get_ClientId, nullptr, nullptr, nullptr },
        { const_cast<char*>("prompt_type"), (getter)WebTokenRequest_get_PromptType, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)WebTokenRequest_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("scope"), (getter)WebTokenRequest_get_Scope, nullptr, nullptr, nullptr },
        { const_cast<char*>("web_account_provider"), (getter)WebTokenRequest_get_WebAccountProvider, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_properties"), (getter)WebTokenRequest_get_AppProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("correlation_id"), (getter)WebTokenRequest_get_CorrelationId, (setter)WebTokenRequest_put_CorrelationId, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebTokenRequest[] = 
    {
        { Py_tp_new, _new_WebTokenRequest },
        { Py_tp_dealloc, _dealloc_WebTokenRequest },
        { Py_tp_methods, _methods_WebTokenRequest },
        { Py_tp_getset, _getset_WebTokenRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebTokenRequest =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.WebTokenRequest",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebTokenRequest
    };

    // ----- WebTokenRequestResult class --------------------
    constexpr const char* const _type_name_WebTokenRequestResult = "WebTokenRequestResult";

    static PyObject* _new_WebTokenRequestResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebTokenRequestResult);
        return nullptr;
    }

    static void _dealloc_WebTokenRequestResult(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequestResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebTokenRequestResult_InvalidateCacheAsync(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequestResult* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.InvalidateCacheAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebTokenRequestResult_get_ResponseData(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequestResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResponseData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequestResult_get_ResponseError(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequestResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResponseError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenRequestResult_get_ResponseStatus(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequestResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResponseStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebTokenRequestResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequestResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebTokenRequestResult[] = {
        { "invalidate_cache_async", (PyCFunction)WebTokenRequestResult_InvalidateCacheAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebTokenRequestResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebTokenRequestResult[] = {
        { const_cast<char*>("response_data"), (getter)WebTokenRequestResult_get_ResponseData, nullptr, nullptr, nullptr },
        { const_cast<char*>("response_error"), (getter)WebTokenRequestResult_get_ResponseError, nullptr, nullptr, nullptr },
        { const_cast<char*>("response_status"), (getter)WebTokenRequestResult_get_ResponseStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebTokenRequestResult[] = 
    {
        { Py_tp_new, _new_WebTokenRequestResult },
        { Py_tp_dealloc, _dealloc_WebTokenRequestResult },
        { Py_tp_methods, _methods_WebTokenRequestResult },
        { Py_tp_getset, _getset_WebTokenRequestResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebTokenRequestResult =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.WebTokenRequestResult",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenRequestResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebTokenRequestResult
    };

    // ----- WebTokenResponse class --------------------
    constexpr const char* const _type_name_WebTokenResponse = "WebTokenResponse";

    static PyObject* _new_WebTokenResponse(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 1);

                winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>(args, 2);

                winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WebTokenResponse(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenResponse* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebTokenResponse_get_Properties(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenResponse_get_ProviderError(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProviderError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenResponse_get_Token(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Token());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebTokenResponse_get_WebAccount(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAccount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebTokenResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebTokenResponse[] = {
        { "_from", (PyCFunction)_from_WebTokenResponse, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebTokenResponse[] = {
        { const_cast<char*>("properties"), (getter)WebTokenResponse_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("provider_error"), (getter)WebTokenResponse_get_ProviderError, nullptr, nullptr, nullptr },
        { const_cast<char*>("token"), (getter)WebTokenResponse_get_Token, nullptr, nullptr, nullptr },
        { const_cast<char*>("web_account"), (getter)WebTokenResponse_get_WebAccount, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebTokenResponse[] = 
    {
        { Py_tp_new, _new_WebTokenResponse },
        { Py_tp_dealloc, _dealloc_WebTokenResponse },
        { Py_tp_methods, _methods_WebTokenResponse },
        { Py_tp_getset, _getset_WebTokenResponse },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebTokenResponse =
    {
        "_winrt_Windows_Security_Authentication_Web_Core.WebTokenResponse",
        sizeof(py::wrapper::Windows::Security::Authentication::Web::Core::WebTokenResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebTokenResponse
    };

    // ----- Windows.Security.Authentication.Web.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::FindAllAccountsResult>::python_type = py::register_python_type(module, _type_name_FindAllAccountsResult, &_type_spec_FindAllAccountsResult, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebAccountEventArgs>::python_type = py::register_python_type(module, _type_name_WebAccountEventArgs, &_type_spec_WebAccountEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebAccountMonitor>::python_type = py::register_python_type(module, _type_name_WebAccountMonitor, &_type_spec_WebAccountMonitor, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager>::python_type = py::register_python_type(module, _type_name_WebAuthenticationCoreManager, &_type_spec_WebAuthenticationCoreManager, nullptr);
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebProviderError>::python_type = py::register_python_type(module, _type_name_WebProviderError, &_type_spec_WebProviderError, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>::python_type = py::register_python_type(module, _type_name_WebTokenRequest, &_type_spec_WebTokenRequest, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequestResult>::python_type = py::register_python_type(module, _type_name_WebTokenRequestResult, &_type_spec_WebTokenRequestResult, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Web::Core::WebTokenResponse>::python_type = py::register_python_type(module, _type_name_WebTokenResponse, &_type_spec_WebTokenResponse, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Security.Authentication.Web.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Security_Authentication_Web_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Security::Authentication::Web::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_Security_Authentication_Web_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Security::Authentication::Web::Core::module_def);
}
