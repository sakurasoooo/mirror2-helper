// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.UserDataAccounts.Provider.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::IUserDataAccountProviderOperation>::python_type;

namespace py::cpp::Windows::ApplicationModel::UserDataAccounts::Provider
{
    // ----- UserDataAccountPartnerAccountInfo class --------------------
    constexpr const char* const _type_name_UserDataAccountPartnerAccountInfo = "UserDataAccountPartnerAccountInfo";

    static PyObject* _new_UserDataAccountPartnerAccountInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountPartnerAccountInfo);
        return nullptr;
    }

    static void _dealloc_UserDataAccountPartnerAccountInfo(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccountPartnerAccountInfo_get_AccountKind(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AccountKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountPartnerAccountInfo_get_DisplayName(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountPartnerAccountInfo_get_Priority(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Priority());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccountPartnerAccountInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountPartnerAccountInfo[] = {
        { "_from", (PyCFunction)_from_UserDataAccountPartnerAccountInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountPartnerAccountInfo[] = {
        { const_cast<char*>("account_kind"), (getter)UserDataAccountPartnerAccountInfo_get_AccountKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)UserDataAccountPartnerAccountInfo_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("priority"), (getter)UserDataAccountPartnerAccountInfo_get_Priority, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountPartnerAccountInfo[] = 
    {
        { Py_tp_new, _new_UserDataAccountPartnerAccountInfo },
        { Py_tp_dealloc, _dealloc_UserDataAccountPartnerAccountInfo },
        { Py_tp_methods, _methods_UserDataAccountPartnerAccountInfo },
        { Py_tp_getset, _getset_UserDataAccountPartnerAccountInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountPartnerAccountInfo =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts_Provider.UserDataAccountPartnerAccountInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountPartnerAccountInfo
    };

    // ----- UserDataAccountProviderAddAccountOperation class --------------------
    constexpr const char* const _type_name_UserDataAccountProviderAddAccountOperation = "UserDataAccountProviderAddAccountOperation";

    static PyObject* _new_UserDataAccountProviderAddAccountOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountProviderAddAccountOperation);
        return nullptr;
    }

    static void _dealloc_UserDataAccountProviderAddAccountOperation(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccountProviderAddAccountOperation_ReportCompleted(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.ReportCompleted(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountProviderAddAccountOperation_get_ContentKinds(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContentKinds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountProviderAddAccountOperation_get_PartnerAccountInfos(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PartnerAccountInfos());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountProviderAddAccountOperation_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccountProviderAddAccountOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountProviderAddAccountOperation[] = {
        { "report_completed", (PyCFunction)UserDataAccountProviderAddAccountOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataAccountProviderAddAccountOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountProviderAddAccountOperation[] = {
        { const_cast<char*>("content_kinds"), (getter)UserDataAccountProviderAddAccountOperation_get_ContentKinds, nullptr, nullptr, nullptr },
        { const_cast<char*>("partner_account_infos"), (getter)UserDataAccountProviderAddAccountOperation_get_PartnerAccountInfos, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)UserDataAccountProviderAddAccountOperation_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountProviderAddAccountOperation[] = 
    {
        { Py_tp_new, _new_UserDataAccountProviderAddAccountOperation },
        { Py_tp_dealloc, _dealloc_UserDataAccountProviderAddAccountOperation },
        { Py_tp_methods, _methods_UserDataAccountProviderAddAccountOperation },
        { Py_tp_getset, _getset_UserDataAccountProviderAddAccountOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountProviderAddAccountOperation =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts_Provider.UserDataAccountProviderAddAccountOperation",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountProviderAddAccountOperation
    };

    // ----- UserDataAccountProviderResolveErrorsOperation class --------------------
    constexpr const char* const _type_name_UserDataAccountProviderResolveErrorsOperation = "UserDataAccountProviderResolveErrorsOperation";

    static PyObject* _new_UserDataAccountProviderResolveErrorsOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountProviderResolveErrorsOperation);
        return nullptr;
    }

    static void _dealloc_UserDataAccountProviderResolveErrorsOperation(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccountProviderResolveErrorsOperation_ReportCompleted(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountProviderResolveErrorsOperation_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountProviderResolveErrorsOperation_get_UserDataAccountId(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserDataAccountId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccountProviderResolveErrorsOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountProviderResolveErrorsOperation[] = {
        { "report_completed", (PyCFunction)UserDataAccountProviderResolveErrorsOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataAccountProviderResolveErrorsOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountProviderResolveErrorsOperation[] = {
        { const_cast<char*>("kind"), (getter)UserDataAccountProviderResolveErrorsOperation_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("user_data_account_id"), (getter)UserDataAccountProviderResolveErrorsOperation_get_UserDataAccountId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountProviderResolveErrorsOperation[] = 
    {
        { Py_tp_new, _new_UserDataAccountProviderResolveErrorsOperation },
        { Py_tp_dealloc, _dealloc_UserDataAccountProviderResolveErrorsOperation },
        { Py_tp_methods, _methods_UserDataAccountProviderResolveErrorsOperation },
        { Py_tp_getset, _getset_UserDataAccountProviderResolveErrorsOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountProviderResolveErrorsOperation =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts_Provider.UserDataAccountProviderResolveErrorsOperation",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountProviderResolveErrorsOperation
    };

    // ----- UserDataAccountProviderSettingsOperation class --------------------
    constexpr const char* const _type_name_UserDataAccountProviderSettingsOperation = "UserDataAccountProviderSettingsOperation";

    static PyObject* _new_UserDataAccountProviderSettingsOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserDataAccountProviderSettingsOperation);
        return nullptr;
    }

    static void _dealloc_UserDataAccountProviderSettingsOperation(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserDataAccountProviderSettingsOperation_ReportCompleted(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ReportCompleted();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserDataAccountProviderSettingsOperation_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserDataAccountProviderSettingsOperation_get_UserDataAccountId(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserDataAccountId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserDataAccountProviderSettingsOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserDataAccountProviderSettingsOperation[] = {
        { "report_completed", (PyCFunction)UserDataAccountProviderSettingsOperation_ReportCompleted, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserDataAccountProviderSettingsOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserDataAccountProviderSettingsOperation[] = {
        { const_cast<char*>("kind"), (getter)UserDataAccountProviderSettingsOperation_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("user_data_account_id"), (getter)UserDataAccountProviderSettingsOperation_get_UserDataAccountId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserDataAccountProviderSettingsOperation[] = 
    {
        { Py_tp_new, _new_UserDataAccountProviderSettingsOperation },
        { Py_tp_dealloc, _dealloc_UserDataAccountProviderSettingsOperation },
        { Py_tp_methods, _methods_UserDataAccountProviderSettingsOperation },
        { Py_tp_getset, _getset_UserDataAccountProviderSettingsOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserDataAccountProviderSettingsOperation =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts_Provider.UserDataAccountProviderSettingsOperation",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserDataAccountProviderSettingsOperation
    };

    // ----- IUserDataAccountProviderOperation interface --------------------
    constexpr const char* const _type_name_IUserDataAccountProviderOperation = "IUserDataAccountProviderOperation";

    static PyObject* _new_IUserDataAccountProviderOperation(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IUserDataAccountProviderOperation);
        return nullptr;
    }

    static void _dealloc_IUserDataAccountProviderOperation(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::IUserDataAccountProviderOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IUserDataAccountProviderOperation_get_Kind(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::IUserDataAccountProviderOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IUserDataAccountProviderOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::IUserDataAccountProviderOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IUserDataAccountProviderOperation[] = {
        { "_from", (PyCFunction)_from_IUserDataAccountProviderOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IUserDataAccountProviderOperation[] = {
        { const_cast<char*>("kind"), (getter)IUserDataAccountProviderOperation_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IUserDataAccountProviderOperation[] = 
    {
        { Py_tp_new, _new_IUserDataAccountProviderOperation },
        { Py_tp_dealloc, _dealloc_IUserDataAccountProviderOperation },
        { Py_tp_methods, _methods_IUserDataAccountProviderOperation },
        { Py_tp_getset, _getset_IUserDataAccountProviderOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IUserDataAccountProviderOperation =
    {
        "_winrt_Windows_ApplicationModel_UserDataAccounts_Provider.IUserDataAccountProviderOperation",
        sizeof(py::wrapper::Windows::ApplicationModel::UserDataAccounts::Provider::IUserDataAccountProviderOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IUserDataAccountProviderOperation
    };

    // ----- Windows.ApplicationModel.UserDataAccounts.Provider Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountPartnerAccountInfo>::python_type = py::register_python_type(module, _type_name_UserDataAccountPartnerAccountInfo, &_type_spec_UserDataAccountPartnerAccountInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderAddAccountOperation>::python_type = py::register_python_type(module, _type_name_UserDataAccountProviderAddAccountOperation, &_type_spec_UserDataAccountProviderAddAccountOperation, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderResolveErrorsOperation>::python_type = py::register_python_type(module, _type_name_UserDataAccountProviderResolveErrorsOperation, &_type_spec_UserDataAccountProviderResolveErrorsOperation, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::UserDataAccountProviderSettingsOperation>::python_type = py::register_python_type(module, _type_name_UserDataAccountProviderSettingsOperation, &_type_spec_UserDataAccountProviderSettingsOperation, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserDataAccounts::Provider::IUserDataAccountProviderOperation>::python_type = py::register_python_type(module, _type_name_IUserDataAccountProviderOperation, &_type_spec_IUserDataAccountProviderOperation, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.UserDataAccounts.Provider");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_UserDataAccounts_Provider",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::UserDataAccounts::Provider

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_UserDataAccounts_Provider (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::UserDataAccounts::Provider::module_def);
}
