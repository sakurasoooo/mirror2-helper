// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Payments.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentAddress>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentDetails>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentDetailsModifier>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentMediator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentMethodData>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequestSubmitResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentResponse>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentShippingOption>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentToken>::python_type;

namespace py::cpp::Windows::ApplicationModel::Payments
{
    // ----- PaymentAddress class --------------------
    constexpr const char* const _type_name_PaymentAddress = "PaymentAddress";

    static PyObject* _new_PaymentAddress(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Payments::PaymentAddress instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentAddress(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentAddress_get_SortingCode(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SortingCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_SortingCode(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SortingCode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_Region(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Region());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_Region(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Region(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_Recipient(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Recipient());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_Recipient(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Recipient(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_PostalCode(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PostalCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_PostalCode(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PostalCode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_PhoneNumber(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PhoneNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_PhoneNumber(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PhoneNumber(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_Organization(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Organization());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_Organization(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Organization(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_LanguageCode(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LanguageCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_LanguageCode(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.LanguageCode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_DependentLocality(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DependentLocality());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_DependentLocality(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DependentLocality(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_Country(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Country());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_Country(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Country(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_City(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.City());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_City(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.City(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_AddressLines(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AddressLines());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentAddress_put_AddressLines(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring>>(arg);

            self->obj.AddressLines(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentAddress_get_Properties(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentAddress(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentAddress>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentAddress[] = {
        { "_from", (PyCFunction)_from_PaymentAddress, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentAddress[] = {
        { const_cast<char*>("sorting_code"), (getter)PaymentAddress_get_SortingCode, (setter)PaymentAddress_put_SortingCode, nullptr, nullptr },
        { const_cast<char*>("region"), (getter)PaymentAddress_get_Region, (setter)PaymentAddress_put_Region, nullptr, nullptr },
        { const_cast<char*>("recipient"), (getter)PaymentAddress_get_Recipient, (setter)PaymentAddress_put_Recipient, nullptr, nullptr },
        { const_cast<char*>("postal_code"), (getter)PaymentAddress_get_PostalCode, (setter)PaymentAddress_put_PostalCode, nullptr, nullptr },
        { const_cast<char*>("phone_number"), (getter)PaymentAddress_get_PhoneNumber, (setter)PaymentAddress_put_PhoneNumber, nullptr, nullptr },
        { const_cast<char*>("organization"), (getter)PaymentAddress_get_Organization, (setter)PaymentAddress_put_Organization, nullptr, nullptr },
        { const_cast<char*>("language_code"), (getter)PaymentAddress_get_LanguageCode, (setter)PaymentAddress_put_LanguageCode, nullptr, nullptr },
        { const_cast<char*>("dependent_locality"), (getter)PaymentAddress_get_DependentLocality, (setter)PaymentAddress_put_DependentLocality, nullptr, nullptr },
        { const_cast<char*>("country"), (getter)PaymentAddress_get_Country, (setter)PaymentAddress_put_Country, nullptr, nullptr },
        { const_cast<char*>("city"), (getter)PaymentAddress_get_City, (setter)PaymentAddress_put_City, nullptr, nullptr },
        { const_cast<char*>("address_lines"), (getter)PaymentAddress_get_AddressLines, (setter)PaymentAddress_put_AddressLines, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)PaymentAddress_get_Properties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentAddress[] = 
    {
        { Py_tp_new, _new_PaymentAddress },
        { Py_tp_dealloc, _dealloc_PaymentAddress },
        { Py_tp_methods, _methods_PaymentAddress },
        { Py_tp_getset, _getset_PaymentAddress },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentAddress =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentAddress",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentAddress),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentAddress
    };

    // ----- PaymentCanMakePaymentResult class --------------------
    constexpr const char* const _type_name_PaymentCanMakePaymentResult = "PaymentCanMakePaymentResult";

    static PyObject* _new_PaymentCanMakePaymentResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResultStatus>(args, 0);

                winrt::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentCanMakePaymentResult(py::wrapper::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentCanMakePaymentResult_get_Status(py::wrapper::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentCanMakePaymentResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentCanMakePaymentResult[] = {
        { "_from", (PyCFunction)_from_PaymentCanMakePaymentResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentCanMakePaymentResult[] = {
        { const_cast<char*>("status"), (getter)PaymentCanMakePaymentResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentCanMakePaymentResult[] = 
    {
        { Py_tp_new, _new_PaymentCanMakePaymentResult },
        { Py_tp_dealloc, _dealloc_PaymentCanMakePaymentResult },
        { Py_tp_methods, _methods_PaymentCanMakePaymentResult },
        { Py_tp_getset, _getset_PaymentCanMakePaymentResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentCanMakePaymentResult =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentCanMakePaymentResult",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentCanMakePaymentResult
    };

    // ----- PaymentCurrencyAmount class --------------------
    constexpr const char* const _type_name_PaymentCurrencyAmount = "PaymentCurrencyAmount";

    static PyObject* _new_PaymentCurrencyAmount(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentCurrencyAmount(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentCurrencyAmount_get_Value(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentCurrencyAmount_put_Value(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Value(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentCurrencyAmount_get_CurrencySystem(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrencySystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentCurrencyAmount_put_CurrencySystem(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CurrencySystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentCurrencyAmount_get_Currency(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Currency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentCurrencyAmount_put_Currency(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Currency(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PaymentCurrencyAmount(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentCurrencyAmount[] = {
        { "_from", (PyCFunction)_from_PaymentCurrencyAmount, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentCurrencyAmount[] = {
        { const_cast<char*>("value"), (getter)PaymentCurrencyAmount_get_Value, (setter)PaymentCurrencyAmount_put_Value, nullptr, nullptr },
        { const_cast<char*>("currency_system"), (getter)PaymentCurrencyAmount_get_CurrencySystem, (setter)PaymentCurrencyAmount_put_CurrencySystem, nullptr, nullptr },
        { const_cast<char*>("currency"), (getter)PaymentCurrencyAmount_get_Currency, (setter)PaymentCurrencyAmount_put_Currency, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentCurrencyAmount[] = 
    {
        { Py_tp_new, _new_PaymentCurrencyAmount },
        { Py_tp_dealloc, _dealloc_PaymentCurrencyAmount },
        { Py_tp_methods, _methods_PaymentCurrencyAmount },
        { Py_tp_getset, _getset_PaymentCurrencyAmount },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentCurrencyAmount =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentCurrencyAmount",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentCurrencyAmount),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentCurrencyAmount
    };

    // ----- PaymentDetails class --------------------
    constexpr const char* const _type_name_PaymentDetails = "PaymentDetails";

    static PyObject* _new_PaymentDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentItem>(args, 0);

                winrt::Windows::ApplicationModel::Payments::PaymentDetails instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentItem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Payments::PaymentItem>>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentDetails instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Payments::PaymentDetails instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentDetails(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentDetails_get_Total(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Total());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentDetails_put_Total(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentItem>(arg);

            self->obj.Total(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentDetails_get_ShippingOptions(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShippingOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentDetails_put_ShippingOptions(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Payments::PaymentShippingOption>>(arg);

            self->obj.ShippingOptions(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentDetails_get_Modifiers(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Modifiers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentDetails_put_Modifiers(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Payments::PaymentDetailsModifier>>(arg);

            self->obj.Modifiers(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentDetails_get_DisplayItems(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayItems());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentDetails_put_DisplayItems(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Payments::PaymentItem>>(arg);

            self->obj.DisplayItems(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PaymentDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentDetails[] = {
        { "_from", (PyCFunction)_from_PaymentDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentDetails[] = {
        { const_cast<char*>("total"), (getter)PaymentDetails_get_Total, (setter)PaymentDetails_put_Total, nullptr, nullptr },
        { const_cast<char*>("shipping_options"), (getter)PaymentDetails_get_ShippingOptions, (setter)PaymentDetails_put_ShippingOptions, nullptr, nullptr },
        { const_cast<char*>("modifiers"), (getter)PaymentDetails_get_Modifiers, (setter)PaymentDetails_put_Modifiers, nullptr, nullptr },
        { const_cast<char*>("display_items"), (getter)PaymentDetails_get_DisplayItems, (setter)PaymentDetails_put_DisplayItems, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentDetails[] = 
    {
        { Py_tp_new, _new_PaymentDetails },
        { Py_tp_dealloc, _dealloc_PaymentDetails },
        { Py_tp_methods, _methods_PaymentDetails },
        { Py_tp_getset, _getset_PaymentDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentDetails =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentDetails",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentDetails
    };

    // ----- PaymentDetailsModifier class --------------------
    constexpr const char* const _type_name_PaymentDetailsModifier = "PaymentDetailsModifier";

    static PyObject* _new_PaymentDetailsModifier(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentItem>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentDetailsModifier instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentItem>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Payments::PaymentItem>>(args, 2);

                winrt::Windows::ApplicationModel::Payments::PaymentDetailsModifier instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentItem>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Payments::PaymentItem>>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                winrt::Windows::ApplicationModel::Payments::PaymentDetailsModifier instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentDetailsModifier(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetailsModifier* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentDetailsModifier_get_AdditionalDisplayItems(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetailsModifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdditionalDisplayItems());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentDetailsModifier_get_JsonData(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetailsModifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.JsonData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentDetailsModifier_get_SupportedMethodIds(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetailsModifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedMethodIds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentDetailsModifier_get_Total(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetailsModifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Total());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentDetailsModifier(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentDetailsModifier>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentDetailsModifier[] = {
        { "_from", (PyCFunction)_from_PaymentDetailsModifier, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentDetailsModifier[] = {
        { const_cast<char*>("additional_display_items"), (getter)PaymentDetailsModifier_get_AdditionalDisplayItems, nullptr, nullptr, nullptr },
        { const_cast<char*>("json_data"), (getter)PaymentDetailsModifier_get_JsonData, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_method_ids"), (getter)PaymentDetailsModifier_get_SupportedMethodIds, nullptr, nullptr, nullptr },
        { const_cast<char*>("total"), (getter)PaymentDetailsModifier_get_Total, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentDetailsModifier[] = 
    {
        { Py_tp_new, _new_PaymentDetailsModifier },
        { Py_tp_dealloc, _dealloc_PaymentDetailsModifier },
        { Py_tp_methods, _methods_PaymentDetailsModifier },
        { Py_tp_getset, _getset_PaymentDetailsModifier },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentDetailsModifier =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentDetailsModifier",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentDetailsModifier),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentDetailsModifier
    };

    // ----- PaymentItem class --------------------
    constexpr const char* const _type_name_PaymentItem = "PaymentItem";

    static PyObject* _new_PaymentItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentItem instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentItem(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentItem_get_Pending(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Pending());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentItem_put_Pending(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Pending(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentItem_get_Label(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Label());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentItem_put_Label(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Label(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentItem_get_Amount(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Amount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentItem_put_Amount(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>(arg);

            self->obj.Amount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PaymentItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentItem[] = {
        { "_from", (PyCFunction)_from_PaymentItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentItem[] = {
        { const_cast<char*>("pending"), (getter)PaymentItem_get_Pending, (setter)PaymentItem_put_Pending, nullptr, nullptr },
        { const_cast<char*>("label"), (getter)PaymentItem_get_Label, (setter)PaymentItem_put_Label, nullptr, nullptr },
        { const_cast<char*>("amount"), (getter)PaymentItem_get_Amount, (setter)PaymentItem_put_Amount, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentItem[] = 
    {
        { Py_tp_new, _new_PaymentItem },
        { Py_tp_dealloc, _dealloc_PaymentItem },
        { Py_tp_methods, _methods_PaymentItem },
        { Py_tp_getset, _getset_PaymentItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentItem =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentItem",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentItem
    };

    // ----- PaymentMediator class --------------------
    constexpr const char* const _type_name_PaymentMediator = "PaymentMediator";

    static PyObject* _new_PaymentMediator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Payments::PaymentMediator instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentMediator(py::wrapper::Windows::ApplicationModel::Payments::PaymentMediator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentMediator_CanMakePaymentAsync(py::wrapper::Windows::ApplicationModel::Payments::PaymentMediator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentRequest>(args, 0);

                return py::convert(self->obj.CanMakePaymentAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PaymentMediator_GetSupportedMethodIdsAsync(py::wrapper::Windows::ApplicationModel::Payments::PaymentMediator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetSupportedMethodIdsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PaymentMediator_SubmitPaymentRequestAsync(py::wrapper::Windows::ApplicationModel::Payments::PaymentMediator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentRequest>(args, 0);

                return py::convert(self->obj.SubmitPaymentRequestAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentRequest>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedHandler>(args, 1);

                return py::convert(self->obj.SubmitPaymentRequestAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_PaymentMediator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentMediator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentMediator[] = {
        { "can_make_payment_async", (PyCFunction)PaymentMediator_CanMakePaymentAsync, METH_VARARGS, nullptr },
        { "get_supported_method_ids_async", (PyCFunction)PaymentMediator_GetSupportedMethodIdsAsync, METH_VARARGS, nullptr },
        { "submit_payment_request_async", (PyCFunction)PaymentMediator_SubmitPaymentRequestAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PaymentMediator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentMediator[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentMediator[] = 
    {
        { Py_tp_new, _new_PaymentMediator },
        { Py_tp_dealloc, _dealloc_PaymentMediator },
        { Py_tp_methods, _methods_PaymentMediator },
        { Py_tp_getset, _getset_PaymentMediator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentMediator =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentMediator",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentMediator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentMediator
    };

    // ----- PaymentMerchantInfo class --------------------
    constexpr const char* const _type_name_PaymentMerchantInfo = "PaymentMerchantInfo";

    static PyObject* _new_PaymentMerchantInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentMerchantInfo(py::wrapper::Windows::ApplicationModel::Payments::PaymentMerchantInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentMerchantInfo_get_PackageFullName(py::wrapper::Windows::ApplicationModel::Payments::PaymentMerchantInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PackageFullName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentMerchantInfo_get_Uri(py::wrapper::Windows::ApplicationModel::Payments::PaymentMerchantInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentMerchantInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentMerchantInfo[] = {
        { "_from", (PyCFunction)_from_PaymentMerchantInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentMerchantInfo[] = {
        { const_cast<char*>("package_full_name"), (getter)PaymentMerchantInfo_get_PackageFullName, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)PaymentMerchantInfo_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentMerchantInfo[] = 
    {
        { Py_tp_new, _new_PaymentMerchantInfo },
        { Py_tp_dealloc, _dealloc_PaymentMerchantInfo },
        { Py_tp_methods, _methods_PaymentMerchantInfo },
        { Py_tp_getset, _getset_PaymentMerchantInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentMerchantInfo =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentMerchantInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentMerchantInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentMerchantInfo
    };

    // ----- PaymentMethodData class --------------------
    constexpr const char* const _type_name_PaymentMethodData = "PaymentMethodData";

    static PyObject* _new_PaymentMethodData(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                winrt::Windows::ApplicationModel::Payments::PaymentMethodData instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentMethodData instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentMethodData(py::wrapper::Windows::ApplicationModel::Payments::PaymentMethodData* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentMethodData_get_JsonData(py::wrapper::Windows::ApplicationModel::Payments::PaymentMethodData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.JsonData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentMethodData_get_SupportedMethodIds(py::wrapper::Windows::ApplicationModel::Payments::PaymentMethodData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedMethodIds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentMethodData(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentMethodData>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentMethodData[] = {
        { "_from", (PyCFunction)_from_PaymentMethodData, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentMethodData[] = {
        { const_cast<char*>("json_data"), (getter)PaymentMethodData_get_JsonData, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_method_ids"), (getter)PaymentMethodData_get_SupportedMethodIds, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentMethodData[] = 
    {
        { Py_tp_new, _new_PaymentMethodData },
        { Py_tp_dealloc, _dealloc_PaymentMethodData },
        { Py_tp_methods, _methods_PaymentMethodData },
        { Py_tp_getset, _getset_PaymentMethodData },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentMethodData =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentMethodData",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentMethodData),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentMethodData
    };

    // ----- PaymentOptions class --------------------
    constexpr const char* const _type_name_PaymentOptions = "PaymentOptions";

    static PyObject* _new_PaymentOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Payments::PaymentOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentOptions(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentOptions_get_ShippingType(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShippingType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentOptions_put_ShippingType(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentShippingType>(arg);

            self->obj.ShippingType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentOptions_get_RequestShipping(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequestShipping());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentOptions_put_RequestShipping(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.RequestShipping(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentOptions_get_RequestPayerPhoneNumber(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequestPayerPhoneNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentOptions_put_RequestPayerPhoneNumber(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentOptionPresence>(arg);

            self->obj.RequestPayerPhoneNumber(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentOptions_get_RequestPayerName(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequestPayerName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentOptions_put_RequestPayerName(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentOptionPresence>(arg);

            self->obj.RequestPayerName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentOptions_get_RequestPayerEmail(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequestPayerEmail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentOptions_put_RequestPayerEmail(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentOptionPresence>(arg);

            self->obj.RequestPayerEmail(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PaymentOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentOptions[] = {
        { "_from", (PyCFunction)_from_PaymentOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentOptions[] = {
        { const_cast<char*>("shipping_type"), (getter)PaymentOptions_get_ShippingType, (setter)PaymentOptions_put_ShippingType, nullptr, nullptr },
        { const_cast<char*>("request_shipping"), (getter)PaymentOptions_get_RequestShipping, (setter)PaymentOptions_put_RequestShipping, nullptr, nullptr },
        { const_cast<char*>("request_payer_phone_number"), (getter)PaymentOptions_get_RequestPayerPhoneNumber, (setter)PaymentOptions_put_RequestPayerPhoneNumber, nullptr, nullptr },
        { const_cast<char*>("request_payer_name"), (getter)PaymentOptions_get_RequestPayerName, (setter)PaymentOptions_put_RequestPayerName, nullptr, nullptr },
        { const_cast<char*>("request_payer_email"), (getter)PaymentOptions_get_RequestPayerEmail, (setter)PaymentOptions_put_RequestPayerEmail, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentOptions[] = 
    {
        { Py_tp_new, _new_PaymentOptions },
        { Py_tp_dealloc, _dealloc_PaymentOptions },
        { Py_tp_methods, _methods_PaymentOptions },
        { Py_tp_getset, _getset_PaymentOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentOptions =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentOptions",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentOptions
    };

    // ----- PaymentRequest class --------------------
    constexpr const char* const _type_name_PaymentRequest = "PaymentRequest";

    static PyObject* _new_PaymentRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentDetails>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Payments::PaymentMethodData>>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentOptions>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);

                winrt::Windows::ApplicationModel::Payments::PaymentRequest instance{ param0, param1, param2, param3, param4 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentDetails>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Payments::PaymentMethodData>>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentRequest instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentDetails>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Payments::PaymentMethodData>>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo>(args, 2);

                winrt::Windows::ApplicationModel::Payments::PaymentRequest instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentDetails>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Payments::PaymentMethodData>>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentOptions>(args, 3);

                winrt::Windows::ApplicationModel::Payments::PaymentRequest instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentRequest(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentRequest_get_Details(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Details());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentRequest_get_MerchantInfo(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MerchantInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentRequest_get_MethodData(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MethodData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentRequest_get_Options(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Options());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentRequest_get_Id(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentRequest[] = {
        { "_from", (PyCFunction)_from_PaymentRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentRequest[] = {
        { const_cast<char*>("details"), (getter)PaymentRequest_get_Details, nullptr, nullptr, nullptr },
        { const_cast<char*>("merchant_info"), (getter)PaymentRequest_get_MerchantInfo, nullptr, nullptr, nullptr },
        { const_cast<char*>("method_data"), (getter)PaymentRequest_get_MethodData, nullptr, nullptr, nullptr },
        { const_cast<char*>("options"), (getter)PaymentRequest_get_Options, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)PaymentRequest_get_Id, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentRequest[] = 
    {
        { Py_tp_new, _new_PaymentRequest },
        { Py_tp_dealloc, _dealloc_PaymentRequest },
        { Py_tp_methods, _methods_PaymentRequest },
        { Py_tp_getset, _getset_PaymentRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentRequest =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentRequest
    };

    // ----- PaymentRequestChangedArgs class --------------------
    constexpr const char* const _type_name_PaymentRequestChangedArgs = "PaymentRequestChangedArgs";

    static PyObject* _new_PaymentRequestChangedArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PaymentRequestChangedArgs);
        return nullptr;
    }

    static void _dealloc_PaymentRequestChangedArgs(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentRequestChangedArgs_Acknowledge(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedResult>(args, 0);

                self->obj.Acknowledge(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PaymentRequestChangedArgs_get_ChangeKind(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChangeKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentRequestChangedArgs_get_SelectedShippingOption(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SelectedShippingOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentRequestChangedArgs_get_ShippingAddress(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShippingAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentRequestChangedArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentRequestChangedArgs[] = {
        { "acknowledge", (PyCFunction)PaymentRequestChangedArgs_Acknowledge, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PaymentRequestChangedArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentRequestChangedArgs[] = {
        { const_cast<char*>("change_kind"), (getter)PaymentRequestChangedArgs_get_ChangeKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("selected_shipping_option"), (getter)PaymentRequestChangedArgs_get_SelectedShippingOption, nullptr, nullptr, nullptr },
        { const_cast<char*>("shipping_address"), (getter)PaymentRequestChangedArgs_get_ShippingAddress, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentRequestChangedArgs[] = 
    {
        { Py_tp_new, _new_PaymentRequestChangedArgs },
        { Py_tp_dealloc, _dealloc_PaymentRequestChangedArgs },
        { Py_tp_methods, _methods_PaymentRequestChangedArgs },
        { Py_tp_getset, _getset_PaymentRequestChangedArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentRequestChangedArgs =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentRequestChangedArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentRequestChangedArgs
    };

    // ----- PaymentRequestChangedResult class --------------------
    constexpr const char* const _type_name_PaymentRequestChangedResult = "PaymentRequestChangedResult";

    static PyObject* _new_PaymentRequestChangedResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedResult instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentDetails>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedResult instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentRequestChangedResult(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentRequestChangedResult_get_UpdatedPaymentDetails(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UpdatedPaymentDetails());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentRequestChangedResult_put_UpdatedPaymentDetails(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentDetails>(arg);

            self->obj.UpdatedPaymentDetails(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentRequestChangedResult_get_Message(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentRequestChangedResult_put_Message(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Message(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentRequestChangedResult_get_ChangeAcceptedByMerchant(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChangeAcceptedByMerchant());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentRequestChangedResult_put_ChangeAcceptedByMerchant(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ChangeAcceptedByMerchant(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PaymentRequestChangedResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentRequestChangedResult[] = {
        { "_from", (PyCFunction)_from_PaymentRequestChangedResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentRequestChangedResult[] = {
        { const_cast<char*>("updated_payment_details"), (getter)PaymentRequestChangedResult_get_UpdatedPaymentDetails, (setter)PaymentRequestChangedResult_put_UpdatedPaymentDetails, nullptr, nullptr },
        { const_cast<char*>("message"), (getter)PaymentRequestChangedResult_get_Message, (setter)PaymentRequestChangedResult_put_Message, nullptr, nullptr },
        { const_cast<char*>("change_accepted_by_merchant"), (getter)PaymentRequestChangedResult_get_ChangeAcceptedByMerchant, (setter)PaymentRequestChangedResult_put_ChangeAcceptedByMerchant, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentRequestChangedResult[] = 
    {
        { Py_tp_new, _new_PaymentRequestChangedResult },
        { Py_tp_dealloc, _dealloc_PaymentRequestChangedResult },
        { Py_tp_methods, _methods_PaymentRequestChangedResult },
        { Py_tp_getset, _getset_PaymentRequestChangedResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentRequestChangedResult =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentRequestChangedResult",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestChangedResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentRequestChangedResult
    };

    // ----- PaymentRequestSubmitResult class --------------------
    constexpr const char* const _type_name_PaymentRequestSubmitResult = "PaymentRequestSubmitResult";

    static PyObject* _new_PaymentRequestSubmitResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PaymentRequestSubmitResult);
        return nullptr;
    }

    static void _dealloc_PaymentRequestSubmitResult(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestSubmitResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentRequestSubmitResult_get_Response(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestSubmitResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Response());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentRequestSubmitResult_get_Status(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestSubmitResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentRequestSubmitResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentRequestSubmitResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentRequestSubmitResult[] = {
        { "_from", (PyCFunction)_from_PaymentRequestSubmitResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentRequestSubmitResult[] = {
        { const_cast<char*>("response"), (getter)PaymentRequestSubmitResult_get_Response, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)PaymentRequestSubmitResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentRequestSubmitResult[] = 
    {
        { Py_tp_new, _new_PaymentRequestSubmitResult },
        { Py_tp_dealloc, _dealloc_PaymentRequestSubmitResult },
        { Py_tp_methods, _methods_PaymentRequestSubmitResult },
        { Py_tp_getset, _getset_PaymentRequestSubmitResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentRequestSubmitResult =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentRequestSubmitResult",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentRequestSubmitResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentRequestSubmitResult
    };

    // ----- PaymentResponse class --------------------
    constexpr const char* const _type_name_PaymentResponse = "PaymentResponse";

    static PyObject* _new_PaymentResponse(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PaymentResponse);
        return nullptr;
    }

    static void _dealloc_PaymentResponse(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentResponse_CompleteAsync(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentRequestCompletionStatus>(args, 0);

                return py::convert(self->obj.CompleteAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PaymentResponse_get_PayerEmail(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PayerEmail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentResponse_get_PayerName(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PayerName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentResponse_get_PayerPhoneNumber(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PayerPhoneNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentResponse_get_PaymentToken(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PaymentToken());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentResponse_get_ShippingAddress(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShippingAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentResponse_get_ShippingOption(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShippingOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentResponse(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentResponse>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentResponse[] = {
        { "complete_async", (PyCFunction)PaymentResponse_CompleteAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PaymentResponse, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentResponse[] = {
        { const_cast<char*>("payer_email"), (getter)PaymentResponse_get_PayerEmail, nullptr, nullptr, nullptr },
        { const_cast<char*>("payer_name"), (getter)PaymentResponse_get_PayerName, nullptr, nullptr, nullptr },
        { const_cast<char*>("payer_phone_number"), (getter)PaymentResponse_get_PayerPhoneNumber, nullptr, nullptr, nullptr },
        { const_cast<char*>("payment_token"), (getter)PaymentResponse_get_PaymentToken, nullptr, nullptr, nullptr },
        { const_cast<char*>("shipping_address"), (getter)PaymentResponse_get_ShippingAddress, nullptr, nullptr, nullptr },
        { const_cast<char*>("shipping_option"), (getter)PaymentResponse_get_ShippingOption, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentResponse[] = 
    {
        { Py_tp_new, _new_PaymentResponse },
        { Py_tp_dealloc, _dealloc_PaymentResponse },
        { Py_tp_methods, _methods_PaymentResponse },
        { Py_tp_getset, _getset_PaymentResponse },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentResponse =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentResponse",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentResponse),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentResponse
    };

    // ----- PaymentShippingOption class --------------------
    constexpr const char* const _type_name_PaymentShippingOption = "PaymentShippingOption";

    static PyObject* _new_PaymentShippingOption(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentShippingOption instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);

                winrt::Windows::ApplicationModel::Payments::PaymentShippingOption instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>(args, 1);
                auto param2 = py::convert_to<bool>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                winrt::Windows::ApplicationModel::Payments::PaymentShippingOption instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentShippingOption(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentShippingOption_get_Tag(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Tag());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentShippingOption_put_Tag(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Tag(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentShippingOption_get_Label(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Label());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentShippingOption_put_Label(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Label(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentShippingOption_get_IsSelected(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsSelected());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentShippingOption_put_IsSelected(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsSelected(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PaymentShippingOption_get_Amount(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Amount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PaymentShippingOption_put_Amount(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>(arg);

            self->obj.Amount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PaymentShippingOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentShippingOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentShippingOption[] = {
        { "_from", (PyCFunction)_from_PaymentShippingOption, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentShippingOption[] = {
        { const_cast<char*>("tag"), (getter)PaymentShippingOption_get_Tag, (setter)PaymentShippingOption_put_Tag, nullptr, nullptr },
        { const_cast<char*>("label"), (getter)PaymentShippingOption_get_Label, (setter)PaymentShippingOption_put_Label, nullptr, nullptr },
        { const_cast<char*>("is_selected"), (getter)PaymentShippingOption_get_IsSelected, (setter)PaymentShippingOption_put_IsSelected, nullptr, nullptr },
        { const_cast<char*>("amount"), (getter)PaymentShippingOption_get_Amount, (setter)PaymentShippingOption_put_Amount, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentShippingOption[] = 
    {
        { Py_tp_new, _new_PaymentShippingOption },
        { Py_tp_dealloc, _dealloc_PaymentShippingOption },
        { Py_tp_methods, _methods_PaymentShippingOption },
        { Py_tp_getset, _getset_PaymentShippingOption },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentShippingOption =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentShippingOption",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentShippingOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentShippingOption
    };

    // ----- PaymentToken class --------------------
    constexpr const char* const _type_name_PaymentToken = "PaymentToken";

    static PyObject* _new_PaymentToken(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Payments::PaymentToken instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Payments::PaymentToken instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PaymentToken(py::wrapper::Windows::ApplicationModel::Payments::PaymentToken* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PaymentToken_get_JsonDetails(py::wrapper::Windows::ApplicationModel::Payments::PaymentToken* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.JsonDetails());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PaymentToken_get_PaymentMethodId(py::wrapper::Windows::ApplicationModel::Payments::PaymentToken* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PaymentMethodId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PaymentToken(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Payments::PaymentToken>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PaymentToken[] = {
        { "_from", (PyCFunction)_from_PaymentToken, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PaymentToken[] = {
        { const_cast<char*>("json_details"), (getter)PaymentToken_get_JsonDetails, nullptr, nullptr, nullptr },
        { const_cast<char*>("payment_method_id"), (getter)PaymentToken_get_PaymentMethodId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PaymentToken[] = 
    {
        { Py_tp_new, _new_PaymentToken },
        { Py_tp_dealloc, _dealloc_PaymentToken },
        { Py_tp_methods, _methods_PaymentToken },
        { Py_tp_getset, _getset_PaymentToken },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PaymentToken =
    {
        "_winrt_Windows_ApplicationModel_Payments.PaymentToken",
        sizeof(py::wrapper::Windows::ApplicationModel::Payments::PaymentToken),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PaymentToken
    };

    // ----- Windows.ApplicationModel.Payments Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentAddress>::python_type = py::register_python_type(module, _type_name_PaymentAddress, &_type_spec_PaymentAddress, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult>::python_type = py::register_python_type(module, _type_name_PaymentCanMakePaymentResult, &_type_spec_PaymentCanMakePaymentResult, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentCurrencyAmount>::python_type = py::register_python_type(module, _type_name_PaymentCurrencyAmount, &_type_spec_PaymentCurrencyAmount, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentDetails>::python_type = py::register_python_type(module, _type_name_PaymentDetails, &_type_spec_PaymentDetails, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentDetailsModifier>::python_type = py::register_python_type(module, _type_name_PaymentDetailsModifier, &_type_spec_PaymentDetailsModifier, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentItem>::python_type = py::register_python_type(module, _type_name_PaymentItem, &_type_spec_PaymentItem, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentMediator>::python_type = py::register_python_type(module, _type_name_PaymentMediator, &_type_spec_PaymentMediator, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentMerchantInfo>::python_type = py::register_python_type(module, _type_name_PaymentMerchantInfo, &_type_spec_PaymentMerchantInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentMethodData>::python_type = py::register_python_type(module, _type_name_PaymentMethodData, &_type_spec_PaymentMethodData, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentOptions>::python_type = py::register_python_type(module, _type_name_PaymentOptions, &_type_spec_PaymentOptions, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequest>::python_type = py::register_python_type(module, _type_name_PaymentRequest, &_type_spec_PaymentRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedArgs>::python_type = py::register_python_type(module, _type_name_PaymentRequestChangedArgs, &_type_spec_PaymentRequestChangedArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequestChangedResult>::python_type = py::register_python_type(module, _type_name_PaymentRequestChangedResult, &_type_spec_PaymentRequestChangedResult, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentRequestSubmitResult>::python_type = py::register_python_type(module, _type_name_PaymentRequestSubmitResult, &_type_spec_PaymentRequestSubmitResult, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentResponse>::python_type = py::register_python_type(module, _type_name_PaymentResponse, &_type_spec_PaymentResponse, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentShippingOption>::python_type = py::register_python_type(module, _type_name_PaymentShippingOption, &_type_spec_PaymentShippingOption, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Payments::PaymentToken>::python_type = py::register_python_type(module, _type_name_PaymentToken, &_type_spec_PaymentToken, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Payments");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Payments",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Payments

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Payments (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Payments::module_def);
}
