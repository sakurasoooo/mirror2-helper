// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Media.Capture.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Core::VariablePhotoSequenceCapture>::python_type;

namespace py::cpp::Windows::Media::Capture::Core
{
    // ----- VariablePhotoCapturedEventArgs class --------------------
    constexpr const char* const _type_name_VariablePhotoCapturedEventArgs = "VariablePhotoCapturedEventArgs";

    static PyObject* _new_VariablePhotoCapturedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VariablePhotoCapturedEventArgs);
        return nullptr;
    }

    static void _dealloc_VariablePhotoCapturedEventArgs(py::wrapper::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VariablePhotoCapturedEventArgs_get_CaptureTimeOffset(py::wrapper::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CaptureTimeOffset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VariablePhotoCapturedEventArgs_get_CapturedFrameControlValues(py::wrapper::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CapturedFrameControlValues());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VariablePhotoCapturedEventArgs_get_Frame(py::wrapper::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Frame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VariablePhotoCapturedEventArgs_get_UsedFrameControllerIndex(py::wrapper::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UsedFrameControllerIndex());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VariablePhotoCapturedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VariablePhotoCapturedEventArgs[] = {
        { "_from", (PyCFunction)_from_VariablePhotoCapturedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VariablePhotoCapturedEventArgs[] = {
        { const_cast<char*>("capture_time_offset"), (getter)VariablePhotoCapturedEventArgs_get_CaptureTimeOffset, nullptr, nullptr, nullptr },
        { const_cast<char*>("captured_frame_control_values"), (getter)VariablePhotoCapturedEventArgs_get_CapturedFrameControlValues, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame"), (getter)VariablePhotoCapturedEventArgs_get_Frame, nullptr, nullptr, nullptr },
        { const_cast<char*>("used_frame_controller_index"), (getter)VariablePhotoCapturedEventArgs_get_UsedFrameControllerIndex, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VariablePhotoCapturedEventArgs[] = 
    {
        { Py_tp_new, _new_VariablePhotoCapturedEventArgs },
        { Py_tp_dealloc, _dealloc_VariablePhotoCapturedEventArgs },
        { Py_tp_methods, _methods_VariablePhotoCapturedEventArgs },
        { Py_tp_getset, _getset_VariablePhotoCapturedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VariablePhotoCapturedEventArgs =
    {
        "_winrt_Windows_Media_Capture_Core.VariablePhotoCapturedEventArgs",
        sizeof(py::wrapper::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VariablePhotoCapturedEventArgs
    };

    // ----- VariablePhotoSequenceCapture class --------------------
    constexpr const char* const _type_name_VariablePhotoSequenceCapture = "VariablePhotoSequenceCapture";

    static PyObject* _new_VariablePhotoSequenceCapture(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VariablePhotoSequenceCapture);
        return nullptr;
    }

    static void _dealloc_VariablePhotoSequenceCapture(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VariablePhotoSequenceCapture_FinishAsync(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FinishAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VariablePhotoSequenceCapture_StartAsync(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StartAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VariablePhotoSequenceCapture_StopAsync(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StopAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VariablePhotoSequenceCapture_UpdateSettingsAsync(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.UpdateSettingsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VariablePhotoSequenceCapture_add_PhotoCaptured(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Capture::Core::VariablePhotoSequenceCapture, winrt::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs>>(arg);

            return py::convert(self->obj.PhotoCaptured(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VariablePhotoSequenceCapture_remove_PhotoCaptured(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PhotoCaptured(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VariablePhotoSequenceCapture_add_Stopped(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Capture::Core::VariablePhotoSequenceCapture, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Stopped(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VariablePhotoSequenceCapture_remove_Stopped(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Stopped(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VariablePhotoSequenceCapture(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Core::VariablePhotoSequenceCapture>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VariablePhotoSequenceCapture[] = {
        { "finish_async", (PyCFunction)VariablePhotoSequenceCapture_FinishAsync, METH_VARARGS, nullptr },
        { "start_async", (PyCFunction)VariablePhotoSequenceCapture_StartAsync, METH_VARARGS, nullptr },
        { "stop_async", (PyCFunction)VariablePhotoSequenceCapture_StopAsync, METH_VARARGS, nullptr },
        { "update_settings_async", (PyCFunction)VariablePhotoSequenceCapture_UpdateSettingsAsync, METH_VARARGS, nullptr },
        { "add_photo_captured", (PyCFunction)VariablePhotoSequenceCapture_add_PhotoCaptured, METH_O, nullptr },
        { "remove_photo_captured", (PyCFunction)VariablePhotoSequenceCapture_remove_PhotoCaptured, METH_O, nullptr },
        { "add_stopped", (PyCFunction)VariablePhotoSequenceCapture_add_Stopped, METH_O, nullptr },
        { "remove_stopped", (PyCFunction)VariablePhotoSequenceCapture_remove_Stopped, METH_O, nullptr },
        { "_from", (PyCFunction)_from_VariablePhotoSequenceCapture, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VariablePhotoSequenceCapture[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_VariablePhotoSequenceCapture[] = 
    {
        { Py_tp_new, _new_VariablePhotoSequenceCapture },
        { Py_tp_dealloc, _dealloc_VariablePhotoSequenceCapture },
        { Py_tp_methods, _methods_VariablePhotoSequenceCapture },
        { Py_tp_getset, _getset_VariablePhotoSequenceCapture },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VariablePhotoSequenceCapture =
    {
        "_winrt_Windows_Media_Capture_Core.VariablePhotoSequenceCapture",
        sizeof(py::wrapper::Windows::Media::Capture::Core::VariablePhotoSequenceCapture),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VariablePhotoSequenceCapture
    };

    // ----- Windows.Media.Capture.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs>::python_type = py::register_python_type(module, _type_name_VariablePhotoCapturedEventArgs, &_type_spec_VariablePhotoCapturedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Core::VariablePhotoSequenceCapture>::python_type = py::register_python_type(module, _type_name_VariablePhotoSequenceCapture, &_type_spec_VariablePhotoSequenceCapture, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Media.Capture.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Media_Capture_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Media::Capture::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_Media_Capture_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Media::Capture::Core::module_def);
}
