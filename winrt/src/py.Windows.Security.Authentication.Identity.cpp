// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Security.Authentication.Identity.h"

PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager>::python_type;

namespace py::cpp::Windows::Security::Authentication::Identity
{
    // ----- EnterpriseKeyCredentialRegistrationInfo class --------------------
    constexpr const char* const _type_name_EnterpriseKeyCredentialRegistrationInfo = "EnterpriseKeyCredentialRegistrationInfo";

    static PyObject* _new_EnterpriseKeyCredentialRegistrationInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_EnterpriseKeyCredentialRegistrationInfo);
        return nullptr;
    }

    static void _dealloc_EnterpriseKeyCredentialRegistrationInfo(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_KeyId(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeyId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_KeyName(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KeyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_Subject(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subject());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_TenantId(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TenantId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationInfo_get_TenantName(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TenantName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_EnterpriseKeyCredentialRegistrationInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnterpriseKeyCredentialRegistrationInfo[] = {
        { "_from", (PyCFunction)_from_EnterpriseKeyCredentialRegistrationInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_EnterpriseKeyCredentialRegistrationInfo[] = {
        { const_cast<char*>("key_id"), (getter)EnterpriseKeyCredentialRegistrationInfo_get_KeyId, nullptr, nullptr, nullptr },
        { const_cast<char*>("key_name"), (getter)EnterpriseKeyCredentialRegistrationInfo_get_KeyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("subject"), (getter)EnterpriseKeyCredentialRegistrationInfo_get_Subject, nullptr, nullptr, nullptr },
        { const_cast<char*>("tenant_id"), (getter)EnterpriseKeyCredentialRegistrationInfo_get_TenantId, nullptr, nullptr, nullptr },
        { const_cast<char*>("tenant_name"), (getter)EnterpriseKeyCredentialRegistrationInfo_get_TenantName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_EnterpriseKeyCredentialRegistrationInfo[] = 
    {
        { Py_tp_new, _new_EnterpriseKeyCredentialRegistrationInfo },
        { Py_tp_dealloc, _dealloc_EnterpriseKeyCredentialRegistrationInfo },
        { Py_tp_methods, _methods_EnterpriseKeyCredentialRegistrationInfo },
        { Py_tp_getset, _getset_EnterpriseKeyCredentialRegistrationInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_EnterpriseKeyCredentialRegistrationInfo =
    {
        "_winrt_Windows_Security_Authentication_Identity.EnterpriseKeyCredentialRegistrationInfo",
        sizeof(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnterpriseKeyCredentialRegistrationInfo
    };

    // ----- EnterpriseKeyCredentialRegistrationManager class --------------------
    constexpr const char* const _type_name_EnterpriseKeyCredentialRegistrationManager = "EnterpriseKeyCredentialRegistrationManager";

    static PyObject* _new_EnterpriseKeyCredentialRegistrationManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_EnterpriseKeyCredentialRegistrationManager);
        return nullptr;
    }

    static void _dealloc_EnterpriseKeyCredentialRegistrationManager(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* EnterpriseKeyCredentialRegistrationManager_GetRegistrationsAsync(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetRegistrationsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* EnterpriseKeyCredentialRegistrationManager_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_EnterpriseKeyCredentialRegistrationManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnterpriseKeyCredentialRegistrationManager[] = {
        { "get_registrations_async", (PyCFunction)EnterpriseKeyCredentialRegistrationManager_GetRegistrationsAsync, METH_VARARGS, nullptr },
        { "get_current", (PyCFunction)EnterpriseKeyCredentialRegistrationManager_get_Current, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_EnterpriseKeyCredentialRegistrationManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_EnterpriseKeyCredentialRegistrationManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_EnterpriseKeyCredentialRegistrationManager[] = 
    {
        { Py_tp_new, _new_EnterpriseKeyCredentialRegistrationManager },
        { Py_tp_dealloc, _dealloc_EnterpriseKeyCredentialRegistrationManager },
        { Py_tp_methods, _methods_EnterpriseKeyCredentialRegistrationManager },
        { Py_tp_getset, _getset_EnterpriseKeyCredentialRegistrationManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_EnterpriseKeyCredentialRegistrationManager =
    {
        "_winrt_Windows_Security_Authentication_Identity.EnterpriseKeyCredentialRegistrationManager",
        sizeof(py::wrapper::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnterpriseKeyCredentialRegistrationManager
    };

    // ----- Windows.Security.Authentication.Identity Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo>::python_type = py::register_python_type(module, _type_name_EnterpriseKeyCredentialRegistrationInfo, &_type_spec_EnterpriseKeyCredentialRegistrationInfo, bases.get());
            py::winrt_type<winrt::Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager>::python_type = py::register_python_type(module, _type_name_EnterpriseKeyCredentialRegistrationManager, &_type_spec_EnterpriseKeyCredentialRegistrationManager, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Security.Authentication.Identity");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Security_Authentication_Identity",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Security::Authentication::Identity

PyMODINIT_FUNC
PyInit__winrt_Windows_Security_Authentication_Identity (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Security::Authentication::Identity::module_def);
}
