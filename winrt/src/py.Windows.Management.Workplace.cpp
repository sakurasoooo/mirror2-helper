// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Management.Workplace.h"

PyTypeObject* py::winrt_type<winrt::Windows::Management::Workplace::MdmPolicy>::python_type;

namespace py::cpp::Windows::Management::Workplace
{
    // ----- MdmPolicy class --------------------
    constexpr const char* const _type_name_MdmPolicy = "MdmPolicy";

    static PyObject* _new_MdmPolicy(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MdmPolicy);
        return nullptr;
    }

    static PyObject* MdmPolicy_GetMessagingSyncPolicy(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Management::Workplace::MdmPolicy::GetMessagingSyncPolicy());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MdmPolicy_IsBrowserAllowed(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Management::Workplace::MdmPolicy::IsBrowserAllowed());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MdmPolicy_IsCameraAllowed(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Management::Workplace::MdmPolicy::IsCameraAllowed());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MdmPolicy_IsMicrosoftAccountAllowed(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Management::Workplace::MdmPolicy::IsMicrosoftAccountAllowed());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MdmPolicy_IsStoreAllowed(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Management::Workplace::MdmPolicy::IsStoreAllowed());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_MdmPolicy[] = {
        { "get_messaging_sync_policy", (PyCFunction)MdmPolicy_GetMessagingSyncPolicy, METH_VARARGS | METH_STATIC, nullptr },
        { "is_browser_allowed", (PyCFunction)MdmPolicy_IsBrowserAllowed, METH_VARARGS | METH_STATIC, nullptr },
        { "is_camera_allowed", (PyCFunction)MdmPolicy_IsCameraAllowed, METH_VARARGS | METH_STATIC, nullptr },
        { "is_microsoft_account_allowed", (PyCFunction)MdmPolicy_IsMicrosoftAccountAllowed, METH_VARARGS | METH_STATIC, nullptr },
        { "is_store_allowed", (PyCFunction)MdmPolicy_IsStoreAllowed, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MdmPolicy[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_MdmPolicy[] = 
    {
        { Py_tp_new, _new_MdmPolicy },
        { Py_tp_methods, _methods_MdmPolicy },
        { Py_tp_getset, _getset_MdmPolicy },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MdmPolicy =
    {
        "_winrt_Windows_Management_Workplace.MdmPolicy",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MdmPolicy
    };

    // ----- Windows.Management.Workplace Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Management::Workplace::MdmPolicy>::python_type = py::register_python_type(module, _type_name_MdmPolicy, &_type_spec_MdmPolicy, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Management.Workplace");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Management_Workplace",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Management::Workplace

PyMODINIT_FUNC
PyInit__winrt_Windows_Management_Workplace (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Management::Workplace::module_def);
}
