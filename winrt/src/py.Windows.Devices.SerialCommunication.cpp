// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.SerialCommunication.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::SerialCommunication::ErrorReceivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SerialCommunication::PinChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SerialCommunication::SerialDevice>::python_type;

namespace py::cpp::Windows::Devices::SerialCommunication
{
    // ----- ErrorReceivedEventArgs class --------------------
    constexpr const char* const _type_name_ErrorReceivedEventArgs = "ErrorReceivedEventArgs";

    static PyObject* _new_ErrorReceivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ErrorReceivedEventArgs);
        return nullptr;
    }

    static void _dealloc_ErrorReceivedEventArgs(py::wrapper::Windows::Devices::SerialCommunication::ErrorReceivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ErrorReceivedEventArgs_get_Error(py::wrapper::Windows::Devices::SerialCommunication::ErrorReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Error());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ErrorReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SerialCommunication::ErrorReceivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ErrorReceivedEventArgs[] = {
        { "_from", (PyCFunction)_from_ErrorReceivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ErrorReceivedEventArgs[] = {
        { const_cast<char*>("error"), (getter)ErrorReceivedEventArgs_get_Error, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ErrorReceivedEventArgs[] = 
    {
        { Py_tp_new, _new_ErrorReceivedEventArgs },
        { Py_tp_dealloc, _dealloc_ErrorReceivedEventArgs },
        { Py_tp_methods, _methods_ErrorReceivedEventArgs },
        { Py_tp_getset, _getset_ErrorReceivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ErrorReceivedEventArgs =
    {
        "_winrt_Windows_Devices_SerialCommunication.ErrorReceivedEventArgs",
        sizeof(py::wrapper::Windows::Devices::SerialCommunication::ErrorReceivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ErrorReceivedEventArgs
    };

    // ----- PinChangedEventArgs class --------------------
    constexpr const char* const _type_name_PinChangedEventArgs = "PinChangedEventArgs";

    static PyObject* _new_PinChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PinChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_PinChangedEventArgs(py::wrapper::Windows::Devices::SerialCommunication::PinChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PinChangedEventArgs_get_PinChange(py::wrapper::Windows::Devices::SerialCommunication::PinChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PinChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PinChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SerialCommunication::PinChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PinChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_PinChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PinChangedEventArgs[] = {
        { const_cast<char*>("pin_change"), (getter)PinChangedEventArgs_get_PinChange, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PinChangedEventArgs[] = 
    {
        { Py_tp_new, _new_PinChangedEventArgs },
        { Py_tp_dealloc, _dealloc_PinChangedEventArgs },
        { Py_tp_methods, _methods_PinChangedEventArgs },
        { Py_tp_getset, _getset_PinChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PinChangedEventArgs =
    {
        "_winrt_Windows_Devices_SerialCommunication.PinChangedEventArgs",
        sizeof(py::wrapper::Windows::Devices::SerialCommunication::PinChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PinChangedEventArgs
    };

    // ----- SerialDevice class --------------------
    constexpr const char* const _type_name_SerialDevice = "SerialDevice";

    static PyObject* _new_SerialDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SerialDevice);
        return nullptr;
    }

    static void _dealloc_SerialDevice(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SerialDevice_Close(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SerialDevice_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::SerialCommunication::SerialDevice::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SerialDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::SerialCommunication::SerialDevice::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::SerialCommunication::SerialDevice::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SerialDevice_GetDeviceSelectorFromUsbVidPid(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint16_t>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);

                return py::convert(winrt::Windows::Devices::SerialCommunication::SerialDevice::GetDeviceSelectorFromUsbVidPid(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_IsDataTerminalReadyEnabled(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDataTerminalReadyEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_IsDataTerminalReadyEnabled(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDataTerminalReadyEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_DataBits(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DataBits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_DataBits(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint16_t>(arg);

            self->obj.DataBits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_Handshake(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handshake());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_Handshake(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SerialCommunication::SerialHandshake>(arg);

            self->obj.Handshake(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_BreakSignalState(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BreakSignalState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_BreakSignalState(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.BreakSignalState(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_BaudRate(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BaudRate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_BaudRate(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.BaudRate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_WriteTimeout(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WriteTimeout());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_WriteTimeout(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.WriteTimeout(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_StopBits(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StopBits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_StopBits(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SerialCommunication::SerialStopBitCount>(arg);

            self->obj.StopBits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_ReadTimeout(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ReadTimeout());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_ReadTimeout(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.ReadTimeout(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_Parity(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Parity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_Parity(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SerialCommunication::SerialParity>(arg);

            self->obj.Parity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_IsRequestToSendEnabled(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRequestToSendEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SerialDevice_put_IsRequestToSendEnabled(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsRequestToSendEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SerialDevice_get_BytesReceived(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BytesReceived());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_CarrierDetectState(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CarrierDetectState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_ClearToSendState(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClearToSendState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_DataSetReadyState(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DataSetReadyState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_InputStream(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputStream());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_OutputStream(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OutputStream());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_PortName(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PortName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_UsbProductId(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UsbProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_get_UsbVendorId(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UsbVendorId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_add_ErrorReceived(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::SerialCommunication::SerialDevice, winrt::Windows::Devices::SerialCommunication::ErrorReceivedEventArgs>>(arg);

            return py::convert(self->obj.ErrorReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_remove_ErrorReceived(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ErrorReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_add_PinChanged(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::SerialCommunication::SerialDevice, winrt::Windows::Devices::SerialCommunication::PinChangedEventArgs>>(arg);

            return py::convert(self->obj.PinChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SerialDevice_remove_PinChanged(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PinChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SerialDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SerialCommunication::SerialDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_SerialDevice(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_SerialDevice(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SerialDevice[] = {
        { "close", (PyCFunction)SerialDevice_Close, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)SerialDevice_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)SerialDevice_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector_from_usb_vid_pid", (PyCFunction)SerialDevice_GetDeviceSelectorFromUsbVidPid, METH_VARARGS | METH_STATIC, nullptr },
        { "add_error_received", (PyCFunction)SerialDevice_add_ErrorReceived, METH_O, nullptr },
        { "remove_error_received", (PyCFunction)SerialDevice_remove_ErrorReceived, METH_O, nullptr },
        { "add_pin_changed", (PyCFunction)SerialDevice_add_PinChanged, METH_O, nullptr },
        { "remove_pin_changed", (PyCFunction)SerialDevice_remove_PinChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SerialDevice, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_SerialDevice, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_SerialDevice, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SerialDevice[] = {
        { const_cast<char*>("is_data_terminal_ready_enabled"), (getter)SerialDevice_get_IsDataTerminalReadyEnabled, (setter)SerialDevice_put_IsDataTerminalReadyEnabled, nullptr, nullptr },
        { const_cast<char*>("data_bits"), (getter)SerialDevice_get_DataBits, (setter)SerialDevice_put_DataBits, nullptr, nullptr },
        { const_cast<char*>("handshake"), (getter)SerialDevice_get_Handshake, (setter)SerialDevice_put_Handshake, nullptr, nullptr },
        { const_cast<char*>("break_signal_state"), (getter)SerialDevice_get_BreakSignalState, (setter)SerialDevice_put_BreakSignalState, nullptr, nullptr },
        { const_cast<char*>("baud_rate"), (getter)SerialDevice_get_BaudRate, (setter)SerialDevice_put_BaudRate, nullptr, nullptr },
        { const_cast<char*>("write_timeout"), (getter)SerialDevice_get_WriteTimeout, (setter)SerialDevice_put_WriteTimeout, nullptr, nullptr },
        { const_cast<char*>("stop_bits"), (getter)SerialDevice_get_StopBits, (setter)SerialDevice_put_StopBits, nullptr, nullptr },
        { const_cast<char*>("read_timeout"), (getter)SerialDevice_get_ReadTimeout, (setter)SerialDevice_put_ReadTimeout, nullptr, nullptr },
        { const_cast<char*>("parity"), (getter)SerialDevice_get_Parity, (setter)SerialDevice_put_Parity, nullptr, nullptr },
        { const_cast<char*>("is_request_to_send_enabled"), (getter)SerialDevice_get_IsRequestToSendEnabled, (setter)SerialDevice_put_IsRequestToSendEnabled, nullptr, nullptr },
        { const_cast<char*>("bytes_received"), (getter)SerialDevice_get_BytesReceived, nullptr, nullptr, nullptr },
        { const_cast<char*>("carrier_detect_state"), (getter)SerialDevice_get_CarrierDetectState, nullptr, nullptr, nullptr },
        { const_cast<char*>("clear_to_send_state"), (getter)SerialDevice_get_ClearToSendState, nullptr, nullptr, nullptr },
        { const_cast<char*>("data_set_ready_state"), (getter)SerialDevice_get_DataSetReadyState, nullptr, nullptr, nullptr },
        { const_cast<char*>("input_stream"), (getter)SerialDevice_get_InputStream, nullptr, nullptr, nullptr },
        { const_cast<char*>("output_stream"), (getter)SerialDevice_get_OutputStream, nullptr, nullptr, nullptr },
        { const_cast<char*>("port_name"), (getter)SerialDevice_get_PortName, nullptr, nullptr, nullptr },
        { const_cast<char*>("usb_product_id"), (getter)SerialDevice_get_UsbProductId, nullptr, nullptr, nullptr },
        { const_cast<char*>("usb_vendor_id"), (getter)SerialDevice_get_UsbVendorId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SerialDevice[] = 
    {
        { Py_tp_new, _new_SerialDevice },
        { Py_tp_dealloc, _dealloc_SerialDevice },
        { Py_tp_methods, _methods_SerialDevice },
        { Py_tp_getset, _getset_SerialDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SerialDevice =
    {
        "_winrt_Windows_Devices_SerialCommunication.SerialDevice",
        sizeof(py::wrapper::Windows::Devices::SerialCommunication::SerialDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SerialDevice
    };

    // ----- Windows.Devices.SerialCommunication Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::SerialCommunication::ErrorReceivedEventArgs>::python_type = py::register_python_type(module, _type_name_ErrorReceivedEventArgs, &_type_spec_ErrorReceivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::SerialCommunication::PinChangedEventArgs>::python_type = py::register_python_type(module, _type_name_PinChangedEventArgs, &_type_spec_PinChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::SerialCommunication::SerialDevice>::python_type = py::register_python_type(module, _type_name_SerialDevice, &_type_spec_SerialDevice, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.SerialCommunication");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_SerialCommunication",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::SerialCommunication

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_SerialCommunication (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::SerialCommunication::module_def);
}
