// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.AllJoyn.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAboutData>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAboutDataView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusObject>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynCredentials>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynMessageInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSession>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynStatus>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::AllJoyn::IAllJoynProducer>::python_type;

namespace py::cpp::Windows::Devices::AllJoyn
{
    // ----- AllJoynAboutData class --------------------
    constexpr const char* const _type_name_AllJoynAboutData = "AllJoynAboutData";

    static PyObject* _new_AllJoynAboutData(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynAboutData);
        return nullptr;
    }

    static void _dealloc_AllJoynAboutData(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynAboutData_get_DefaultDescription(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_DefaultDescription(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DefaultDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_DefaultAppName(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultAppName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_DefaultAppName(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DefaultAppName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_DateOfManufacture(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DateOfManufacture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_DateOfManufacture(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.DateOfManufacture(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_DefaultManufacturer(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultManufacturer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_DefaultManufacturer(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DefaultManufacturer(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_AppId(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_AppId(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::guid>(arg);

            self->obj.AppId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_SupportUrl(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportUrl());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_SupportUrl(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.SupportUrl(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_SoftwareVersion(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SoftwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_SoftwareVersion(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SoftwareVersion(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_ModelNumber(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ModelNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_ModelNumber(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.ModelNumber(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_IsEnabled(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynAboutData_put_IsEnabled(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynAboutData_get_AppNames(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppNames());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutData_get_Manufacturers(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Manufacturers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutData_get_Descriptions(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Descriptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynAboutData(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynAboutData>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynAboutData[] = {
        { "_from", (PyCFunction)_from_AllJoynAboutData, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynAboutData[] = {
        { const_cast<char*>("default_description"), (getter)AllJoynAboutData_get_DefaultDescription, (setter)AllJoynAboutData_put_DefaultDescription, nullptr, nullptr },
        { const_cast<char*>("default_app_name"), (getter)AllJoynAboutData_get_DefaultAppName, (setter)AllJoynAboutData_put_DefaultAppName, nullptr, nullptr },
        { const_cast<char*>("date_of_manufacture"), (getter)AllJoynAboutData_get_DateOfManufacture, (setter)AllJoynAboutData_put_DateOfManufacture, nullptr, nullptr },
        { const_cast<char*>("default_manufacturer"), (getter)AllJoynAboutData_get_DefaultManufacturer, (setter)AllJoynAboutData_put_DefaultManufacturer, nullptr, nullptr },
        { const_cast<char*>("app_id"), (getter)AllJoynAboutData_get_AppId, (setter)AllJoynAboutData_put_AppId, nullptr, nullptr },
        { const_cast<char*>("support_url"), (getter)AllJoynAboutData_get_SupportUrl, (setter)AllJoynAboutData_put_SupportUrl, nullptr, nullptr },
        { const_cast<char*>("software_version"), (getter)AllJoynAboutData_get_SoftwareVersion, (setter)AllJoynAboutData_put_SoftwareVersion, nullptr, nullptr },
        { const_cast<char*>("model_number"), (getter)AllJoynAboutData_get_ModelNumber, (setter)AllJoynAboutData_put_ModelNumber, nullptr, nullptr },
        { const_cast<char*>("is_enabled"), (getter)AllJoynAboutData_get_IsEnabled, (setter)AllJoynAboutData_put_IsEnabled, nullptr, nullptr },
        { const_cast<char*>("app_names"), (getter)AllJoynAboutData_get_AppNames, nullptr, nullptr, nullptr },
        { const_cast<char*>("manufacturers"), (getter)AllJoynAboutData_get_Manufacturers, nullptr, nullptr, nullptr },
        { const_cast<char*>("descriptions"), (getter)AllJoynAboutData_get_Descriptions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynAboutData[] = 
    {
        { Py_tp_new, _new_AllJoynAboutData },
        { Py_tp_dealloc, _dealloc_AllJoynAboutData },
        { Py_tp_methods, _methods_AllJoynAboutData },
        { Py_tp_getset, _getset_AllJoynAboutData },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynAboutData =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynAboutData",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutData),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynAboutData
    };

    // ----- AllJoynAboutDataView class --------------------
    constexpr const char* const _type_name_AllJoynAboutDataView = "AllJoynAboutDataView";

    static PyObject* _new_AllJoynAboutDataView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynAboutDataView);
        return nullptr;
    }

    static void _dealloc_AllJoynAboutDataView(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynAboutDataView_GetDataBySessionPortAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment>(args, 1);
                auto param2 = py::convert_to<uint16_t>(args, 2);

                return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynAboutDataView::GetDataBySessionPortAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment>(args, 1);
                auto param2 = py::convert_to<uint16_t>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Globalization::Language>(args, 3);

                return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynAboutDataView::GetDataBySessionPortAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_AJSoftwareVersion(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AJSoftwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_AppId(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_AppName(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_DateOfManufacture(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DateOfManufacture());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_DefaultLanguage(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_Description(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_DeviceId(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_DeviceName(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_HardwareVersion(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HardwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_Manufacturer(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Manufacturer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_ModelNumber(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ModelNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_Properties(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_SoftwareVersion(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SoftwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_Status(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_SupportUrl(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportUrl());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAboutDataView_get_SupportedLanguages(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedLanguages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynAboutDataView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynAboutDataView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynAboutDataView[] = {
        { "get_data_by_session_port_async", (PyCFunction)AllJoynAboutDataView_GetDataBySessionPortAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_AllJoynAboutDataView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynAboutDataView[] = {
        { const_cast<char*>("a_j_software_version"), (getter)AllJoynAboutDataView_get_AJSoftwareVersion, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_id"), (getter)AllJoynAboutDataView_get_AppId, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_name"), (getter)AllJoynAboutDataView_get_AppName, nullptr, nullptr, nullptr },
        { const_cast<char*>("date_of_manufacture"), (getter)AllJoynAboutDataView_get_DateOfManufacture, nullptr, nullptr, nullptr },
        { const_cast<char*>("default_language"), (getter)AllJoynAboutDataView_get_DefaultLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("description"), (getter)AllJoynAboutDataView_get_Description, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)AllJoynAboutDataView_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_name"), (getter)AllJoynAboutDataView_get_DeviceName, nullptr, nullptr, nullptr },
        { const_cast<char*>("hardware_version"), (getter)AllJoynAboutDataView_get_HardwareVersion, nullptr, nullptr, nullptr },
        { const_cast<char*>("manufacturer"), (getter)AllJoynAboutDataView_get_Manufacturer, nullptr, nullptr, nullptr },
        { const_cast<char*>("model_number"), (getter)AllJoynAboutDataView_get_ModelNumber, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)AllJoynAboutDataView_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("software_version"), (getter)AllJoynAboutDataView_get_SoftwareVersion, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)AllJoynAboutDataView_get_Status, nullptr, nullptr, nullptr },
        { const_cast<char*>("support_url"), (getter)AllJoynAboutDataView_get_SupportUrl, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_languages"), (getter)AllJoynAboutDataView_get_SupportedLanguages, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynAboutDataView[] = 
    {
        { Py_tp_new, _new_AllJoynAboutDataView },
        { Py_tp_dealloc, _dealloc_AllJoynAboutDataView },
        { Py_tp_methods, _methods_AllJoynAboutDataView },
        { Py_tp_getset, _getset_AllJoynAboutDataView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynAboutDataView =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynAboutDataView",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynAboutDataView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynAboutDataView
    };

    // ----- AllJoynAcceptSessionJoinerEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynAcceptSessionJoinerEventArgs = "AllJoynAcceptSessionJoinerEventArgs";

    static PyObject* _new_AllJoynAcceptSessionJoinerEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynTrafficType>(args, 2);
                auto param3 = py::convert_to<uint8_t>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner>(args, 4);

                winrt::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs instance{ param0, param1, param2, param3, param4 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynAcceptSessionJoinerEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynAcceptSessionJoinerEventArgs_Accept(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Accept();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynAcceptSessionJoinerEventArgs_get_SameNetwork(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SameNetwork());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAcceptSessionJoinerEventArgs_get_SamePhysicalNode(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SamePhysicalNode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAcceptSessionJoinerEventArgs_get_SessionPort(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SessionPort());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAcceptSessionJoinerEventArgs_get_TrafficType(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TrafficType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAcceptSessionJoinerEventArgs_get_UniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynAcceptSessionJoinerEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynAcceptSessionJoinerEventArgs[] = {
        { "accept", (PyCFunction)AllJoynAcceptSessionJoinerEventArgs_Accept, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AllJoynAcceptSessionJoinerEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynAcceptSessionJoinerEventArgs[] = {
        { const_cast<char*>("same_network"), (getter)AllJoynAcceptSessionJoinerEventArgs_get_SameNetwork, nullptr, nullptr, nullptr },
        { const_cast<char*>("same_physical_node"), (getter)AllJoynAcceptSessionJoinerEventArgs_get_SamePhysicalNode, nullptr, nullptr, nullptr },
        { const_cast<char*>("session_port"), (getter)AllJoynAcceptSessionJoinerEventArgs_get_SessionPort, nullptr, nullptr, nullptr },
        { const_cast<char*>("traffic_type"), (getter)AllJoynAcceptSessionJoinerEventArgs_get_TrafficType, nullptr, nullptr, nullptr },
        { const_cast<char*>("unique_name"), (getter)AllJoynAcceptSessionJoinerEventArgs_get_UniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynAcceptSessionJoinerEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynAcceptSessionJoinerEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynAcceptSessionJoinerEventArgs },
        { Py_tp_methods, _methods_AllJoynAcceptSessionJoinerEventArgs },
        { Py_tp_getset, _getset_AllJoynAcceptSessionJoinerEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynAcceptSessionJoinerEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynAcceptSessionJoinerEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynAcceptSessionJoinerEventArgs
    };

    // ----- AllJoynAuthenticationCompleteEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynAuthenticationCompleteEventArgs = "AllJoynAuthenticationCompleteEventArgs";

    static PyObject* _new_AllJoynAuthenticationCompleteEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynAuthenticationCompleteEventArgs);
        return nullptr;
    }

    static void _dealloc_AllJoynAuthenticationCompleteEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynAuthenticationCompleteEventArgs_get_AuthenticationMechanism(py::wrapper::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AuthenticationMechanism());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAuthenticationCompleteEventArgs_get_PeerUniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerUniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynAuthenticationCompleteEventArgs_get_Succeeded(py::wrapper::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Succeeded());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynAuthenticationCompleteEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynAuthenticationCompleteEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynAuthenticationCompleteEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynAuthenticationCompleteEventArgs[] = {
        { const_cast<char*>("authentication_mechanism"), (getter)AllJoynAuthenticationCompleteEventArgs_get_AuthenticationMechanism, nullptr, nullptr, nullptr },
        { const_cast<char*>("peer_unique_name"), (getter)AllJoynAuthenticationCompleteEventArgs_get_PeerUniqueName, nullptr, nullptr, nullptr },
        { const_cast<char*>("succeeded"), (getter)AllJoynAuthenticationCompleteEventArgs_get_Succeeded, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynAuthenticationCompleteEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynAuthenticationCompleteEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynAuthenticationCompleteEventArgs },
        { Py_tp_methods, _methods_AllJoynAuthenticationCompleteEventArgs },
        { Py_tp_getset, _getset_AllJoynAuthenticationCompleteEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynAuthenticationCompleteEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynAuthenticationCompleteEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynAuthenticationCompleteEventArgs
    };

    // ----- AllJoynBusAttachment class --------------------
    constexpr const char* const _type_name_AllJoynBusAttachment = "AllJoynBusAttachment";

    static PyObject* _new_AllJoynBusAttachment(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynBusAttachment(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynBusAttachment_Connect(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Connect();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_Disconnect(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Disconnect();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_GetAboutDataAsync(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo>(args, 0);

                return py::convert(self->obj.GetAboutDataAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Globalization::Language>(args, 1);

                return py::convert(self->obj.GetAboutDataAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_GetWatcher(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment::GetWatcher(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_PingAsync(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.PingAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_get_AboutData(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AboutData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_get_AuthenticationMechanisms(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AuthenticationMechanisms());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_get_ConnectionSpecification(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionSpecification());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_get_State(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_get_UniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_add_AuthenticationComplete(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment, winrt::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs>>(arg);

            return py::convert(self->obj.AuthenticationComplete(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_remove_AuthenticationComplete(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AuthenticationComplete(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_add_CredentialsRequested(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment, winrt::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs>>(arg);

            return py::convert(self->obj.CredentialsRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_remove_CredentialsRequested(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CredentialsRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_add_CredentialsVerificationRequested(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment, winrt::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs>>(arg);

            return py::convert(self->obj.CredentialsVerificationRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_remove_CredentialsVerificationRequested(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CredentialsVerificationRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_add_StateChanged(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment, winrt::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs>>(arg);

            return py::convert(self->obj.StateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_remove_StateChanged(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_add_AcceptSessionJoinerRequested(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment, winrt::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs>>(arg);

            return py::convert(self->obj.AcceptSessionJoinerRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_remove_AcceptSessionJoinerRequested(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AcceptSessionJoinerRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_add_SessionJoined(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment, winrt::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs>>(arg);

            return py::convert(self->obj.SessionJoined(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachment_remove_SessionJoined(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.SessionJoined(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynBusAttachment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynBusAttachment[] = {
        { "connect", (PyCFunction)AllJoynBusAttachment_Connect, METH_VARARGS, nullptr },
        { "disconnect", (PyCFunction)AllJoynBusAttachment_Disconnect, METH_VARARGS, nullptr },
        { "get_about_data_async", (PyCFunction)AllJoynBusAttachment_GetAboutDataAsync, METH_VARARGS, nullptr },
        { "get_default", (PyCFunction)AllJoynBusAttachment_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "get_watcher", (PyCFunction)AllJoynBusAttachment_GetWatcher, METH_VARARGS | METH_STATIC, nullptr },
        { "ping_async", (PyCFunction)AllJoynBusAttachment_PingAsync, METH_VARARGS, nullptr },
        { "add_authentication_complete", (PyCFunction)AllJoynBusAttachment_add_AuthenticationComplete, METH_O, nullptr },
        { "remove_authentication_complete", (PyCFunction)AllJoynBusAttachment_remove_AuthenticationComplete, METH_O, nullptr },
        { "add_credentials_requested", (PyCFunction)AllJoynBusAttachment_add_CredentialsRequested, METH_O, nullptr },
        { "remove_credentials_requested", (PyCFunction)AllJoynBusAttachment_remove_CredentialsRequested, METH_O, nullptr },
        { "add_credentials_verification_requested", (PyCFunction)AllJoynBusAttachment_add_CredentialsVerificationRequested, METH_O, nullptr },
        { "remove_credentials_verification_requested", (PyCFunction)AllJoynBusAttachment_remove_CredentialsVerificationRequested, METH_O, nullptr },
        { "add_state_changed", (PyCFunction)AllJoynBusAttachment_add_StateChanged, METH_O, nullptr },
        { "remove_state_changed", (PyCFunction)AllJoynBusAttachment_remove_StateChanged, METH_O, nullptr },
        { "add_accept_session_joiner_requested", (PyCFunction)AllJoynBusAttachment_add_AcceptSessionJoinerRequested, METH_O, nullptr },
        { "remove_accept_session_joiner_requested", (PyCFunction)AllJoynBusAttachment_remove_AcceptSessionJoinerRequested, METH_O, nullptr },
        { "add_session_joined", (PyCFunction)AllJoynBusAttachment_add_SessionJoined, METH_O, nullptr },
        { "remove_session_joined", (PyCFunction)AllJoynBusAttachment_remove_SessionJoined, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AllJoynBusAttachment, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynBusAttachment[] = {
        { const_cast<char*>("about_data"), (getter)AllJoynBusAttachment_get_AboutData, nullptr, nullptr, nullptr },
        { const_cast<char*>("authentication_mechanisms"), (getter)AllJoynBusAttachment_get_AuthenticationMechanisms, nullptr, nullptr, nullptr },
        { const_cast<char*>("connection_specification"), (getter)AllJoynBusAttachment_get_ConnectionSpecification, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)AllJoynBusAttachment_get_State, nullptr, nullptr, nullptr },
        { const_cast<char*>("unique_name"), (getter)AllJoynBusAttachment_get_UniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynBusAttachment[] = 
    {
        { Py_tp_new, _new_AllJoynBusAttachment },
        { Py_tp_dealloc, _dealloc_AllJoynBusAttachment },
        { Py_tp_methods, _methods_AllJoynBusAttachment },
        { Py_tp_getset, _getset_AllJoynBusAttachment },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynBusAttachment =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynBusAttachment",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynBusAttachment
    };

    // ----- AllJoynBusAttachmentStateChangedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynBusAttachmentStateChangedEventArgs = "AllJoynBusAttachmentStateChangedEventArgs";

    static PyObject* _new_AllJoynBusAttachmentStateChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynBusAttachmentStateChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_AllJoynBusAttachmentStateChangedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynBusAttachmentStateChangedEventArgs_get_State(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusAttachmentStateChangedEventArgs_get_Status(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynBusAttachmentStateChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynBusAttachmentStateChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynBusAttachmentStateChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynBusAttachmentStateChangedEventArgs[] = {
        { const_cast<char*>("state"), (getter)AllJoynBusAttachmentStateChangedEventArgs_get_State, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)AllJoynBusAttachmentStateChangedEventArgs_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynBusAttachmentStateChangedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynBusAttachmentStateChangedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynBusAttachmentStateChangedEventArgs },
        { Py_tp_methods, _methods_AllJoynBusAttachmentStateChangedEventArgs },
        { Py_tp_getset, _getset_AllJoynBusAttachmentStateChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynBusAttachmentStateChangedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynBusAttachmentStateChangedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynBusAttachmentStateChangedEventArgs
    };

    // ----- AllJoynBusObject class --------------------
    constexpr const char* const _type_name_AllJoynBusObject = "AllJoynBusObject";

    static PyObject* _new_AllJoynBusObject(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynBusObject instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment>(args, 1);

                winrt::Windows::Devices::AllJoyn::AllJoynBusObject instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::AllJoyn::AllJoynBusObject instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynBusObject(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynBusObject_AddProducer(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::IAllJoynProducer>(args, 0);

                self->obj.AddProducer(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusObject_Start(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusObject_Stop(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynBusObject_get_BusAttachment(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BusAttachment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusObject_get_Session(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Session());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusObject_add_Stopped(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynBusObject, winrt::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs>>(arg);

            return py::convert(self->obj.Stopped(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynBusObject_remove_Stopped(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Stopped(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynBusObject(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynBusObject>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynBusObject[] = {
        { "add_producer", (PyCFunction)AllJoynBusObject_AddProducer, METH_VARARGS, nullptr },
        { "start", (PyCFunction)AllJoynBusObject_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)AllJoynBusObject_Stop, METH_VARARGS, nullptr },
        { "add_stopped", (PyCFunction)AllJoynBusObject_add_Stopped, METH_O, nullptr },
        { "remove_stopped", (PyCFunction)AllJoynBusObject_remove_Stopped, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AllJoynBusObject, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynBusObject[] = {
        { const_cast<char*>("bus_attachment"), (getter)AllJoynBusObject_get_BusAttachment, nullptr, nullptr, nullptr },
        { const_cast<char*>("session"), (getter)AllJoynBusObject_get_Session, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynBusObject[] = 
    {
        { Py_tp_new, _new_AllJoynBusObject },
        { Py_tp_dealloc, _dealloc_AllJoynBusObject },
        { Py_tp_methods, _methods_AllJoynBusObject },
        { Py_tp_getset, _getset_AllJoynBusObject },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynBusObject =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynBusObject",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObject),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynBusObject
    };

    // ----- AllJoynBusObjectStoppedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynBusObjectStoppedEventArgs = "AllJoynBusObjectStoppedEventArgs";

    static PyObject* _new_AllJoynBusObjectStoppedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynBusObjectStoppedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynBusObjectStoppedEventArgs_get_Status(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynBusObjectStoppedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynBusObjectStoppedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynBusObjectStoppedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynBusObjectStoppedEventArgs[] = {
        { const_cast<char*>("status"), (getter)AllJoynBusObjectStoppedEventArgs_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynBusObjectStoppedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynBusObjectStoppedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynBusObjectStoppedEventArgs },
        { Py_tp_methods, _methods_AllJoynBusObjectStoppedEventArgs },
        { Py_tp_getset, _getset_AllJoynBusObjectStoppedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynBusObjectStoppedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynBusObjectStoppedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynBusObjectStoppedEventArgs
    };

    // ----- AllJoynCredentials class --------------------
    constexpr const char* const _type_name_AllJoynCredentials = "AllJoynCredentials";

    static PyObject* _new_AllJoynCredentials(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynCredentials);
        return nullptr;
    }

    static void _dealloc_AllJoynCredentials(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynCredentials_get_Timeout(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timeout());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynCredentials_put_Timeout(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.Timeout(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynCredentials_get_PasswordCredential(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PasswordCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynCredentials_put_PasswordCredential(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(arg);

            self->obj.PasswordCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynCredentials_get_Certificate(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Certificate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AllJoynCredentials_put_Certificate(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Cryptography::Certificates::Certificate>(arg);

            self->obj.Certificate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AllJoynCredentials_get_AuthenticationMechanism(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AuthenticationMechanism());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynCredentials(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynCredentials>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynCredentials[] = {
        { "_from", (PyCFunction)_from_AllJoynCredentials, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynCredentials[] = {
        { const_cast<char*>("timeout"), (getter)AllJoynCredentials_get_Timeout, (setter)AllJoynCredentials_put_Timeout, nullptr, nullptr },
        { const_cast<char*>("password_credential"), (getter)AllJoynCredentials_get_PasswordCredential, (setter)AllJoynCredentials_put_PasswordCredential, nullptr, nullptr },
        { const_cast<char*>("certificate"), (getter)AllJoynCredentials_get_Certificate, (setter)AllJoynCredentials_put_Certificate, nullptr, nullptr },
        { const_cast<char*>("authentication_mechanism"), (getter)AllJoynCredentials_get_AuthenticationMechanism, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynCredentials[] = 
    {
        { Py_tp_new, _new_AllJoynCredentials },
        { Py_tp_dealloc, _dealloc_AllJoynCredentials },
        { Py_tp_methods, _methods_AllJoynCredentials },
        { Py_tp_getset, _getset_AllJoynCredentials },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynCredentials =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynCredentials",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentials),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynCredentials
    };

    // ----- AllJoynCredentialsRequestedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynCredentialsRequestedEventArgs = "AllJoynCredentialsRequestedEventArgs";

    static PyObject* _new_AllJoynCredentialsRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynCredentialsRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_AllJoynCredentialsRequestedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynCredentialsRequestedEventArgs_GetDeferral(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsRequestedEventArgs_get_AttemptCount(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AttemptCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsRequestedEventArgs_get_Credentials(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Credentials());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsRequestedEventArgs_get_PeerUniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerUniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsRequestedEventArgs_get_RequestedUserName(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequestedUserName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynCredentialsRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynCredentialsRequestedEventArgs[] = {
        { "get_deferral", (PyCFunction)AllJoynCredentialsRequestedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AllJoynCredentialsRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynCredentialsRequestedEventArgs[] = {
        { const_cast<char*>("attempt_count"), (getter)AllJoynCredentialsRequestedEventArgs_get_AttemptCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("credentials"), (getter)AllJoynCredentialsRequestedEventArgs_get_Credentials, nullptr, nullptr, nullptr },
        { const_cast<char*>("peer_unique_name"), (getter)AllJoynCredentialsRequestedEventArgs_get_PeerUniqueName, nullptr, nullptr, nullptr },
        { const_cast<char*>("requested_user_name"), (getter)AllJoynCredentialsRequestedEventArgs_get_RequestedUserName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynCredentialsRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynCredentialsRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynCredentialsRequestedEventArgs },
        { Py_tp_methods, _methods_AllJoynCredentialsRequestedEventArgs },
        { Py_tp_getset, _getset_AllJoynCredentialsRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynCredentialsRequestedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynCredentialsRequestedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynCredentialsRequestedEventArgs
    };

    // ----- AllJoynCredentialsVerificationRequestedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynCredentialsVerificationRequestedEventArgs = "AllJoynCredentialsVerificationRequestedEventArgs";

    static PyObject* _new_AllJoynCredentialsVerificationRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynCredentialsVerificationRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_AllJoynCredentialsVerificationRequestedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_Accept(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Accept();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_GetDeferral(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_get_AuthenticationMechanism(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AuthenticationMechanism());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_get_PeerCertificate(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerCertificate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_get_PeerCertificateErrorSeverity(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerCertificateErrorSeverity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_get_PeerCertificateErrors(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerCertificateErrors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_get_PeerIntermediateCertificates(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerIntermediateCertificates());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynCredentialsVerificationRequestedEventArgs_get_PeerUniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerUniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynCredentialsVerificationRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynCredentialsVerificationRequestedEventArgs[] = {
        { "accept", (PyCFunction)AllJoynCredentialsVerificationRequestedEventArgs_Accept, METH_VARARGS, nullptr },
        { "get_deferral", (PyCFunction)AllJoynCredentialsVerificationRequestedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AllJoynCredentialsVerificationRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynCredentialsVerificationRequestedEventArgs[] = {
        { const_cast<char*>("authentication_mechanism"), (getter)AllJoynCredentialsVerificationRequestedEventArgs_get_AuthenticationMechanism, nullptr, nullptr, nullptr },
        { const_cast<char*>("peer_certificate"), (getter)AllJoynCredentialsVerificationRequestedEventArgs_get_PeerCertificate, nullptr, nullptr, nullptr },
        { const_cast<char*>("peer_certificate_error_severity"), (getter)AllJoynCredentialsVerificationRequestedEventArgs_get_PeerCertificateErrorSeverity, nullptr, nullptr, nullptr },
        { const_cast<char*>("peer_certificate_errors"), (getter)AllJoynCredentialsVerificationRequestedEventArgs_get_PeerCertificateErrors, nullptr, nullptr, nullptr },
        { const_cast<char*>("peer_intermediate_certificates"), (getter)AllJoynCredentialsVerificationRequestedEventArgs_get_PeerIntermediateCertificates, nullptr, nullptr, nullptr },
        { const_cast<char*>("peer_unique_name"), (getter)AllJoynCredentialsVerificationRequestedEventArgs_get_PeerUniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynCredentialsVerificationRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynCredentialsVerificationRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynCredentialsVerificationRequestedEventArgs },
        { Py_tp_methods, _methods_AllJoynCredentialsVerificationRequestedEventArgs },
        { Py_tp_getset, _getset_AllJoynCredentialsVerificationRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynCredentialsVerificationRequestedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynCredentialsVerificationRequestedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynCredentialsVerificationRequestedEventArgs
    };

    // ----- AllJoynMessageInfo class --------------------
    constexpr const char* const _type_name_AllJoynMessageInfo = "AllJoynMessageInfo";

    static PyObject* _new_AllJoynMessageInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynMessageInfo instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynMessageInfo(py::wrapper::Windows::Devices::AllJoyn::AllJoynMessageInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynMessageInfo_get_SenderUniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynMessageInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SenderUniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynMessageInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynMessageInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynMessageInfo[] = {
        { "_from", (PyCFunction)_from_AllJoynMessageInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynMessageInfo[] = {
        { const_cast<char*>("sender_unique_name"), (getter)AllJoynMessageInfo_get_SenderUniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynMessageInfo[] = 
    {
        { Py_tp_new, _new_AllJoynMessageInfo },
        { Py_tp_dealloc, _dealloc_AllJoynMessageInfo },
        { Py_tp_methods, _methods_AllJoynMessageInfo },
        { Py_tp_getset, _getset_AllJoynMessageInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynMessageInfo =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynMessageInfo",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynMessageInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynMessageInfo
    };

    // ----- AllJoynProducerStoppedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynProducerStoppedEventArgs = "AllJoynProducerStoppedEventArgs";

    static PyObject* _new_AllJoynProducerStoppedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynProducerStoppedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynProducerStoppedEventArgs_get_Status(py::wrapper::Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynProducerStoppedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynProducerStoppedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynProducerStoppedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynProducerStoppedEventArgs[] = {
        { const_cast<char*>("status"), (getter)AllJoynProducerStoppedEventArgs_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynProducerStoppedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynProducerStoppedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynProducerStoppedEventArgs },
        { Py_tp_methods, _methods_AllJoynProducerStoppedEventArgs },
        { Py_tp_getset, _getset_AllJoynProducerStoppedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynProducerStoppedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynProducerStoppedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynProducerStoppedEventArgs
    };

    // ----- AllJoynServiceInfo class --------------------
    constexpr const char* const _type_name_AllJoynServiceInfo = "AllJoynServiceInfo";

    static PyObject* _new_AllJoynServiceInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<uint16_t>(args, 2);

                winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynServiceInfo(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynServiceInfo_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynServiceInfo_get_ObjectPath(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ObjectPath());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynServiceInfo_get_SessionPort(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SessionPort());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynServiceInfo_get_UniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynServiceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynServiceInfo[] = {
        { "from_id_async", (PyCFunction)AllJoynServiceInfo_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_AllJoynServiceInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynServiceInfo[] = {
        { const_cast<char*>("object_path"), (getter)AllJoynServiceInfo_get_ObjectPath, nullptr, nullptr, nullptr },
        { const_cast<char*>("session_port"), (getter)AllJoynServiceInfo_get_SessionPort, nullptr, nullptr, nullptr },
        { const_cast<char*>("unique_name"), (getter)AllJoynServiceInfo_get_UniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynServiceInfo[] = 
    {
        { Py_tp_new, _new_AllJoynServiceInfo },
        { Py_tp_dealloc, _dealloc_AllJoynServiceInfo },
        { Py_tp_methods, _methods_AllJoynServiceInfo },
        { Py_tp_getset, _getset_AllJoynServiceInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynServiceInfo =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynServiceInfo",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynServiceInfo
    };

    // ----- AllJoynServiceInfoRemovedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynServiceInfoRemovedEventArgs = "AllJoynServiceInfoRemovedEventArgs";

    static PyObject* _new_AllJoynServiceInfoRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynServiceInfoRemovedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynServiceInfoRemovedEventArgs_get_UniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynServiceInfoRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynServiceInfoRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynServiceInfoRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynServiceInfoRemovedEventArgs[] = {
        { const_cast<char*>("unique_name"), (getter)AllJoynServiceInfoRemovedEventArgs_get_UniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynServiceInfoRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynServiceInfoRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynServiceInfoRemovedEventArgs },
        { Py_tp_methods, _methods_AllJoynServiceInfoRemovedEventArgs },
        { Py_tp_getset, _getset_AllJoynServiceInfoRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynServiceInfoRemovedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynServiceInfoRemovedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynServiceInfoRemovedEventArgs
    };

    // ----- AllJoynSession class --------------------
    constexpr const char* const _type_name_AllJoynSession = "AllJoynSession";

    static PyObject* _new_AllJoynSession(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynSession);
        return nullptr;
    }

    static void _dealloc_AllJoynSession(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynSession_GetFromServiceInfoAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo>(args, 0);

                return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynSession::GetFromServiceInfoAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment>(args, 1);

                return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynSession::GetFromServiceInfoAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_RemoveMemberAsync(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.RemoveMemberAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_get_Id(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_get_Status(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_add_Lost(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynSession, winrt::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs>>(arg);

            return py::convert(self->obj.Lost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_remove_Lost(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Lost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_add_MemberAdded(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynSession, winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs>>(arg);

            return py::convert(self->obj.MemberAdded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_remove_MemberAdded(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MemberAdded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_add_MemberRemoved(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::AllJoyn::AllJoynSession, winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs>>(arg);

            return py::convert(self->obj.MemberRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynSession_remove_MemberRemoved(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MemberRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynSession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynSession>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynSession[] = {
        { "get_from_service_info_async", (PyCFunction)AllJoynSession_GetFromServiceInfoAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "remove_member_async", (PyCFunction)AllJoynSession_RemoveMemberAsync, METH_VARARGS, nullptr },
        { "add_lost", (PyCFunction)AllJoynSession_add_Lost, METH_O, nullptr },
        { "remove_lost", (PyCFunction)AllJoynSession_remove_Lost, METH_O, nullptr },
        { "add_member_added", (PyCFunction)AllJoynSession_add_MemberAdded, METH_O, nullptr },
        { "remove_member_added", (PyCFunction)AllJoynSession_remove_MemberAdded, METH_O, nullptr },
        { "add_member_removed", (PyCFunction)AllJoynSession_add_MemberRemoved, METH_O, nullptr },
        { "remove_member_removed", (PyCFunction)AllJoynSession_remove_MemberRemoved, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AllJoynSession, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynSession[] = {
        { const_cast<char*>("id"), (getter)AllJoynSession_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)AllJoynSession_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynSession[] = 
    {
        { Py_tp_new, _new_AllJoynSession },
        { Py_tp_dealloc, _dealloc_AllJoynSession },
        { Py_tp_methods, _methods_AllJoynSession },
        { Py_tp_getset, _getset_AllJoynSession },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynSession =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynSession",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynSession),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynSession
    };

    // ----- AllJoynSessionJoinedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynSessionJoinedEventArgs = "AllJoynSessionJoinedEventArgs";

    static PyObject* _new_AllJoynSessionJoinedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynSession>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynSessionJoinedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynSessionJoinedEventArgs_get_Session(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Session());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynSessionJoinedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynSessionJoinedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynSessionJoinedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynSessionJoinedEventArgs[] = {
        { const_cast<char*>("session"), (getter)AllJoynSessionJoinedEventArgs_get_Session, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynSessionJoinedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynSessionJoinedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynSessionJoinedEventArgs },
        { Py_tp_methods, _methods_AllJoynSessionJoinedEventArgs },
        { Py_tp_getset, _getset_AllJoynSessionJoinedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynSessionJoinedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynSessionJoinedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynSessionJoinedEventArgs
    };

    // ----- AllJoynSessionLostEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynSessionLostEventArgs = "AllJoynSessionLostEventArgs";

    static PyObject* _new_AllJoynSessionLostEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynSessionLostReason>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynSessionLostEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynSessionLostEventArgs_get_Reason(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynSessionLostEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynSessionLostEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynSessionLostEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynSessionLostEventArgs[] = {
        { const_cast<char*>("reason"), (getter)AllJoynSessionLostEventArgs_get_Reason, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynSessionLostEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynSessionLostEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynSessionLostEventArgs },
        { Py_tp_methods, _methods_AllJoynSessionLostEventArgs },
        { Py_tp_getset, _getset_AllJoynSessionLostEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynSessionLostEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynSessionLostEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynSessionLostEventArgs
    };

    // ----- AllJoynSessionMemberAddedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynSessionMemberAddedEventArgs = "AllJoynSessionMemberAddedEventArgs";

    static PyObject* _new_AllJoynSessionMemberAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynSessionMemberAddedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynSessionMemberAddedEventArgs_get_UniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynSessionMemberAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynSessionMemberAddedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynSessionMemberAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynSessionMemberAddedEventArgs[] = {
        { const_cast<char*>("unique_name"), (getter)AllJoynSessionMemberAddedEventArgs_get_UniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynSessionMemberAddedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynSessionMemberAddedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynSessionMemberAddedEventArgs },
        { Py_tp_methods, _methods_AllJoynSessionMemberAddedEventArgs },
        { Py_tp_getset, _getset_AllJoynSessionMemberAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynSessionMemberAddedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynSessionMemberAddedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynSessionMemberAddedEventArgs
    };

    // ----- AllJoynSessionMemberRemovedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynSessionMemberRemovedEventArgs = "AllJoynSessionMemberRemovedEventArgs";

    static PyObject* _new_AllJoynSessionMemberRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynSessionMemberRemovedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynSessionMemberRemovedEventArgs_get_UniqueName(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UniqueName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynSessionMemberRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynSessionMemberRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynSessionMemberRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynSessionMemberRemovedEventArgs[] = {
        { const_cast<char*>("unique_name"), (getter)AllJoynSessionMemberRemovedEventArgs_get_UniqueName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynSessionMemberRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynSessionMemberRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynSessionMemberRemovedEventArgs },
        { Py_tp_methods, _methods_AllJoynSessionMemberRemovedEventArgs },
        { Py_tp_getset, _getset_AllJoynSessionMemberRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynSessionMemberRemovedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynSessionMemberRemovedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynSessionMemberRemovedEventArgs
    };

    // ----- AllJoynStatus class --------------------
    constexpr const char* const _type_name_AllJoynStatus = "AllJoynStatus";

    static PyObject* _new_AllJoynStatus(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AllJoynStatus);
        return nullptr;
    }

    static PyObject* AllJoynStatus_get_AuthenticationFailed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::AuthenticationFailed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_AuthenticationRejectedByUser(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::AuthenticationRejectedByUser());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_ConnectionRefused(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::ConnectionRefused());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_Fail(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::Fail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InsufficientSecurity(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InsufficientSecurity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument1(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument2(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument3(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument3());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument4(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument4());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument5(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument5());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument6(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument6());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument7(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument7());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_InvalidArgument8(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::InvalidArgument8());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_Ok(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::Ok());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_OperationTimedOut(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::OperationTimedOut());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_OtherEndClosed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::OtherEndClosed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_SslConnectFailed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::SslConnectFailed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AllJoynStatus_get_SslIdentityVerificationFailed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::AllJoyn::AllJoynStatus::SslIdentityVerificationFailed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynStatus[] = {
        { "get_authentication_failed", (PyCFunction)AllJoynStatus_get_AuthenticationFailed, METH_NOARGS | METH_STATIC, nullptr },
        { "get_authentication_rejected_by_user", (PyCFunction)AllJoynStatus_get_AuthenticationRejectedByUser, METH_NOARGS | METH_STATIC, nullptr },
        { "get_connection_refused", (PyCFunction)AllJoynStatus_get_ConnectionRefused, METH_NOARGS | METH_STATIC, nullptr },
        { "get_fail", (PyCFunction)AllJoynStatus_get_Fail, METH_NOARGS | METH_STATIC, nullptr },
        { "get_insufficient_security", (PyCFunction)AllJoynStatus_get_InsufficientSecurity, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument1", (PyCFunction)AllJoynStatus_get_InvalidArgument1, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument2", (PyCFunction)AllJoynStatus_get_InvalidArgument2, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument3", (PyCFunction)AllJoynStatus_get_InvalidArgument3, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument4", (PyCFunction)AllJoynStatus_get_InvalidArgument4, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument5", (PyCFunction)AllJoynStatus_get_InvalidArgument5, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument6", (PyCFunction)AllJoynStatus_get_InvalidArgument6, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument7", (PyCFunction)AllJoynStatus_get_InvalidArgument7, METH_NOARGS | METH_STATIC, nullptr },
        { "get_invalid_argument8", (PyCFunction)AllJoynStatus_get_InvalidArgument8, METH_NOARGS | METH_STATIC, nullptr },
        { "get_ok", (PyCFunction)AllJoynStatus_get_Ok, METH_NOARGS | METH_STATIC, nullptr },
        { "get_operation_timed_out", (PyCFunction)AllJoynStatus_get_OperationTimedOut, METH_NOARGS | METH_STATIC, nullptr },
        { "get_other_end_closed", (PyCFunction)AllJoynStatus_get_OtherEndClosed, METH_NOARGS | METH_STATIC, nullptr },
        { "get_ssl_connect_failed", (PyCFunction)AllJoynStatus_get_SslConnectFailed, METH_NOARGS | METH_STATIC, nullptr },
        { "get_ssl_identity_verification_failed", (PyCFunction)AllJoynStatus_get_SslIdentityVerificationFailed, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynStatus[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynStatus[] = 
    {
        { Py_tp_new, _new_AllJoynStatus },
        { Py_tp_methods, _methods_AllJoynStatus },
        { Py_tp_getset, _getset_AllJoynStatus },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynStatus =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynStatus",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynStatus
    };

    // ----- AllJoynWatcherStoppedEventArgs class --------------------
    constexpr const char* const _type_name_AllJoynWatcherStoppedEventArgs = "AllJoynWatcherStoppedEventArgs";

    static PyObject* _new_AllJoynWatcherStoppedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AllJoynWatcherStoppedEventArgs(py::wrapper::Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AllJoynWatcherStoppedEventArgs_get_Status(py::wrapper::Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AllJoynWatcherStoppedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AllJoynWatcherStoppedEventArgs[] = {
        { "_from", (PyCFunction)_from_AllJoynWatcherStoppedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AllJoynWatcherStoppedEventArgs[] = {
        { const_cast<char*>("status"), (getter)AllJoynWatcherStoppedEventArgs_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AllJoynWatcherStoppedEventArgs[] = 
    {
        { Py_tp_new, _new_AllJoynWatcherStoppedEventArgs },
        { Py_tp_dealloc, _dealloc_AllJoynWatcherStoppedEventArgs },
        { Py_tp_methods, _methods_AllJoynWatcherStoppedEventArgs },
        { Py_tp_getset, _getset_AllJoynWatcherStoppedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AllJoynWatcherStoppedEventArgs =
    {
        "_winrt_Windows_Devices_AllJoyn.AllJoynWatcherStoppedEventArgs",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AllJoynWatcherStoppedEventArgs
    };

    // ----- IAllJoynAcceptSessionJoiner interface --------------------
    constexpr const char* const _type_name_IAllJoynAcceptSessionJoiner = "IAllJoynAcceptSessionJoiner";

    static PyObject* _new_IAllJoynAcceptSessionJoiner(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IAllJoynAcceptSessionJoiner);
        return nullptr;
    }

    static void _dealloc_IAllJoynAcceptSessionJoiner(py::wrapper::Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IAllJoynAcceptSessionJoiner_Accept(py::wrapper::Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Accept();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IAllJoynAcceptSessionJoiner(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IAllJoynAcceptSessionJoiner[] = {
        { "accept", (PyCFunction)IAllJoynAcceptSessionJoiner_Accept, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IAllJoynAcceptSessionJoiner, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IAllJoynAcceptSessionJoiner[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IAllJoynAcceptSessionJoiner[] = 
    {
        { Py_tp_new, _new_IAllJoynAcceptSessionJoiner },
        { Py_tp_dealloc, _dealloc_IAllJoynAcceptSessionJoiner },
        { Py_tp_methods, _methods_IAllJoynAcceptSessionJoiner },
        { Py_tp_getset, _getset_IAllJoynAcceptSessionJoiner },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IAllJoynAcceptSessionJoiner =
    {
        "_winrt_Windows_Devices_AllJoyn.IAllJoynAcceptSessionJoiner",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IAllJoynAcceptSessionJoiner
    };

    // ----- IAllJoynProducer interface --------------------
    constexpr const char* const _type_name_IAllJoynProducer = "IAllJoynProducer";

    static PyObject* _new_IAllJoynProducer(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IAllJoynProducer);
        return nullptr;
    }

    static void _dealloc_IAllJoynProducer(py::wrapper::Windows::Devices::AllJoyn::IAllJoynProducer* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IAllJoynProducer_SetBusObject(py::wrapper::Windows::Devices::AllJoyn::IAllJoynProducer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::AllJoyn::AllJoynBusObject>(args, 0);

                self->obj.SetBusObject(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IAllJoynProducer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::AllJoyn::IAllJoynProducer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IAllJoynProducer[] = {
        { "set_bus_object", (PyCFunction)IAllJoynProducer_SetBusObject, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IAllJoynProducer, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IAllJoynProducer[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IAllJoynProducer[] = 
    {
        { Py_tp_new, _new_IAllJoynProducer },
        { Py_tp_dealloc, _dealloc_IAllJoynProducer },
        { Py_tp_methods, _methods_IAllJoynProducer },
        { Py_tp_getset, _getset_IAllJoynProducer },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IAllJoynProducer =
    {
        "_winrt_Windows_Devices_AllJoyn.IAllJoynProducer",
        sizeof(py::wrapper::Windows::Devices::AllJoyn::IAllJoynProducer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IAllJoynProducer
    };

    // ----- Windows.Devices.AllJoyn Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAboutData>::python_type = py::register_python_type(module, _type_name_AllJoynAboutData, &_type_spec_AllJoynAboutData, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAboutDataView>::python_type = py::register_python_type(module, _type_name_AllJoynAboutDataView, &_type_spec_AllJoynAboutDataView, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynAcceptSessionJoinerEventArgs, &_type_spec_AllJoynAcceptSessionJoinerEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynAuthenticationCompleteEventArgs, &_type_spec_AllJoynAuthenticationCompleteEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachment>::python_type = py::register_python_type(module, _type_name_AllJoynBusAttachment, &_type_spec_AllJoynBusAttachment, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynBusAttachmentStateChangedEventArgs, &_type_spec_AllJoynBusAttachmentStateChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusObject>::python_type = py::register_python_type(module, _type_name_AllJoynBusObject, &_type_spec_AllJoynBusObject, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynBusObjectStoppedEventArgs, &_type_spec_AllJoynBusObjectStoppedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynCredentials>::python_type = py::register_python_type(module, _type_name_AllJoynCredentials, &_type_spec_AllJoynCredentials, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynCredentialsRequestedEventArgs, &_type_spec_AllJoynCredentialsRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynCredentialsVerificationRequestedEventArgs, &_type_spec_AllJoynCredentialsVerificationRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynMessageInfo>::python_type = py::register_python_type(module, _type_name_AllJoynMessageInfo, &_type_spec_AllJoynMessageInfo, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynProducerStoppedEventArgs, &_type_spec_AllJoynProducerStoppedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfo>::python_type = py::register_python_type(module, _type_name_AllJoynServiceInfo, &_type_spec_AllJoynServiceInfo, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynServiceInfoRemovedEventArgs, &_type_spec_AllJoynServiceInfoRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSession>::python_type = py::register_python_type(module, _type_name_AllJoynSession, &_type_spec_AllJoynSession, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynSessionJoinedEventArgs, &_type_spec_AllJoynSessionJoinedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynSessionLostEventArgs, &_type_spec_AllJoynSessionLostEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynSessionMemberAddedEventArgs, &_type_spec_AllJoynSessionMemberAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynSessionMemberRemovedEventArgs, &_type_spec_AllJoynSessionMemberRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynStatus>::python_type = py::register_python_type(module, _type_name_AllJoynStatus, &_type_spec_AllJoynStatus, nullptr);
            py::winrt_type<winrt::Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs>::python_type = py::register_python_type(module, _type_name_AllJoynWatcherStoppedEventArgs, &_type_spec_AllJoynWatcherStoppedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner>::python_type = py::register_python_type(module, _type_name_IAllJoynAcceptSessionJoiner, &_type_spec_IAllJoynAcceptSessionJoiner, bases.get());
            py::winrt_type<winrt::Windows::Devices::AllJoyn::IAllJoynProducer>::python_type = py::register_python_type(module, _type_name_IAllJoynProducer, &_type_spec_IAllJoynProducer, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.AllJoyn");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_AllJoyn",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::AllJoyn

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_AllJoyn (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::AllJoyn::module_def);
}
