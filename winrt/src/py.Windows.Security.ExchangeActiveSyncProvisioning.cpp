// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Security.ExchangeActiveSyncProvisioning.h"

PyTypeObject* py::winrt_type<winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation>::python_type;

namespace py::cpp::Windows::Security::ExchangeActiveSyncProvisioning
{
    // ----- EasClientDeviceInformation class --------------------
    constexpr const char* const _type_name_EasClientDeviceInformation = "EasClientDeviceInformation";

    static PyObject* _new_EasClientDeviceInformation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_EasClientDeviceInformation(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* EasClientDeviceInformation_get_FriendlyName(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FriendlyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_Id(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_OperatingSystem(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperatingSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemManufacturer(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemManufacturer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemProductName(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemProductName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemSku(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemSku());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemFirmwareVersion(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemFirmwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemHardwareVersion(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemHardwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_EasClientDeviceInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EasClientDeviceInformation[] = {
        { "_from", (PyCFunction)_from_EasClientDeviceInformation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_EasClientDeviceInformation[] = {
        { const_cast<char*>("friendly_name"), (getter)EasClientDeviceInformation_get_FriendlyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)EasClientDeviceInformation_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("operating_system"), (getter)EasClientDeviceInformation_get_OperatingSystem, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_manufacturer"), (getter)EasClientDeviceInformation_get_SystemManufacturer, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_product_name"), (getter)EasClientDeviceInformation_get_SystemProductName, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_sku"), (getter)EasClientDeviceInformation_get_SystemSku, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_firmware_version"), (getter)EasClientDeviceInformation_get_SystemFirmwareVersion, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_hardware_version"), (getter)EasClientDeviceInformation_get_SystemHardwareVersion, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_EasClientDeviceInformation[] = 
    {
        { Py_tp_new, _new_EasClientDeviceInformation },
        { Py_tp_dealloc, _dealloc_EasClientDeviceInformation },
        { Py_tp_methods, _methods_EasClientDeviceInformation },
        { Py_tp_getset, _getset_EasClientDeviceInformation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_EasClientDeviceInformation =
    {
        "_winrt_Windows_Security_ExchangeActiveSyncProvisioning.EasClientDeviceInformation",
        sizeof(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EasClientDeviceInformation
    };

    // ----- Windows.Security.ExchangeActiveSyncProvisioning Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation>::python_type = py::register_python_type(module, _type_name_EasClientDeviceInformation, &_type_spec_EasClientDeviceInformation, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Security.ExchangeActiveSyncProvisioning");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Security_ExchangeActiveSyncProvisioning",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Security::ExchangeActiveSyncProvisioning

PyMODINIT_FUNC
PyInit__winrt_Windows_Security_ExchangeActiveSyncProvisioning (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Security::ExchangeActiveSyncProvisioning::module_def);
}
