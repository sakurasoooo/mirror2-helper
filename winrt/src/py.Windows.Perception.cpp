// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Perception.h"

PyTypeObject* py::winrt_type<winrt::Windows::Perception::PerceptionTimestamp>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Perception::PerceptionTimestampHelper>::python_type;

namespace py::cpp::Windows::Perception
{
    // ----- PerceptionTimestamp class --------------------
    constexpr const char* const _type_name_PerceptionTimestamp = "PerceptionTimestamp";

    static PyObject* _new_PerceptionTimestamp(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionTimestamp);
        return nullptr;
    }

    static void _dealloc_PerceptionTimestamp(py::wrapper::Windows::Perception::PerceptionTimestamp* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PerceptionTimestamp_get_PredictionAmount(py::wrapper::Windows::Perception::PerceptionTimestamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PredictionAmount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionTimestamp_get_TargetTime(py::wrapper::Windows::Perception::PerceptionTimestamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TargetTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerceptionTimestamp_get_SystemRelativeTargetTime(py::wrapper::Windows::Perception::PerceptionTimestamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeTargetTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PerceptionTimestamp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Perception::PerceptionTimestamp>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionTimestamp[] = {
        { "_from", (PyCFunction)_from_PerceptionTimestamp, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionTimestamp[] = {
        { const_cast<char*>("prediction_amount"), (getter)PerceptionTimestamp_get_PredictionAmount, nullptr, nullptr, nullptr },
        { const_cast<char*>("target_time"), (getter)PerceptionTimestamp_get_TargetTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_target_time"), (getter)PerceptionTimestamp_get_SystemRelativeTargetTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionTimestamp[] = 
    {
        { Py_tp_new, _new_PerceptionTimestamp },
        { Py_tp_dealloc, _dealloc_PerceptionTimestamp },
        { Py_tp_methods, _methods_PerceptionTimestamp },
        { Py_tp_getset, _getset_PerceptionTimestamp },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionTimestamp =
    {
        "_winrt_Windows_Perception.PerceptionTimestamp",
        sizeof(py::wrapper::Windows::Perception::PerceptionTimestamp),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionTimestamp
    };

    // ----- PerceptionTimestampHelper class --------------------
    constexpr const char* const _type_name_PerceptionTimestampHelper = "PerceptionTimestampHelper";

    static PyObject* _new_PerceptionTimestampHelper(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PerceptionTimestampHelper);
        return nullptr;
    }

    static PyObject* PerceptionTimestampHelper_FromHistoricalTargetTime(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 0);

                return py::convert(winrt::Windows::Perception::PerceptionTimestampHelper::FromHistoricalTargetTime(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PerceptionTimestampHelper_FromSystemRelativeTargetTime(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 0);

                return py::convert(winrt::Windows::Perception::PerceptionTimestampHelper::FromSystemRelativeTargetTime(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerceptionTimestampHelper[] = {
        { "from_historical_target_time", (PyCFunction)PerceptionTimestampHelper_FromHistoricalTargetTime, METH_VARARGS | METH_STATIC, nullptr },
        { "from_system_relative_target_time", (PyCFunction)PerceptionTimestampHelper_FromSystemRelativeTargetTime, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PerceptionTimestampHelper[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PerceptionTimestampHelper[] = 
    {
        { Py_tp_new, _new_PerceptionTimestampHelper },
        { Py_tp_methods, _methods_PerceptionTimestampHelper },
        { Py_tp_getset, _getset_PerceptionTimestampHelper },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PerceptionTimestampHelper =
    {
        "_winrt_Windows_Perception.PerceptionTimestampHelper",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerceptionTimestampHelper
    };

    // ----- Windows.Perception Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Perception::PerceptionTimestamp>::python_type = py::register_python_type(module, _type_name_PerceptionTimestamp, &_type_spec_PerceptionTimestamp, bases.get());
            py::winrt_type<winrt::Windows::Perception::PerceptionTimestampHelper>::python_type = py::register_python_type(module, _type_name_PerceptionTimestampHelper, &_type_spec_PerceptionTimestampHelper, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Perception");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Perception",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Perception

PyMODINIT_FUNC
PyInit__winrt_Windows_Perception (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Perception::module_def);
}
