// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Web.UI.h"

PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlContentLoadingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlDeferredPermissionRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlNavigationStartingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlPermissionRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlScriptNotifyEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::IWebViewControl>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Web::UI::IWebViewControl2>::python_type;

namespace py::cpp::Windows::Web::UI
{
    // ----- WebViewControlContentLoadingEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlContentLoadingEventArgs = "WebViewControlContentLoadingEventArgs";

    static PyObject* _new_WebViewControlContentLoadingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlContentLoadingEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlContentLoadingEventArgs(py::wrapper::Windows::Web::UI::WebViewControlContentLoadingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlContentLoadingEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlContentLoadingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlContentLoadingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlContentLoadingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlContentLoadingEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlContentLoadingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlContentLoadingEventArgs[] = {
        { const_cast<char*>("uri"), (getter)WebViewControlContentLoadingEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlContentLoadingEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlContentLoadingEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlContentLoadingEventArgs },
        { Py_tp_methods, _methods_WebViewControlContentLoadingEventArgs },
        { Py_tp_getset, _getset_WebViewControlContentLoadingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlContentLoadingEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlContentLoadingEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlContentLoadingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlContentLoadingEventArgs
    };

    // ----- WebViewControlDOMContentLoadedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlDOMContentLoadedEventArgs = "WebViewControlDOMContentLoadedEventArgs";

    static PyObject* _new_WebViewControlDOMContentLoadedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlDOMContentLoadedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlDOMContentLoadedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlDOMContentLoadedEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlDOMContentLoadedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlDOMContentLoadedEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlDOMContentLoadedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlDOMContentLoadedEventArgs[] = {
        { const_cast<char*>("uri"), (getter)WebViewControlDOMContentLoadedEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlDOMContentLoadedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlDOMContentLoadedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlDOMContentLoadedEventArgs },
        { Py_tp_methods, _methods_WebViewControlDOMContentLoadedEventArgs },
        { Py_tp_getset, _getset_WebViewControlDOMContentLoadedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlDOMContentLoadedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlDOMContentLoadedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlDOMContentLoadedEventArgs
    };

    // ----- WebViewControlDeferredPermissionRequest class --------------------
    constexpr const char* const _type_name_WebViewControlDeferredPermissionRequest = "WebViewControlDeferredPermissionRequest";

    static PyObject* _new_WebViewControlDeferredPermissionRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlDeferredPermissionRequest);
        return nullptr;
    }

    static void _dealloc_WebViewControlDeferredPermissionRequest(py::wrapper::Windows::Web::UI::WebViewControlDeferredPermissionRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlDeferredPermissionRequest_Allow(py::wrapper::Windows::Web::UI::WebViewControlDeferredPermissionRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Allow();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebViewControlDeferredPermissionRequest_Deny(py::wrapper::Windows::Web::UI::WebViewControlDeferredPermissionRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Deny();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebViewControlDeferredPermissionRequest_get_Id(py::wrapper::Windows::Web::UI::WebViewControlDeferredPermissionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlDeferredPermissionRequest_get_PermissionType(py::wrapper::Windows::Web::UI::WebViewControlDeferredPermissionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PermissionType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlDeferredPermissionRequest_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlDeferredPermissionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlDeferredPermissionRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlDeferredPermissionRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlDeferredPermissionRequest[] = {
        { "allow", (PyCFunction)WebViewControlDeferredPermissionRequest_Allow, METH_VARARGS, nullptr },
        { "deny", (PyCFunction)WebViewControlDeferredPermissionRequest_Deny, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebViewControlDeferredPermissionRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlDeferredPermissionRequest[] = {
        { const_cast<char*>("id"), (getter)WebViewControlDeferredPermissionRequest_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("permission_type"), (getter)WebViewControlDeferredPermissionRequest_get_PermissionType, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebViewControlDeferredPermissionRequest_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlDeferredPermissionRequest[] = 
    {
        { Py_tp_new, _new_WebViewControlDeferredPermissionRequest },
        { Py_tp_dealloc, _dealloc_WebViewControlDeferredPermissionRequest },
        { Py_tp_methods, _methods_WebViewControlDeferredPermissionRequest },
        { Py_tp_getset, _getset_WebViewControlDeferredPermissionRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlDeferredPermissionRequest =
    {
        "_winrt_Windows_Web_UI.WebViewControlDeferredPermissionRequest",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlDeferredPermissionRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlDeferredPermissionRequest
    };

    // ----- WebViewControlLongRunningScriptDetectedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlLongRunningScriptDetectedEventArgs = "WebViewControlLongRunningScriptDetectedEventArgs";

    static PyObject* _new_WebViewControlLongRunningScriptDetectedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlLongRunningScriptDetectedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlLongRunningScriptDetectedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlLongRunningScriptDetectedEventArgs_get_StopPageScriptExecution(py::wrapper::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StopPageScriptExecution());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlLongRunningScriptDetectedEventArgs_put_StopPageScriptExecution(py::wrapper::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.StopPageScriptExecution(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebViewControlLongRunningScriptDetectedEventArgs_get_ExecutionTime(py::wrapper::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExecutionTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlLongRunningScriptDetectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlLongRunningScriptDetectedEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlLongRunningScriptDetectedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlLongRunningScriptDetectedEventArgs[] = {
        { const_cast<char*>("stop_page_script_execution"), (getter)WebViewControlLongRunningScriptDetectedEventArgs_get_StopPageScriptExecution, (setter)WebViewControlLongRunningScriptDetectedEventArgs_put_StopPageScriptExecution, nullptr, nullptr },
        { const_cast<char*>("execution_time"), (getter)WebViewControlLongRunningScriptDetectedEventArgs_get_ExecutionTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlLongRunningScriptDetectedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlLongRunningScriptDetectedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlLongRunningScriptDetectedEventArgs },
        { Py_tp_methods, _methods_WebViewControlLongRunningScriptDetectedEventArgs },
        { Py_tp_getset, _getset_WebViewControlLongRunningScriptDetectedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlLongRunningScriptDetectedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlLongRunningScriptDetectedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlLongRunningScriptDetectedEventArgs
    };

    // ----- WebViewControlNavigationCompletedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlNavigationCompletedEventArgs = "WebViewControlNavigationCompletedEventArgs";

    static PyObject* _new_WebViewControlNavigationCompletedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlNavigationCompletedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlNavigationCompletedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlNavigationCompletedEventArgs_get_IsSuccess(py::wrapper::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsSuccess());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlNavigationCompletedEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlNavigationCompletedEventArgs_get_WebErrorStatus(py::wrapper::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebErrorStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlNavigationCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlNavigationCompletedEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlNavigationCompletedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlNavigationCompletedEventArgs[] = {
        { const_cast<char*>("is_success"), (getter)WebViewControlNavigationCompletedEventArgs_get_IsSuccess, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebViewControlNavigationCompletedEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { const_cast<char*>("web_error_status"), (getter)WebViewControlNavigationCompletedEventArgs_get_WebErrorStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlNavigationCompletedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlNavigationCompletedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlNavigationCompletedEventArgs },
        { Py_tp_methods, _methods_WebViewControlNavigationCompletedEventArgs },
        { Py_tp_getset, _getset_WebViewControlNavigationCompletedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlNavigationCompletedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlNavigationCompletedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlNavigationCompletedEventArgs
    };

    // ----- WebViewControlNavigationStartingEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlNavigationStartingEventArgs = "WebViewControlNavigationStartingEventArgs";

    static PyObject* _new_WebViewControlNavigationStartingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlNavigationStartingEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlNavigationStartingEventArgs(py::wrapper::Windows::Web::UI::WebViewControlNavigationStartingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlNavigationStartingEventArgs_get_Cancel(py::wrapper::Windows::Web::UI::WebViewControlNavigationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Cancel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlNavigationStartingEventArgs_put_Cancel(py::wrapper::Windows::Web::UI::WebViewControlNavigationStartingEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Cancel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebViewControlNavigationStartingEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlNavigationStartingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlNavigationStartingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlNavigationStartingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlNavigationStartingEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlNavigationStartingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlNavigationStartingEventArgs[] = {
        { const_cast<char*>("cancel"), (getter)WebViewControlNavigationStartingEventArgs_get_Cancel, (setter)WebViewControlNavigationStartingEventArgs_put_Cancel, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebViewControlNavigationStartingEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlNavigationStartingEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlNavigationStartingEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlNavigationStartingEventArgs },
        { Py_tp_methods, _methods_WebViewControlNavigationStartingEventArgs },
        { Py_tp_getset, _getset_WebViewControlNavigationStartingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlNavigationStartingEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlNavigationStartingEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlNavigationStartingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlNavigationStartingEventArgs
    };

    // ----- WebViewControlNewWindowRequestedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlNewWindowRequestedEventArgs = "WebViewControlNewWindowRequestedEventArgs";

    static PyObject* _new_WebViewControlNewWindowRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlNewWindowRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlNewWindowRequestedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlNewWindowRequestedEventArgs_GetDeferral(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebViewControlNewWindowRequestedEventArgs_get_Handled(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlNewWindowRequestedEventArgs_put_Handled(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebViewControlNewWindowRequestedEventArgs_get_Referrer(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Referrer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlNewWindowRequestedEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlNewWindowRequestedEventArgs_get_NewWindow(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NewWindow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlNewWindowRequestedEventArgs_put_NewWindow(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Web::UI::IWebViewControl>(arg);

            self->obj.NewWindow(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_WebViewControlNewWindowRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlNewWindowRequestedEventArgs[] = {
        { "get_deferral", (PyCFunction)WebViewControlNewWindowRequestedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebViewControlNewWindowRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlNewWindowRequestedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)WebViewControlNewWindowRequestedEventArgs_get_Handled, (setter)WebViewControlNewWindowRequestedEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("referrer"), (getter)WebViewControlNewWindowRequestedEventArgs_get_Referrer, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebViewControlNewWindowRequestedEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { const_cast<char*>("new_window"), (getter)WebViewControlNewWindowRequestedEventArgs_get_NewWindow, (setter)WebViewControlNewWindowRequestedEventArgs_put_NewWindow, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlNewWindowRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlNewWindowRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlNewWindowRequestedEventArgs },
        { Py_tp_methods, _methods_WebViewControlNewWindowRequestedEventArgs },
        { Py_tp_getset, _getset_WebViewControlNewWindowRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlNewWindowRequestedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlNewWindowRequestedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlNewWindowRequestedEventArgs
    };

    // ----- WebViewControlPermissionRequest class --------------------
    constexpr const char* const _type_name_WebViewControlPermissionRequest = "WebViewControlPermissionRequest";

    static PyObject* _new_WebViewControlPermissionRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlPermissionRequest);
        return nullptr;
    }

    static void _dealloc_WebViewControlPermissionRequest(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlPermissionRequest_Allow(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Allow();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebViewControlPermissionRequest_Defer(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Defer();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebViewControlPermissionRequest_Deny(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Deny();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebViewControlPermissionRequest_get_Id(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlPermissionRequest_get_PermissionType(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PermissionType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlPermissionRequest_get_State(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlPermissionRequest_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlPermissionRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlPermissionRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlPermissionRequest[] = {
        { "allow", (PyCFunction)WebViewControlPermissionRequest_Allow, METH_VARARGS, nullptr },
        { "defer", (PyCFunction)WebViewControlPermissionRequest_Defer, METH_VARARGS, nullptr },
        { "deny", (PyCFunction)WebViewControlPermissionRequest_Deny, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebViewControlPermissionRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlPermissionRequest[] = {
        { const_cast<char*>("id"), (getter)WebViewControlPermissionRequest_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("permission_type"), (getter)WebViewControlPermissionRequest_get_PermissionType, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)WebViewControlPermissionRequest_get_State, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebViewControlPermissionRequest_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlPermissionRequest[] = 
    {
        { Py_tp_new, _new_WebViewControlPermissionRequest },
        { Py_tp_dealloc, _dealloc_WebViewControlPermissionRequest },
        { Py_tp_methods, _methods_WebViewControlPermissionRequest },
        { Py_tp_getset, _getset_WebViewControlPermissionRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlPermissionRequest =
    {
        "_winrt_Windows_Web_UI.WebViewControlPermissionRequest",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlPermissionRequest
    };

    // ----- WebViewControlPermissionRequestedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlPermissionRequestedEventArgs = "WebViewControlPermissionRequestedEventArgs";

    static PyObject* _new_WebViewControlPermissionRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlPermissionRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlPermissionRequestedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlPermissionRequestedEventArgs_get_PermissionRequest(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PermissionRequest());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlPermissionRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlPermissionRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlPermissionRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlPermissionRequestedEventArgs[] = {
        { const_cast<char*>("permission_request"), (getter)WebViewControlPermissionRequestedEventArgs_get_PermissionRequest, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlPermissionRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlPermissionRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlPermissionRequestedEventArgs },
        { Py_tp_methods, _methods_WebViewControlPermissionRequestedEventArgs },
        { Py_tp_getset, _getset_WebViewControlPermissionRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlPermissionRequestedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlPermissionRequestedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlPermissionRequestedEventArgs
    };

    // ----- WebViewControlScriptNotifyEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlScriptNotifyEventArgs = "WebViewControlScriptNotifyEventArgs";

    static PyObject* _new_WebViewControlScriptNotifyEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlScriptNotifyEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlScriptNotifyEventArgs(py::wrapper::Windows::Web::UI::WebViewControlScriptNotifyEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlScriptNotifyEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlScriptNotifyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlScriptNotifyEventArgs_get_Value(py::wrapper::Windows::Web::UI::WebViewControlScriptNotifyEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlScriptNotifyEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlScriptNotifyEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlScriptNotifyEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlScriptNotifyEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlScriptNotifyEventArgs[] = {
        { const_cast<char*>("uri"), (getter)WebViewControlScriptNotifyEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)WebViewControlScriptNotifyEventArgs_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlScriptNotifyEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlScriptNotifyEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlScriptNotifyEventArgs },
        { Py_tp_methods, _methods_WebViewControlScriptNotifyEventArgs },
        { Py_tp_getset, _getset_WebViewControlScriptNotifyEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlScriptNotifyEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlScriptNotifyEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlScriptNotifyEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlScriptNotifyEventArgs
    };

    // ----- WebViewControlSettings class --------------------
    constexpr const char* const _type_name_WebViewControlSettings = "WebViewControlSettings";

    static PyObject* _new_WebViewControlSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlSettings);
        return nullptr;
    }

    static void _dealloc_WebViewControlSettings(py::wrapper::Windows::Web::UI::WebViewControlSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlSettings_get_IsScriptNotifyAllowed(py::wrapper::Windows::Web::UI::WebViewControlSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsScriptNotifyAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlSettings_put_IsScriptNotifyAllowed(py::wrapper::Windows::Web::UI::WebViewControlSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsScriptNotifyAllowed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebViewControlSettings_get_IsJavaScriptEnabled(py::wrapper::Windows::Web::UI::WebViewControlSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsJavaScriptEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlSettings_put_IsJavaScriptEnabled(py::wrapper::Windows::Web::UI::WebViewControlSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsJavaScriptEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebViewControlSettings_get_IsIndexedDBEnabled(py::wrapper::Windows::Web::UI::WebViewControlSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsIndexedDBEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlSettings_put_IsIndexedDBEnabled(py::wrapper::Windows::Web::UI::WebViewControlSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsIndexedDBEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_WebViewControlSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlSettings[] = {
        { "_from", (PyCFunction)_from_WebViewControlSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlSettings[] = {
        { const_cast<char*>("is_script_notify_allowed"), (getter)WebViewControlSettings_get_IsScriptNotifyAllowed, (setter)WebViewControlSettings_put_IsScriptNotifyAllowed, nullptr, nullptr },
        { const_cast<char*>("is_java_script_enabled"), (getter)WebViewControlSettings_get_IsJavaScriptEnabled, (setter)WebViewControlSettings_put_IsJavaScriptEnabled, nullptr, nullptr },
        { const_cast<char*>("is_indexed_d_b_enabled"), (getter)WebViewControlSettings_get_IsIndexedDBEnabled, (setter)WebViewControlSettings_put_IsIndexedDBEnabled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlSettings[] = 
    {
        { Py_tp_new, _new_WebViewControlSettings },
        { Py_tp_dealloc, _dealloc_WebViewControlSettings },
        { Py_tp_methods, _methods_WebViewControlSettings },
        { Py_tp_getset, _getset_WebViewControlSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlSettings =
    {
        "_winrt_Windows_Web_UI.WebViewControlSettings",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlSettings
    };

    // ----- WebViewControlUnsupportedUriSchemeIdentifiedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs = "WebViewControlUnsupportedUriSchemeIdentifiedEventArgs";

    static PyObject* _new_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlUnsupportedUriSchemeIdentifiedEventArgs_get_Handled(py::wrapper::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlUnsupportedUriSchemeIdentifiedEventArgs_put_Handled(py::wrapper::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebViewControlUnsupportedUriSchemeIdentifiedEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs[] = {
        { const_cast<char*>("handled"), (getter)WebViewControlUnsupportedUriSchemeIdentifiedEventArgs_get_Handled, (setter)WebViewControlUnsupportedUriSchemeIdentifiedEventArgs_put_Handled, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebViewControlUnsupportedUriSchemeIdentifiedEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs },
        { Py_tp_methods, _methods_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs },
        { Py_tp_getset, _getset_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs
    };

    // ----- WebViewControlUnviewableContentIdentifiedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlUnviewableContentIdentifiedEventArgs = "WebViewControlUnviewableContentIdentifiedEventArgs";

    static PyObject* _new_WebViewControlUnviewableContentIdentifiedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlUnviewableContentIdentifiedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlUnviewableContentIdentifiedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlUnviewableContentIdentifiedEventArgs_get_MediaType(py::wrapper::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlUnviewableContentIdentifiedEventArgs_get_Referrer(py::wrapper::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Referrer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebViewControlUnviewableContentIdentifiedEventArgs_get_Uri(py::wrapper::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlUnviewableContentIdentifiedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlUnviewableContentIdentifiedEventArgs[] = {
        { "_from", (PyCFunction)_from_WebViewControlUnviewableContentIdentifiedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlUnviewableContentIdentifiedEventArgs[] = {
        { const_cast<char*>("media_type"), (getter)WebViewControlUnviewableContentIdentifiedEventArgs_get_MediaType, nullptr, nullptr, nullptr },
        { const_cast<char*>("referrer"), (getter)WebViewControlUnviewableContentIdentifiedEventArgs_get_Referrer, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)WebViewControlUnviewableContentIdentifiedEventArgs_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlUnviewableContentIdentifiedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlUnviewableContentIdentifiedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlUnviewableContentIdentifiedEventArgs },
        { Py_tp_methods, _methods_WebViewControlUnviewableContentIdentifiedEventArgs },
        { Py_tp_getset, _getset_WebViewControlUnviewableContentIdentifiedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlUnviewableContentIdentifiedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlUnviewableContentIdentifiedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlUnviewableContentIdentifiedEventArgs
    };

    // ----- WebViewControlWebResourceRequestedEventArgs class --------------------
    constexpr const char* const _type_name_WebViewControlWebResourceRequestedEventArgs = "WebViewControlWebResourceRequestedEventArgs";

    static PyObject* _new_WebViewControlWebResourceRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebViewControlWebResourceRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebViewControlWebResourceRequestedEventArgs(py::wrapper::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebViewControlWebResourceRequestedEventArgs_GetDeferral(py::wrapper::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebViewControlWebResourceRequestedEventArgs_get_Response(py::wrapper::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Response());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebViewControlWebResourceRequestedEventArgs_put_Response(py::wrapper::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpResponseMessage>(arg);

            self->obj.Response(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebViewControlWebResourceRequestedEventArgs_get_Request(py::wrapper::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebViewControlWebResourceRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebViewControlWebResourceRequestedEventArgs[] = {
        { "get_deferral", (PyCFunction)WebViewControlWebResourceRequestedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WebViewControlWebResourceRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebViewControlWebResourceRequestedEventArgs[] = {
        { const_cast<char*>("response"), (getter)WebViewControlWebResourceRequestedEventArgs_get_Response, (setter)WebViewControlWebResourceRequestedEventArgs_put_Response, nullptr, nullptr },
        { const_cast<char*>("request"), (getter)WebViewControlWebResourceRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WebViewControlWebResourceRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_WebViewControlWebResourceRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_WebViewControlWebResourceRequestedEventArgs },
        { Py_tp_methods, _methods_WebViewControlWebResourceRequestedEventArgs },
        { Py_tp_getset, _getset_WebViewControlWebResourceRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebViewControlWebResourceRequestedEventArgs =
    {
        "_winrt_Windows_Web_UI.WebViewControlWebResourceRequestedEventArgs",
        sizeof(py::wrapper::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebViewControlWebResourceRequestedEventArgs
    };

    // ----- IWebViewControl interface --------------------
    constexpr const char* const _type_name_IWebViewControl = "IWebViewControl";

    static PyObject* _new_IWebViewControl(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebViewControl);
        return nullptr;
    }

    static void _dealloc_IWebViewControl(py::wrapper::Windows::Web::UI::IWebViewControl* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebViewControl_BuildLocalStreamUri(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.BuildLocalStreamUri(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_CapturePreviewToStreamAsync(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(self->obj.CapturePreviewToStreamAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_CaptureSelectedContentToDataPackageAsync(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CaptureSelectedContentToDataPackageAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_GetDeferredPermissionRequestById(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                winrt::Windows::Web::UI::WebViewControlDeferredPermissionRequest param1 { nullptr };

                self->obj.GetDeferredPermissionRequestById(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_GoBack(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.GoBack();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_GoForward(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.GoForward();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_InvokeScriptAsync(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(self->obj.InvokeScriptAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_Navigate(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                self->obj.Navigate(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_NavigateToLocalStreamUri(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Web::IUriToStreamResolver>(args, 1);

                self->obj.NavigateToLocalStreamUri(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_NavigateToString(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.NavigateToString(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_NavigateWithHttpRequestMessage(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpRequestMessage>(args, 0);

                self->obj.NavigateWithHttpRequestMessage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_Refresh(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Refresh();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_Stop(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_get_CanGoBack(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanGoBack());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_get_CanGoForward(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanGoForward());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_get_ContainsFullScreenElement(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContainsFullScreenElement());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_get_DefaultBackgroundColor(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IWebViewControl_put_DefaultBackgroundColor(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.DefaultBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IWebViewControl_get_DeferredPermissionRequests(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeferredPermissionRequests());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_get_DocumentTitle(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DocumentTitle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_get_Settings(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Settings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_get_Source(py::wrapper::Windows::Web::UI::IWebViewControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IWebViewControl_put_Source(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Source(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IWebViewControl_add_ContainsFullScreenElementChanged(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ContainsFullScreenElementChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_ContainsFullScreenElementChanged(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ContainsFullScreenElementChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_ContentLoading(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlContentLoadingEventArgs>>(arg);

            return py::convert(self->obj.ContentLoading(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_ContentLoading(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ContentLoading(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_DOMContentLoaded(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs>>(arg);

            return py::convert(self->obj.DOMContentLoaded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_DOMContentLoaded(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DOMContentLoaded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_FrameContentLoading(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlContentLoadingEventArgs>>(arg);

            return py::convert(self->obj.FrameContentLoading(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_FrameContentLoading(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameContentLoading(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_FrameDOMContentLoaded(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs>>(arg);

            return py::convert(self->obj.FrameDOMContentLoaded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_FrameDOMContentLoaded(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameDOMContentLoaded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_FrameNavigationCompleted(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs>>(arg);

            return py::convert(self->obj.FrameNavigationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_FrameNavigationCompleted(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameNavigationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_FrameNavigationStarting(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationStartingEventArgs>>(arg);

            return py::convert(self->obj.FrameNavigationStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_FrameNavigationStarting(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameNavigationStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_LongRunningScriptDetected(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs>>(arg);

            return py::convert(self->obj.LongRunningScriptDetected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_LongRunningScriptDetected(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LongRunningScriptDetected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_NavigationCompleted(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs>>(arg);

            return py::convert(self->obj.NavigationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_NavigationCompleted(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.NavigationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_NavigationStarting(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationStartingEventArgs>>(arg);

            return py::convert(self->obj.NavigationStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_NavigationStarting(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.NavigationStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_NewWindowRequested(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs>>(arg);

            return py::convert(self->obj.NewWindowRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_NewWindowRequested(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.NewWindowRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_PermissionRequested(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs>>(arg);

            return py::convert(self->obj.PermissionRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_PermissionRequested(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PermissionRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_ScriptNotify(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlScriptNotifyEventArgs>>(arg);

            return py::convert(self->obj.ScriptNotify(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_ScriptNotify(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ScriptNotify(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_UnsafeContentWarningDisplaying(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.UnsafeContentWarningDisplaying(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_UnsafeContentWarningDisplaying(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnsafeContentWarningDisplaying(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_UnsupportedUriSchemeIdentified(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>>(arg);

            return py::convert(self->obj.UnsupportedUriSchemeIdentified(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_UnsupportedUriSchemeIdentified(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnsupportedUriSchemeIdentified(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_UnviewableContentIdentified(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs>>(arg);

            return py::convert(self->obj.UnviewableContentIdentified(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_UnviewableContentIdentified(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnviewableContentIdentified(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_add_WebResourceRequested(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs>>(arg);

            return py::convert(self->obj.WebResourceRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IWebViewControl_remove_WebResourceRequested(py::wrapper::Windows::Web::UI::IWebViewControl* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WebResourceRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IWebViewControl(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::IWebViewControl>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebViewControl[] = {
        { "build_local_stream_uri", (PyCFunction)IWebViewControl_BuildLocalStreamUri, METH_VARARGS, nullptr },
        { "capture_preview_to_stream_async", (PyCFunction)IWebViewControl_CapturePreviewToStreamAsync, METH_VARARGS, nullptr },
        { "capture_selected_content_to_data_package_async", (PyCFunction)IWebViewControl_CaptureSelectedContentToDataPackageAsync, METH_VARARGS, nullptr },
        { "get_deferred_permission_request_by_id", (PyCFunction)IWebViewControl_GetDeferredPermissionRequestById, METH_VARARGS, nullptr },
        { "go_back", (PyCFunction)IWebViewControl_GoBack, METH_VARARGS, nullptr },
        { "go_forward", (PyCFunction)IWebViewControl_GoForward, METH_VARARGS, nullptr },
        { "invoke_script_async", (PyCFunction)IWebViewControl_InvokeScriptAsync, METH_VARARGS, nullptr },
        { "navigate", (PyCFunction)IWebViewControl_Navigate, METH_VARARGS, nullptr },
        { "navigate_to_local_stream_uri", (PyCFunction)IWebViewControl_NavigateToLocalStreamUri, METH_VARARGS, nullptr },
        { "navigate_to_string", (PyCFunction)IWebViewControl_NavigateToString, METH_VARARGS, nullptr },
        { "navigate_with_http_request_message", (PyCFunction)IWebViewControl_NavigateWithHttpRequestMessage, METH_VARARGS, nullptr },
        { "refresh", (PyCFunction)IWebViewControl_Refresh, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)IWebViewControl_Stop, METH_VARARGS, nullptr },
        { "add_contains_full_screen_element_changed", (PyCFunction)IWebViewControl_add_ContainsFullScreenElementChanged, METH_O, nullptr },
        { "remove_contains_full_screen_element_changed", (PyCFunction)IWebViewControl_remove_ContainsFullScreenElementChanged, METH_O, nullptr },
        { "add_content_loading", (PyCFunction)IWebViewControl_add_ContentLoading, METH_O, nullptr },
        { "remove_content_loading", (PyCFunction)IWebViewControl_remove_ContentLoading, METH_O, nullptr },
        { "add_d_o_m_content_loaded", (PyCFunction)IWebViewControl_add_DOMContentLoaded, METH_O, nullptr },
        { "remove_d_o_m_content_loaded", (PyCFunction)IWebViewControl_remove_DOMContentLoaded, METH_O, nullptr },
        { "add_frame_content_loading", (PyCFunction)IWebViewControl_add_FrameContentLoading, METH_O, nullptr },
        { "remove_frame_content_loading", (PyCFunction)IWebViewControl_remove_FrameContentLoading, METH_O, nullptr },
        { "add_frame_d_o_m_content_loaded", (PyCFunction)IWebViewControl_add_FrameDOMContentLoaded, METH_O, nullptr },
        { "remove_frame_d_o_m_content_loaded", (PyCFunction)IWebViewControl_remove_FrameDOMContentLoaded, METH_O, nullptr },
        { "add_frame_navigation_completed", (PyCFunction)IWebViewControl_add_FrameNavigationCompleted, METH_O, nullptr },
        { "remove_frame_navigation_completed", (PyCFunction)IWebViewControl_remove_FrameNavigationCompleted, METH_O, nullptr },
        { "add_frame_navigation_starting", (PyCFunction)IWebViewControl_add_FrameNavigationStarting, METH_O, nullptr },
        { "remove_frame_navigation_starting", (PyCFunction)IWebViewControl_remove_FrameNavigationStarting, METH_O, nullptr },
        { "add_long_running_script_detected", (PyCFunction)IWebViewControl_add_LongRunningScriptDetected, METH_O, nullptr },
        { "remove_long_running_script_detected", (PyCFunction)IWebViewControl_remove_LongRunningScriptDetected, METH_O, nullptr },
        { "add_navigation_completed", (PyCFunction)IWebViewControl_add_NavigationCompleted, METH_O, nullptr },
        { "remove_navigation_completed", (PyCFunction)IWebViewControl_remove_NavigationCompleted, METH_O, nullptr },
        { "add_navigation_starting", (PyCFunction)IWebViewControl_add_NavigationStarting, METH_O, nullptr },
        { "remove_navigation_starting", (PyCFunction)IWebViewControl_remove_NavigationStarting, METH_O, nullptr },
        { "add_new_window_requested", (PyCFunction)IWebViewControl_add_NewWindowRequested, METH_O, nullptr },
        { "remove_new_window_requested", (PyCFunction)IWebViewControl_remove_NewWindowRequested, METH_O, nullptr },
        { "add_permission_requested", (PyCFunction)IWebViewControl_add_PermissionRequested, METH_O, nullptr },
        { "remove_permission_requested", (PyCFunction)IWebViewControl_remove_PermissionRequested, METH_O, nullptr },
        { "add_script_notify", (PyCFunction)IWebViewControl_add_ScriptNotify, METH_O, nullptr },
        { "remove_script_notify", (PyCFunction)IWebViewControl_remove_ScriptNotify, METH_O, nullptr },
        { "add_unsafe_content_warning_displaying", (PyCFunction)IWebViewControl_add_UnsafeContentWarningDisplaying, METH_O, nullptr },
        { "remove_unsafe_content_warning_displaying", (PyCFunction)IWebViewControl_remove_UnsafeContentWarningDisplaying, METH_O, nullptr },
        { "add_unsupported_uri_scheme_identified", (PyCFunction)IWebViewControl_add_UnsupportedUriSchemeIdentified, METH_O, nullptr },
        { "remove_unsupported_uri_scheme_identified", (PyCFunction)IWebViewControl_remove_UnsupportedUriSchemeIdentified, METH_O, nullptr },
        { "add_unviewable_content_identified", (PyCFunction)IWebViewControl_add_UnviewableContentIdentified, METH_O, nullptr },
        { "remove_unviewable_content_identified", (PyCFunction)IWebViewControl_remove_UnviewableContentIdentified, METH_O, nullptr },
        { "add_web_resource_requested", (PyCFunction)IWebViewControl_add_WebResourceRequested, METH_O, nullptr },
        { "remove_web_resource_requested", (PyCFunction)IWebViewControl_remove_WebResourceRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_IWebViewControl, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebViewControl[] = {
        { const_cast<char*>("can_go_back"), (getter)IWebViewControl_get_CanGoBack, nullptr, nullptr, nullptr },
        { const_cast<char*>("can_go_forward"), (getter)IWebViewControl_get_CanGoForward, nullptr, nullptr, nullptr },
        { const_cast<char*>("contains_full_screen_element"), (getter)IWebViewControl_get_ContainsFullScreenElement, nullptr, nullptr, nullptr },
        { const_cast<char*>("default_background_color"), (getter)IWebViewControl_get_DefaultBackgroundColor, (setter)IWebViewControl_put_DefaultBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("deferred_permission_requests"), (getter)IWebViewControl_get_DeferredPermissionRequests, nullptr, nullptr, nullptr },
        { const_cast<char*>("document_title"), (getter)IWebViewControl_get_DocumentTitle, nullptr, nullptr, nullptr },
        { const_cast<char*>("settings"), (getter)IWebViewControl_get_Settings, nullptr, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)IWebViewControl_get_Source, (setter)IWebViewControl_put_Source, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebViewControl[] = 
    {
        { Py_tp_new, _new_IWebViewControl },
        { Py_tp_dealloc, _dealloc_IWebViewControl },
        { Py_tp_methods, _methods_IWebViewControl },
        { Py_tp_getset, _getset_IWebViewControl },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebViewControl =
    {
        "_winrt_Windows_Web_UI.IWebViewControl",
        sizeof(py::wrapper::Windows::Web::UI::IWebViewControl),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebViewControl
    };

    // ----- IWebViewControl2 interface --------------------
    constexpr const char* const _type_name_IWebViewControl2 = "IWebViewControl2";

    static PyObject* _new_IWebViewControl2(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebViewControl2);
        return nullptr;
    }

    static void _dealloc_IWebViewControl2(py::wrapper::Windows::Web::UI::IWebViewControl2* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebViewControl2_AddInitializeScript(py::wrapper::Windows::Web::UI::IWebViewControl2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AddInitializeScript(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IWebViewControl2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::UI::IWebViewControl2>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebViewControl2[] = {
        { "add_initialize_script", (PyCFunction)IWebViewControl2_AddInitializeScript, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IWebViewControl2, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IWebViewControl2[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IWebViewControl2[] = 
    {
        { Py_tp_new, _new_IWebViewControl2 },
        { Py_tp_dealloc, _dealloc_IWebViewControl2 },
        { Py_tp_methods, _methods_IWebViewControl2 },
        { Py_tp_getset, _getset_IWebViewControl2 },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IWebViewControl2 =
    {
        "_winrt_Windows_Web_UI.IWebViewControl2",
        sizeof(py::wrapper::Windows::Web::UI::IWebViewControl2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebViewControl2
    };

    // ----- Windows.Web.UI Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Web::UI::WebViewControlContentLoadingEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlContentLoadingEventArgs, &_type_spec_WebViewControlContentLoadingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlDOMContentLoadedEventArgs, &_type_spec_WebViewControlDOMContentLoadedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlDeferredPermissionRequest>::python_type = py::register_python_type(module, _type_name_WebViewControlDeferredPermissionRequest, &_type_spec_WebViewControlDeferredPermissionRequest, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlLongRunningScriptDetectedEventArgs, &_type_spec_WebViewControlLongRunningScriptDetectedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlNavigationCompletedEventArgs, &_type_spec_WebViewControlNavigationCompletedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlNavigationStartingEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlNavigationStartingEventArgs, &_type_spec_WebViewControlNavigationStartingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlNewWindowRequestedEventArgs, &_type_spec_WebViewControlNewWindowRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlPermissionRequest>::python_type = py::register_python_type(module, _type_name_WebViewControlPermissionRequest, &_type_spec_WebViewControlPermissionRequest, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlPermissionRequestedEventArgs, &_type_spec_WebViewControlPermissionRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlScriptNotifyEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlScriptNotifyEventArgs, &_type_spec_WebViewControlScriptNotifyEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlSettings>::python_type = py::register_python_type(module, _type_name_WebViewControlSettings, &_type_spec_WebViewControlSettings, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs, &_type_spec_WebViewControlUnsupportedUriSchemeIdentifiedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlUnviewableContentIdentifiedEventArgs, &_type_spec_WebViewControlUnviewableContentIdentifiedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_WebViewControlWebResourceRequestedEventArgs, &_type_spec_WebViewControlWebResourceRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::IWebViewControl>::python_type = py::register_python_type(module, _type_name_IWebViewControl, &_type_spec_IWebViewControl, bases.get());
            py::winrt_type<winrt::Windows::Web::UI::IWebViewControl2>::python_type = py::register_python_type(module, _type_name_IWebViewControl2, &_type_spec_IWebViewControl2, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Web.UI");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Web_UI",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Web::UI

PyMODINIT_FUNC
PyInit__winrt_Windows_Web_UI (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Web::UI::module_def);
}
