// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.UserActivities.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivity>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityAttribution>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityChannel>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityContentInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivitySession>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityVisualElements>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::IUserActivityContentInfo>::python_type;

namespace py::cpp::Windows::ApplicationModel::UserActivities
{
    // ----- UserActivity class --------------------
    constexpr const char* const _type_name_UserActivity = "UserActivity";

    static PyObject* _new_UserActivity(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::UserActivities::UserActivity instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserActivity(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivity_CreateSession(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateSession());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivity_SaveAsync(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SaveAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivity_ToJson(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ToJson());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivity_ToJsonArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::UserActivities::UserActivity>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivity::ToJsonArray(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivity_TryParseFromJson(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivity::TryParseFromJson(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivity_TryParseFromJsonArray(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivity::TryParseFromJsonArray(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivity_get_FallbackUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FallbackUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivity_put_FallbackUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.FallbackUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivity_get_ContentUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContentUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivity_put_ContentUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.ContentUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivity_get_ContentType(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContentType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivity_put_ContentType(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.ContentType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivity_get_ContentInfo(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContentInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivity_put_ContentInfo(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserActivities::IUserActivityContentInfo>(arg);

            self->obj.ContentInfo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivity_get_ActivationUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivationUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivity_put_ActivationUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.ActivationUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivity_get_ActivityId(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivityId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserActivity_get_State(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserActivity_get_VisualElements(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VisualElements());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserActivity_get_IsRoamable(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRoamable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivity_put_IsRoamable(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsRoamable(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_UserActivity(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivity>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivity[] = {
        { "create_session", (PyCFunction)UserActivity_CreateSession, METH_VARARGS, nullptr },
        { "save_async", (PyCFunction)UserActivity_SaveAsync, METH_VARARGS, nullptr },
        { "to_json", (PyCFunction)UserActivity_ToJson, METH_VARARGS, nullptr },
        { "to_json_array", (PyCFunction)UserActivity_ToJsonArray, METH_VARARGS | METH_STATIC, nullptr },
        { "try_parse_from_json", (PyCFunction)UserActivity_TryParseFromJson, METH_VARARGS | METH_STATIC, nullptr },
        { "try_parse_from_json_array", (PyCFunction)UserActivity_TryParseFromJsonArray, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_UserActivity, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivity[] = {
        { const_cast<char*>("fallback_uri"), (getter)UserActivity_get_FallbackUri, (setter)UserActivity_put_FallbackUri, nullptr, nullptr },
        { const_cast<char*>("content_uri"), (getter)UserActivity_get_ContentUri, (setter)UserActivity_put_ContentUri, nullptr, nullptr },
        { const_cast<char*>("content_type"), (getter)UserActivity_get_ContentType, (setter)UserActivity_put_ContentType, nullptr, nullptr },
        { const_cast<char*>("content_info"), (getter)UserActivity_get_ContentInfo, (setter)UserActivity_put_ContentInfo, nullptr, nullptr },
        { const_cast<char*>("activation_uri"), (getter)UserActivity_get_ActivationUri, (setter)UserActivity_put_ActivationUri, nullptr, nullptr },
        { const_cast<char*>("activity_id"), (getter)UserActivity_get_ActivityId, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)UserActivity_get_State, nullptr, nullptr, nullptr },
        { const_cast<char*>("visual_elements"), (getter)UserActivity_get_VisualElements, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_roamable"), (getter)UserActivity_get_IsRoamable, (setter)UserActivity_put_IsRoamable, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivity[] = 
    {
        { Py_tp_new, _new_UserActivity },
        { Py_tp_dealloc, _dealloc_UserActivity },
        { Py_tp_methods, _methods_UserActivity },
        { Py_tp_getset, _getset_UserActivity },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivity =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivity",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivity),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivity
    };

    // ----- UserActivityAttribution class --------------------
    constexpr const char* const _type_name_UserActivityAttribution = "UserActivityAttribution";

    static PyObject* _new_UserActivityAttribution(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                winrt::Windows::ApplicationModel::UserActivities::UserActivityAttribution instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserActivities::UserActivityAttribution instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_UserActivityAttribution(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivityAttribution_get_IconUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IconUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityAttribution_put_IconUri(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.IconUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivityAttribution_get_AlternateText(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlternateText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityAttribution_put_AlternateText(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AlternateText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivityAttribution_get_AddImageQuery(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AddImageQuery());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityAttribution_put_AddImageQuery(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AddImageQuery(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_UserActivityAttribution(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivityAttribution>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivityAttribution[] = {
        { "_from", (PyCFunction)_from_UserActivityAttribution, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivityAttribution[] = {
        { const_cast<char*>("icon_uri"), (getter)UserActivityAttribution_get_IconUri, (setter)UserActivityAttribution_put_IconUri, nullptr, nullptr },
        { const_cast<char*>("alternate_text"), (getter)UserActivityAttribution_get_AlternateText, (setter)UserActivityAttribution_put_AlternateText, nullptr, nullptr },
        { const_cast<char*>("add_image_query"), (getter)UserActivityAttribution_get_AddImageQuery, (setter)UserActivityAttribution_put_AddImageQuery, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivityAttribution[] = 
    {
        { Py_tp_new, _new_UserActivityAttribution },
        { Py_tp_dealloc, _dealloc_UserActivityAttribution },
        { Py_tp_methods, _methods_UserActivityAttribution },
        { Py_tp_getset, _getset_UserActivityAttribution },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivityAttribution =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivityAttribution",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityAttribution),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivityAttribution
    };

    // ----- UserActivityChannel class --------------------
    constexpr const char* const _type_name_UserActivityChannel = "UserActivityChannel";

    static PyObject* _new_UserActivityChannel(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivityChannel);
        return nullptr;
    }

    static void _dealloc_UserActivityChannel(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityChannel* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivityChannel_DeleteActivityAsync(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteActivityAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_DeleteAllActivitiesAsync(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DeleteAllActivitiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_DisableAutoSessionCreation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::UserActivities::UserActivityChannel::DisableAutoSessionCreation();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivityChannel::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivityChannel::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_GetOrCreateUserActivityAsync(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetOrCreateUserActivityAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_GetRecentUserActivitiesAsync(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.GetRecentUserActivitiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_GetSessionHistoryItemsForUserActivityAsync(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 1);

                return py::convert(self->obj.GetSessionHistoryItemsForUserActivityAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityChannel_TryGetForWebAccount(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivityChannel::TryGetForWebAccount(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UserActivityChannel(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivityChannel>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivityChannel[] = {
        { "delete_activity_async", (PyCFunction)UserActivityChannel_DeleteActivityAsync, METH_VARARGS, nullptr },
        { "delete_all_activities_async", (PyCFunction)UserActivityChannel_DeleteAllActivitiesAsync, METH_VARARGS, nullptr },
        { "disable_auto_session_creation", (PyCFunction)UserActivityChannel_DisableAutoSessionCreation, METH_VARARGS | METH_STATIC, nullptr },
        { "get_default", (PyCFunction)UserActivityChannel_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_user", (PyCFunction)UserActivityChannel_GetForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "get_or_create_user_activity_async", (PyCFunction)UserActivityChannel_GetOrCreateUserActivityAsync, METH_VARARGS, nullptr },
        { "get_recent_user_activities_async", (PyCFunction)UserActivityChannel_GetRecentUserActivitiesAsync, METH_VARARGS, nullptr },
        { "get_session_history_items_for_user_activity_async", (PyCFunction)UserActivityChannel_GetSessionHistoryItemsForUserActivityAsync, METH_VARARGS, nullptr },
        { "try_get_for_web_account", (PyCFunction)UserActivityChannel_TryGetForWebAccount, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_UserActivityChannel, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivityChannel[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivityChannel[] = 
    {
        { Py_tp_new, _new_UserActivityChannel },
        { Py_tp_dealloc, _dealloc_UserActivityChannel },
        { Py_tp_methods, _methods_UserActivityChannel },
        { Py_tp_getset, _getset_UserActivityChannel },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivityChannel =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivityChannel",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityChannel),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivityChannel
    };

    // ----- UserActivityContentInfo class --------------------
    constexpr const char* const _type_name_UserActivityContentInfo = "UserActivityContentInfo";

    static PyObject* _new_UserActivityContentInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivityContentInfo);
        return nullptr;
    }

    static void _dealloc_UserActivityContentInfo(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityContentInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivityContentInfo_FromJson(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivityContentInfo::FromJson(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityContentInfo_ToJson(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityContentInfo* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ToJson());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UserActivityContentInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivityContentInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivityContentInfo[] = {
        { "from_json", (PyCFunction)UserActivityContentInfo_FromJson, METH_VARARGS | METH_STATIC, nullptr },
        { "to_json", (PyCFunction)UserActivityContentInfo_ToJson, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserActivityContentInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivityContentInfo[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivityContentInfo[] = 
    {
        { Py_tp_new, _new_UserActivityContentInfo },
        { Py_tp_dealloc, _dealloc_UserActivityContentInfo },
        { Py_tp_methods, _methods_UserActivityContentInfo },
        { Py_tp_getset, _getset_UserActivityContentInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivityContentInfo =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivityContentInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityContentInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivityContentInfo
    };

    // ----- UserActivityRequest class --------------------
    constexpr const char* const _type_name_UserActivityRequest = "UserActivityRequest";

    static PyObject* _new_UserActivityRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivityRequest);
        return nullptr;
    }

    static void _dealloc_UserActivityRequest(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivityRequest_SetUserActivity(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserActivities::UserActivity>(args, 0);

                self->obj.SetUserActivity(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_UserActivityRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivityRequest[] = {
        { "set_user_activity", (PyCFunction)UserActivityRequest_SetUserActivity, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserActivityRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivityRequest[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivityRequest[] = 
    {
        { Py_tp_new, _new_UserActivityRequest },
        { Py_tp_dealloc, _dealloc_UserActivityRequest },
        { Py_tp_methods, _methods_UserActivityRequest },
        { Py_tp_getset, _getset_UserActivityRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivityRequest =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivityRequest",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivityRequest
    };

    // ----- UserActivityRequestManager class --------------------
    constexpr const char* const _type_name_UserActivityRequestManager = "UserActivityRequestManager";

    static PyObject* _new_UserActivityRequestManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivityRequestManager);
        return nullptr;
    }

    static void _dealloc_UserActivityRequestManager(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivityRequestManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityRequestManager_add_UserActivityRequested(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestManager, winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs>>(arg);

            return py::convert(self->obj.UserActivityRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserActivityRequestManager_remove_UserActivityRequested(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UserActivityRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserActivityRequestManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivityRequestManager[] = {
        { "get_for_current_view", (PyCFunction)UserActivityRequestManager_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "add_user_activity_requested", (PyCFunction)UserActivityRequestManager_add_UserActivityRequested, METH_O, nullptr },
        { "remove_user_activity_requested", (PyCFunction)UserActivityRequestManager_remove_UserActivityRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_UserActivityRequestManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivityRequestManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivityRequestManager[] = 
    {
        { Py_tp_new, _new_UserActivityRequestManager },
        { Py_tp_dealloc, _dealloc_UserActivityRequestManager },
        { Py_tp_methods, _methods_UserActivityRequestManager },
        { Py_tp_getset, _getset_UserActivityRequestManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivityRequestManager =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivityRequestManager",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivityRequestManager
    };

    // ----- UserActivityRequestedEventArgs class --------------------
    constexpr const char* const _type_name_UserActivityRequestedEventArgs = "UserActivityRequestedEventArgs";

    static PyObject* _new_UserActivityRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivityRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_UserActivityRequestedEventArgs(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivityRequestedEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivityRequestedEventArgs_get_Request(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserActivityRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivityRequestedEventArgs[] = {
        { "get_deferral", (PyCFunction)UserActivityRequestedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserActivityRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivityRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)UserActivityRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivityRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_UserActivityRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_UserActivityRequestedEventArgs },
        { Py_tp_methods, _methods_UserActivityRequestedEventArgs },
        { Py_tp_getset, _getset_UserActivityRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivityRequestedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivityRequestedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivityRequestedEventArgs
    };

    // ----- UserActivitySession class --------------------
    constexpr const char* const _type_name_UserActivitySession = "UserActivitySession";

    static PyObject* _new_UserActivitySession(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivitySession);
        return nullptr;
    }

    static void _dealloc_UserActivitySession(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySession* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivitySession_Close(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserActivitySession_get_ActivityId(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivityId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserActivitySession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivitySession>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_UserActivitySession(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySession* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_UserActivitySession(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySession* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivitySession[] = {
        { "close", (PyCFunction)UserActivitySession_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_UserActivitySession, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_UserActivitySession, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_UserActivitySession, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivitySession[] = {
        { const_cast<char*>("activity_id"), (getter)UserActivitySession_get_ActivityId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivitySession[] = 
    {
        { Py_tp_new, _new_UserActivitySession },
        { Py_tp_dealloc, _dealloc_UserActivitySession },
        { Py_tp_methods, _methods_UserActivitySession },
        { Py_tp_getset, _getset_UserActivitySession },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivitySession =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivitySession",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySession),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivitySession
    };

    // ----- UserActivitySessionHistoryItem class --------------------
    constexpr const char* const _type_name_UserActivitySessionHistoryItem = "UserActivitySessionHistoryItem";

    static PyObject* _new_UserActivitySessionHistoryItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivitySessionHistoryItem);
        return nullptr;
    }

    static void _dealloc_UserActivitySessionHistoryItem(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivitySessionHistoryItem_get_EndTime(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EndTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserActivitySessionHistoryItem_get_StartTime(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* UserActivitySessionHistoryItem_get_UserActivity(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserActivity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UserActivitySessionHistoryItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivitySessionHistoryItem[] = {
        { "_from", (PyCFunction)_from_UserActivitySessionHistoryItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivitySessionHistoryItem[] = {
        { const_cast<char*>("end_time"), (getter)UserActivitySessionHistoryItem_get_EndTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("start_time"), (getter)UserActivitySessionHistoryItem_get_StartTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("user_activity"), (getter)UserActivitySessionHistoryItem_get_UserActivity, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivitySessionHistoryItem[] = 
    {
        { Py_tp_new, _new_UserActivitySessionHistoryItem },
        { Py_tp_dealloc, _dealloc_UserActivitySessionHistoryItem },
        { Py_tp_methods, _methods_UserActivitySessionHistoryItem },
        { Py_tp_getset, _getset_UserActivitySessionHistoryItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivitySessionHistoryItem =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivitySessionHistoryItem",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivitySessionHistoryItem
    };

    // ----- UserActivityVisualElements class --------------------
    constexpr const char* const _type_name_UserActivityVisualElements = "UserActivityVisualElements";

    static PyObject* _new_UserActivityVisualElements(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserActivityVisualElements);
        return nullptr;
    }

    static void _dealloc_UserActivityVisualElements(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* UserActivityVisualElements_get_DisplayText(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityVisualElements_put_DisplayText(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivityVisualElements_get_Description(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityVisualElements_put_Description(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Description(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivityVisualElements_get_Content(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityVisualElements_put_Content(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Shell::IAdaptiveCard>(arg);

            self->obj.Content(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivityVisualElements_get_BackgroundColor(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityVisualElements_put_BackgroundColor(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.BackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivityVisualElements_get_Attribution(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Attribution());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityVisualElements_put_Attribution(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::UserActivities::UserActivityAttribution>(arg);

            self->obj.Attribution(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* UserActivityVisualElements_get_AttributionDisplayText(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AttributionDisplayText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int UserActivityVisualElements_put_AttributionDisplayText(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.AttributionDisplayText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_UserActivityVisualElements(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::UserActivityVisualElements>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserActivityVisualElements[] = {
        { "_from", (PyCFunction)_from_UserActivityVisualElements, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_UserActivityVisualElements[] = {
        { const_cast<char*>("display_text"), (getter)UserActivityVisualElements_get_DisplayText, (setter)UserActivityVisualElements_put_DisplayText, nullptr, nullptr },
        { const_cast<char*>("description"), (getter)UserActivityVisualElements_get_Description, (setter)UserActivityVisualElements_put_Description, nullptr, nullptr },
        { const_cast<char*>("content"), (getter)UserActivityVisualElements_get_Content, (setter)UserActivityVisualElements_put_Content, nullptr, nullptr },
        { const_cast<char*>("background_color"), (getter)UserActivityVisualElements_get_BackgroundColor, (setter)UserActivityVisualElements_put_BackgroundColor, nullptr, nullptr },
        { const_cast<char*>("attribution"), (getter)UserActivityVisualElements_get_Attribution, (setter)UserActivityVisualElements_put_Attribution, nullptr, nullptr },
        { const_cast<char*>("attribution_display_text"), (getter)UserActivityVisualElements_get_AttributionDisplayText, (setter)UserActivityVisualElements_put_AttributionDisplayText, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_UserActivityVisualElements[] = 
    {
        { Py_tp_new, _new_UserActivityVisualElements },
        { Py_tp_dealloc, _dealloc_UserActivityVisualElements },
        { Py_tp_methods, _methods_UserActivityVisualElements },
        { Py_tp_getset, _getset_UserActivityVisualElements },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_UserActivityVisualElements =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.UserActivityVisualElements",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::UserActivityVisualElements),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserActivityVisualElements
    };

    // ----- IUserActivityContentInfo interface --------------------
    constexpr const char* const _type_name_IUserActivityContentInfo = "IUserActivityContentInfo";

    static PyObject* _new_IUserActivityContentInfo(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IUserActivityContentInfo);
        return nullptr;
    }

    static void _dealloc_IUserActivityContentInfo(py::wrapper::Windows::ApplicationModel::UserActivities::IUserActivityContentInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IUserActivityContentInfo_ToJson(py::wrapper::Windows::ApplicationModel::UserActivities::IUserActivityContentInfo* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ToJson());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IUserActivityContentInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::UserActivities::IUserActivityContentInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IUserActivityContentInfo[] = {
        { "to_json", (PyCFunction)IUserActivityContentInfo_ToJson, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IUserActivityContentInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IUserActivityContentInfo[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IUserActivityContentInfo[] = 
    {
        { Py_tp_new, _new_IUserActivityContentInfo },
        { Py_tp_dealloc, _dealloc_IUserActivityContentInfo },
        { Py_tp_methods, _methods_IUserActivityContentInfo },
        { Py_tp_getset, _getset_IUserActivityContentInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IUserActivityContentInfo =
    {
        "_winrt_Windows_ApplicationModel_UserActivities.IUserActivityContentInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::UserActivities::IUserActivityContentInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IUserActivityContentInfo
    };

    // ----- Windows.ApplicationModel.UserActivities Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivity>::python_type = py::register_python_type(module, _type_name_UserActivity, &_type_spec_UserActivity, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityAttribution>::python_type = py::register_python_type(module, _type_name_UserActivityAttribution, &_type_spec_UserActivityAttribution, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityChannel>::python_type = py::register_python_type(module, _type_name_UserActivityChannel, &_type_spec_UserActivityChannel, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityContentInfo>::python_type = py::register_python_type(module, _type_name_UserActivityContentInfo, &_type_spec_UserActivityContentInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequest>::python_type = py::register_python_type(module, _type_name_UserActivityRequest, &_type_spec_UserActivityRequest, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestManager>::python_type = py::register_python_type(module, _type_name_UserActivityRequestManager, &_type_spec_UserActivityRequestManager, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_UserActivityRequestedEventArgs, &_type_spec_UserActivityRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivitySession>::python_type = py::register_python_type(module, _type_name_UserActivitySession, &_type_spec_UserActivitySession, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem>::python_type = py::register_python_type(module, _type_name_UserActivitySessionHistoryItem, &_type_spec_UserActivitySessionHistoryItem, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::UserActivityVisualElements>::python_type = py::register_python_type(module, _type_name_UserActivityVisualElements, &_type_spec_UserActivityVisualElements, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::UserActivities::IUserActivityContentInfo>::python_type = py::register_python_type(module, _type_name_IUserActivityContentInfo, &_type_spec_IUserActivityContentInfo, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.UserActivities");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_UserActivities",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::UserActivities

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_UserActivities (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::UserActivities::module_def);
}
