// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Spi.Provider.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Spi::Provider::ISpiProvider>::python_type;

namespace py::cpp::Windows::Devices::Spi::Provider
{
    // ----- ProviderSpiConnectionSettings class --------------------
    constexpr const char* const _type_name_ProviderSpiConnectionSettings = "ProviderSpiConnectionSettings";

    static PyObject* _new_ProviderSpiConnectionSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ProviderSpiConnectionSettings(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ProviderSpiConnectionSettings_get_SharingMode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SharingMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_SharingMode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ProviderSpiSharingMode>(arg);

            self->obj.SharingMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_Mode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Mode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_Mode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ProviderSpiMode>(arg);

            self->obj.Mode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_DataBitLength(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DataBitLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_DataBitLength(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.DataBitLength(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_ClockFrequency(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClockFrequency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_ClockFrequency(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.ClockFrequency(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_ChipSelectLine(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChipSelectLine());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_ChipSelectLine(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.ChipSelectLine(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ProviderSpiConnectionSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProviderSpiConnectionSettings[] = {
        { "_from", (PyCFunction)_from_ProviderSpiConnectionSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ProviderSpiConnectionSettings[] = {
        { const_cast<char*>("sharing_mode"), (getter)ProviderSpiConnectionSettings_get_SharingMode, (setter)ProviderSpiConnectionSettings_put_SharingMode, nullptr, nullptr },
        { const_cast<char*>("mode"), (getter)ProviderSpiConnectionSettings_get_Mode, (setter)ProviderSpiConnectionSettings_put_Mode, nullptr, nullptr },
        { const_cast<char*>("data_bit_length"), (getter)ProviderSpiConnectionSettings_get_DataBitLength, (setter)ProviderSpiConnectionSettings_put_DataBitLength, nullptr, nullptr },
        { const_cast<char*>("clock_frequency"), (getter)ProviderSpiConnectionSettings_get_ClockFrequency, (setter)ProviderSpiConnectionSettings_put_ClockFrequency, nullptr, nullptr },
        { const_cast<char*>("chip_select_line"), (getter)ProviderSpiConnectionSettings_get_ChipSelectLine, (setter)ProviderSpiConnectionSettings_put_ChipSelectLine, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ProviderSpiConnectionSettings[] = 
    {
        { Py_tp_new, _new_ProviderSpiConnectionSettings },
        { Py_tp_dealloc, _dealloc_ProviderSpiConnectionSettings },
        { Py_tp_methods, _methods_ProviderSpiConnectionSettings },
        { Py_tp_getset, _getset_ProviderSpiConnectionSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ProviderSpiConnectionSettings =
    {
        "_winrt_Windows_Devices_Spi_Provider.ProviderSpiConnectionSettings",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProviderSpiConnectionSettings
    };

    // ----- ISpiControllerProvider interface --------------------
    constexpr const char* const _type_name_ISpiControllerProvider = "ISpiControllerProvider";

    static PyObject* _new_ISpiControllerProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ISpiControllerProvider);
        return nullptr;
    }

    static void _dealloc_ISpiControllerProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiControllerProvider* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ISpiControllerProvider_GetDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiControllerProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>(args, 0);

                return py::convert(self->obj.GetDeviceProvider(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ISpiControllerProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISpiControllerProvider[] = {
        { "get_device_provider", (PyCFunction)ISpiControllerProvider_GetDeviceProvider, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ISpiControllerProvider, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ISpiControllerProvider[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ISpiControllerProvider[] = 
    {
        { Py_tp_new, _new_ISpiControllerProvider },
        { Py_tp_dealloc, _dealloc_ISpiControllerProvider },
        { Py_tp_methods, _methods_ISpiControllerProvider },
        { Py_tp_getset, _getset_ISpiControllerProvider },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ISpiControllerProvider =
    {
        "_winrt_Windows_Devices_Spi_Provider.ISpiControllerProvider",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ISpiControllerProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISpiControllerProvider
    };

    // ----- ISpiDeviceProvider interface --------------------
    constexpr const char* const _type_name_ISpiDeviceProvider = "ISpiDeviceProvider";

    static PyObject* _new_ISpiDeviceProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ISpiDeviceProvider);
        return nullptr;
    }

    static void _dealloc_ISpiDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ISpiDeviceProvider_Close(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_Read(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 0);
                winrt::com_array<uint8_t> param0 ( param0_count, py::empty_instance<uint8_t>::get() );

                self->obj.Read(param0);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return out0.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_TransferFullDuplex(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 1);
                winrt::com_array<uint8_t> param1 ( param1_count, py::empty_instance<uint8_t>::get() );

                self->obj.TransferFullDuplex(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_TransferSequential(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 1);
                winrt::com_array<uint8_t> param1 ( param1_count, py::empty_instance<uint8_t>::get() );

                self->obj.TransferSequential(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_Write(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);

                self->obj.Write(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_get_ConnectionSettings(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionSettings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_get_DeviceId(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ISpiDeviceProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ISpiDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_ISpiDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISpiDeviceProvider[] = {
        { "read", (PyCFunction)ISpiDeviceProvider_Read, METH_VARARGS, nullptr },
        { "transfer_full_duplex", (PyCFunction)ISpiDeviceProvider_TransferFullDuplex, METH_VARARGS, nullptr },
        { "transfer_sequential", (PyCFunction)ISpiDeviceProvider_TransferSequential, METH_VARARGS, nullptr },
        { "write", (PyCFunction)ISpiDeviceProvider_Write, METH_VARARGS, nullptr },
        { "close", (PyCFunction)ISpiDeviceProvider_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ISpiDeviceProvider, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_ISpiDeviceProvider, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_ISpiDeviceProvider, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ISpiDeviceProvider[] = {
        { const_cast<char*>("connection_settings"), (getter)ISpiDeviceProvider_get_ConnectionSettings, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)ISpiDeviceProvider_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ISpiDeviceProvider[] = 
    {
        { Py_tp_new, _new_ISpiDeviceProvider },
        { Py_tp_dealloc, _dealloc_ISpiDeviceProvider },
        { Py_tp_methods, _methods_ISpiDeviceProvider },
        { Py_tp_getset, _getset_ISpiDeviceProvider },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ISpiDeviceProvider =
    {
        "_winrt_Windows_Devices_Spi_Provider.ISpiDeviceProvider",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISpiDeviceProvider
    };

    // ----- ISpiProvider interface --------------------
    constexpr const char* const _type_name_ISpiProvider = "ISpiProvider";

    static PyObject* _new_ISpiProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ISpiProvider);
        return nullptr;
    }

    static void _dealloc_ISpiProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiProvider* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ISpiProvider_GetControllersAsync(py::wrapper::Windows::Devices::Spi::Provider::ISpiProvider* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetControllersAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ISpiProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ISpiProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISpiProvider[] = {
        { "get_controllers_async", (PyCFunction)ISpiProvider_GetControllersAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ISpiProvider, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ISpiProvider[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ISpiProvider[] = 
    {
        { Py_tp_new, _new_ISpiProvider },
        { Py_tp_dealloc, _dealloc_ISpiProvider },
        { Py_tp_methods, _methods_ISpiProvider },
        { Py_tp_getset, _getset_ISpiProvider },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ISpiProvider =
    {
        "_winrt_Windows_Devices_Spi_Provider.ISpiProvider",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ISpiProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISpiProvider
    };

    // ----- Windows.Devices.Spi.Provider Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>::python_type = py::register_python_type(module, _type_name_ProviderSpiConnectionSettings, &_type_spec_ProviderSpiConnectionSettings, bases.get());
            py::winrt_type<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>::python_type = py::register_python_type(module, _type_name_ISpiControllerProvider, &_type_spec_ISpiControllerProvider, bases.get());
            py::winrt_type<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>::python_type = py::register_python_type(module, _type_name_ISpiDeviceProvider, &_type_spec_ISpiDeviceProvider, bases.get());
            py::winrt_type<winrt::Windows::Devices::Spi::Provider::ISpiProvider>::python_type = py::register_python_type(module, _type_name_ISpiProvider, &_type_spec_ISpiProvider, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Spi.Provider");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Spi_Provider",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Spi::Provider

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Spi_Provider (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Spi::Provider::module_def);
}
