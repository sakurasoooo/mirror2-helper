// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Globalization.NumberFormatting.h"

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::DecimalFormatter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::PercentFormatter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::PermilleFormatter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatter2>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatterOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberParser>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberRounder>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberRounderOption>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::ISignedZeroOption>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::ISignificantDigitsOption>::python_type;

namespace py::cpp::Windows::Globalization::NumberFormatting
{
    // ----- CurrencyFormatter class --------------------
    constexpr const char* const _type_name_CurrencyFormatter = "CurrencyFormatter";

    static PyObject* _new_CurrencyFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CurrencyFormatter(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CurrencyFormatter_ApplyRoundingForCurrency(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm>(args, 0);

                self->obj.ApplyRoundingForCurrency(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_Currency(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Currency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_Currency(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Currency(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_Mode(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Mode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_Mode(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatterMode>(arg);

            self->obj.Mode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CurrencyFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CurrencyFormatter[] = {
        { "apply_rounding_for_currency", (PyCFunction)CurrencyFormatter_ApplyRoundingForCurrency, METH_VARARGS, nullptr },
        { "format", (PyCFunction)CurrencyFormatter_Format, METH_VARARGS, nullptr },
        { "format_double", (PyCFunction)CurrencyFormatter_FormatDouble, METH_VARARGS, nullptr },
        { "format_int", (PyCFunction)CurrencyFormatter_FormatInt, METH_VARARGS, nullptr },
        { "format_uint", (PyCFunction)CurrencyFormatter_FormatUInt, METH_VARARGS, nullptr },
        { "parse_double", (PyCFunction)CurrencyFormatter_ParseDouble, METH_VARARGS, nullptr },
        { "parse_int", (PyCFunction)CurrencyFormatter_ParseInt, METH_VARARGS, nullptr },
        { "parse_uint", (PyCFunction)CurrencyFormatter_ParseUInt, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CurrencyFormatter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CurrencyFormatter[] = {
        { const_cast<char*>("currency"), (getter)CurrencyFormatter_get_Currency, (setter)CurrencyFormatter_put_Currency, nullptr, nullptr },
        { const_cast<char*>("mode"), (getter)CurrencyFormatter_get_Mode, (setter)CurrencyFormatter_put_Mode, nullptr, nullptr },
        { const_cast<char*>("numeral_system"), (getter)CurrencyFormatter_get_NumeralSystem, (setter)CurrencyFormatter_put_NumeralSystem, nullptr, nullptr },
        { const_cast<char*>("is_grouped"), (getter)CurrencyFormatter_get_IsGrouped, (setter)CurrencyFormatter_put_IsGrouped, nullptr, nullptr },
        { const_cast<char*>("is_decimal_point_always_displayed"), (getter)CurrencyFormatter_get_IsDecimalPointAlwaysDisplayed, (setter)CurrencyFormatter_put_IsDecimalPointAlwaysDisplayed, nullptr, nullptr },
        { const_cast<char*>("integer_digits"), (getter)CurrencyFormatter_get_IntegerDigits, (setter)CurrencyFormatter_put_IntegerDigits, nullptr, nullptr },
        { const_cast<char*>("fraction_digits"), (getter)CurrencyFormatter_get_FractionDigits, (setter)CurrencyFormatter_put_FractionDigits, nullptr, nullptr },
        { const_cast<char*>("geographic_region"), (getter)CurrencyFormatter_get_GeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_geographic_region"), (getter)CurrencyFormatter_get_ResolvedGeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)CurrencyFormatter_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("languages"), (getter)CurrencyFormatter_get_Languages, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_rounder"), (getter)CurrencyFormatter_get_NumberRounder, (setter)CurrencyFormatter_put_NumberRounder, nullptr, nullptr },
        { const_cast<char*>("is_zero_signed"), (getter)CurrencyFormatter_get_IsZeroSigned, (setter)CurrencyFormatter_put_IsZeroSigned, nullptr, nullptr },
        { const_cast<char*>("significant_digits"), (getter)CurrencyFormatter_get_SignificantDigits, (setter)CurrencyFormatter_put_SignificantDigits, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CurrencyFormatter[] = 
    {
        { Py_tp_new, _new_CurrencyFormatter },
        { Py_tp_dealloc, _dealloc_CurrencyFormatter },
        { Py_tp_methods, _methods_CurrencyFormatter },
        { Py_tp_getset, _getset_CurrencyFormatter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CurrencyFormatter =
    {
        "_winrt_Windows_Globalization_NumberFormatting.CurrencyFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CurrencyFormatter
    };

    // ----- DecimalFormatter class --------------------
    constexpr const char* const _type_name_DecimalFormatter = "DecimalFormatter";

    static PyObject* _new_DecimalFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Globalization::NumberFormatting::DecimalFormatter instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::DecimalFormatter instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DecimalFormatter(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DecimalFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_DecimalFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::DecimalFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DecimalFormatter[] = {
        { "format", (PyCFunction)DecimalFormatter_Format, METH_VARARGS, nullptr },
        { "format_double", (PyCFunction)DecimalFormatter_FormatDouble, METH_VARARGS, nullptr },
        { "format_int", (PyCFunction)DecimalFormatter_FormatInt, METH_VARARGS, nullptr },
        { "format_uint", (PyCFunction)DecimalFormatter_FormatUInt, METH_VARARGS, nullptr },
        { "parse_double", (PyCFunction)DecimalFormatter_ParseDouble, METH_VARARGS, nullptr },
        { "parse_int", (PyCFunction)DecimalFormatter_ParseInt, METH_VARARGS, nullptr },
        { "parse_uint", (PyCFunction)DecimalFormatter_ParseUInt, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_DecimalFormatter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DecimalFormatter[] = {
        { const_cast<char*>("is_decimal_point_always_displayed"), (getter)DecimalFormatter_get_IsDecimalPointAlwaysDisplayed, (setter)DecimalFormatter_put_IsDecimalPointAlwaysDisplayed, nullptr, nullptr },
        { const_cast<char*>("integer_digits"), (getter)DecimalFormatter_get_IntegerDigits, (setter)DecimalFormatter_put_IntegerDigits, nullptr, nullptr },
        { const_cast<char*>("is_grouped"), (getter)DecimalFormatter_get_IsGrouped, (setter)DecimalFormatter_put_IsGrouped, nullptr, nullptr },
        { const_cast<char*>("numeral_system"), (getter)DecimalFormatter_get_NumeralSystem, (setter)DecimalFormatter_put_NumeralSystem, nullptr, nullptr },
        { const_cast<char*>("fraction_digits"), (getter)DecimalFormatter_get_FractionDigits, (setter)DecimalFormatter_put_FractionDigits, nullptr, nullptr },
        { const_cast<char*>("geographic_region"), (getter)DecimalFormatter_get_GeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("languages"), (getter)DecimalFormatter_get_Languages, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_geographic_region"), (getter)DecimalFormatter_get_ResolvedGeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)DecimalFormatter_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_rounder"), (getter)DecimalFormatter_get_NumberRounder, (setter)DecimalFormatter_put_NumberRounder, nullptr, nullptr },
        { const_cast<char*>("is_zero_signed"), (getter)DecimalFormatter_get_IsZeroSigned, (setter)DecimalFormatter_put_IsZeroSigned, nullptr, nullptr },
        { const_cast<char*>("significant_digits"), (getter)DecimalFormatter_get_SignificantDigits, (setter)DecimalFormatter_put_SignificantDigits, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DecimalFormatter[] = 
    {
        { Py_tp_new, _new_DecimalFormatter },
        { Py_tp_dealloc, _dealloc_DecimalFormatter },
        { Py_tp_methods, _methods_DecimalFormatter },
        { Py_tp_getset, _getset_DecimalFormatter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DecimalFormatter =
    {
        "_winrt_Windows_Globalization_NumberFormatting.DecimalFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DecimalFormatter
    };

    // ----- IncrementNumberRounder class --------------------
    constexpr const char* const _type_name_IncrementNumberRounder = "IncrementNumberRounder";

    static PyObject* _new_IncrementNumberRounder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_IncrementNumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IncrementNumberRounder_RoundDouble(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.RoundDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundInt32(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.RoundInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundInt64(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.RoundInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundSingle(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<float>(args, 0);

                return py::convert(self->obj.RoundSingle(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundUInt32(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.RoundUInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundUInt64(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.RoundUInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_get_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RoundingAlgorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IncrementNumberRounder_put_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm>(arg);

            self->obj.RoundingAlgorithm(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IncrementNumberRounder_get_Increment(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Increment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IncrementNumberRounder_put_Increment(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Increment(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_IncrementNumberRounder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IncrementNumberRounder[] = {
        { "round_double", (PyCFunction)IncrementNumberRounder_RoundDouble, METH_VARARGS, nullptr },
        { "round_int32", (PyCFunction)IncrementNumberRounder_RoundInt32, METH_VARARGS, nullptr },
        { "round_int64", (PyCFunction)IncrementNumberRounder_RoundInt64, METH_VARARGS, nullptr },
        { "round_single", (PyCFunction)IncrementNumberRounder_RoundSingle, METH_VARARGS, nullptr },
        { "round_uint32", (PyCFunction)IncrementNumberRounder_RoundUInt32, METH_VARARGS, nullptr },
        { "round_uint64", (PyCFunction)IncrementNumberRounder_RoundUInt64, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IncrementNumberRounder, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IncrementNumberRounder[] = {
        { const_cast<char*>("rounding_algorithm"), (getter)IncrementNumberRounder_get_RoundingAlgorithm, (setter)IncrementNumberRounder_put_RoundingAlgorithm, nullptr, nullptr },
        { const_cast<char*>("increment"), (getter)IncrementNumberRounder_get_Increment, (setter)IncrementNumberRounder_put_Increment, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IncrementNumberRounder[] = 
    {
        { Py_tp_new, _new_IncrementNumberRounder },
        { Py_tp_dealloc, _dealloc_IncrementNumberRounder },
        { Py_tp_methods, _methods_IncrementNumberRounder },
        { Py_tp_getset, _getset_IncrementNumberRounder },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IncrementNumberRounder =
    {
        "_winrt_Windows_Globalization_NumberFormatting.IncrementNumberRounder",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IncrementNumberRounder
    };

    // ----- NumeralSystemTranslator class --------------------
    constexpr const char* const _type_name_NumeralSystemTranslator = "NumeralSystemTranslator";

    static PyObject* _new_NumeralSystemTranslator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_NumeralSystemTranslator(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* NumeralSystemTranslator_TranslateNumerals(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TranslateNumerals(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* NumeralSystemTranslator_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int NumeralSystemTranslator_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* NumeralSystemTranslator_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemTranslator_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_NumeralSystemTranslator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NumeralSystemTranslator[] = {
        { "translate_numerals", (PyCFunction)NumeralSystemTranslator_TranslateNumerals, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_NumeralSystemTranslator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_NumeralSystemTranslator[] = {
        { const_cast<char*>("numeral_system"), (getter)NumeralSystemTranslator_get_NumeralSystem, (setter)NumeralSystemTranslator_put_NumeralSystem, nullptr, nullptr },
        { const_cast<char*>("languages"), (getter)NumeralSystemTranslator_get_Languages, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)NumeralSystemTranslator_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_NumeralSystemTranslator[] = 
    {
        { Py_tp_new, _new_NumeralSystemTranslator },
        { Py_tp_dealloc, _dealloc_NumeralSystemTranslator },
        { Py_tp_methods, _methods_NumeralSystemTranslator },
        { Py_tp_getset, _getset_NumeralSystemTranslator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_NumeralSystemTranslator =
    {
        "_winrt_Windows_Globalization_NumberFormatting.NumeralSystemTranslator",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NumeralSystemTranslator
    };

    // ----- PercentFormatter class --------------------
    constexpr const char* const _type_name_PercentFormatter = "PercentFormatter";

    static PyObject* _new_PercentFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Globalization::NumberFormatting::PercentFormatter instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::PercentFormatter instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PercentFormatter(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PercentFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PercentFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::PercentFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PercentFormatter[] = {
        { "format", (PyCFunction)PercentFormatter_Format, METH_VARARGS, nullptr },
        { "format_double", (PyCFunction)PercentFormatter_FormatDouble, METH_VARARGS, nullptr },
        { "format_int", (PyCFunction)PercentFormatter_FormatInt, METH_VARARGS, nullptr },
        { "format_uint", (PyCFunction)PercentFormatter_FormatUInt, METH_VARARGS, nullptr },
        { "parse_double", (PyCFunction)PercentFormatter_ParseDouble, METH_VARARGS, nullptr },
        { "parse_int", (PyCFunction)PercentFormatter_ParseInt, METH_VARARGS, nullptr },
        { "parse_uint", (PyCFunction)PercentFormatter_ParseUInt, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PercentFormatter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PercentFormatter[] = {
        { const_cast<char*>("is_decimal_point_always_displayed"), (getter)PercentFormatter_get_IsDecimalPointAlwaysDisplayed, (setter)PercentFormatter_put_IsDecimalPointAlwaysDisplayed, nullptr, nullptr },
        { const_cast<char*>("integer_digits"), (getter)PercentFormatter_get_IntegerDigits, (setter)PercentFormatter_put_IntegerDigits, nullptr, nullptr },
        { const_cast<char*>("is_grouped"), (getter)PercentFormatter_get_IsGrouped, (setter)PercentFormatter_put_IsGrouped, nullptr, nullptr },
        { const_cast<char*>("numeral_system"), (getter)PercentFormatter_get_NumeralSystem, (setter)PercentFormatter_put_NumeralSystem, nullptr, nullptr },
        { const_cast<char*>("fraction_digits"), (getter)PercentFormatter_get_FractionDigits, (setter)PercentFormatter_put_FractionDigits, nullptr, nullptr },
        { const_cast<char*>("geographic_region"), (getter)PercentFormatter_get_GeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("languages"), (getter)PercentFormatter_get_Languages, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_geographic_region"), (getter)PercentFormatter_get_ResolvedGeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)PercentFormatter_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_rounder"), (getter)PercentFormatter_get_NumberRounder, (setter)PercentFormatter_put_NumberRounder, nullptr, nullptr },
        { const_cast<char*>("is_zero_signed"), (getter)PercentFormatter_get_IsZeroSigned, (setter)PercentFormatter_put_IsZeroSigned, nullptr, nullptr },
        { const_cast<char*>("significant_digits"), (getter)PercentFormatter_get_SignificantDigits, (setter)PercentFormatter_put_SignificantDigits, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PercentFormatter[] = 
    {
        { Py_tp_new, _new_PercentFormatter },
        { Py_tp_dealloc, _dealloc_PercentFormatter },
        { Py_tp_methods, _methods_PercentFormatter },
        { Py_tp_getset, _getset_PercentFormatter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PercentFormatter =
    {
        "_winrt_Windows_Globalization_NumberFormatting.PercentFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PercentFormatter
    };

    // ----- PermilleFormatter class --------------------
    constexpr const char* const _type_name_PermilleFormatter = "PermilleFormatter";

    static PyObject* _new_PermilleFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Globalization::NumberFormatting::PermilleFormatter instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::PermilleFormatter instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PermilleFormatter(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PermilleFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PermilleFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::PermilleFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PermilleFormatter[] = {
        { "format", (PyCFunction)PermilleFormatter_Format, METH_VARARGS, nullptr },
        { "format_double", (PyCFunction)PermilleFormatter_FormatDouble, METH_VARARGS, nullptr },
        { "format_int", (PyCFunction)PermilleFormatter_FormatInt, METH_VARARGS, nullptr },
        { "format_uint", (PyCFunction)PermilleFormatter_FormatUInt, METH_VARARGS, nullptr },
        { "parse_double", (PyCFunction)PermilleFormatter_ParseDouble, METH_VARARGS, nullptr },
        { "parse_int", (PyCFunction)PermilleFormatter_ParseInt, METH_VARARGS, nullptr },
        { "parse_uint", (PyCFunction)PermilleFormatter_ParseUInt, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PermilleFormatter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PermilleFormatter[] = {
        { const_cast<char*>("is_decimal_point_always_displayed"), (getter)PermilleFormatter_get_IsDecimalPointAlwaysDisplayed, (setter)PermilleFormatter_put_IsDecimalPointAlwaysDisplayed, nullptr, nullptr },
        { const_cast<char*>("integer_digits"), (getter)PermilleFormatter_get_IntegerDigits, (setter)PermilleFormatter_put_IntegerDigits, nullptr, nullptr },
        { const_cast<char*>("is_grouped"), (getter)PermilleFormatter_get_IsGrouped, (setter)PermilleFormatter_put_IsGrouped, nullptr, nullptr },
        { const_cast<char*>("numeral_system"), (getter)PermilleFormatter_get_NumeralSystem, (setter)PermilleFormatter_put_NumeralSystem, nullptr, nullptr },
        { const_cast<char*>("fraction_digits"), (getter)PermilleFormatter_get_FractionDigits, (setter)PermilleFormatter_put_FractionDigits, nullptr, nullptr },
        { const_cast<char*>("geographic_region"), (getter)PermilleFormatter_get_GeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("languages"), (getter)PermilleFormatter_get_Languages, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_geographic_region"), (getter)PermilleFormatter_get_ResolvedGeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)PermilleFormatter_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_rounder"), (getter)PermilleFormatter_get_NumberRounder, (setter)PermilleFormatter_put_NumberRounder, nullptr, nullptr },
        { const_cast<char*>("is_zero_signed"), (getter)PermilleFormatter_get_IsZeroSigned, (setter)PermilleFormatter_put_IsZeroSigned, nullptr, nullptr },
        { const_cast<char*>("significant_digits"), (getter)PermilleFormatter_get_SignificantDigits, (setter)PermilleFormatter_put_SignificantDigits, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PermilleFormatter[] = 
    {
        { Py_tp_new, _new_PermilleFormatter },
        { Py_tp_dealloc, _dealloc_PermilleFormatter },
        { Py_tp_methods, _methods_PermilleFormatter },
        { Py_tp_getset, _getset_PermilleFormatter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PermilleFormatter =
    {
        "_winrt_Windows_Globalization_NumberFormatting.PermilleFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PermilleFormatter
    };

    // ----- SignificantDigitsNumberRounder class --------------------
    constexpr const char* const _type_name_SignificantDigitsNumberRounder = "SignificantDigitsNumberRounder";

    static PyObject* _new_SignificantDigitsNumberRounder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SignificantDigitsNumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SignificantDigitsNumberRounder_RoundDouble(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.RoundDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundInt32(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.RoundInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundInt64(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.RoundInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundSingle(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<float>(args, 0);

                return py::convert(self->obj.RoundSingle(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundUInt32(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.RoundUInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundUInt64(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.RoundUInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SignificantDigitsNumberRounder_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_get_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RoundingAlgorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SignificantDigitsNumberRounder_put_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm>(arg);

            self->obj.RoundingAlgorithm(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SignificantDigitsNumberRounder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SignificantDigitsNumberRounder[] = {
        { "round_double", (PyCFunction)SignificantDigitsNumberRounder_RoundDouble, METH_VARARGS, nullptr },
        { "round_int32", (PyCFunction)SignificantDigitsNumberRounder_RoundInt32, METH_VARARGS, nullptr },
        { "round_int64", (PyCFunction)SignificantDigitsNumberRounder_RoundInt64, METH_VARARGS, nullptr },
        { "round_single", (PyCFunction)SignificantDigitsNumberRounder_RoundSingle, METH_VARARGS, nullptr },
        { "round_uint32", (PyCFunction)SignificantDigitsNumberRounder_RoundUInt32, METH_VARARGS, nullptr },
        { "round_uint64", (PyCFunction)SignificantDigitsNumberRounder_RoundUInt64, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SignificantDigitsNumberRounder, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SignificantDigitsNumberRounder[] = {
        { const_cast<char*>("significant_digits"), (getter)SignificantDigitsNumberRounder_get_SignificantDigits, (setter)SignificantDigitsNumberRounder_put_SignificantDigits, nullptr, nullptr },
        { const_cast<char*>("rounding_algorithm"), (getter)SignificantDigitsNumberRounder_get_RoundingAlgorithm, (setter)SignificantDigitsNumberRounder_put_RoundingAlgorithm, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SignificantDigitsNumberRounder[] = 
    {
        { Py_tp_new, _new_SignificantDigitsNumberRounder },
        { Py_tp_dealloc, _dealloc_SignificantDigitsNumberRounder },
        { Py_tp_methods, _methods_SignificantDigitsNumberRounder },
        { Py_tp_getset, _getset_SignificantDigitsNumberRounder },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SignificantDigitsNumberRounder =
    {
        "_winrt_Windows_Globalization_NumberFormatting.SignificantDigitsNumberRounder",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SignificantDigitsNumberRounder
    };

    // ----- INumberFormatter interface --------------------
    constexpr const char* const _type_name_INumberFormatter = "INumberFormatter";

    static PyObject* _new_INumberFormatter(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_INumberFormatter);
        return nullptr;
    }

    static void _dealloc_INumberFormatter(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* INumberFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberFormatter[] = {
        { "format", (PyCFunction)INumberFormatter_Format, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_INumberFormatter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_INumberFormatter[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_INumberFormatter[] = 
    {
        { Py_tp_new, _new_INumberFormatter },
        { Py_tp_dealloc, _dealloc_INumberFormatter },
        { Py_tp_methods, _methods_INumberFormatter },
        { Py_tp_getset, _getset_INumberFormatter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_INumberFormatter =
    {
        "_winrt_Windows_Globalization_NumberFormatting.INumberFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberFormatter
    };

    // ----- INumberFormatter2 interface --------------------
    constexpr const char* const _type_name_INumberFormatter2 = "INumberFormatter2";

    static PyObject* _new_INumberFormatter2(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_INumberFormatter2);
        return nullptr;
    }

    static void _dealloc_INumberFormatter2(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* INumberFormatter2_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberFormatter2_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberFormatter2_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberFormatter2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberFormatter2>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberFormatter2[] = {
        { "format_double", (PyCFunction)INumberFormatter2_FormatDouble, METH_VARARGS, nullptr },
        { "format_int", (PyCFunction)INumberFormatter2_FormatInt, METH_VARARGS, nullptr },
        { "format_uint", (PyCFunction)INumberFormatter2_FormatUInt, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_INumberFormatter2, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_INumberFormatter2[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_INumberFormatter2[] = 
    {
        { Py_tp_new, _new_INumberFormatter2 },
        { Py_tp_dealloc, _dealloc_INumberFormatter2 },
        { Py_tp_methods, _methods_INumberFormatter2 },
        { Py_tp_getset, _getset_INumberFormatter2 },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_INumberFormatter2 =
    {
        "_winrt_Windows_Globalization_NumberFormatting.INumberFormatter2",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberFormatter2
    };

    // ----- INumberFormatterOptions interface --------------------
    constexpr const char* const _type_name_INumberFormatterOptions = "INumberFormatterOptions";

    static PyObject* _new_INumberFormatterOptions(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_INumberFormatterOptions);
        return nullptr;
    }

    static void _dealloc_INumberFormatterOptions(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* INumberFormatterOptions_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* INumberFormatterOptions_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* INumberFormatterOptions_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* INumberFormatterOptions_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_INumberFormatterOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberFormatterOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberFormatterOptions[] = {
        { "_from", (PyCFunction)_from_INumberFormatterOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_INumberFormatterOptions[] = {
        { const_cast<char*>("fraction_digits"), (getter)INumberFormatterOptions_get_FractionDigits, (setter)INumberFormatterOptions_put_FractionDigits, nullptr, nullptr },
        { const_cast<char*>("geographic_region"), (getter)INumberFormatterOptions_get_GeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("integer_digits"), (getter)INumberFormatterOptions_get_IntegerDigits, (setter)INumberFormatterOptions_put_IntegerDigits, nullptr, nullptr },
        { const_cast<char*>("is_decimal_point_always_displayed"), (getter)INumberFormatterOptions_get_IsDecimalPointAlwaysDisplayed, (setter)INumberFormatterOptions_put_IsDecimalPointAlwaysDisplayed, nullptr, nullptr },
        { const_cast<char*>("is_grouped"), (getter)INumberFormatterOptions_get_IsGrouped, (setter)INumberFormatterOptions_put_IsGrouped, nullptr, nullptr },
        { const_cast<char*>("languages"), (getter)INumberFormatterOptions_get_Languages, nullptr, nullptr, nullptr },
        { const_cast<char*>("numeral_system"), (getter)INumberFormatterOptions_get_NumeralSystem, (setter)INumberFormatterOptions_put_NumeralSystem, nullptr, nullptr },
        { const_cast<char*>("resolved_geographic_region"), (getter)INumberFormatterOptions_get_ResolvedGeographicRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)INumberFormatterOptions_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_INumberFormatterOptions[] = 
    {
        { Py_tp_new, _new_INumberFormatterOptions },
        { Py_tp_dealloc, _dealloc_INumberFormatterOptions },
        { Py_tp_methods, _methods_INumberFormatterOptions },
        { Py_tp_getset, _getset_INumberFormatterOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_INumberFormatterOptions =
    {
        "_winrt_Windows_Globalization_NumberFormatting.INumberFormatterOptions",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberFormatterOptions
    };

    // ----- INumberParser interface --------------------
    constexpr const char* const _type_name_INumberParser = "INumberParser";

    static PyObject* _new_INumberParser(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_INumberParser);
        return nullptr;
    }

    static void _dealloc_INumberParser(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* INumberParser_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberParser_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberParser_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberParser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberParser>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberParser[] = {
        { "parse_double", (PyCFunction)INumberParser_ParseDouble, METH_VARARGS, nullptr },
        { "parse_int", (PyCFunction)INumberParser_ParseInt, METH_VARARGS, nullptr },
        { "parse_uint", (PyCFunction)INumberParser_ParseUInt, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_INumberParser, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_INumberParser[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_INumberParser[] = 
    {
        { Py_tp_new, _new_INumberParser },
        { Py_tp_dealloc, _dealloc_INumberParser },
        { Py_tp_methods, _methods_INumberParser },
        { Py_tp_getset, _getset_INumberParser },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_INumberParser =
    {
        "_winrt_Windows_Globalization_NumberFormatting.INumberParser",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberParser
    };

    // ----- INumberRounder interface --------------------
    constexpr const char* const _type_name_INumberRounder = "INumberRounder";

    static PyObject* _new_INumberRounder(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_INumberRounder);
        return nullptr;
    }

    static void _dealloc_INumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* INumberRounder_RoundDouble(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.RoundDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundInt32(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.RoundInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundInt64(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.RoundInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundSingle(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<float>(args, 0);

                return py::convert(self->obj.RoundSingle(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundUInt32(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.RoundUInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundUInt64(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.RoundUInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberRounder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberRounder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberRounder[] = {
        { "round_double", (PyCFunction)INumberRounder_RoundDouble, METH_VARARGS, nullptr },
        { "round_int32", (PyCFunction)INumberRounder_RoundInt32, METH_VARARGS, nullptr },
        { "round_int64", (PyCFunction)INumberRounder_RoundInt64, METH_VARARGS, nullptr },
        { "round_single", (PyCFunction)INumberRounder_RoundSingle, METH_VARARGS, nullptr },
        { "round_uint32", (PyCFunction)INumberRounder_RoundUInt32, METH_VARARGS, nullptr },
        { "round_uint64", (PyCFunction)INumberRounder_RoundUInt64, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_INumberRounder, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_INumberRounder[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_INumberRounder[] = 
    {
        { Py_tp_new, _new_INumberRounder },
        { Py_tp_dealloc, _dealloc_INumberRounder },
        { Py_tp_methods, _methods_INumberRounder },
        { Py_tp_getset, _getset_INumberRounder },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_INumberRounder =
    {
        "_winrt_Windows_Globalization_NumberFormatting.INumberRounder",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberRounder
    };

    // ----- INumberRounderOption interface --------------------
    constexpr const char* const _type_name_INumberRounderOption = "INumberRounderOption";

    static PyObject* _new_INumberRounderOption(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_INumberRounderOption);
        return nullptr;
    }

    static void _dealloc_INumberRounderOption(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* INumberRounderOption_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberRounderOption_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_INumberRounderOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberRounderOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberRounderOption[] = {
        { "_from", (PyCFunction)_from_INumberRounderOption, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_INumberRounderOption[] = {
        { const_cast<char*>("number_rounder"), (getter)INumberRounderOption_get_NumberRounder, (setter)INumberRounderOption_put_NumberRounder, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_INumberRounderOption[] = 
    {
        { Py_tp_new, _new_INumberRounderOption },
        { Py_tp_dealloc, _dealloc_INumberRounderOption },
        { Py_tp_methods, _methods_INumberRounderOption },
        { Py_tp_getset, _getset_INumberRounderOption },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_INumberRounderOption =
    {
        "_winrt_Windows_Globalization_NumberFormatting.INumberRounderOption",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberRounderOption
    };

    // ----- ISignedZeroOption interface --------------------
    constexpr const char* const _type_name_ISignedZeroOption = "ISignedZeroOption";

    static PyObject* _new_ISignedZeroOption(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ISignedZeroOption);
        return nullptr;
    }

    static void _dealloc_ISignedZeroOption(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ISignedZeroOption_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISignedZeroOption_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ISignedZeroOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::ISignedZeroOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISignedZeroOption[] = {
        { "_from", (PyCFunction)_from_ISignedZeroOption, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ISignedZeroOption[] = {
        { const_cast<char*>("is_zero_signed"), (getter)ISignedZeroOption_get_IsZeroSigned, (setter)ISignedZeroOption_put_IsZeroSigned, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ISignedZeroOption[] = 
    {
        { Py_tp_new, _new_ISignedZeroOption },
        { Py_tp_dealloc, _dealloc_ISignedZeroOption },
        { Py_tp_methods, _methods_ISignedZeroOption },
        { Py_tp_getset, _getset_ISignedZeroOption },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ISignedZeroOption =
    {
        "_winrt_Windows_Globalization_NumberFormatting.ISignedZeroOption",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISignedZeroOption
    };

    // ----- ISignificantDigitsOption interface --------------------
    constexpr const char* const _type_name_ISignificantDigitsOption = "ISignificantDigitsOption";

    static PyObject* _new_ISignificantDigitsOption(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_ISignificantDigitsOption);
        return nullptr;
    }

    static void _dealloc_ISignificantDigitsOption(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ISignificantDigitsOption_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISignificantDigitsOption_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ISignificantDigitsOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::ISignificantDigitsOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISignificantDigitsOption[] = {
        { "_from", (PyCFunction)_from_ISignificantDigitsOption, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ISignificantDigitsOption[] = {
        { const_cast<char*>("significant_digits"), (getter)ISignificantDigitsOption_get_SignificantDigits, (setter)ISignificantDigitsOption_put_SignificantDigits, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ISignificantDigitsOption[] = 
    {
        { Py_tp_new, _new_ISignificantDigitsOption },
        { Py_tp_dealloc, _dealloc_ISignificantDigitsOption },
        { Py_tp_methods, _methods_ISignificantDigitsOption },
        { Py_tp_getset, _getset_ISignificantDigitsOption },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ISignificantDigitsOption =
    {
        "_winrt_Windows_Globalization_NumberFormatting.ISignificantDigitsOption",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISignificantDigitsOption
    };

    // ----- Windows.Globalization.NumberFormatting Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter>::python_type = py::register_python_type(module, _type_name_CurrencyFormatter, &_type_spec_CurrencyFormatter, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::DecimalFormatter>::python_type = py::register_python_type(module, _type_name_DecimalFormatter, &_type_spec_DecimalFormatter, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder>::python_type = py::register_python_type(module, _type_name_IncrementNumberRounder, &_type_spec_IncrementNumberRounder, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator>::python_type = py::register_python_type(module, _type_name_NumeralSystemTranslator, &_type_spec_NumeralSystemTranslator, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::PercentFormatter>::python_type = py::register_python_type(module, _type_name_PercentFormatter, &_type_spec_PercentFormatter, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::PermilleFormatter>::python_type = py::register_python_type(module, _type_name_PermilleFormatter, &_type_spec_PermilleFormatter, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder>::python_type = py::register_python_type(module, _type_name_SignificantDigitsNumberRounder, &_type_spec_SignificantDigitsNumberRounder, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatter>::python_type = py::register_python_type(module, _type_name_INumberFormatter, &_type_spec_INumberFormatter, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatter2>::python_type = py::register_python_type(module, _type_name_INumberFormatter2, &_type_spec_INumberFormatter2, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatterOptions>::python_type = py::register_python_type(module, _type_name_INumberFormatterOptions, &_type_spec_INumberFormatterOptions, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberParser>::python_type = py::register_python_type(module, _type_name_INumberParser, &_type_spec_INumberParser, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberRounder>::python_type = py::register_python_type(module, _type_name_INumberRounder, &_type_spec_INumberRounder, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberRounderOption>::python_type = py::register_python_type(module, _type_name_INumberRounderOption, &_type_spec_INumberRounderOption, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::ISignedZeroOption>::python_type = py::register_python_type(module, _type_name_ISignedZeroOption, &_type_spec_ISignedZeroOption, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumberFormatting::ISignificantDigitsOption>::python_type = py::register_python_type(module, _type_name_ISignificantDigitsOption, &_type_spec_ISignificantDigitsOption, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Globalization.NumberFormatting");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Globalization_NumberFormatting",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Globalization::NumberFormatting

PyMODINIT_FUNC
PyInit__winrt_Windows_Globalization_NumberFormatting (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Globalization::NumberFormatting::module_def);
}
