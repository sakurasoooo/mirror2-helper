// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.SmartCards.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::CardAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::CardRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::KnownSmartCardAppletIds>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCard>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroup>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardChallengeContext>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardConnection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGenerator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardPinPolicy>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardPinResetDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardPinResetRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardProvisioning>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardReader>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardTriggerDetails>::python_type;

namespace py::cpp::Windows::Devices::SmartCards
{
    // ----- CardAddedEventArgs class --------------------
    constexpr const char* const _type_name_CardAddedEventArgs = "CardAddedEventArgs";

    static PyObject* _new_CardAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CardAddedEventArgs);
        return nullptr;
    }

    static void _dealloc_CardAddedEventArgs(py::wrapper::Windows::Devices::SmartCards::CardAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CardAddedEventArgs_get_SmartCard(py::wrapper::Windows::Devices::SmartCards::CardAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmartCard());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CardAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::CardAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CardAddedEventArgs[] = {
        { "_from", (PyCFunction)_from_CardAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CardAddedEventArgs[] = {
        { const_cast<char*>("smart_card"), (getter)CardAddedEventArgs_get_SmartCard, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CardAddedEventArgs[] = 
    {
        { Py_tp_new, _new_CardAddedEventArgs },
        { Py_tp_dealloc, _dealloc_CardAddedEventArgs },
        { Py_tp_methods, _methods_CardAddedEventArgs },
        { Py_tp_getset, _getset_CardAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CardAddedEventArgs =
    {
        "_winrt_Windows_Devices_SmartCards.CardAddedEventArgs",
        sizeof(py::wrapper::Windows::Devices::SmartCards::CardAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CardAddedEventArgs
    };

    // ----- CardRemovedEventArgs class --------------------
    constexpr const char* const _type_name_CardRemovedEventArgs = "CardRemovedEventArgs";

    static PyObject* _new_CardRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CardRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_CardRemovedEventArgs(py::wrapper::Windows::Devices::SmartCards::CardRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CardRemovedEventArgs_get_SmartCard(py::wrapper::Windows::Devices::SmartCards::CardRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmartCard());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CardRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::CardRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CardRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_CardRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CardRemovedEventArgs[] = {
        { const_cast<char*>("smart_card"), (getter)CardRemovedEventArgs_get_SmartCard, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CardRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_CardRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_CardRemovedEventArgs },
        { Py_tp_methods, _methods_CardRemovedEventArgs },
        { Py_tp_getset, _getset_CardRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CardRemovedEventArgs =
    {
        "_winrt_Windows_Devices_SmartCards.CardRemovedEventArgs",
        sizeof(py::wrapper::Windows::Devices::SmartCards::CardRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CardRemovedEventArgs
    };

    // ----- KnownSmartCardAppletIds class --------------------
    constexpr const char* const _type_name_KnownSmartCardAppletIds = "KnownSmartCardAppletIds";

    static PyObject* _new_KnownSmartCardAppletIds(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownSmartCardAppletIds);
        return nullptr;
    }

    static PyObject* KnownSmartCardAppletIds_get_PaymentSystemEnvironment(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::SmartCards::KnownSmartCardAppletIds::PaymentSystemEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* KnownSmartCardAppletIds_get_ProximityPaymentSystemEnvironment(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::SmartCards::KnownSmartCardAppletIds::ProximityPaymentSystemEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownSmartCardAppletIds[] = {
        { "get_payment_system_environment", (PyCFunction)KnownSmartCardAppletIds_get_PaymentSystemEnvironment, METH_NOARGS | METH_STATIC, nullptr },
        { "get_proximity_payment_system_environment", (PyCFunction)KnownSmartCardAppletIds_get_ProximityPaymentSystemEnvironment, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownSmartCardAppletIds[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownSmartCardAppletIds[] = 
    {
        { Py_tp_new, _new_KnownSmartCardAppletIds },
        { Py_tp_methods, _methods_KnownSmartCardAppletIds },
        { Py_tp_getset, _getset_KnownSmartCardAppletIds },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownSmartCardAppletIds =
    {
        "_winrt_Windows_Devices_SmartCards.KnownSmartCardAppletIds",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownSmartCardAppletIds
    };

    // ----- SmartCard class --------------------
    constexpr const char* const _type_name_SmartCard = "SmartCard";

    static PyObject* _new_SmartCard(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCard);
        return nullptr;
    }

    static void _dealloc_SmartCard(py::wrapper::Windows::Devices::SmartCards::SmartCard* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCard_ConnectAsync(py::wrapper::Windows::Devices::SmartCards::SmartCard* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ConnectAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCard_GetAnswerToResetAsync(py::wrapper::Windows::Devices::SmartCards::SmartCard* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAnswerToResetAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCard_GetStatusAsync(py::wrapper::Windows::Devices::SmartCards::SmartCard* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStatusAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCard_get_Reader(py::wrapper::Windows::Devices::SmartCards::SmartCard* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reader());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCard(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCard>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCard[] = {
        { "connect_async", (PyCFunction)SmartCard_ConnectAsync, METH_VARARGS, nullptr },
        { "get_answer_to_reset_async", (PyCFunction)SmartCard_GetAnswerToResetAsync, METH_VARARGS, nullptr },
        { "get_status_async", (PyCFunction)SmartCard_GetStatusAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCard, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCard[] = {
        { const_cast<char*>("reader"), (getter)SmartCard_get_Reader, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCard[] = 
    {
        { Py_tp_new, _new_SmartCard },
        { Py_tp_dealloc, _dealloc_SmartCard },
        { Py_tp_methods, _methods_SmartCard },
        { Py_tp_getset, _getset_SmartCard },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCard =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCard",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCard),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCard
    };

    // ----- SmartCardAppletIdGroup class --------------------
    constexpr const char* const _type_name_SmartCardAppletIdGroup = "SmartCardAppletIdGroup";

    static PyObject* _new_SmartCardAppletIdGroup(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Streams::IBuffer>>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardEmulationCategory>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardEmulationType>(args, 3);

                winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroup instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroup instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardAppletIdGroup(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardAppletIdGroup_get_SmartCardEmulationType(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmartCardEmulationType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAppletIdGroup_put_SmartCardEmulationType(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardEmulationType>(arg);

            self->obj.SmartCardEmulationType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_SmartCardEmulationCategory(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmartCardEmulationCategory());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAppletIdGroup_put_SmartCardEmulationCategory(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardEmulationCategory>(arg);

            self->obj.SmartCardEmulationCategory(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_DisplayName(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAppletIdGroup_put_DisplayName(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_AutomaticEnablement(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutomaticEnablement());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAppletIdGroup_put_AutomaticEnablement(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AutomaticEnablement(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_AppletIds(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppletIds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_SecureUserAuthenticationRequired(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SecureUserAuthenticationRequired());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAppletIdGroup_put_SecureUserAuthenticationRequired(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.SecureUserAuthenticationRequired(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_Logo(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAppletIdGroup_put_Logo(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_Description(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAppletIdGroup_put_Description(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Description(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_Properties(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroup_get_MaxAppletIds(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroup::MaxAppletIds());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardAppletIdGroup(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroup>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardAppletIdGroup[] = {
        { "get_max_applet_ids", (PyCFunction)SmartCardAppletIdGroup_get_MaxAppletIds, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_SmartCardAppletIdGroup, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardAppletIdGroup[] = {
        { const_cast<char*>("smart_card_emulation_type"), (getter)SmartCardAppletIdGroup_get_SmartCardEmulationType, (setter)SmartCardAppletIdGroup_put_SmartCardEmulationType, nullptr, nullptr },
        { const_cast<char*>("smart_card_emulation_category"), (getter)SmartCardAppletIdGroup_get_SmartCardEmulationCategory, (setter)SmartCardAppletIdGroup_put_SmartCardEmulationCategory, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)SmartCardAppletIdGroup_get_DisplayName, (setter)SmartCardAppletIdGroup_put_DisplayName, nullptr, nullptr },
        { const_cast<char*>("automatic_enablement"), (getter)SmartCardAppletIdGroup_get_AutomaticEnablement, (setter)SmartCardAppletIdGroup_put_AutomaticEnablement, nullptr, nullptr },
        { const_cast<char*>("applet_ids"), (getter)SmartCardAppletIdGroup_get_AppletIds, nullptr, nullptr, nullptr },
        { const_cast<char*>("secure_user_authentication_required"), (getter)SmartCardAppletIdGroup_get_SecureUserAuthenticationRequired, (setter)SmartCardAppletIdGroup_put_SecureUserAuthenticationRequired, nullptr, nullptr },
        { const_cast<char*>("logo"), (getter)SmartCardAppletIdGroup_get_Logo, (setter)SmartCardAppletIdGroup_put_Logo, nullptr, nullptr },
        { const_cast<char*>("description"), (getter)SmartCardAppletIdGroup_get_Description, (setter)SmartCardAppletIdGroup_put_Description, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)SmartCardAppletIdGroup_get_Properties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardAppletIdGroup[] = 
    {
        { Py_tp_new, _new_SmartCardAppletIdGroup },
        { Py_tp_dealloc, _dealloc_SmartCardAppletIdGroup },
        { Py_tp_methods, _methods_SmartCardAppletIdGroup },
        { Py_tp_getset, _getset_SmartCardAppletIdGroup },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardAppletIdGroup =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardAppletIdGroup",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroup),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardAppletIdGroup
    };

    // ----- SmartCardAppletIdGroupRegistration class --------------------
    constexpr const char* const _type_name_SmartCardAppletIdGroupRegistration = "SmartCardAppletIdGroupRegistration";

    static PyObject* _new_SmartCardAppletIdGroupRegistration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardAppletIdGroupRegistration);
        return nullptr;
    }

    static void _dealloc_SmartCardAppletIdGroupRegistration(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardAppletIdGroupRegistration_RequestActivationPolicyChangeAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroupActivationPolicy>(args, 0);

                return py::convert(self->obj.RequestActivationPolicyChangeAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroupRegistration_SetAutomaticResponseApdusAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu>>(args, 0);

                return py::convert(self->obj.SetAutomaticResponseApdusAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroupRegistration_SetPropertiesAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::ValueSet>(args, 0);

                return py::convert(self->obj.SetPropertiesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroupRegistration_get_ActivationPolicy(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivationPolicy());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroupRegistration_get_AppletIdGroup(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppletIdGroup());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroupRegistration_get_Id(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardAppletIdGroupRegistration_get_SmartCardReaderId(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmartCardReaderId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardAppletIdGroupRegistration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardAppletIdGroupRegistration[] = {
        { "request_activation_policy_change_async", (PyCFunction)SmartCardAppletIdGroupRegistration_RequestActivationPolicyChangeAsync, METH_VARARGS, nullptr },
        { "set_automatic_response_apdus_async", (PyCFunction)SmartCardAppletIdGroupRegistration_SetAutomaticResponseApdusAsync, METH_VARARGS, nullptr },
        { "set_properties_async", (PyCFunction)SmartCardAppletIdGroupRegistration_SetPropertiesAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardAppletIdGroupRegistration, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardAppletIdGroupRegistration[] = {
        { const_cast<char*>("activation_policy"), (getter)SmartCardAppletIdGroupRegistration_get_ActivationPolicy, nullptr, nullptr, nullptr },
        { const_cast<char*>("applet_id_group"), (getter)SmartCardAppletIdGroupRegistration_get_AppletIdGroup, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)SmartCardAppletIdGroupRegistration_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("smart_card_reader_id"), (getter)SmartCardAppletIdGroupRegistration_get_SmartCardReaderId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardAppletIdGroupRegistration[] = 
    {
        { Py_tp_new, _new_SmartCardAppletIdGroupRegistration },
        { Py_tp_dealloc, _dealloc_SmartCardAppletIdGroupRegistration },
        { Py_tp_methods, _methods_SmartCardAppletIdGroupRegistration },
        { Py_tp_getset, _getset_SmartCardAppletIdGroupRegistration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardAppletIdGroupRegistration =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardAppletIdGroupRegistration",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardAppletIdGroupRegistration
    };

    // ----- SmartCardAutomaticResponseApdu class --------------------
    constexpr const char* const _type_name_SmartCardAutomaticResponseApdu = "SmartCardAutomaticResponseApdu";

    static PyObject* _new_SmartCardAutomaticResponseApdu(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                winrt::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardAutomaticResponseApdu(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_ShouldMatchLength(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShouldMatchLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_ShouldMatchLength(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShouldMatchLength(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_ResponseApdu(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResponseApdu());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_ResponseApdu(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.ResponseApdu(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_CommandApduBitMask(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CommandApduBitMask());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_CommandApduBitMask(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.CommandApduBitMask(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_CommandApdu(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CommandApdu());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_CommandApdu(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.CommandApdu(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_AppletId(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppletId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_AppletId(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.AppletId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_OutputState(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OutputState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_OutputState(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(arg);

            self->obj.OutputState(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_InputState(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_InputState(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(arg);

            self->obj.InputState(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardAutomaticResponseApdu_get_AllowWhenCryptogramGeneratorNotPrepared(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowWhenCryptogramGeneratorNotPrepared());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardAutomaticResponseApdu_put_AllowWhenCryptogramGeneratorNotPrepared(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowWhenCryptogramGeneratorNotPrepared(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SmartCardAutomaticResponseApdu(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardAutomaticResponseApdu[] = {
        { "_from", (PyCFunction)_from_SmartCardAutomaticResponseApdu, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardAutomaticResponseApdu[] = {
        { const_cast<char*>("should_match_length"), (getter)SmartCardAutomaticResponseApdu_get_ShouldMatchLength, (setter)SmartCardAutomaticResponseApdu_put_ShouldMatchLength, nullptr, nullptr },
        { const_cast<char*>("response_apdu"), (getter)SmartCardAutomaticResponseApdu_get_ResponseApdu, (setter)SmartCardAutomaticResponseApdu_put_ResponseApdu, nullptr, nullptr },
        { const_cast<char*>("command_apdu_bit_mask"), (getter)SmartCardAutomaticResponseApdu_get_CommandApduBitMask, (setter)SmartCardAutomaticResponseApdu_put_CommandApduBitMask, nullptr, nullptr },
        { const_cast<char*>("command_apdu"), (getter)SmartCardAutomaticResponseApdu_get_CommandApdu, (setter)SmartCardAutomaticResponseApdu_put_CommandApdu, nullptr, nullptr },
        { const_cast<char*>("applet_id"), (getter)SmartCardAutomaticResponseApdu_get_AppletId, (setter)SmartCardAutomaticResponseApdu_put_AppletId, nullptr, nullptr },
        { const_cast<char*>("output_state"), (getter)SmartCardAutomaticResponseApdu_get_OutputState, (setter)SmartCardAutomaticResponseApdu_put_OutputState, nullptr, nullptr },
        { const_cast<char*>("input_state"), (getter)SmartCardAutomaticResponseApdu_get_InputState, (setter)SmartCardAutomaticResponseApdu_put_InputState, nullptr, nullptr },
        { const_cast<char*>("allow_when_cryptogram_generator_not_prepared"), (getter)SmartCardAutomaticResponseApdu_get_AllowWhenCryptogramGeneratorNotPrepared, (setter)SmartCardAutomaticResponseApdu_put_AllowWhenCryptogramGeneratorNotPrepared, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardAutomaticResponseApdu[] = 
    {
        { Py_tp_new, _new_SmartCardAutomaticResponseApdu },
        { Py_tp_dealloc, _dealloc_SmartCardAutomaticResponseApdu },
        { Py_tp_methods, _methods_SmartCardAutomaticResponseApdu },
        { Py_tp_getset, _getset_SmartCardAutomaticResponseApdu },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardAutomaticResponseApdu =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardAutomaticResponseApdu",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardAutomaticResponseApdu
    };

    // ----- SmartCardChallengeContext class --------------------
    constexpr const char* const _type_name_SmartCardChallengeContext = "SmartCardChallengeContext";

    static PyObject* _new_SmartCardChallengeContext(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardChallengeContext);
        return nullptr;
    }

    static void _dealloc_SmartCardChallengeContext(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardChallengeContext_ChangeAdministrativeKeyAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(self->obj.ChangeAdministrativeKeyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardChallengeContext_Close(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardChallengeContext_ProvisionAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);

                return py::convert(self->obj.ProvisionAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);
                auto param2 = py::convert_to<winrt::guid>(args, 2);

                return py::convert(self->obj.ProvisionAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardChallengeContext_VerifyResponseAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(self->obj.VerifyResponseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardChallengeContext_get_Challenge(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Challenge());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardChallengeContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardChallengeContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_SmartCardChallengeContext(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_SmartCardChallengeContext(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardChallengeContext[] = {
        { "change_administrative_key_async", (PyCFunction)SmartCardChallengeContext_ChangeAdministrativeKeyAsync, METH_VARARGS, nullptr },
        { "close", (PyCFunction)SmartCardChallengeContext_Close, METH_VARARGS, nullptr },
        { "provision_async", (PyCFunction)SmartCardChallengeContext_ProvisionAsync, METH_VARARGS, nullptr },
        { "verify_response_async", (PyCFunction)SmartCardChallengeContext_VerifyResponseAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardChallengeContext, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_SmartCardChallengeContext, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_SmartCardChallengeContext, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardChallengeContext[] = {
        { const_cast<char*>("challenge"), (getter)SmartCardChallengeContext_get_Challenge, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardChallengeContext[] = 
    {
        { Py_tp_new, _new_SmartCardChallengeContext },
        { Py_tp_dealloc, _dealloc_SmartCardChallengeContext },
        { Py_tp_methods, _methods_SmartCardChallengeContext },
        { Py_tp_getset, _getset_SmartCardChallengeContext },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardChallengeContext =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardChallengeContext",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardChallengeContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardChallengeContext
    };

    // ----- SmartCardConnection class --------------------
    constexpr const char* const _type_name_SmartCardConnection = "SmartCardConnection";

    static PyObject* _new_SmartCardConnection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardConnection);
        return nullptr;
    }

    static void _dealloc_SmartCardConnection(py::wrapper::Windows::Devices::SmartCards::SmartCardConnection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardConnection_Close(py::wrapper::Windows::Devices::SmartCards::SmartCardConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardConnection_TransmitAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(self->obj.TransmitAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_SmartCardConnection(py::wrapper::Windows::Devices::SmartCards::SmartCardConnection* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_SmartCardConnection(py::wrapper::Windows::Devices::SmartCards::SmartCardConnection* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardConnection[] = {
        { "close", (PyCFunction)SmartCardConnection_Close, METH_VARARGS, nullptr },
        { "transmit_async", (PyCFunction)SmartCardConnection_TransmitAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardConnection, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_SmartCardConnection, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_SmartCardConnection, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardConnection[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardConnection[] = 
    {
        { Py_tp_new, _new_SmartCardConnection },
        { Py_tp_dealloc, _dealloc_SmartCardConnection },
        { Py_tp_methods, _methods_SmartCardConnection },
        { Py_tp_getset, _getset_SmartCardConnection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardConnection =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardConnection",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardConnection
    };

    // ----- SmartCardCryptogramGenerator class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramGenerator = "SmartCardCryptogramGenerator";

    static PyObject* _new_SmartCardCryptogramGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardCryptogramGenerator);
        return nullptr;
    }

    static void _dealloc_SmartCardCryptogramGenerator(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramGenerator_CreateCryptogramMaterialStorageKeyAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardUnlockPromptingBehavior>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyAlgorithm>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCapabilities>(args, 3);

                return py::convert(self->obj.CreateCryptogramMaterialStorageKeyAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_DeleteCryptogramMaterialPackageAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteCryptogramMaterialPackageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_DeleteCryptogramMaterialStorageKeyAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteCryptogramMaterialStorageKeyAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_GetAllCryptogramMaterialCharacteristicsAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardUnlockPromptingBehavior>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetAllCryptogramMaterialCharacteristicsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_GetAllCryptogramMaterialPackageCharacteristicsAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAllCryptogramMaterialPackageCharacteristicsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetAllCryptogramMaterialPackageCharacteristicsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_GetAllCryptogramStorageKeyCharacteristicsAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAllCryptogramStorageKeyCharacteristicsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_GetSmartCardCryptogramGeneratorAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardCryptogramGenerator::GetSmartCardCryptogramGeneratorAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_ImportCryptogramMaterialPackageAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageFormat>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 3);

                return py::convert(self->obj.ImportCryptogramMaterialPackageAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardCryptogramGenerator::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_RequestCryptogramMaterialStorageKeyInfoAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardUnlockPromptingBehavior>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType>(args, 2);

                return py::convert(self->obj.RequestCryptogramMaterialStorageKeyInfoAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_RequestUnlockCryptogramMaterialForUseAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardUnlockPromptingBehavior>(args, 0);

                return py::convert(self->obj.RequestUnlockCryptogramMaterialForUseAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_TryProvePossessionOfCryptogramMaterialPackageAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardUnlockPromptingBehavior>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageConfirmationResponseFormat>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 4);

                return py::convert(self->obj.TryProvePossessionOfCryptogramMaterialPackageAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_ValidateRequestApduAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardUnlockPromptingBehavior>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep>>(args, 2);

                return py::convert(self->obj.ValidateRequestApduAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_get_SupportedCryptogramAlgorithms(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedCryptogramAlgorithms());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_get_SupportedCryptogramMaterialPackageConfirmationResponseFormats(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedCryptogramMaterialPackageConfirmationResponseFormats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_get_SupportedCryptogramMaterialPackageFormats(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedCryptogramMaterialPackageFormats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_get_SupportedCryptogramMaterialTypes(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedCryptogramMaterialTypes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGenerator_get_SupportedSmartCardCryptogramStorageKeyCapabilities(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedSmartCardCryptogramStorageKeyCapabilities());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramGenerator[] = {
        { "create_cryptogram_material_storage_key_async", (PyCFunction)SmartCardCryptogramGenerator_CreateCryptogramMaterialStorageKeyAsync, METH_VARARGS, nullptr },
        { "delete_cryptogram_material_package_async", (PyCFunction)SmartCardCryptogramGenerator_DeleteCryptogramMaterialPackageAsync, METH_VARARGS, nullptr },
        { "delete_cryptogram_material_storage_key_async", (PyCFunction)SmartCardCryptogramGenerator_DeleteCryptogramMaterialStorageKeyAsync, METH_VARARGS, nullptr },
        { "get_all_cryptogram_material_characteristics_async", (PyCFunction)SmartCardCryptogramGenerator_GetAllCryptogramMaterialCharacteristicsAsync, METH_VARARGS, nullptr },
        { "get_all_cryptogram_material_package_characteristics_async", (PyCFunction)SmartCardCryptogramGenerator_GetAllCryptogramMaterialPackageCharacteristicsAsync, METH_VARARGS, nullptr },
        { "get_all_cryptogram_storage_key_characteristics_async", (PyCFunction)SmartCardCryptogramGenerator_GetAllCryptogramStorageKeyCharacteristicsAsync, METH_VARARGS, nullptr },
        { "get_smart_card_cryptogram_generator_async", (PyCFunction)SmartCardCryptogramGenerator_GetSmartCardCryptogramGeneratorAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "import_cryptogram_material_package_async", (PyCFunction)SmartCardCryptogramGenerator_ImportCryptogramMaterialPackageAsync, METH_VARARGS, nullptr },
        { "is_supported", (PyCFunction)SmartCardCryptogramGenerator_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "request_cryptogram_material_storage_key_info_async", (PyCFunction)SmartCardCryptogramGenerator_RequestCryptogramMaterialStorageKeyInfoAsync, METH_VARARGS, nullptr },
        { "request_unlock_cryptogram_material_for_use_async", (PyCFunction)SmartCardCryptogramGenerator_RequestUnlockCryptogramMaterialForUseAsync, METH_VARARGS, nullptr },
        { "try_prove_possession_of_cryptogram_material_package_async", (PyCFunction)SmartCardCryptogramGenerator_TryProvePossessionOfCryptogramMaterialPackageAsync, METH_VARARGS, nullptr },
        { "validate_request_apdu_async", (PyCFunction)SmartCardCryptogramGenerator_ValidateRequestApduAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardCryptogramGenerator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramGenerator[] = {
        { const_cast<char*>("supported_cryptogram_algorithms"), (getter)SmartCardCryptogramGenerator_get_SupportedCryptogramAlgorithms, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_cryptogram_material_package_confirmation_response_formats"), (getter)SmartCardCryptogramGenerator_get_SupportedCryptogramMaterialPackageConfirmationResponseFormats, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_cryptogram_material_package_formats"), (getter)SmartCardCryptogramGenerator_get_SupportedCryptogramMaterialPackageFormats, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_cryptogram_material_types"), (getter)SmartCardCryptogramGenerator_get_SupportedCryptogramMaterialTypes, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_smart_card_cryptogram_storage_key_capabilities"), (getter)SmartCardCryptogramGenerator_get_SupportedSmartCardCryptogramStorageKeyCapabilities, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramGenerator[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramGenerator },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramGenerator },
        { Py_tp_methods, _methods_SmartCardCryptogramGenerator },
        { Py_tp_getset, _getset_SmartCardCryptogramGenerator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramGenerator =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramGenerator",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramGenerator
    };

    // ----- SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult = "SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult";

    static PyObject* _new_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_get_Characteristics(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Characteristics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_get_OperationStatus(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperationStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult[] = {
        { const_cast<char*>("characteristics"), (getter)SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_get_Characteristics, nullptr, nullptr, nullptr },
        { const_cast<char*>("operation_status"), (getter)SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_get_OperationStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult },
        { Py_tp_methods, _methods_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult },
        { Py_tp_getset, _getset_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult
    };

    // ----- SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult = "SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult";

    static PyObject* _new_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_get_Characteristics(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Characteristics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_get_OperationStatus(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperationStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult[] = {
        { const_cast<char*>("characteristics"), (getter)SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_get_Characteristics, nullptr, nullptr, nullptr },
        { const_cast<char*>("operation_status"), (getter)SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_get_OperationStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult },
        { Py_tp_methods, _methods_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult },
        { Py_tp_getset, _getset_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult
    };

    // ----- SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult = "SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult";

    static PyObject* _new_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_get_Characteristics(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Characteristics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_get_OperationStatus(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperationStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult[] = {
        { const_cast<char*>("characteristics"), (getter)SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_get_Characteristics, nullptr, nullptr, nullptr },
        { const_cast<char*>("operation_status"), (getter)SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_get_OperationStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult },
        { Py_tp_methods, _methods_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult },
        { Py_tp_getset, _getset_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult
    };

    // ----- SmartCardCryptogramMaterialCharacteristics class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramMaterialCharacteristics = "SmartCardCryptogramMaterialCharacteristics";

    static PyObject* _new_SmartCardCryptogramMaterialCharacteristics(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardCryptogramMaterialCharacteristics(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_AllowedAlgorithms(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowedAlgorithms());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_AllowedProofOfPossessionAlgorithms(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowedProofOfPossessionAlgorithms());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_AllowedValidations(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowedValidations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_MaterialLength(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_MaterialName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_MaterialType(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaterialType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_ProtectionMethod(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProtectionMethod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialCharacteristics_get_ProtectionVersion(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProtectionVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramMaterialCharacteristics(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramMaterialCharacteristics[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramMaterialCharacteristics, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramMaterialCharacteristics[] = {
        { const_cast<char*>("allowed_algorithms"), (getter)SmartCardCryptogramMaterialCharacteristics_get_AllowedAlgorithms, nullptr, nullptr, nullptr },
        { const_cast<char*>("allowed_proof_of_possession_algorithms"), (getter)SmartCardCryptogramMaterialCharacteristics_get_AllowedProofOfPossessionAlgorithms, nullptr, nullptr, nullptr },
        { const_cast<char*>("allowed_validations"), (getter)SmartCardCryptogramMaterialCharacteristics_get_AllowedValidations, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_length"), (getter)SmartCardCryptogramMaterialCharacteristics_get_MaterialLength, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_name"), (getter)SmartCardCryptogramMaterialCharacteristics_get_MaterialName, nullptr, nullptr, nullptr },
        { const_cast<char*>("material_type"), (getter)SmartCardCryptogramMaterialCharacteristics_get_MaterialType, nullptr, nullptr, nullptr },
        { const_cast<char*>("protection_method"), (getter)SmartCardCryptogramMaterialCharacteristics_get_ProtectionMethod, nullptr, nullptr, nullptr },
        { const_cast<char*>("protection_version"), (getter)SmartCardCryptogramMaterialCharacteristics_get_ProtectionVersion, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramMaterialCharacteristics[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramMaterialCharacteristics },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramMaterialCharacteristics },
        { Py_tp_methods, _methods_SmartCardCryptogramMaterialCharacteristics },
        { Py_tp_getset, _getset_SmartCardCryptogramMaterialCharacteristics },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramMaterialCharacteristics =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramMaterialCharacteristics",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramMaterialCharacteristics
    };

    // ----- SmartCardCryptogramMaterialPackageCharacteristics class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramMaterialPackageCharacteristics = "SmartCardCryptogramMaterialPackageCharacteristics";

    static PyObject* _new_SmartCardCryptogramMaterialPackageCharacteristics(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardCryptogramMaterialPackageCharacteristics(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramMaterialPackageCharacteristics_get_DateImported(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DateImported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialPackageCharacteristics_get_PackageFormat(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PackageFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialPackageCharacteristics_get_PackageName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PackageName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialPackageCharacteristics_get_StorageKeyName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StorageKeyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramMaterialPackageCharacteristics(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramMaterialPackageCharacteristics[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramMaterialPackageCharacteristics, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramMaterialPackageCharacteristics[] = {
        { const_cast<char*>("date_imported"), (getter)SmartCardCryptogramMaterialPackageCharacteristics_get_DateImported, nullptr, nullptr, nullptr },
        { const_cast<char*>("package_format"), (getter)SmartCardCryptogramMaterialPackageCharacteristics_get_PackageFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("package_name"), (getter)SmartCardCryptogramMaterialPackageCharacteristics_get_PackageName, nullptr, nullptr, nullptr },
        { const_cast<char*>("storage_key_name"), (getter)SmartCardCryptogramMaterialPackageCharacteristics_get_StorageKeyName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramMaterialPackageCharacteristics[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramMaterialPackageCharacteristics },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramMaterialPackageCharacteristics },
        { Py_tp_methods, _methods_SmartCardCryptogramMaterialPackageCharacteristics },
        { Py_tp_getset, _getset_SmartCardCryptogramMaterialPackageCharacteristics },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramMaterialPackageCharacteristics =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramMaterialPackageCharacteristics",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramMaterialPackageCharacteristics
    };

    // ----- SmartCardCryptogramMaterialPossessionProof class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramMaterialPossessionProof = "SmartCardCryptogramMaterialPossessionProof";

    static PyObject* _new_SmartCardCryptogramMaterialPossessionProof(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardCryptogramMaterialPossessionProof);
        return nullptr;
    }

    static void _dealloc_SmartCardCryptogramMaterialPossessionProof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramMaterialPossessionProof_get_OperationStatus(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperationStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramMaterialPossessionProof_get_Proof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Proof());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramMaterialPossessionProof(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramMaterialPossessionProof[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramMaterialPossessionProof, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramMaterialPossessionProof[] = {
        { const_cast<char*>("operation_status"), (getter)SmartCardCryptogramMaterialPossessionProof_get_OperationStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("proof"), (getter)SmartCardCryptogramMaterialPossessionProof_get_Proof, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramMaterialPossessionProof[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramMaterialPossessionProof },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramMaterialPossessionProof },
        { Py_tp_methods, _methods_SmartCardCryptogramMaterialPossessionProof },
        { Py_tp_getset, _getset_SmartCardCryptogramMaterialPossessionProof },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramMaterialPossessionProof =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramMaterialPossessionProof",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramMaterialPossessionProof
    };

    // ----- SmartCardCryptogramPlacementStep class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramPlacementStep = "SmartCardCryptogramPlacementStep";

    static PyObject* _new_SmartCardCryptogramPlacementStep(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardCryptogramPlacementStep(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_TemplateOffset(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TemplateOffset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_TemplateOffset(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.TemplateOffset(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_SourceData(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_SourceData(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.SourceData(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_CryptogramPlacementOptions(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CryptogramPlacementOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_CryptogramPlacementOptions(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementOptions>(arg);

            self->obj.CryptogramPlacementOptions(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_CryptogramOffset(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CryptogramOffset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_CryptogramOffset(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.CryptogramOffset(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_CryptogramMaterialPackageName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CryptogramMaterialPackageName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_CryptogramMaterialPackageName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CryptogramMaterialPackageName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_CryptogramMaterialName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CryptogramMaterialName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_CryptogramMaterialName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CryptogramMaterialName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_CryptogramLength(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CryptogramLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_CryptogramLength(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.CryptogramLength(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_ChainedOutputStep(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChainedOutputStep());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_ChainedOutputStep(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep>(arg);

            self->obj.ChainedOutputStep(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardCryptogramPlacementStep_get_Algorithm(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Algorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardCryptogramPlacementStep_put_Algorithm(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardCryptogramAlgorithm>(arg);

            self->obj.Algorithm(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SmartCardCryptogramPlacementStep(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramPlacementStep[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramPlacementStep, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramPlacementStep[] = {
        { const_cast<char*>("template_offset"), (getter)SmartCardCryptogramPlacementStep_get_TemplateOffset, (setter)SmartCardCryptogramPlacementStep_put_TemplateOffset, nullptr, nullptr },
        { const_cast<char*>("source_data"), (getter)SmartCardCryptogramPlacementStep_get_SourceData, (setter)SmartCardCryptogramPlacementStep_put_SourceData, nullptr, nullptr },
        { const_cast<char*>("cryptogram_placement_options"), (getter)SmartCardCryptogramPlacementStep_get_CryptogramPlacementOptions, (setter)SmartCardCryptogramPlacementStep_put_CryptogramPlacementOptions, nullptr, nullptr },
        { const_cast<char*>("cryptogram_offset"), (getter)SmartCardCryptogramPlacementStep_get_CryptogramOffset, (setter)SmartCardCryptogramPlacementStep_put_CryptogramOffset, nullptr, nullptr },
        { const_cast<char*>("cryptogram_material_package_name"), (getter)SmartCardCryptogramPlacementStep_get_CryptogramMaterialPackageName, (setter)SmartCardCryptogramPlacementStep_put_CryptogramMaterialPackageName, nullptr, nullptr },
        { const_cast<char*>("cryptogram_material_name"), (getter)SmartCardCryptogramPlacementStep_get_CryptogramMaterialName, (setter)SmartCardCryptogramPlacementStep_put_CryptogramMaterialName, nullptr, nullptr },
        { const_cast<char*>("cryptogram_length"), (getter)SmartCardCryptogramPlacementStep_get_CryptogramLength, (setter)SmartCardCryptogramPlacementStep_put_CryptogramLength, nullptr, nullptr },
        { const_cast<char*>("chained_output_step"), (getter)SmartCardCryptogramPlacementStep_get_ChainedOutputStep, (setter)SmartCardCryptogramPlacementStep_put_ChainedOutputStep, nullptr, nullptr },
        { const_cast<char*>("algorithm"), (getter)SmartCardCryptogramPlacementStep_get_Algorithm, (setter)SmartCardCryptogramPlacementStep_put_Algorithm, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramPlacementStep[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramPlacementStep },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramPlacementStep },
        { Py_tp_methods, _methods_SmartCardCryptogramPlacementStep },
        { Py_tp_getset, _getset_SmartCardCryptogramPlacementStep },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramPlacementStep =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramPlacementStep",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramPlacementStep
    };

    // ----- SmartCardCryptogramStorageKeyCharacteristics class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramStorageKeyCharacteristics = "SmartCardCryptogramStorageKeyCharacteristics";

    static PyObject* _new_SmartCardCryptogramStorageKeyCharacteristics(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardCryptogramStorageKeyCharacteristics(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramStorageKeyCharacteristics_get_Algorithm(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Algorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyCharacteristics_get_Capabilities(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Capabilities());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyCharacteristics_get_DateCreated(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DateCreated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyCharacteristics_get_StorageKeyName(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StorageKeyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramStorageKeyCharacteristics(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramStorageKeyCharacteristics[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramStorageKeyCharacteristics, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramStorageKeyCharacteristics[] = {
        { const_cast<char*>("algorithm"), (getter)SmartCardCryptogramStorageKeyCharacteristics_get_Algorithm, nullptr, nullptr, nullptr },
        { const_cast<char*>("capabilities"), (getter)SmartCardCryptogramStorageKeyCharacteristics_get_Capabilities, nullptr, nullptr, nullptr },
        { const_cast<char*>("date_created"), (getter)SmartCardCryptogramStorageKeyCharacteristics_get_DateCreated, nullptr, nullptr, nullptr },
        { const_cast<char*>("storage_key_name"), (getter)SmartCardCryptogramStorageKeyCharacteristics_get_StorageKeyName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramStorageKeyCharacteristics[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramStorageKeyCharacteristics },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramStorageKeyCharacteristics },
        { Py_tp_methods, _methods_SmartCardCryptogramStorageKeyCharacteristics },
        { Py_tp_getset, _getset_SmartCardCryptogramStorageKeyCharacteristics },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramStorageKeyCharacteristics =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramStorageKeyCharacteristics",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramStorageKeyCharacteristics
    };

    // ----- SmartCardCryptogramStorageKeyInfo class --------------------
    constexpr const char* const _type_name_SmartCardCryptogramStorageKeyInfo = "SmartCardCryptogramStorageKeyInfo";

    static PyObject* _new_SmartCardCryptogramStorageKeyInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardCryptogramStorageKeyInfo);
        return nullptr;
    }

    static void _dealloc_SmartCardCryptogramStorageKeyInfo(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_Attestation(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Attestation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_AttestationCertificateChain(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AttestationCertificateChain());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_AttestationStatus(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AttestationStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_Capabilities(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Capabilities());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_OperationStatus(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperationStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_PublicKey(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PublicKey());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_PublicKeyBlobType(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PublicKeyBlobType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardCryptogramStorageKeyInfo_get_OperationalRequirements(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperationalRequirements());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardCryptogramStorageKeyInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardCryptogramStorageKeyInfo[] = {
        { "_from", (PyCFunction)_from_SmartCardCryptogramStorageKeyInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardCryptogramStorageKeyInfo[] = {
        { const_cast<char*>("attestation"), (getter)SmartCardCryptogramStorageKeyInfo_get_Attestation, nullptr, nullptr, nullptr },
        { const_cast<char*>("attestation_certificate_chain"), (getter)SmartCardCryptogramStorageKeyInfo_get_AttestationCertificateChain, nullptr, nullptr, nullptr },
        { const_cast<char*>("attestation_status"), (getter)SmartCardCryptogramStorageKeyInfo_get_AttestationStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("capabilities"), (getter)SmartCardCryptogramStorageKeyInfo_get_Capabilities, nullptr, nullptr, nullptr },
        { const_cast<char*>("operation_status"), (getter)SmartCardCryptogramStorageKeyInfo_get_OperationStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("public_key"), (getter)SmartCardCryptogramStorageKeyInfo_get_PublicKey, nullptr, nullptr, nullptr },
        { const_cast<char*>("public_key_blob_type"), (getter)SmartCardCryptogramStorageKeyInfo_get_PublicKeyBlobType, nullptr, nullptr, nullptr },
        { const_cast<char*>("operational_requirements"), (getter)SmartCardCryptogramStorageKeyInfo_get_OperationalRequirements, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardCryptogramStorageKeyInfo[] = 
    {
        { Py_tp_new, _new_SmartCardCryptogramStorageKeyInfo },
        { Py_tp_dealloc, _dealloc_SmartCardCryptogramStorageKeyInfo },
        { Py_tp_methods, _methods_SmartCardCryptogramStorageKeyInfo },
        { Py_tp_getset, _getset_SmartCardCryptogramStorageKeyInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardCryptogramStorageKeyInfo =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardCryptogramStorageKeyInfo",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardCryptogramStorageKeyInfo
    };

    // ----- SmartCardEmulator class --------------------
    constexpr const char* const _type_name_SmartCardEmulator = "SmartCardEmulator";

    static PyObject* _new_SmartCardEmulator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardEmulator);
        return nullptr;
    }

    static void _dealloc_SmartCardEmulator(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardEmulator_GetAppletIdGroupRegistrationsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardEmulator::GetAppletIdGroupRegistrationsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_GetDefaultAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardEmulator::GetDefaultAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_IsHostCardEmulationSupported(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.IsHostCardEmulationSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardEmulator::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_RegisterAppletIdGroupAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroup>(args, 0);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardEmulator::RegisterAppletIdGroupAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_Start(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_UnregisterAppletIdGroupAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration>(args, 0);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardEmulator::UnregisterAppletIdGroupAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_get_EnablementPolicy(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EnablementPolicy());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_get_MaxAppletIdGroupRegistrations(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::SmartCards::SmartCardEmulator::MaxAppletIdGroupRegistrations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_add_ApduReceived(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::SmartCards::SmartCardEmulator, winrt::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs>>(arg);

            return py::convert(self->obj.ApduReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_remove_ApduReceived(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ApduReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_add_ConnectionDeactivated(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::SmartCards::SmartCardEmulator, winrt::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs>>(arg);

            return py::convert(self->obj.ConnectionDeactivated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulator_remove_ConnectionDeactivated(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ConnectionDeactivated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardEmulator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardEmulator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardEmulator[] = {
        { "get_applet_id_group_registrations_async", (PyCFunction)SmartCardEmulator_GetAppletIdGroupRegistrationsAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_default_async", (PyCFunction)SmartCardEmulator_GetDefaultAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "is_host_card_emulation_supported", (PyCFunction)SmartCardEmulator_IsHostCardEmulationSupported, METH_VARARGS, nullptr },
        { "is_supported", (PyCFunction)SmartCardEmulator_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "register_applet_id_group_async", (PyCFunction)SmartCardEmulator_RegisterAppletIdGroupAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "start", (PyCFunction)SmartCardEmulator_Start, METH_VARARGS, nullptr },
        { "unregister_applet_id_group_async", (PyCFunction)SmartCardEmulator_UnregisterAppletIdGroupAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_max_applet_id_group_registrations", (PyCFunction)SmartCardEmulator_get_MaxAppletIdGroupRegistrations, METH_NOARGS | METH_STATIC, nullptr },
        { "add_apdu_received", (PyCFunction)SmartCardEmulator_add_ApduReceived, METH_O, nullptr },
        { "remove_apdu_received", (PyCFunction)SmartCardEmulator_remove_ApduReceived, METH_O, nullptr },
        { "add_connection_deactivated", (PyCFunction)SmartCardEmulator_add_ConnectionDeactivated, METH_O, nullptr },
        { "remove_connection_deactivated", (PyCFunction)SmartCardEmulator_remove_ConnectionDeactivated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SmartCardEmulator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardEmulator[] = {
        { const_cast<char*>("enablement_policy"), (getter)SmartCardEmulator_get_EnablementPolicy, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardEmulator[] = 
    {
        { Py_tp_new, _new_SmartCardEmulator },
        { Py_tp_dealloc, _dealloc_SmartCardEmulator },
        { Py_tp_methods, _methods_SmartCardEmulator },
        { Py_tp_getset, _getset_SmartCardEmulator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardEmulator =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardEmulator",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardEmulator
    };

    // ----- SmartCardEmulatorApduReceivedEventArgs class --------------------
    constexpr const char* const _type_name_SmartCardEmulatorApduReceivedEventArgs = "SmartCardEmulatorApduReceivedEventArgs";

    static PyObject* _new_SmartCardEmulatorApduReceivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardEmulatorApduReceivedEventArgs);
        return nullptr;
    }

    static void _dealloc_SmartCardEmulatorApduReceivedEventArgs(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardEmulatorApduReceivedEventArgs_TryRespondAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(self->obj.TryRespondAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(args, 1);

                return py::convert(self->obj.TryRespondAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulatorApduReceivedEventArgs_TryRespondWithCryptogramsAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep>>(args, 1);

                return py::convert(self->obj.TryRespondWithCryptogramsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep>>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(args, 2);

                return py::convert(self->obj.TryRespondWithCryptogramsAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulatorApduReceivedEventArgs_get_AutomaticResponseStatus(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutomaticResponseStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulatorApduReceivedEventArgs_get_CommandApdu(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CommandApdu());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulatorApduReceivedEventArgs_get_ConnectionProperties(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulatorApduReceivedEventArgs_get_State(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardEmulatorApduReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardEmulatorApduReceivedEventArgs[] = {
        { "try_respond_async", (PyCFunction)SmartCardEmulatorApduReceivedEventArgs_TryRespondAsync, METH_VARARGS, nullptr },
        { "try_respond_with_cryptograms_async", (PyCFunction)SmartCardEmulatorApduReceivedEventArgs_TryRespondWithCryptogramsAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardEmulatorApduReceivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardEmulatorApduReceivedEventArgs[] = {
        { const_cast<char*>("automatic_response_status"), (getter)SmartCardEmulatorApduReceivedEventArgs_get_AutomaticResponseStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("command_apdu"), (getter)SmartCardEmulatorApduReceivedEventArgs_get_CommandApdu, nullptr, nullptr, nullptr },
        { const_cast<char*>("connection_properties"), (getter)SmartCardEmulatorApduReceivedEventArgs_get_ConnectionProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)SmartCardEmulatorApduReceivedEventArgs_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardEmulatorApduReceivedEventArgs[] = 
    {
        { Py_tp_new, _new_SmartCardEmulatorApduReceivedEventArgs },
        { Py_tp_dealloc, _dealloc_SmartCardEmulatorApduReceivedEventArgs },
        { Py_tp_methods, _methods_SmartCardEmulatorApduReceivedEventArgs },
        { Py_tp_getset, _getset_SmartCardEmulatorApduReceivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardEmulatorApduReceivedEventArgs =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardEmulatorApduReceivedEventArgs",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardEmulatorApduReceivedEventArgs
    };

    // ----- SmartCardEmulatorConnectionDeactivatedEventArgs class --------------------
    constexpr const char* const _type_name_SmartCardEmulatorConnectionDeactivatedEventArgs = "SmartCardEmulatorConnectionDeactivatedEventArgs";

    static PyObject* _new_SmartCardEmulatorConnectionDeactivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardEmulatorConnectionDeactivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_SmartCardEmulatorConnectionDeactivatedEventArgs(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardEmulatorConnectionDeactivatedEventArgs_get_ConnectionProperties(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulatorConnectionDeactivatedEventArgs_get_Reason(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardEmulatorConnectionDeactivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardEmulatorConnectionDeactivatedEventArgs[] = {
        { "_from", (PyCFunction)_from_SmartCardEmulatorConnectionDeactivatedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardEmulatorConnectionDeactivatedEventArgs[] = {
        { const_cast<char*>("connection_properties"), (getter)SmartCardEmulatorConnectionDeactivatedEventArgs_get_ConnectionProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("reason"), (getter)SmartCardEmulatorConnectionDeactivatedEventArgs_get_Reason, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardEmulatorConnectionDeactivatedEventArgs[] = 
    {
        { Py_tp_new, _new_SmartCardEmulatorConnectionDeactivatedEventArgs },
        { Py_tp_dealloc, _dealloc_SmartCardEmulatorConnectionDeactivatedEventArgs },
        { Py_tp_methods, _methods_SmartCardEmulatorConnectionDeactivatedEventArgs },
        { Py_tp_getset, _getset_SmartCardEmulatorConnectionDeactivatedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardEmulatorConnectionDeactivatedEventArgs =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardEmulatorConnectionDeactivatedEventArgs",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardEmulatorConnectionDeactivatedEventArgs
    };

    // ----- SmartCardEmulatorConnectionProperties class --------------------
    constexpr const char* const _type_name_SmartCardEmulatorConnectionProperties = "SmartCardEmulatorConnectionProperties";

    static PyObject* _new_SmartCardEmulatorConnectionProperties(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardEmulatorConnectionProperties);
        return nullptr;
    }

    static void _dealloc_SmartCardEmulatorConnectionProperties(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardEmulatorConnectionProperties_get_Id(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardEmulatorConnectionProperties_get_Source(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardEmulatorConnectionProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardEmulatorConnectionProperties[] = {
        { "_from", (PyCFunction)_from_SmartCardEmulatorConnectionProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardEmulatorConnectionProperties[] = {
        { const_cast<char*>("id"), (getter)SmartCardEmulatorConnectionProperties_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)SmartCardEmulatorConnectionProperties_get_Source, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardEmulatorConnectionProperties[] = 
    {
        { Py_tp_new, _new_SmartCardEmulatorConnectionProperties },
        { Py_tp_dealloc, _dealloc_SmartCardEmulatorConnectionProperties },
        { Py_tp_methods, _methods_SmartCardEmulatorConnectionProperties },
        { Py_tp_getset, _getset_SmartCardEmulatorConnectionProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardEmulatorConnectionProperties =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardEmulatorConnectionProperties",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardEmulatorConnectionProperties
    };

    // ----- SmartCardPinPolicy class --------------------
    constexpr const char* const _type_name_SmartCardPinPolicy = "SmartCardPinPolicy";

    static PyObject* _new_SmartCardPinPolicy(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::SmartCards::SmartCardPinPolicy instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SmartCardPinPolicy(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardPinPolicy_get_UppercaseLetters(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UppercaseLetters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardPinPolicy_put_UppercaseLetters(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption>(arg);

            self->obj.UppercaseLetters(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardPinPolicy_get_SpecialCharacters(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SpecialCharacters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardPinPolicy_put_SpecialCharacters(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption>(arg);

            self->obj.SpecialCharacters(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardPinPolicy_get_MinLength(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardPinPolicy_put_MinLength(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.MinLength(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardPinPolicy_get_MaxLength(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxLength());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardPinPolicy_put_MaxLength(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.MaxLength(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardPinPolicy_get_LowercaseLetters(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LowercaseLetters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardPinPolicy_put_LowercaseLetters(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption>(arg);

            self->obj.LowercaseLetters(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SmartCardPinPolicy_get_Digits(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Digits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SmartCardPinPolicy_put_Digits(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption>(arg);

            self->obj.Digits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SmartCardPinPolicy(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardPinPolicy>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardPinPolicy[] = {
        { "_from", (PyCFunction)_from_SmartCardPinPolicy, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardPinPolicy[] = {
        { const_cast<char*>("uppercase_letters"), (getter)SmartCardPinPolicy_get_UppercaseLetters, (setter)SmartCardPinPolicy_put_UppercaseLetters, nullptr, nullptr },
        { const_cast<char*>("special_characters"), (getter)SmartCardPinPolicy_get_SpecialCharacters, (setter)SmartCardPinPolicy_put_SpecialCharacters, nullptr, nullptr },
        { const_cast<char*>("min_length"), (getter)SmartCardPinPolicy_get_MinLength, (setter)SmartCardPinPolicy_put_MinLength, nullptr, nullptr },
        { const_cast<char*>("max_length"), (getter)SmartCardPinPolicy_get_MaxLength, (setter)SmartCardPinPolicy_put_MaxLength, nullptr, nullptr },
        { const_cast<char*>("lowercase_letters"), (getter)SmartCardPinPolicy_get_LowercaseLetters, (setter)SmartCardPinPolicy_put_LowercaseLetters, nullptr, nullptr },
        { const_cast<char*>("digits"), (getter)SmartCardPinPolicy_get_Digits, (setter)SmartCardPinPolicy_put_Digits, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardPinPolicy[] = 
    {
        { Py_tp_new, _new_SmartCardPinPolicy },
        { Py_tp_dealloc, _dealloc_SmartCardPinPolicy },
        { Py_tp_methods, _methods_SmartCardPinPolicy },
        { Py_tp_getset, _getset_SmartCardPinPolicy },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardPinPolicy =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardPinPolicy",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardPinPolicy),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardPinPolicy
    };

    // ----- SmartCardPinResetDeferral class --------------------
    constexpr const char* const _type_name_SmartCardPinResetDeferral = "SmartCardPinResetDeferral";

    static PyObject* _new_SmartCardPinResetDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardPinResetDeferral);
        return nullptr;
    }

    static void _dealloc_SmartCardPinResetDeferral(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardPinResetDeferral_Complete(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardPinResetDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardPinResetDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardPinResetDeferral[] = {
        { "complete", (PyCFunction)SmartCardPinResetDeferral_Complete, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardPinResetDeferral, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardPinResetDeferral[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardPinResetDeferral[] = 
    {
        { Py_tp_new, _new_SmartCardPinResetDeferral },
        { Py_tp_dealloc, _dealloc_SmartCardPinResetDeferral },
        { Py_tp_methods, _methods_SmartCardPinResetDeferral },
        { Py_tp_getset, _getset_SmartCardPinResetDeferral },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardPinResetDeferral =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardPinResetDeferral",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardPinResetDeferral
    };

    // ----- SmartCardPinResetRequest class --------------------
    constexpr const char* const _type_name_SmartCardPinResetRequest = "SmartCardPinResetRequest";

    static PyObject* _new_SmartCardPinResetRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardPinResetRequest);
        return nullptr;
    }

    static void _dealloc_SmartCardPinResetRequest(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardPinResetRequest_GetDeferral(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardPinResetRequest_SetResponse(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                self->obj.SetResponse(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardPinResetRequest_get_Challenge(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Challenge());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardPinResetRequest_get_Deadline(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardPinResetRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardPinResetRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardPinResetRequest[] = {
        { "get_deferral", (PyCFunction)SmartCardPinResetRequest_GetDeferral, METH_VARARGS, nullptr },
        { "set_response", (PyCFunction)SmartCardPinResetRequest_SetResponse, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardPinResetRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardPinResetRequest[] = {
        { const_cast<char*>("challenge"), (getter)SmartCardPinResetRequest_get_Challenge, nullptr, nullptr, nullptr },
        { const_cast<char*>("deadline"), (getter)SmartCardPinResetRequest_get_Deadline, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardPinResetRequest[] = 
    {
        { Py_tp_new, _new_SmartCardPinResetRequest },
        { Py_tp_dealloc, _dealloc_SmartCardPinResetRequest },
        { Py_tp_methods, _methods_SmartCardPinResetRequest },
        { Py_tp_getset, _getset_SmartCardPinResetRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardPinResetRequest =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardPinResetRequest",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardPinResetRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardPinResetRequest
    };

    // ----- SmartCardProvisioning class --------------------
    constexpr const char* const _type_name_SmartCardProvisioning = "SmartCardProvisioning";

    static PyObject* _new_SmartCardProvisioning(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardProvisioning);
        return nullptr;
    }

    static void _dealloc_SmartCardProvisioning(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardProvisioning_FromSmartCardAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCard>(args, 0);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardProvisioning::FromSmartCardAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_GetAuthorityKeyContainerNameAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAuthorityKeyContainerNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_GetChallengeContextAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetChallengeContextAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_GetIdAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetIdAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_GetNameAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_RequestAttestedVirtualSmartCardCreationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinPolicy>(args, 2);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardProvisioning::RequestAttestedVirtualSmartCardCreationAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinPolicy>(args, 2);
                auto param3 = py::convert_to<winrt::guid>(args, 3);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardProvisioning::RequestAttestedVirtualSmartCardCreationAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_RequestPinChangeAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.RequestPinChangeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_RequestPinResetAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinResetHandler>(args, 0);

                return py::convert(self->obj.RequestPinResetAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_RequestVirtualSmartCardCreationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinPolicy>(args, 2);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardPinPolicy>(args, 2);
                auto param3 = py::convert_to<winrt::guid>(args, 3);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_RequestVirtualSmartCardDeletionAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCard>(args, 0);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardProvisioning::RequestVirtualSmartCardDeletionAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardProvisioning_get_SmartCard(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmartCard());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardProvisioning(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardProvisioning>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardProvisioning[] = {
        { "from_smart_card_async", (PyCFunction)SmartCardProvisioning_FromSmartCardAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_authority_key_container_name_async", (PyCFunction)SmartCardProvisioning_GetAuthorityKeyContainerNameAsync, METH_VARARGS, nullptr },
        { "get_challenge_context_async", (PyCFunction)SmartCardProvisioning_GetChallengeContextAsync, METH_VARARGS, nullptr },
        { "get_id_async", (PyCFunction)SmartCardProvisioning_GetIdAsync, METH_VARARGS, nullptr },
        { "get_name_async", (PyCFunction)SmartCardProvisioning_GetNameAsync, METH_VARARGS, nullptr },
        { "request_attested_virtual_smart_card_creation_async", (PyCFunction)SmartCardProvisioning_RequestAttestedVirtualSmartCardCreationAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "request_pin_change_async", (PyCFunction)SmartCardProvisioning_RequestPinChangeAsync, METH_VARARGS, nullptr },
        { "request_pin_reset_async", (PyCFunction)SmartCardProvisioning_RequestPinResetAsync, METH_VARARGS, nullptr },
        { "request_virtual_smart_card_creation_async", (PyCFunction)SmartCardProvisioning_RequestVirtualSmartCardCreationAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "request_virtual_smart_card_deletion_async", (PyCFunction)SmartCardProvisioning_RequestVirtualSmartCardDeletionAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_SmartCardProvisioning, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardProvisioning[] = {
        { const_cast<char*>("smart_card"), (getter)SmartCardProvisioning_get_SmartCard, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardProvisioning[] = 
    {
        { Py_tp_new, _new_SmartCardProvisioning },
        { Py_tp_dealloc, _dealloc_SmartCardProvisioning },
        { Py_tp_methods, _methods_SmartCardProvisioning },
        { Py_tp_getset, _getset_SmartCardProvisioning },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardProvisioning =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardProvisioning",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardProvisioning),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardProvisioning
    };

    // ----- SmartCardReader class --------------------
    constexpr const char* const _type_name_SmartCardReader = "SmartCardReader";

    static PyObject* _new_SmartCardReader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardReader);
        return nullptr;
    }

    static void _dealloc_SmartCardReader(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardReader_FindAllCardsAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindAllCardsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardReader::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardReader::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardReaderKind>(args, 0);

                return py::convert(winrt::Windows::Devices::SmartCards::SmartCardReader::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_GetStatusAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStatusAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_get_DeviceId(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_get_Kind(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_get_Name(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_add_CardAdded(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::SmartCards::SmartCardReader, winrt::Windows::Devices::SmartCards::CardAddedEventArgs>>(arg);

            return py::convert(self->obj.CardAdded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_remove_CardAdded(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CardAdded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_add_CardRemoved(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::SmartCards::SmartCardReader, winrt::Windows::Devices::SmartCards::CardRemovedEventArgs>>(arg);

            return py::convert(self->obj.CardRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardReader_remove_CardRemoved(py::wrapper::Windows::Devices::SmartCards::SmartCardReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CardRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardReader[] = {
        { "find_all_cards_async", (PyCFunction)SmartCardReader_FindAllCardsAsync, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)SmartCardReader_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)SmartCardReader_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "get_status_async", (PyCFunction)SmartCardReader_GetStatusAsync, METH_VARARGS, nullptr },
        { "add_card_added", (PyCFunction)SmartCardReader_add_CardAdded, METH_O, nullptr },
        { "remove_card_added", (PyCFunction)SmartCardReader_remove_CardAdded, METH_O, nullptr },
        { "add_card_removed", (PyCFunction)SmartCardReader_add_CardRemoved, METH_O, nullptr },
        { "remove_card_removed", (PyCFunction)SmartCardReader_remove_CardRemoved, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SmartCardReader, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardReader[] = {
        { const_cast<char*>("device_id"), (getter)SmartCardReader_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)SmartCardReader_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("name"), (getter)SmartCardReader_get_Name, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardReader[] = 
    {
        { Py_tp_new, _new_SmartCardReader },
        { Py_tp_dealloc, _dealloc_SmartCardReader },
        { Py_tp_methods, _methods_SmartCardReader },
        { Py_tp_getset, _getset_SmartCardReader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardReader =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardReader",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardReader
    };

    // ----- SmartCardTriggerDetails class --------------------
    constexpr const char* const _type_name_SmartCardTriggerDetails = "SmartCardTriggerDetails";

    static PyObject* _new_SmartCardTriggerDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SmartCardTriggerDetails);
        return nullptr;
    }

    static void _dealloc_SmartCardTriggerDetails(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SmartCardTriggerDetails_TryLaunchCurrentAppAsync(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryLaunchCurrentAppAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::SmartCards::SmartCardLaunchBehavior>(args, 1);

                return py::convert(self->obj.TryLaunchCurrentAppAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SmartCardTriggerDetails_get_SourceAppletId(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceAppletId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardTriggerDetails_get_TriggerData(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TriggerData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardTriggerDetails_get_TriggerType(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TriggerType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardTriggerDetails_get_Emulator(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Emulator());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SmartCardTriggerDetails_get_SmartCard(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmartCard());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SmartCardTriggerDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::SmartCards::SmartCardTriggerDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SmartCardTriggerDetails[] = {
        { "try_launch_current_app_async", (PyCFunction)SmartCardTriggerDetails_TryLaunchCurrentAppAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_SmartCardTriggerDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SmartCardTriggerDetails[] = {
        { const_cast<char*>("source_applet_id"), (getter)SmartCardTriggerDetails_get_SourceAppletId, nullptr, nullptr, nullptr },
        { const_cast<char*>("trigger_data"), (getter)SmartCardTriggerDetails_get_TriggerData, nullptr, nullptr, nullptr },
        { const_cast<char*>("trigger_type"), (getter)SmartCardTriggerDetails_get_TriggerType, nullptr, nullptr, nullptr },
        { const_cast<char*>("emulator"), (getter)SmartCardTriggerDetails_get_Emulator, nullptr, nullptr, nullptr },
        { const_cast<char*>("smart_card"), (getter)SmartCardTriggerDetails_get_SmartCard, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SmartCardTriggerDetails[] = 
    {
        { Py_tp_new, _new_SmartCardTriggerDetails },
        { Py_tp_dealloc, _dealloc_SmartCardTriggerDetails },
        { Py_tp_methods, _methods_SmartCardTriggerDetails },
        { Py_tp_getset, _getset_SmartCardTriggerDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SmartCardTriggerDetails =
    {
        "_winrt_Windows_Devices_SmartCards.SmartCardTriggerDetails",
        sizeof(py::wrapper::Windows::Devices::SmartCards::SmartCardTriggerDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SmartCardTriggerDetails
    };

    // ----- Windows.Devices.SmartCards Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::SmartCards::CardAddedEventArgs>::python_type = py::register_python_type(module, _type_name_CardAddedEventArgs, &_type_spec_CardAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::CardRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_CardRemovedEventArgs, &_type_spec_CardRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::KnownSmartCardAppletIds>::python_type = py::register_python_type(module, _type_name_KnownSmartCardAppletIds, &_type_spec_KnownSmartCardAppletIds, nullptr);
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCard>::python_type = py::register_python_type(module, _type_name_SmartCard, &_type_spec_SmartCard, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroup>::python_type = py::register_python_type(module, _type_name_SmartCardAppletIdGroup, &_type_spec_SmartCardAppletIdGroup, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration>::python_type = py::register_python_type(module, _type_name_SmartCardAppletIdGroupRegistration, &_type_spec_SmartCardAppletIdGroupRegistration, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu>::python_type = py::register_python_type(module, _type_name_SmartCardAutomaticResponseApdu, &_type_spec_SmartCardAutomaticResponseApdu, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardChallengeContext>::python_type = py::register_python_type(module, _type_name_SmartCardChallengeContext, &_type_spec_SmartCardChallengeContext, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardConnection>::python_type = py::register_python_type(module, _type_name_SmartCardConnection, &_type_spec_SmartCardConnection, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGenerator>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramGenerator, &_type_spec_SmartCardCryptogramGenerator, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult, &_type_spec_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult, &_type_spec_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult, &_type_spec_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramMaterialCharacteristics, &_type_spec_SmartCardCryptogramMaterialCharacteristics, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramMaterialPackageCharacteristics, &_type_spec_SmartCardCryptogramMaterialPackageCharacteristics, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramMaterialPossessionProof, &_type_spec_SmartCardCryptogramMaterialPossessionProof, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramPlacementStep, &_type_spec_SmartCardCryptogramPlacementStep, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramStorageKeyCharacteristics, &_type_spec_SmartCardCryptogramStorageKeyCharacteristics, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo>::python_type = py::register_python_type(module, _type_name_SmartCardCryptogramStorageKeyInfo, &_type_spec_SmartCardCryptogramStorageKeyInfo, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulator>::python_type = py::register_python_type(module, _type_name_SmartCardEmulator, &_type_spec_SmartCardEmulator, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs>::python_type = py::register_python_type(module, _type_name_SmartCardEmulatorApduReceivedEventArgs, &_type_spec_SmartCardEmulatorApduReceivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs>::python_type = py::register_python_type(module, _type_name_SmartCardEmulatorConnectionDeactivatedEventArgs, &_type_spec_SmartCardEmulatorConnectionDeactivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties>::python_type = py::register_python_type(module, _type_name_SmartCardEmulatorConnectionProperties, &_type_spec_SmartCardEmulatorConnectionProperties, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardPinPolicy>::python_type = py::register_python_type(module, _type_name_SmartCardPinPolicy, &_type_spec_SmartCardPinPolicy, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardPinResetDeferral>::python_type = py::register_python_type(module, _type_name_SmartCardPinResetDeferral, &_type_spec_SmartCardPinResetDeferral, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardPinResetRequest>::python_type = py::register_python_type(module, _type_name_SmartCardPinResetRequest, &_type_spec_SmartCardPinResetRequest, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardProvisioning>::python_type = py::register_python_type(module, _type_name_SmartCardProvisioning, &_type_spec_SmartCardProvisioning, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardReader>::python_type = py::register_python_type(module, _type_name_SmartCardReader, &_type_spec_SmartCardReader, bases.get());
            py::winrt_type<winrt::Windows::Devices::SmartCards::SmartCardTriggerDetails>::python_type = py::register_python_type(module, _type_name_SmartCardTriggerDetails, &_type_spec_SmartCardTriggerDetails, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.SmartCards");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_SmartCards",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::SmartCards

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_SmartCards (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::SmartCards::module_def);
}
