// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#pragma once

#include "pybase.h"

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#if __has_include("py.Windows.Security.Cryptography.Certificates.h")
#include "py.Windows.Security.Cryptography.Certificates.h"
#endif

#if __has_include("py.Windows.Storage.Streams.h")
#include "py.Windows.Storage.Streams.h"
#endif

#include <winrt/Windows.Security.Cryptography.Core.h>

namespace py::proj::Windows::Security::Cryptography::Core
{}

namespace py::impl::Windows::Security::Cryptography::Core
{}

namespace py::wrapper::Windows::Security::Cryptography::Core
{
    using AsymmetricAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames>;
    using AsymmetricKeyAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider>;
    using CryptographicEngine = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::CryptographicEngine>;
    using CryptographicHash = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::CryptographicHash>;
    using CryptographicKey = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::CryptographicKey>;
    using EccCurveNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::EccCurveNames>;
    using EncryptedAndAuthenticatedData = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData>;
    using HashAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::HashAlgorithmNames>;
    using HashAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::HashAlgorithmProvider>;
    using KeyDerivationAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames>;
    using KeyDerivationAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider>;
    using KeyDerivationParameters = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::KeyDerivationParameters>;
    using MacAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::MacAlgorithmNames>;
    using MacAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::MacAlgorithmProvider>;
    using PersistedKeyProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::PersistedKeyProvider>;
    using SymmetricAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::SymmetricAlgorithmNames>;
    using SymmetricKeyAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider>;
}

namespace py
{
    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::CryptographicEngine>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::CryptographicHash>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::CryptographicKey>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::EccCurveNames>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::HashAlgorithmNames>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::HashAlgorithmProvider>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::KeyDerivationParameters>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::MacAlgorithmNames>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::MacAlgorithmProvider>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::PersistedKeyProvider>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::SymmetricAlgorithmNames>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

    template<>
    struct winrt_type<winrt::Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider>
    {
        static PyTypeObject* python_type;
        static PyTypeObject* get_python_type() { return python_type; }
    };

}
