// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Store.Preview.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreview>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper>::python_type;

namespace py::cpp::Windows::ApplicationModel::Store::Preview
{
    // ----- DeliveryOptimizationSettings class --------------------
    constexpr const char* const _type_name_DeliveryOptimizationSettings = "DeliveryOptimizationSettings";

    static PyObject* _new_DeliveryOptimizationSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DeliveryOptimizationSettings);
        return nullptr;
    }

    static void _dealloc_DeliveryOptimizationSettings(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DeliveryOptimizationSettings_GetCurrentSettings(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings::GetCurrentSettings());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DeliveryOptimizationSettings_get_DownloadMode(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DownloadMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeliveryOptimizationSettings_get_DownloadModeSource(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DownloadModeSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DeliveryOptimizationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeliveryOptimizationSettings[] = {
        { "get_current_settings", (PyCFunction)DeliveryOptimizationSettings_GetCurrentSettings, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_DeliveryOptimizationSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DeliveryOptimizationSettings[] = {
        { const_cast<char*>("download_mode"), (getter)DeliveryOptimizationSettings_get_DownloadMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("download_mode_source"), (getter)DeliveryOptimizationSettings_get_DownloadModeSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DeliveryOptimizationSettings[] = 
    {
        { Py_tp_new, _new_DeliveryOptimizationSettings },
        { Py_tp_dealloc, _dealloc_DeliveryOptimizationSettings },
        { Py_tp_methods, _methods_DeliveryOptimizationSettings },
        { Py_tp_getset, _getset_DeliveryOptimizationSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DeliveryOptimizationSettings =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.DeliveryOptimizationSettings",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeliveryOptimizationSettings
    };

    // ----- StoreConfiguration class --------------------
    constexpr const char* const _type_name_StoreConfiguration = "StoreConfiguration";

    static PyObject* _new_StoreConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StoreConfiguration);
        return nullptr;
    }

    static PyObject* StoreConfiguration_FilterUnsupportedSystemFeaturesAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::FilterUnsupportedSystemFeaturesAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetEnterpriseStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetEnterpriseStoreWebAccountId());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetEnterpriseStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetEnterpriseStoreWebAccountIdForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetPurchasePromptingPolicyForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetPurchasePromptingPolicyForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetStoreLogDataAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Store::Preview::StoreLogOptions>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetStoreLogDataAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetStoreWebAccountId());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_GetStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::GetStoreWebAccountIdForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_HasStoreWebAccount(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::HasStoreWebAccount());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_HasStoreWebAccountForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::HasStoreWebAccountForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsPinToDesktopSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsPinToDesktopSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsPinToStartSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsPinToStartSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsPinToTaskbarSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsPinToTaskbarSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsStoreWebAccountId(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_IsStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::IsStoreWebAccountIdForUser(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_PinToDesktop(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PinToDesktop(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_PinToDesktopForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PinToDesktopForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetEnterpriseStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetEnterpriseStoreWebAccountId(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetEnterpriseStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetEnterpriseStoreWebAccountIdForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetMobileOperatorConfiguration(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetMobileOperatorConfiguration(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetPurchasePromptingPolicyForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetPurchasePromptingPolicyForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetStoreWebAccountId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetStoreWebAccountId(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetStoreWebAccountIdForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetStoreWebAccountIdForUser(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_SetSystemConfiguration(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::SetSystemConfiguration(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_ShouldRestrictToEnterpriseStoreOnly(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::ShouldRestrictToEnterpriseStoreOnly());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_ShouldRestrictToEnterpriseStoreOnlyForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::ShouldRestrictToEnterpriseStoreOnlyForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_get_HardwareManufacturerInfo(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::HardwareManufacturerInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_get_PurchasePromptingPolicy(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PurchasePromptingPolicy());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreConfiguration_put_PurchasePromptingPolicy(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(arg);

            winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration::PurchasePromptingPolicy(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StoreConfiguration[] = {
        { "filter_unsupported_system_features_async", (PyCFunction)StoreConfiguration_FilterUnsupportedSystemFeaturesAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_enterprise_store_web_account_id", (PyCFunction)StoreConfiguration_GetEnterpriseStoreWebAccountId, METH_VARARGS | METH_STATIC, nullptr },
        { "get_enterprise_store_web_account_id_for_user", (PyCFunction)StoreConfiguration_GetEnterpriseStoreWebAccountIdForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "get_purchase_prompting_policy_for_user", (PyCFunction)StoreConfiguration_GetPurchasePromptingPolicyForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "get_store_log_data_async", (PyCFunction)StoreConfiguration_GetStoreLogDataAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_store_web_account_id", (PyCFunction)StoreConfiguration_GetStoreWebAccountId, METH_VARARGS | METH_STATIC, nullptr },
        { "get_store_web_account_id_for_user", (PyCFunction)StoreConfiguration_GetStoreWebAccountIdForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "has_store_web_account", (PyCFunction)StoreConfiguration_HasStoreWebAccount, METH_VARARGS | METH_STATIC, nullptr },
        { "has_store_web_account_for_user", (PyCFunction)StoreConfiguration_HasStoreWebAccountForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "is_pin_to_desktop_supported", (PyCFunction)StoreConfiguration_IsPinToDesktopSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "is_pin_to_start_supported", (PyCFunction)StoreConfiguration_IsPinToStartSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "is_pin_to_taskbar_supported", (PyCFunction)StoreConfiguration_IsPinToTaskbarSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "is_store_web_account_id", (PyCFunction)StoreConfiguration_IsStoreWebAccountId, METH_VARARGS | METH_STATIC, nullptr },
        { "is_store_web_account_id_for_user", (PyCFunction)StoreConfiguration_IsStoreWebAccountIdForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "pin_to_desktop", (PyCFunction)StoreConfiguration_PinToDesktop, METH_VARARGS | METH_STATIC, nullptr },
        { "pin_to_desktop_for_user", (PyCFunction)StoreConfiguration_PinToDesktopForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "set_enterprise_store_web_account_id", (PyCFunction)StoreConfiguration_SetEnterpriseStoreWebAccountId, METH_VARARGS | METH_STATIC, nullptr },
        { "set_enterprise_store_web_account_id_for_user", (PyCFunction)StoreConfiguration_SetEnterpriseStoreWebAccountIdForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "set_mobile_operator_configuration", (PyCFunction)StoreConfiguration_SetMobileOperatorConfiguration, METH_VARARGS | METH_STATIC, nullptr },
        { "set_purchase_prompting_policy_for_user", (PyCFunction)StoreConfiguration_SetPurchasePromptingPolicyForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "set_store_web_account_id", (PyCFunction)StoreConfiguration_SetStoreWebAccountId, METH_VARARGS | METH_STATIC, nullptr },
        { "set_store_web_account_id_for_user", (PyCFunction)StoreConfiguration_SetStoreWebAccountIdForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "set_system_configuration", (PyCFunction)StoreConfiguration_SetSystemConfiguration, METH_VARARGS | METH_STATIC, nullptr },
        { "should_restrict_to_enterprise_store_only", (PyCFunction)StoreConfiguration_ShouldRestrictToEnterpriseStoreOnly, METH_VARARGS | METH_STATIC, nullptr },
        { "should_restrict_to_enterprise_store_only_for_user", (PyCFunction)StoreConfiguration_ShouldRestrictToEnterpriseStoreOnlyForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "get_hardware_manufacturer_info", (PyCFunction)StoreConfiguration_get_HardwareManufacturerInfo, METH_NOARGS | METH_STATIC, nullptr },
        { "get_purchase_prompting_policy", (PyCFunction)StoreConfiguration_get_PurchasePromptingPolicy, METH_NOARGS | METH_STATIC, nullptr },
        { "put_purchase_prompting_policy", (PyCFunction)StoreConfiguration_put_PurchasePromptingPolicy, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StoreConfiguration[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_StoreConfiguration[] = 
    {
        { Py_tp_new, _new_StoreConfiguration },
        { Py_tp_methods, _methods_StoreConfiguration },
        { Py_tp_getset, _getset_StoreConfiguration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StoreConfiguration =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.StoreConfiguration",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StoreConfiguration
    };

    // ----- StoreHardwareManufacturerInfo class --------------------
    constexpr const char* const _type_name_StoreHardwareManufacturerInfo = "StoreHardwareManufacturerInfo";

    static PyObject* _new_StoreHardwareManufacturerInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StoreHardwareManufacturerInfo);
        return nullptr;
    }

    static void _dealloc_StoreHardwareManufacturerInfo(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StoreHardwareManufacturerInfo_get_HardwareManufacturerId(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HardwareManufacturerId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreHardwareManufacturerInfo_get_ManufacturerName(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ManufacturerName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreHardwareManufacturerInfo_get_ModelName(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ModelName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StoreHardwareManufacturerInfo_get_StoreContentModifierId(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StoreContentModifierId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StoreHardwareManufacturerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StoreHardwareManufacturerInfo[] = {
        { "_from", (PyCFunction)_from_StoreHardwareManufacturerInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StoreHardwareManufacturerInfo[] = {
        { const_cast<char*>("hardware_manufacturer_id"), (getter)StoreHardwareManufacturerInfo_get_HardwareManufacturerId, nullptr, nullptr, nullptr },
        { const_cast<char*>("manufacturer_name"), (getter)StoreHardwareManufacturerInfo_get_ManufacturerName, nullptr, nullptr, nullptr },
        { const_cast<char*>("model_name"), (getter)StoreHardwareManufacturerInfo_get_ModelName, nullptr, nullptr, nullptr },
        { const_cast<char*>("store_content_modifier_id"), (getter)StoreHardwareManufacturerInfo_get_StoreContentModifierId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StoreHardwareManufacturerInfo[] = 
    {
        { Py_tp_new, _new_StoreHardwareManufacturerInfo },
        { Py_tp_dealloc, _dealloc_StoreHardwareManufacturerInfo },
        { Py_tp_methods, _methods_StoreHardwareManufacturerInfo },
        { Py_tp_getset, _getset_StoreHardwareManufacturerInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StoreHardwareManufacturerInfo =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.StoreHardwareManufacturerInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StoreHardwareManufacturerInfo
    };

    // ----- StorePreview class --------------------
    constexpr const char* const _type_name_StorePreview = "StorePreview";

    static PyObject* _new_StorePreview(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorePreview);
        return nullptr;
    }

    static PyObject* StorePreview_LoadAddOnProductInfosAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StorePreview::LoadAddOnProductInfosAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorePreview_RequestProductPurchaseByProductIdAndSkuIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::StorePreview::RequestProductPurchaseByProductIdAndSkuIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreview[] = {
        { "load_add_on_product_infos_async", (PyCFunction)StorePreview_LoadAddOnProductInfosAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "request_product_purchase_by_product_id_and_sku_id_async", (PyCFunction)StorePreview_RequestProductPurchaseByProductIdAndSkuIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorePreview[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_StorePreview[] = 
    {
        { Py_tp_new, _new_StorePreview },
        { Py_tp_methods, _methods_StorePreview },
        { Py_tp_getset, _getset_StorePreview },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorePreview =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.StorePreview",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreview
    };

    // ----- StorePreviewProductInfo class --------------------
    constexpr const char* const _type_name_StorePreviewProductInfo = "StorePreviewProductInfo";

    static PyObject* _new_StorePreviewProductInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorePreviewProductInfo);
        return nullptr;
    }

    static void _dealloc_StorePreviewProductInfo(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StorePreviewProductInfo_get_Description(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_ProductType(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProductType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_SkuInfoList(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SkuInfoList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewProductInfo_get_Title(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StorePreviewProductInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreviewProductInfo[] = {
        { "_from", (PyCFunction)_from_StorePreviewProductInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorePreviewProductInfo[] = {
        { const_cast<char*>("description"), (getter)StorePreviewProductInfo_get_Description, nullptr, nullptr, nullptr },
        { const_cast<char*>("product_id"), (getter)StorePreviewProductInfo_get_ProductId, nullptr, nullptr, nullptr },
        { const_cast<char*>("product_type"), (getter)StorePreviewProductInfo_get_ProductType, nullptr, nullptr, nullptr },
        { const_cast<char*>("sku_info_list"), (getter)StorePreviewProductInfo_get_SkuInfoList, nullptr, nullptr, nullptr },
        { const_cast<char*>("title"), (getter)StorePreviewProductInfo_get_Title, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StorePreviewProductInfo[] = 
    {
        { Py_tp_new, _new_StorePreviewProductInfo },
        { Py_tp_dealloc, _dealloc_StorePreviewProductInfo },
        { Py_tp_methods, _methods_StorePreviewProductInfo },
        { Py_tp_getset, _getset_StorePreviewProductInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorePreviewProductInfo =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.StorePreviewProductInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreviewProductInfo
    };

    // ----- StorePreviewPurchaseResults class --------------------
    constexpr const char* const _type_name_StorePreviewPurchaseResults = "StorePreviewPurchaseResults";

    static PyObject* _new_StorePreviewPurchaseResults(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorePreviewPurchaseResults);
        return nullptr;
    }

    static void _dealloc_StorePreviewPurchaseResults(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StorePreviewPurchaseResults_get_ProductPurchaseStatus(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProductPurchaseStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StorePreviewPurchaseResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreviewPurchaseResults[] = {
        { "_from", (PyCFunction)_from_StorePreviewPurchaseResults, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorePreviewPurchaseResults[] = {
        { const_cast<char*>("product_purchase_status"), (getter)StorePreviewPurchaseResults_get_ProductPurchaseStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StorePreviewPurchaseResults[] = 
    {
        { Py_tp_new, _new_StorePreviewPurchaseResults },
        { Py_tp_dealloc, _dealloc_StorePreviewPurchaseResults },
        { Py_tp_methods, _methods_StorePreviewPurchaseResults },
        { Py_tp_getset, _getset_StorePreviewPurchaseResults },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorePreviewPurchaseResults =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.StorePreviewPurchaseResults",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreviewPurchaseResults
    };

    // ----- StorePreviewSkuInfo class --------------------
    constexpr const char* const _type_name_StorePreviewSkuInfo = "StorePreviewSkuInfo";

    static PyObject* _new_StorePreviewSkuInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StorePreviewSkuInfo);
        return nullptr;
    }

    static void _dealloc_StorePreviewSkuInfo(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StorePreviewSkuInfo_get_CurrencyCode(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrencyCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_CustomDeveloperData(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CustomDeveloperData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_Description(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_ExtendedData(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExtendedData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_FormattedListPrice(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FormattedListPrice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_ProductId(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_SkuId(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SkuId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_SkuType(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SkuType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorePreviewSkuInfo_get_Title(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StorePreviewSkuInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorePreviewSkuInfo[] = {
        { "_from", (PyCFunction)_from_StorePreviewSkuInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StorePreviewSkuInfo[] = {
        { const_cast<char*>("currency_code"), (getter)StorePreviewSkuInfo_get_CurrencyCode, nullptr, nullptr, nullptr },
        { const_cast<char*>("custom_developer_data"), (getter)StorePreviewSkuInfo_get_CustomDeveloperData, nullptr, nullptr, nullptr },
        { const_cast<char*>("description"), (getter)StorePreviewSkuInfo_get_Description, nullptr, nullptr, nullptr },
        { const_cast<char*>("extended_data"), (getter)StorePreviewSkuInfo_get_ExtendedData, nullptr, nullptr, nullptr },
        { const_cast<char*>("formatted_list_price"), (getter)StorePreviewSkuInfo_get_FormattedListPrice, nullptr, nullptr, nullptr },
        { const_cast<char*>("product_id"), (getter)StorePreviewSkuInfo_get_ProductId, nullptr, nullptr, nullptr },
        { const_cast<char*>("sku_id"), (getter)StorePreviewSkuInfo_get_SkuId, nullptr, nullptr, nullptr },
        { const_cast<char*>("sku_type"), (getter)StorePreviewSkuInfo_get_SkuType, nullptr, nullptr, nullptr },
        { const_cast<char*>("title"), (getter)StorePreviewSkuInfo_get_Title, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StorePreviewSkuInfo[] = 
    {
        { Py_tp_new, _new_StorePreviewSkuInfo },
        { Py_tp_dealloc, _dealloc_StorePreviewSkuInfo },
        { Py_tp_methods, _methods_StorePreviewSkuInfo },
        { Py_tp_getset, _getset_StorePreviewSkuInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StorePreviewSkuInfo =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.StorePreviewSkuInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorePreviewSkuInfo
    };

    // ----- WebAuthenticationCoreManagerHelper class --------------------
    constexpr const char* const _type_name_WebAuthenticationCoreManagerHelper = "WebAuthenticationCoreManagerHelper";

    static PyObject* _new_WebAuthenticationCoreManagerHelper(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebAuthenticationCoreManagerHelper);
        return nullptr;
    }

    static PyObject* WebAuthenticationCoreManagerHelper_RequestTokenWithUIElementHostingAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Xaml::UIElement>(args, 1);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Authentication::Web::Core::WebTokenRequest>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::Credentials::WebAccount>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::Xaml::UIElement>(args, 2);

                return py::convert(winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebAuthenticationCoreManagerHelper[] = {
        { "request_token_with_u_i_element_hosting_async", (PyCFunction)WebAuthenticationCoreManagerHelper_RequestTokenWithUIElementHostingAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WebAuthenticationCoreManagerHelper[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WebAuthenticationCoreManagerHelper[] = 
    {
        { Py_tp_new, _new_WebAuthenticationCoreManagerHelper },
        { Py_tp_methods, _methods_WebAuthenticationCoreManagerHelper },
        { Py_tp_getset, _getset_WebAuthenticationCoreManagerHelper },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WebAuthenticationCoreManagerHelper =
    {
        "_winrt_Windows_ApplicationModel_Store_Preview.WebAuthenticationCoreManagerHelper",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebAuthenticationCoreManagerHelper
    };

    // ----- Windows.ApplicationModel.Store.Preview Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::DeliveryOptimizationSettings>::python_type = py::register_python_type(module, _type_name_DeliveryOptimizationSettings, &_type_spec_DeliveryOptimizationSettings, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StoreConfiguration>::python_type = py::register_python_type(module, _type_name_StoreConfiguration, &_type_spec_StoreConfiguration, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo>::python_type = py::register_python_type(module, _type_name_StoreHardwareManufacturerInfo, &_type_spec_StoreHardwareManufacturerInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreview>::python_type = py::register_python_type(module, _type_name_StorePreview, &_type_spec_StorePreview, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>::python_type = py::register_python_type(module, _type_name_StorePreviewProductInfo, &_type_spec_StorePreviewProductInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults>::python_type = py::register_python_type(module, _type_name_StorePreviewPurchaseResults, &_type_spec_StorePreviewPurchaseResults, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo>::python_type = py::register_python_type(module, _type_name_StorePreviewSkuInfo, &_type_spec_StorePreviewSkuInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper>::python_type = py::register_python_type(module, _type_name_WebAuthenticationCoreManagerHelper, &_type_spec_WebAuthenticationCoreManagerHelper, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Store.Preview");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Store_Preview",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Store::Preview

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Store_Preview (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Store::Preview::module_def);
}
