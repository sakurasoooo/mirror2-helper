// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Foundation.Metadata.h"

PyTypeObject* py::winrt_type<winrt::Windows::Foundation::Metadata::ApiInformation>::python_type;

namespace py::cpp::Windows::Foundation::Metadata
{
    // ----- ApiInformation class --------------------
    constexpr const char* const _type_name_ApiInformation = "ApiInformation";

    static PyObject* _new_ApiInformation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ApiInformation);
        return nullptr;
    }

    static PyObject* ApiInformation_IsApiContractPresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);
                auto param2 = py::convert_to<uint16_t>(args, 2);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApiInformation_IsEnumNamedValuePresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsEnumNamedValuePresent(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApiInformation_IsEventPresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApiInformation_IsMethodPresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApiInformation_IsPropertyPresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApiInformation_IsReadOnlyPropertyPresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsReadOnlyPropertyPresent(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApiInformation_IsTypePresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsTypePresent(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApiInformation_IsWriteablePropertyPresent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Foundation::Metadata::ApiInformation::IsWriteablePropertyPresent(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApiInformation[] = {
        { "is_api_contract_present", (PyCFunction)ApiInformation_IsApiContractPresent, METH_VARARGS | METH_STATIC, nullptr },
        { "is_enum_named_value_present", (PyCFunction)ApiInformation_IsEnumNamedValuePresent, METH_VARARGS | METH_STATIC, nullptr },
        { "is_event_present", (PyCFunction)ApiInformation_IsEventPresent, METH_VARARGS | METH_STATIC, nullptr },
        { "is_method_present", (PyCFunction)ApiInformation_IsMethodPresent, METH_VARARGS | METH_STATIC, nullptr },
        { "is_property_present", (PyCFunction)ApiInformation_IsPropertyPresent, METH_VARARGS | METH_STATIC, nullptr },
        { "is_read_only_property_present", (PyCFunction)ApiInformation_IsReadOnlyPropertyPresent, METH_VARARGS | METH_STATIC, nullptr },
        { "is_type_present", (PyCFunction)ApiInformation_IsTypePresent, METH_VARARGS | METH_STATIC, nullptr },
        { "is_writeable_property_present", (PyCFunction)ApiInformation_IsWriteablePropertyPresent, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApiInformation[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ApiInformation[] = 
    {
        { Py_tp_new, _new_ApiInformation },
        { Py_tp_methods, _methods_ApiInformation },
        { Py_tp_getset, _getset_ApiInformation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApiInformation =
    {
        "_winrt_Windows_Foundation_Metadata.ApiInformation",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApiInformation
    };

    // ----- Windows.Foundation.Metadata Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Foundation::Metadata::ApiInformation>::python_type = py::register_python_type(module, _type_name_ApiInformation, &_type_spec_ApiInformation, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Foundation.Metadata");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Foundation_Metadata",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Foundation::Metadata

PyMODINIT_FUNC
PyInit__winrt_Windows_Foundation_Metadata (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Foundation::Metadata::module_def);
}
