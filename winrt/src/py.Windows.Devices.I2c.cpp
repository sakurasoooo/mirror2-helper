// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.I2c.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::I2cConnectionSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::I2cController>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::I2cDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::II2cDeviceStatics>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::I2c::I2cTransferResult>::python_type;

PyObject* py::converter<winrt::Windows::Devices::I2c::I2cTransferResult>::convert(winrt::Windows::Devices::I2c::I2cTransferResult instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Devices::I2c::I2cTransferResult>());
}
winrt::Windows::Devices::I2c::I2cTransferResult py::converter<winrt::Windows::Devices::I2c::I2cTransferResult>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Devices::I2c::I2cTransferResult>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Devices::I2c::I2cTransferResult>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Devices::I2c::I2cTransferResult return_value{};

    PyObject* py_Status = PyDict_GetItemString(obj, "status");
    if (!py_Status) { throw winrt::hresult_invalid_argument(); }
    return_value.Status = converter<winrt::Windows::Devices::I2c::I2cTransferStatus>::convert_to(py_Status);

    PyObject* py_BytesTransferred = PyDict_GetItemString(obj, "bytes_transferred");
    if (!py_BytesTransferred) { throw winrt::hresult_invalid_argument(); }
    return_value.BytesTransferred = converter<uint32_t>::convert_to(py_BytesTransferred);

    return return_value;
}

namespace py::cpp::Windows::Devices::I2c
{
    // ----- I2cConnectionSettings class --------------------
    constexpr const char* const _type_name_I2cConnectionSettings = "I2cConnectionSettings";

    static PyObject* _new_I2cConnectionSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Devices::I2c::I2cConnectionSettings instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_I2cConnectionSettings(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* I2cConnectionSettings_get_SlaveAddress(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SlaveAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int I2cConnectionSettings_put_SlaveAddress(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SlaveAddress(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* I2cConnectionSettings_get_SharingMode(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SharingMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int I2cConnectionSettings_put_SharingMode(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::I2c::I2cSharingMode>(arg);

            self->obj.SharingMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* I2cConnectionSettings_get_BusSpeed(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BusSpeed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int I2cConnectionSettings_put_BusSpeed(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::I2c::I2cBusSpeed>(arg);

            self->obj.BusSpeed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_I2cConnectionSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::I2cConnectionSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_I2cConnectionSettings[] = {
        { "_from", (PyCFunction)_from_I2cConnectionSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_I2cConnectionSettings[] = {
        { const_cast<char*>("slave_address"), (getter)I2cConnectionSettings_get_SlaveAddress, (setter)I2cConnectionSettings_put_SlaveAddress, nullptr, nullptr },
        { const_cast<char*>("sharing_mode"), (getter)I2cConnectionSettings_get_SharingMode, (setter)I2cConnectionSettings_put_SharingMode, nullptr, nullptr },
        { const_cast<char*>("bus_speed"), (getter)I2cConnectionSettings_get_BusSpeed, (setter)I2cConnectionSettings_put_BusSpeed, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_I2cConnectionSettings[] = 
    {
        { Py_tp_new, _new_I2cConnectionSettings },
        { Py_tp_dealloc, _dealloc_I2cConnectionSettings },
        { Py_tp_methods, _methods_I2cConnectionSettings },
        { Py_tp_getset, _getset_I2cConnectionSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_I2cConnectionSettings =
    {
        "_winrt_Windows_Devices_I2c.I2cConnectionSettings",
        sizeof(py::wrapper::Windows::Devices::I2c::I2cConnectionSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_I2cConnectionSettings
    };

    // ----- I2cController class --------------------
    constexpr const char* const _type_name_I2cController = "I2cController";

    static PyObject* _new_I2cController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_I2cController);
        return nullptr;
    }

    static void _dealloc_I2cController(py::wrapper::Windows::Devices::I2c::I2cController* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* I2cController_GetControllersAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::I2c::Provider::II2cProvider>(args, 0);

                return py::convert(winrt::Windows::Devices::I2c::I2cController::GetControllersAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cController_GetDefaultAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::I2c::I2cController::GetDefaultAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cController_GetDevice(py::wrapper::Windows::Devices::I2c::I2cController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::I2c::I2cConnectionSettings>(args, 0);

                return py::convert(self->obj.GetDevice(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_I2cController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::I2cController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_I2cController[] = {
        { "get_controllers_async", (PyCFunction)I2cController_GetControllersAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_default_async", (PyCFunction)I2cController_GetDefaultAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device", (PyCFunction)I2cController_GetDevice, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_I2cController, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_I2cController[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_I2cController[] = 
    {
        { Py_tp_new, _new_I2cController },
        { Py_tp_dealloc, _dealloc_I2cController },
        { Py_tp_methods, _methods_I2cController },
        { Py_tp_getset, _getset_I2cController },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_I2cController =
    {
        "_winrt_Windows_Devices_I2c.I2cController",
        sizeof(py::wrapper::Windows::Devices::I2c::I2cController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_I2cController
    };

    // ----- I2cDevice class --------------------
    constexpr const char* const _type_name_I2cDevice = "I2cDevice";

    static PyObject* _new_I2cDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_I2cDevice);
        return nullptr;
    }

    static void _dealloc_I2cDevice(py::wrapper::Windows::Devices::I2c::I2cDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* I2cDevice_Close(py::wrapper::Windows::Devices::I2c::I2cDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::I2c::I2cConnectionSettings>(args, 1);

                return py::convert(winrt::Windows::Devices::I2c::I2cDevice::FromIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::I2c::I2cDevice::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::I2c::I2cDevice::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_Read(py::wrapper::Windows::Devices::I2c::I2cDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 0);
                winrt::com_array<uint8_t> param0 ( param0_count, py::empty_instance<uint8_t>::get() );

                self->obj.Read(param0);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return out0.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_ReadPartial(py::wrapper::Windows::Devices::I2c::I2cDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 0);
                winrt::com_array<uint8_t> param0 ( param0_count, py::empty_instance<uint8_t>::get() );

                auto return_value = self->obj.ReadPartial(param0);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out0.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_Write(py::wrapper::Windows::Devices::I2c::I2cDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);

                self->obj.Write(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_WritePartial(py::wrapper::Windows::Devices::I2c::I2cDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);

                return py::convert(self->obj.WritePartial(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_WriteRead(py::wrapper::Windows::Devices::I2c::I2cDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 1);
                winrt::com_array<uint8_t> param1 ( param1_count, py::empty_instance<uint8_t>::get() );

                self->obj.WriteRead(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_WriteReadPartial(py::wrapper::Windows::Devices::I2c::I2cDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<uint8_t>::size_type>(args, 1);
                winrt::com_array<uint8_t> param1 ( param1_count, py::empty_instance<uint8_t>::get() );

                auto return_value = self->obj.WriteReadPartial(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* I2cDevice_get_ConnectionSettings(py::wrapper::Windows::Devices::I2c::I2cDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionSettings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* I2cDevice_get_DeviceId(py::wrapper::Windows::Devices::I2c::I2cDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_I2cDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::I2cDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_I2cDevice(py::wrapper::Windows::Devices::I2c::I2cDevice* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_I2cDevice(py::wrapper::Windows::Devices::I2c::I2cDevice* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_I2cDevice[] = {
        { "close", (PyCFunction)I2cDevice_Close, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)I2cDevice_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)I2cDevice_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "read", (PyCFunction)I2cDevice_Read, METH_VARARGS, nullptr },
        { "read_partial", (PyCFunction)I2cDevice_ReadPartial, METH_VARARGS, nullptr },
        { "write", (PyCFunction)I2cDevice_Write, METH_VARARGS, nullptr },
        { "write_partial", (PyCFunction)I2cDevice_WritePartial, METH_VARARGS, nullptr },
        { "write_read", (PyCFunction)I2cDevice_WriteRead, METH_VARARGS, nullptr },
        { "write_read_partial", (PyCFunction)I2cDevice_WriteReadPartial, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_I2cDevice, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_I2cDevice, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_I2cDevice, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_I2cDevice[] = {
        { const_cast<char*>("connection_settings"), (getter)I2cDevice_get_ConnectionSettings, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)I2cDevice_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_I2cDevice[] = 
    {
        { Py_tp_new, _new_I2cDevice },
        { Py_tp_dealloc, _dealloc_I2cDevice },
        { Py_tp_methods, _methods_I2cDevice },
        { Py_tp_getset, _getset_I2cDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_I2cDevice =
    {
        "_winrt_Windows_Devices_I2c.I2cDevice",
        sizeof(py::wrapper::Windows::Devices::I2c::I2cDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_I2cDevice
    };

    // ----- II2cDeviceStatics interface --------------------
    constexpr const char* const _type_name_II2cDeviceStatics = "II2cDeviceStatics";

    static PyObject* _new_II2cDeviceStatics(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_II2cDeviceStatics);
        return nullptr;
    }

    static void _dealloc_II2cDeviceStatics(py::wrapper::Windows::Devices::I2c::II2cDeviceStatics* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* II2cDeviceStatics_FromIdAsync(py::wrapper::Windows::Devices::I2c::II2cDeviceStatics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::I2c::I2cConnectionSettings>(args, 1);

                return py::convert(self->obj.FromIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* II2cDeviceStatics_GetDeviceSelector(py::wrapper::Windows::Devices::I2c::II2cDeviceStatics* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_II2cDeviceStatics(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::I2c::II2cDeviceStatics>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_II2cDeviceStatics[] = {
        { "from_id_async", (PyCFunction)II2cDeviceStatics_FromIdAsync, METH_VARARGS, nullptr },
        { "get_device_selector", (PyCFunction)II2cDeviceStatics_GetDeviceSelector, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_II2cDeviceStatics, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_II2cDeviceStatics[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_II2cDeviceStatics[] = 
    {
        { Py_tp_new, _new_II2cDeviceStatics },
        { Py_tp_dealloc, _dealloc_II2cDeviceStatics },
        { Py_tp_methods, _methods_II2cDeviceStatics },
        { Py_tp_getset, _getset_II2cDeviceStatics },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_II2cDeviceStatics =
    {
        "_winrt_Windows_Devices_I2c.II2cDeviceStatics",
        sizeof(py::wrapper::Windows::Devices::I2c::II2cDeviceStatics),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_II2cDeviceStatics
    };

    // ----- I2cTransferResult struct --------------------
    constexpr const char* const _type_name_I2cTransferResult = "I2cTransferResult";

    PyObject* _new_I2cTransferResult(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Devices::I2c::I2cTransferResult return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Devices::I2c::I2cTransferResult>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        int32_t _Status{};
        uint32_t _BytesTransferred{};

        static const char* kwlist[] = {"status", "bytes_transferred", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "iI", const_cast<char**>(kwlist), &_Status, &_BytesTransferred))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Devices::I2c::I2cTransferResult return_value{ static_cast<winrt::Windows::Devices::I2c::I2cTransferStatus>(_Status), _BytesTransferred };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_I2cTransferResult(py::wrapper::Windows::Devices::I2c::I2cTransferResult* self)
    {
    }

    static PyObject* I2cTransferResult_get_Status(py::wrapper::Windows::Devices::I2c::I2cTransferResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int I2cTransferResult_set_Status(py::wrapper::Windows::Devices::I2c::I2cTransferResult* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Status = py::converter<winrt::Windows::Devices::I2c::I2cTransferStatus>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* I2cTransferResult_get_BytesTransferred(py::wrapper::Windows::Devices::I2c::I2cTransferResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BytesTransferred);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int I2cTransferResult_set_BytesTransferred(py::wrapper::Windows::Devices::I2c::I2cTransferResult* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.BytesTransferred = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_I2cTransferResult[] = {
        { const_cast<char*>("status"), (getter)I2cTransferResult_get_Status, (setter)I2cTransferResult_set_Status, nullptr, nullptr },
        { const_cast<char*>("bytes_transferred"), (getter)I2cTransferResult_get_BytesTransferred, (setter)I2cTransferResult_set_BytesTransferred, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_I2cTransferResult[] = 
    {
        { Py_tp_new, _new_I2cTransferResult },
        { Py_tp_dealloc, _dealloc_I2cTransferResult },
        { Py_tp_getset, _getset_I2cTransferResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_I2cTransferResult =
    {
        "_winrt_Windows_Devices_I2c.I2cTransferResult",
        sizeof(py::wrapper::Windows::Devices::I2c::I2cTransferResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_I2cTransferResult
    };

    // ----- Windows.Devices.I2c Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::I2c::I2cConnectionSettings>::python_type = py::register_python_type(module, _type_name_I2cConnectionSettings, &_type_spec_I2cConnectionSettings, bases.get());
            py::winrt_type<winrt::Windows::Devices::I2c::I2cController>::python_type = py::register_python_type(module, _type_name_I2cController, &_type_spec_I2cController, bases.get());
            py::winrt_type<winrt::Windows::Devices::I2c::I2cDevice>::python_type = py::register_python_type(module, _type_name_I2cDevice, &_type_spec_I2cDevice, bases.get());
            py::winrt_type<winrt::Windows::Devices::I2c::II2cDeviceStatics>::python_type = py::register_python_type(module, _type_name_II2cDeviceStatics, &_type_spec_II2cDeviceStatics, bases.get());
            py::winrt_type<winrt::Windows::Devices::I2c::I2cTransferResult>::python_type = py::register_python_type(module, _type_name_I2cTransferResult, &_type_spec_I2cTransferResult, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.I2c");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_I2c",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::I2c

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_I2c (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::I2c::module_def);
}
