// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Lights.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Lights::Lamp>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Lights::LampArray>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Lights::LampAvailabilityChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Lights::LampInfo>::python_type;

namespace py::cpp::Windows::Devices::Lights
{
    // ----- Lamp class --------------------
    constexpr const char* const _type_name_Lamp = "Lamp";

    static PyObject* _new_Lamp(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_Lamp);
        return nullptr;
    }

    static void _dealloc_Lamp(py::wrapper::Windows::Devices::Lights::Lamp* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Lamp_Close(py::wrapper::Windows::Devices::Lights::Lamp* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Lamp_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Lights::Lamp::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Lamp_GetDefaultAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Lights::Lamp::GetDefaultAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Lamp_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Lights::Lamp::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Lamp_get_IsEnabled(py::wrapper::Windows::Devices::Lights::Lamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Lamp_put_IsEnabled(py::wrapper::Windows::Devices::Lights::Lamp* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Lamp_get_Color(py::wrapper::Windows::Devices::Lights::Lamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Color());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Lamp_put_Color(py::wrapper::Windows::Devices::Lights::Lamp* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.Color(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Lamp_get_BrightnessLevel(py::wrapper::Windows::Devices::Lights::Lamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BrightnessLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Lamp_put_BrightnessLevel(py::wrapper::Windows::Devices::Lights::Lamp* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.BrightnessLevel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Lamp_get_DeviceId(py::wrapper::Windows::Devices::Lights::Lamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Lamp_get_IsColorSettable(py::wrapper::Windows::Devices::Lights::Lamp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsColorSettable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Lamp_add_AvailabilityChanged(py::wrapper::Windows::Devices::Lights::Lamp* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Lights::Lamp, winrt::Windows::Devices::Lights::LampAvailabilityChangedEventArgs>>(arg);

            return py::convert(self->obj.AvailabilityChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Lamp_remove_AvailabilityChanged(py::wrapper::Windows::Devices::Lights::Lamp* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AvailabilityChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Lamp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Lights::Lamp>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_Lamp(py::wrapper::Windows::Devices::Lights::Lamp* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_Lamp(py::wrapper::Windows::Devices::Lights::Lamp* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Lamp[] = {
        { "close", (PyCFunction)Lamp_Close, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)Lamp_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_default_async", (PyCFunction)Lamp_GetDefaultAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)Lamp_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "add_availability_changed", (PyCFunction)Lamp_add_AvailabilityChanged, METH_O, nullptr },
        { "remove_availability_changed", (PyCFunction)Lamp_remove_AvailabilityChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_Lamp, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_Lamp, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_Lamp, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Lamp[] = {
        { const_cast<char*>("is_enabled"), (getter)Lamp_get_IsEnabled, (setter)Lamp_put_IsEnabled, nullptr, nullptr },
        { const_cast<char*>("color"), (getter)Lamp_get_Color, (setter)Lamp_put_Color, nullptr, nullptr },
        { const_cast<char*>("brightness_level"), (getter)Lamp_get_BrightnessLevel, (setter)Lamp_put_BrightnessLevel, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)Lamp_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_color_settable"), (getter)Lamp_get_IsColorSettable, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Lamp[] = 
    {
        { Py_tp_new, _new_Lamp },
        { Py_tp_dealloc, _dealloc_Lamp },
        { Py_tp_methods, _methods_Lamp },
        { Py_tp_getset, _getset_Lamp },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Lamp =
    {
        "_winrt_Windows_Devices_Lights.Lamp",
        sizeof(py::wrapper::Windows::Devices::Lights::Lamp),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Lamp
    };

    // ----- LampArray class --------------------
    constexpr const char* const _type_name_LampArray = "LampArray";

    static PyObject* _new_LampArray(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LampArray);
        return nullptr;
    }

    static void _dealloc_LampArray(py::wrapper::Windows::Devices::Lights::LampArray* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LampArray_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Lights::LampArray::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Lights::LampArray::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_GetIndicesForKey(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::VirtualKey>(args, 0);

                return py::convert(self->obj.GetIndicesForKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_GetIndicesForPurposes(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Lights::LampPurposes>(args, 0);

                return py::convert(self->obj.GetIndicesForPurposes(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_GetLampInfo(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.GetLampInfo(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_RequestMessageAsync(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.RequestMessageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SendMessageAsync(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(self->obj.SendMessageAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SetColor(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Color>(args, 0);

                self->obj.SetColor(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SetColorForIndex(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Color>(args, 1);

                self->obj.SetColorForIndex(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SetColorsForIndices(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<winrt::Windows::UI::Color>>(args, 0);
                auto param1 = py::convert_to<winrt::array_view<int32_t>>(args, 1);

                self->obj.SetColorsForIndices(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SetColorsForKey(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Color>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::System::VirtualKey>(args, 1);

                self->obj.SetColorsForKey(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SetColorsForKeys(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<winrt::Windows::UI::Color>>(args, 0);
                auto param1 = py::convert_to<winrt::array_view<winrt::Windows::System::VirtualKey>>(args, 1);

                self->obj.SetColorsForKeys(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SetColorsForPurposes(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Color>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Lights::LampPurposes>(args, 1);

                self->obj.SetColorsForPurposes(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_SetSingleColorForIndices(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Color>(args, 0);
                auto param1 = py::convert_to<winrt::array_view<int32_t>>(args, 1);

                self->obj.SetSingleColorForIndices(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampArray_get_IsEnabled(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int LampArray_put_IsEnabled(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* LampArray_get_BrightnessLevel(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BrightnessLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int LampArray_put_BrightnessLevel(py::wrapper::Windows::Devices::Lights::LampArray* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.BrightnessLevel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* LampArray_get_BoundingBox(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_DeviceId(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_HardwareProductId(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HardwareProductId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_HardwareVendorId(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HardwareVendorId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_HardwareVersion(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HardwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_IsConnected(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsConnected());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_LampArrayKind(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LampArrayKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_LampCount(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LampCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_MinUpdateInterval(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinUpdateInterval());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampArray_get_SupportsVirtualKeys(py::wrapper::Windows::Devices::Lights::LampArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportsVirtualKeys());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LampArray(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Lights::LampArray>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LampArray[] = {
        { "from_id_async", (PyCFunction)LampArray_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)LampArray_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "get_indices_for_key", (PyCFunction)LampArray_GetIndicesForKey, METH_VARARGS, nullptr },
        { "get_indices_for_purposes", (PyCFunction)LampArray_GetIndicesForPurposes, METH_VARARGS, nullptr },
        { "get_lamp_info", (PyCFunction)LampArray_GetLampInfo, METH_VARARGS, nullptr },
        { "request_message_async", (PyCFunction)LampArray_RequestMessageAsync, METH_VARARGS, nullptr },
        { "send_message_async", (PyCFunction)LampArray_SendMessageAsync, METH_VARARGS, nullptr },
        { "set_color", (PyCFunction)LampArray_SetColor, METH_VARARGS, nullptr },
        { "set_color_for_index", (PyCFunction)LampArray_SetColorForIndex, METH_VARARGS, nullptr },
        { "set_colors_for_indices", (PyCFunction)LampArray_SetColorsForIndices, METH_VARARGS, nullptr },
        { "set_colors_for_key", (PyCFunction)LampArray_SetColorsForKey, METH_VARARGS, nullptr },
        { "set_colors_for_keys", (PyCFunction)LampArray_SetColorsForKeys, METH_VARARGS, nullptr },
        { "set_colors_for_purposes", (PyCFunction)LampArray_SetColorsForPurposes, METH_VARARGS, nullptr },
        { "set_single_color_for_indices", (PyCFunction)LampArray_SetSingleColorForIndices, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_LampArray, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_LampArray[] = {
        { const_cast<char*>("is_enabled"), (getter)LampArray_get_IsEnabled, (setter)LampArray_put_IsEnabled, nullptr, nullptr },
        { const_cast<char*>("brightness_level"), (getter)LampArray_get_BrightnessLevel, (setter)LampArray_put_BrightnessLevel, nullptr, nullptr },
        { const_cast<char*>("bounding_box"), (getter)LampArray_get_BoundingBox, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)LampArray_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("hardware_product_id"), (getter)LampArray_get_HardwareProductId, nullptr, nullptr, nullptr },
        { const_cast<char*>("hardware_vendor_id"), (getter)LampArray_get_HardwareVendorId, nullptr, nullptr, nullptr },
        { const_cast<char*>("hardware_version"), (getter)LampArray_get_HardwareVersion, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_connected"), (getter)LampArray_get_IsConnected, nullptr, nullptr, nullptr },
        { const_cast<char*>("lamp_array_kind"), (getter)LampArray_get_LampArrayKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("lamp_count"), (getter)LampArray_get_LampCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("min_update_interval"), (getter)LampArray_get_MinUpdateInterval, nullptr, nullptr, nullptr },
        { const_cast<char*>("supports_virtual_keys"), (getter)LampArray_get_SupportsVirtualKeys, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_LampArray[] = 
    {
        { Py_tp_new, _new_LampArray },
        { Py_tp_dealloc, _dealloc_LampArray },
        { Py_tp_methods, _methods_LampArray },
        { Py_tp_getset, _getset_LampArray },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_LampArray =
    {
        "_winrt_Windows_Devices_Lights.LampArray",
        sizeof(py::wrapper::Windows::Devices::Lights::LampArray),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LampArray
    };

    // ----- LampAvailabilityChangedEventArgs class --------------------
    constexpr const char* const _type_name_LampAvailabilityChangedEventArgs = "LampAvailabilityChangedEventArgs";

    static PyObject* _new_LampAvailabilityChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LampAvailabilityChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_LampAvailabilityChangedEventArgs(py::wrapper::Windows::Devices::Lights::LampAvailabilityChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LampAvailabilityChangedEventArgs_get_IsAvailable(py::wrapper::Windows::Devices::Lights::LampAvailabilityChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsAvailable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LampAvailabilityChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Lights::LampAvailabilityChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LampAvailabilityChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_LampAvailabilityChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_LampAvailabilityChangedEventArgs[] = {
        { const_cast<char*>("is_available"), (getter)LampAvailabilityChangedEventArgs_get_IsAvailable, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_LampAvailabilityChangedEventArgs[] = 
    {
        { Py_tp_new, _new_LampAvailabilityChangedEventArgs },
        { Py_tp_dealloc, _dealloc_LampAvailabilityChangedEventArgs },
        { Py_tp_methods, _methods_LampAvailabilityChangedEventArgs },
        { Py_tp_getset, _getset_LampAvailabilityChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_LampAvailabilityChangedEventArgs =
    {
        "_winrt_Windows_Devices_Lights.LampAvailabilityChangedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Lights::LampAvailabilityChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LampAvailabilityChangedEventArgs
    };

    // ----- LampInfo class --------------------
    constexpr const char* const _type_name_LampInfo = "LampInfo";

    static PyObject* _new_LampInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LampInfo);
        return nullptr;
    }

    static void _dealloc_LampInfo(py::wrapper::Windows::Devices::Lights::LampInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LampInfo_GetNearestSupportedColor(py::wrapper::Windows::Devices::Lights::LampInfo* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Color>(args, 0);

                return py::convert(self->obj.GetNearestSupportedColor(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_BlueLevelCount(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BlueLevelCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_FixedColor(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FixedColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_GainLevelCount(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GainLevelCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_GreenLevelCount(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GreenLevelCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_Index(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Index());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_Position(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_Purposes(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Purposes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_RedLevelCount(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RedLevelCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LampInfo_get_UpdateLatency(py::wrapper::Windows::Devices::Lights::LampInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UpdateLatency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LampInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Lights::LampInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LampInfo[] = {
        { "get_nearest_supported_color", (PyCFunction)LampInfo_GetNearestSupportedColor, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_LampInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_LampInfo[] = {
        { const_cast<char*>("blue_level_count"), (getter)LampInfo_get_BlueLevelCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("fixed_color"), (getter)LampInfo_get_FixedColor, nullptr, nullptr, nullptr },
        { const_cast<char*>("gain_level_count"), (getter)LampInfo_get_GainLevelCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("green_level_count"), (getter)LampInfo_get_GreenLevelCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("index"), (getter)LampInfo_get_Index, nullptr, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)LampInfo_get_Position, nullptr, nullptr, nullptr },
        { const_cast<char*>("purposes"), (getter)LampInfo_get_Purposes, nullptr, nullptr, nullptr },
        { const_cast<char*>("red_level_count"), (getter)LampInfo_get_RedLevelCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("update_latency"), (getter)LampInfo_get_UpdateLatency, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_LampInfo[] = 
    {
        { Py_tp_new, _new_LampInfo },
        { Py_tp_dealloc, _dealloc_LampInfo },
        { Py_tp_methods, _methods_LampInfo },
        { Py_tp_getset, _getset_LampInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_LampInfo =
    {
        "_winrt_Windows_Devices_Lights.LampInfo",
        sizeof(py::wrapper::Windows::Devices::Lights::LampInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LampInfo
    };

    // ----- Windows.Devices.Lights Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Lights::Lamp>::python_type = py::register_python_type(module, _type_name_Lamp, &_type_spec_Lamp, bases.get());
            py::winrt_type<winrt::Windows::Devices::Lights::LampArray>::python_type = py::register_python_type(module, _type_name_LampArray, &_type_spec_LampArray, bases.get());
            py::winrt_type<winrt::Windows::Devices::Lights::LampAvailabilityChangedEventArgs>::python_type = py::register_python_type(module, _type_name_LampAvailabilityChangedEventArgs, &_type_spec_LampAvailabilityChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Lights::LampInfo>::python_type = py::register_python_type(module, _type_name_LampInfo, &_type_spec_LampInfo, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Lights");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Lights",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Lights

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Lights (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Lights::module_def);
}
