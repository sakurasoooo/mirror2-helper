// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Media.DialProtocol.h"

PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialApp>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialAppStateDetails>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevicePicker>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevicePickerFilter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::DialProtocol::DialReceiverApp>::python_type;

namespace py::cpp::Windows::Media::DialProtocol
{
    // ----- DialApp class --------------------
    constexpr const char* const _type_name_DialApp = "DialApp";

    static PyObject* _new_DialApp(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DialApp);
        return nullptr;
    }

    static void _dealloc_DialApp(py::wrapper::Windows::Media::DialProtocol::DialApp* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialApp_GetAppStateAsync(py::wrapper::Windows::Media::DialProtocol::DialApp* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAppStateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialApp_RequestLaunchAsync(py::wrapper::Windows::Media::DialProtocol::DialApp* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.RequestLaunchAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialApp_StopAsync(py::wrapper::Windows::Media::DialProtocol::DialApp* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StopAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialApp_get_AppName(py::wrapper::Windows::Media::DialProtocol::DialApp* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialApp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialApp>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialApp[] = {
        { "get_app_state_async", (PyCFunction)DialApp_GetAppStateAsync, METH_VARARGS, nullptr },
        { "request_launch_async", (PyCFunction)DialApp_RequestLaunchAsync, METH_VARARGS, nullptr },
        { "stop_async", (PyCFunction)DialApp_StopAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_DialApp, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialApp[] = {
        { const_cast<char*>("app_name"), (getter)DialApp_get_AppName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DialApp[] = 
    {
        { Py_tp_new, _new_DialApp },
        { Py_tp_dealloc, _dealloc_DialApp },
        { Py_tp_methods, _methods_DialApp },
        { Py_tp_getset, _getset_DialApp },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialApp =
    {
        "_winrt_Windows_Media_DialProtocol.DialApp",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialApp),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialApp
    };

    // ----- DialAppStateDetails class --------------------
    constexpr const char* const _type_name_DialAppStateDetails = "DialAppStateDetails";

    static PyObject* _new_DialAppStateDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DialAppStateDetails);
        return nullptr;
    }

    static void _dealloc_DialAppStateDetails(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialAppStateDetails_get_FullXml(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FullXml());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialAppStateDetails_get_State(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialAppStateDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialAppStateDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialAppStateDetails[] = {
        { "_from", (PyCFunction)_from_DialAppStateDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialAppStateDetails[] = {
        { const_cast<char*>("full_xml"), (getter)DialAppStateDetails_get_FullXml, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)DialAppStateDetails_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DialAppStateDetails[] = 
    {
        { Py_tp_new, _new_DialAppStateDetails },
        { Py_tp_dealloc, _dealloc_DialAppStateDetails },
        { Py_tp_methods, _methods_DialAppStateDetails },
        { Py_tp_getset, _getset_DialAppStateDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialAppStateDetails =
    {
        "_winrt_Windows_Media_DialProtocol.DialAppStateDetails",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialAppStateDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialAppStateDetails
    };

    // ----- DialDevice class --------------------
    constexpr const char* const _type_name_DialDevice = "DialDevice";

    static PyObject* _new_DialDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DialDevice);
        return nullptr;
    }

    static void _dealloc_DialDevice(py::wrapper::Windows::Media::DialProtocol::DialDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialDevice_DeviceInfoSupportsDialAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Enumeration::DeviceInformation>(args, 0);

                return py::convert(winrt::Windows::Media::DialProtocol::DialDevice::DeviceInfoSupportsDialAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Media::DialProtocol::DialDevice::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Media::DialProtocol::DialDevice::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_GetDialApp(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetDialApp(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevice_get_Id(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevice_get_FriendlyName(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FriendlyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevice_get_Thumbnail(py::wrapper::Windows::Media::DialProtocol::DialDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Thumbnail());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDevice[] = {
        { "device_info_supports_dial_async", (PyCFunction)DialDevice_DeviceInfoSupportsDialAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "from_id_async", (PyCFunction)DialDevice_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)DialDevice_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "get_dial_app", (PyCFunction)DialDevice_GetDialApp, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_DialDevice, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialDevice[] = {
        { const_cast<char*>("id"), (getter)DialDevice_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("friendly_name"), (getter)DialDevice_get_FriendlyName, nullptr, nullptr, nullptr },
        { const_cast<char*>("thumbnail"), (getter)DialDevice_get_Thumbnail, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DialDevice[] = 
    {
        { Py_tp_new, _new_DialDevice },
        { Py_tp_dealloc, _dealloc_DialDevice },
        { Py_tp_methods, _methods_DialDevice },
        { Py_tp_getset, _getset_DialDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialDevice =
    {
        "_winrt_Windows_Media_DialProtocol.DialDevice",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDevice
    };

    // ----- DialDevicePicker class --------------------
    constexpr const char* const _type_name_DialDevicePicker = "DialDevicePicker";

    static PyObject* _new_DialDevicePicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::DialProtocol::DialDevicePicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DialDevicePicker(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialDevicePicker_Hide(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Hide();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_PickSingleDialDeviceAsync(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                return py::convert(self->obj.PickSingleDialDeviceAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                return py::convert(self->obj.PickSingleDialDeviceAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_SetDisplayStatus(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::DialProtocol::DialDevice>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Media::DialProtocol::DialDeviceDisplayStatus>(args, 1);

                self->obj.SetDisplayStatus(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_Show(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                self->obj.Show(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                self->obj.Show(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_get_Appearance(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Appearance());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_get_Filter(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Filter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_add_DialDevicePickerDismissed(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::DialProtocol::DialDevicePicker, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.DialDevicePickerDismissed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_remove_DialDevicePickerDismissed(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DialDevicePickerDismissed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_add_DialDeviceSelected(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::DialProtocol::DialDevicePicker, winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>>(arg);

            return py::convert(self->obj.DialDeviceSelected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_remove_DialDeviceSelected(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DialDeviceSelected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_add_DisconnectButtonClicked(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::DialProtocol::DialDevicePicker, winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>>(arg);

            return py::convert(self->obj.DisconnectButtonClicked(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DialDevicePicker_remove_DisconnectButtonClicked(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DisconnectButtonClicked(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialDevicePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDevicePicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDevicePicker[] = {
        { "hide", (PyCFunction)DialDevicePicker_Hide, METH_VARARGS, nullptr },
        { "pick_single_dial_device_async", (PyCFunction)DialDevicePicker_PickSingleDialDeviceAsync, METH_VARARGS, nullptr },
        { "set_display_status", (PyCFunction)DialDevicePicker_SetDisplayStatus, METH_VARARGS, nullptr },
        { "show", (PyCFunction)DialDevicePicker_Show, METH_VARARGS, nullptr },
        { "add_dial_device_picker_dismissed", (PyCFunction)DialDevicePicker_add_DialDevicePickerDismissed, METH_O, nullptr },
        { "remove_dial_device_picker_dismissed", (PyCFunction)DialDevicePicker_remove_DialDevicePickerDismissed, METH_O, nullptr },
        { "add_dial_device_selected", (PyCFunction)DialDevicePicker_add_DialDeviceSelected, METH_O, nullptr },
        { "remove_dial_device_selected", (PyCFunction)DialDevicePicker_remove_DialDeviceSelected, METH_O, nullptr },
        { "add_disconnect_button_clicked", (PyCFunction)DialDevicePicker_add_DisconnectButtonClicked, METH_O, nullptr },
        { "remove_disconnect_button_clicked", (PyCFunction)DialDevicePicker_remove_DisconnectButtonClicked, METH_O, nullptr },
        { "_from", (PyCFunction)_from_DialDevicePicker, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialDevicePicker[] = {
        { const_cast<char*>("appearance"), (getter)DialDevicePicker_get_Appearance, nullptr, nullptr, nullptr },
        { const_cast<char*>("filter"), (getter)DialDevicePicker_get_Filter, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DialDevicePicker[] = 
    {
        { Py_tp_new, _new_DialDevicePicker },
        { Py_tp_dealloc, _dealloc_DialDevicePicker },
        { Py_tp_methods, _methods_DialDevicePicker },
        { Py_tp_getset, _getset_DialDevicePicker },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialDevicePicker =
    {
        "_winrt_Windows_Media_DialProtocol.DialDevicePicker",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDevicePicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDevicePicker
    };

    // ----- DialDevicePickerFilter class --------------------
    constexpr const char* const _type_name_DialDevicePickerFilter = "DialDevicePickerFilter";

    static PyObject* _new_DialDevicePickerFilter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DialDevicePickerFilter);
        return nullptr;
    }

    static void _dealloc_DialDevicePickerFilter(py::wrapper::Windows::Media::DialProtocol::DialDevicePickerFilter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialDevicePickerFilter_get_SupportedAppNames(py::wrapper::Windows::Media::DialProtocol::DialDevicePickerFilter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedAppNames());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialDevicePickerFilter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDevicePickerFilter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDevicePickerFilter[] = {
        { "_from", (PyCFunction)_from_DialDevicePickerFilter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialDevicePickerFilter[] = {
        { const_cast<char*>("supported_app_names"), (getter)DialDevicePickerFilter_get_SupportedAppNames, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DialDevicePickerFilter[] = 
    {
        { Py_tp_new, _new_DialDevicePickerFilter },
        { Py_tp_dealloc, _dealloc_DialDevicePickerFilter },
        { Py_tp_methods, _methods_DialDevicePickerFilter },
        { Py_tp_getset, _getset_DialDevicePickerFilter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialDevicePickerFilter =
    {
        "_winrt_Windows_Media_DialProtocol.DialDevicePickerFilter",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDevicePickerFilter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDevicePickerFilter
    };

    // ----- DialDeviceSelectedEventArgs class --------------------
    constexpr const char* const _type_name_DialDeviceSelectedEventArgs = "DialDeviceSelectedEventArgs";

    static PyObject* _new_DialDeviceSelectedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DialDeviceSelectedEventArgs);
        return nullptr;
    }

    static void _dealloc_DialDeviceSelectedEventArgs(py::wrapper::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialDeviceSelectedEventArgs_get_SelectedDialDevice(py::wrapper::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SelectedDialDevice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialDeviceSelectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDeviceSelectedEventArgs[] = {
        { "_from", (PyCFunction)_from_DialDeviceSelectedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialDeviceSelectedEventArgs[] = {
        { const_cast<char*>("selected_dial_device"), (getter)DialDeviceSelectedEventArgs_get_SelectedDialDevice, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DialDeviceSelectedEventArgs[] = 
    {
        { Py_tp_new, _new_DialDeviceSelectedEventArgs },
        { Py_tp_dealloc, _dealloc_DialDeviceSelectedEventArgs },
        { Py_tp_methods, _methods_DialDeviceSelectedEventArgs },
        { Py_tp_getset, _getset_DialDeviceSelectedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialDeviceSelectedEventArgs =
    {
        "_winrt_Windows_Media_DialProtocol.DialDeviceSelectedEventArgs",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDeviceSelectedEventArgs
    };

    // ----- DialDisconnectButtonClickedEventArgs class --------------------
    constexpr const char* const _type_name_DialDisconnectButtonClickedEventArgs = "DialDisconnectButtonClickedEventArgs";

    static PyObject* _new_DialDisconnectButtonClickedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DialDisconnectButtonClickedEventArgs);
        return nullptr;
    }

    static void _dealloc_DialDisconnectButtonClickedEventArgs(py::wrapper::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialDisconnectButtonClickedEventArgs_get_Device(py::wrapper::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialDisconnectButtonClickedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialDisconnectButtonClickedEventArgs[] = {
        { "_from", (PyCFunction)_from_DialDisconnectButtonClickedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialDisconnectButtonClickedEventArgs[] = {
        { const_cast<char*>("device"), (getter)DialDisconnectButtonClickedEventArgs_get_Device, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DialDisconnectButtonClickedEventArgs[] = 
    {
        { Py_tp_new, _new_DialDisconnectButtonClickedEventArgs },
        { Py_tp_dealloc, _dealloc_DialDisconnectButtonClickedEventArgs },
        { Py_tp_methods, _methods_DialDisconnectButtonClickedEventArgs },
        { Py_tp_getset, _getset_DialDisconnectButtonClickedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialDisconnectButtonClickedEventArgs =
    {
        "_winrt_Windows_Media_DialProtocol.DialDisconnectButtonClickedEventArgs",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialDisconnectButtonClickedEventArgs
    };

    // ----- DialReceiverApp class --------------------
    constexpr const char* const _type_name_DialReceiverApp = "DialReceiverApp";

    static PyObject* _new_DialReceiverApp(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DialReceiverApp);
        return nullptr;
    }

    static void _dealloc_DialReceiverApp(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DialReceiverApp_GetAdditionalDataAsync(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAdditionalDataAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialReceiverApp_GetUniqueDeviceNameAsync(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetUniqueDeviceNameAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialReceiverApp_SetAdditionalDataAsync(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::hstring>>>(args, 0);

                return py::convert(self->obj.SetAdditionalDataAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DialReceiverApp_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Media::DialProtocol::DialReceiverApp::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DialReceiverApp(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::DialProtocol::DialReceiverApp>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DialReceiverApp[] = {
        { "get_additional_data_async", (PyCFunction)DialReceiverApp_GetAdditionalDataAsync, METH_VARARGS, nullptr },
        { "get_unique_device_name_async", (PyCFunction)DialReceiverApp_GetUniqueDeviceNameAsync, METH_VARARGS, nullptr },
        { "set_additional_data_async", (PyCFunction)DialReceiverApp_SetAdditionalDataAsync, METH_VARARGS, nullptr },
        { "get_current", (PyCFunction)DialReceiverApp_get_Current, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_DialReceiverApp, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DialReceiverApp[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_DialReceiverApp[] = 
    {
        { Py_tp_new, _new_DialReceiverApp },
        { Py_tp_dealloc, _dealloc_DialReceiverApp },
        { Py_tp_methods, _methods_DialReceiverApp },
        { Py_tp_getset, _getset_DialReceiverApp },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DialReceiverApp =
    {
        "_winrt_Windows_Media_DialProtocol.DialReceiverApp",
        sizeof(py::wrapper::Windows::Media::DialProtocol::DialReceiverApp),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DialReceiverApp
    };

    // ----- Windows.Media.DialProtocol Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Media::DialProtocol::DialApp>::python_type = py::register_python_type(module, _type_name_DialApp, &_type_spec_DialApp, bases.get());
            py::winrt_type<winrt::Windows::Media::DialProtocol::DialAppStateDetails>::python_type = py::register_python_type(module, _type_name_DialAppStateDetails, &_type_spec_DialAppStateDetails, bases.get());
            py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevice>::python_type = py::register_python_type(module, _type_name_DialDevice, &_type_spec_DialDevice, bases.get());
            py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevicePicker>::python_type = py::register_python_type(module, _type_name_DialDevicePicker, &_type_spec_DialDevicePicker, bases.get());
            py::winrt_type<winrt::Windows::Media::DialProtocol::DialDevicePickerFilter>::python_type = py::register_python_type(module, _type_name_DialDevicePickerFilter, &_type_spec_DialDevicePickerFilter, bases.get());
            py::winrt_type<winrt::Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>::python_type = py::register_python_type(module, _type_name_DialDeviceSelectedEventArgs, &_type_spec_DialDeviceSelectedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>::python_type = py::register_python_type(module, _type_name_DialDisconnectButtonClickedEventArgs, &_type_spec_DialDisconnectButtonClickedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::DialProtocol::DialReceiverApp>::python_type = py::register_python_type(module, _type_name_DialReceiverApp, &_type_spec_DialReceiverApp, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Media.DialProtocol");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Media_DialProtocol",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Media::DialProtocol

PyMODINIT_FUNC
PyInit__winrt_Windows_Media_DialProtocol (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Media::DialProtocol::module_def);
}
