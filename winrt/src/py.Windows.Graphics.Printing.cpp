// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Graphics.Printing.h"

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageRange>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageRangeOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTask>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::StandardPrintTaskOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::IPrintDocumentSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCore>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageDescription>::python_type;

PyObject* py::converter<winrt::Windows::Graphics::Printing::PrintPageDescription>::convert(winrt::Windows::Graphics::Printing::PrintPageDescription instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Graphics::Printing::PrintPageDescription>());
}
winrt::Windows::Graphics::Printing::PrintPageDescription py::converter<winrt::Windows::Graphics::Printing::PrintPageDescription>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::Printing::PrintPageDescription>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::Printing::PrintPageDescription>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Graphics::Printing::PrintPageDescription return_value{};

    PyObject* py_PageSize = PyDict_GetItemString(obj, "page_size");
    if (!py_PageSize) { throw winrt::hresult_invalid_argument(); }
    return_value.PageSize = converter<winrt::Windows::Foundation::Size>::convert_to(py_PageSize);

    PyObject* py_ImageableRect = PyDict_GetItemString(obj, "imageable_rect");
    if (!py_ImageableRect) { throw winrt::hresult_invalid_argument(); }
    return_value.ImageableRect = converter<winrt::Windows::Foundation::Rect>::convert_to(py_ImageableRect);

    PyObject* py_DpiX = PyDict_GetItemString(obj, "dpi_x");
    if (!py_DpiX) { throw winrt::hresult_invalid_argument(); }
    return_value.DpiX = converter<uint32_t>::convert_to(py_DpiX);

    PyObject* py_DpiY = PyDict_GetItemString(obj, "dpi_y");
    if (!py_DpiY) { throw winrt::hresult_invalid_argument(); }
    return_value.DpiY = converter<uint32_t>::convert_to(py_DpiY);

    return return_value;
}

namespace py::cpp::Windows::Graphics::Printing
{
    // ----- PrintManager class --------------------
    constexpr const char* const _type_name_PrintManager = "PrintManager";

    static PyObject* _new_PrintManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintManager);
        return nullptr;
    }

    static void _dealloc_PrintManager(py::wrapper::Windows::Graphics::Printing::PrintManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Graphics::Printing::PrintManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintManager_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Graphics::Printing::PrintManager::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintManager_ShowPrintUIAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Graphics::Printing::PrintManager::ShowPrintUIAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintManager_add_PrintTaskRequested(py::wrapper::Windows::Graphics::Printing::PrintManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintManager, winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>>(arg);

            return py::convert(self->obj.PrintTaskRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintManager_remove_PrintTaskRequested(py::wrapper::Windows::Graphics::Printing::PrintManager* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PrintTaskRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintManager[] = {
        { "get_for_current_view", (PyCFunction)PrintManager_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "is_supported", (PyCFunction)PrintManager_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "show_print_u_i_async", (PyCFunction)PrintManager_ShowPrintUIAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "add_print_task_requested", (PyCFunction)PrintManager_add_PrintTaskRequested, METH_O, nullptr },
        { "remove_print_task_requested", (PyCFunction)PrintManager_remove_PrintTaskRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PrintManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintManager[] = 
    {
        { Py_tp_new, _new_PrintManager },
        { Py_tp_dealloc, _dealloc_PrintManager },
        { Py_tp_methods, _methods_PrintManager },
        { Py_tp_getset, _getset_PrintManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintManager =
    {
        "_winrt_Windows_Graphics_Printing.PrintManager",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintManager
    };

    // ----- PrintPageInfo class --------------------
    constexpr const char* const _type_name_PrintPageInfo = "PrintPageInfo";

    static PyObject* _new_PrintPageInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing::PrintPageInfo instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PrintPageInfo(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintPageInfo_get_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PageSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(arg);

            self->obj.PageSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_Orientation(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_Orientation(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintOrientation>(arg);

            self->obj.Orientation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaSize>(arg);

            self->obj.MediaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DpiY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.DpiY(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DpiX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.DpiX(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PrintPageInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintPageInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintPageInfo[] = {
        { "_from", (PyCFunction)_from_PrintPageInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintPageInfo[] = {
        { const_cast<char*>("page_size"), (getter)PrintPageInfo_get_PageSize, (setter)PrintPageInfo_put_PageSize, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)PrintPageInfo_get_Orientation, (setter)PrintPageInfo_put_Orientation, nullptr, nullptr },
        { const_cast<char*>("media_size"), (getter)PrintPageInfo_get_MediaSize, (setter)PrintPageInfo_put_MediaSize, nullptr, nullptr },
        { const_cast<char*>("dpi_y"), (getter)PrintPageInfo_get_DpiY, (setter)PrintPageInfo_put_DpiY, nullptr, nullptr },
        { const_cast<char*>("dpi_x"), (getter)PrintPageInfo_get_DpiX, (setter)PrintPageInfo_put_DpiX, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintPageInfo[] = 
    {
        { Py_tp_new, _new_PrintPageInfo },
        { Py_tp_dealloc, _dealloc_PrintPageInfo },
        { Py_tp_methods, _methods_PrintPageInfo },
        { Py_tp_getset, _getset_PrintPageInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintPageInfo =
    {
        "_winrt_Windows_Graphics_Printing.PrintPageInfo",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageInfo
    };

    // ----- PrintPageRange class --------------------
    constexpr const char* const _type_name_PrintPageRange = "PrintPageRange";

    static PyObject* _new_PrintPageRange(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);

                winrt::Windows::Graphics::Printing::PrintPageRange instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Graphics::Printing::PrintPageRange instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PrintPageRange(py::wrapper::Windows::Graphics::Printing::PrintPageRange* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintPageRange_get_FirstPageNumber(py::wrapper::Windows::Graphics::Printing::PrintPageRange* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstPageNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintPageRange_get_LastPageNumber(py::wrapper::Windows::Graphics::Printing::PrintPageRange* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastPageNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintPageRange(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintPageRange>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintPageRange[] = {
        { "_from", (PyCFunction)_from_PrintPageRange, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintPageRange[] = {
        { const_cast<char*>("first_page_number"), (getter)PrintPageRange_get_FirstPageNumber, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_page_number"), (getter)PrintPageRange_get_LastPageNumber, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintPageRange[] = 
    {
        { Py_tp_new, _new_PrintPageRange },
        { Py_tp_dealloc, _dealloc_PrintPageRange },
        { Py_tp_methods, _methods_PrintPageRange },
        { Py_tp_getset, _getset_PrintPageRange },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintPageRange =
    {
        "_winrt_Windows_Graphics_Printing.PrintPageRange",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageRange),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageRange
    };

    // ----- PrintPageRangeOptions class --------------------
    constexpr const char* const _type_name_PrintPageRangeOptions = "PrintPageRangeOptions";

    static PyObject* _new_PrintPageRangeOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintPageRangeOptions);
        return nullptr;
    }

    static void _dealloc_PrintPageRangeOptions(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintPageRangeOptions_get_AllowCustomSetOfPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowCustomSetOfPages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageRangeOptions_put_AllowCustomSetOfPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowCustomSetOfPages(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageRangeOptions_get_AllowCurrentPage(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowCurrentPage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageRangeOptions_put_AllowCurrentPage(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowCurrentPage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageRangeOptions_get_AllowAllPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowAllPages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageRangeOptions_put_AllowAllPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowAllPages(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PrintPageRangeOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintPageRangeOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintPageRangeOptions[] = {
        { "_from", (PyCFunction)_from_PrintPageRangeOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintPageRangeOptions[] = {
        { const_cast<char*>("allow_custom_set_of_pages"), (getter)PrintPageRangeOptions_get_AllowCustomSetOfPages, (setter)PrintPageRangeOptions_put_AllowCustomSetOfPages, nullptr, nullptr },
        { const_cast<char*>("allow_current_page"), (getter)PrintPageRangeOptions_get_AllowCurrentPage, (setter)PrintPageRangeOptions_put_AllowCurrentPage, nullptr, nullptr },
        { const_cast<char*>("allow_all_pages"), (getter)PrintPageRangeOptions_get_AllowAllPages, (setter)PrintPageRangeOptions_put_AllowAllPages, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintPageRangeOptions[] = 
    {
        { Py_tp_new, _new_PrintPageRangeOptions },
        { Py_tp_dealloc, _dealloc_PrintPageRangeOptions },
        { Py_tp_methods, _methods_PrintPageRangeOptions },
        { Py_tp_getset, _getset_PrintPageRangeOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintPageRangeOptions =
    {
        "_winrt_Windows_Graphics_Printing.PrintPageRangeOptions",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageRangeOptions
    };

    // ----- PrintTask class --------------------
    constexpr const char* const _type_name_PrintTask = "PrintTask";

    static PyObject* _new_PrintTask(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTask);
        return nullptr;
    }

    static void _dealloc_PrintTask(py::wrapper::Windows::Graphics::Printing::PrintTask* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTask_get_Options(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Options());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_get_Properties(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_get_Source(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_get_IsPreviewEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPreviewEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTask_put_IsPreviewEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPreviewEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTask_get_IsPrinterTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPrinterTargetEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTask_put_IsPrinterTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPrinterTargetEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTask_get_Is3DManufacturingTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Is3DManufacturingTargetEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTask_put_Is3DManufacturingTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Is3DManufacturingTargetEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTask_add_Completed(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>>(arg);

            return py::convert(self->obj.Completed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Completed(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Completed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_add_Previewing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Previewing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Previewing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Previewing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_add_Progressing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>>(arg);

            return py::convert(self->obj.Progressing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Progressing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Progressing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_add_Submitting(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Submitting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Submitting(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Submitting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintTask(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTask>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTask[] = {
        { "add_completed", (PyCFunction)PrintTask_add_Completed, METH_O, nullptr },
        { "remove_completed", (PyCFunction)PrintTask_remove_Completed, METH_O, nullptr },
        { "add_previewing", (PyCFunction)PrintTask_add_Previewing, METH_O, nullptr },
        { "remove_previewing", (PyCFunction)PrintTask_remove_Previewing, METH_O, nullptr },
        { "add_progressing", (PyCFunction)PrintTask_add_Progressing, METH_O, nullptr },
        { "remove_progressing", (PyCFunction)PrintTask_remove_Progressing, METH_O, nullptr },
        { "add_submitting", (PyCFunction)PrintTask_add_Submitting, METH_O, nullptr },
        { "remove_submitting", (PyCFunction)PrintTask_remove_Submitting, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PrintTask, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTask[] = {
        { const_cast<char*>("options"), (getter)PrintTask_get_Options, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)PrintTask_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("source"), (getter)PrintTask_get_Source, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_preview_enabled"), (getter)PrintTask_get_IsPreviewEnabled, (setter)PrintTask_put_IsPreviewEnabled, nullptr, nullptr },
        { const_cast<char*>("is_printer_target_enabled"), (getter)PrintTask_get_IsPrinterTargetEnabled, (setter)PrintTask_put_IsPrinterTargetEnabled, nullptr, nullptr },
        { const_cast<char*>("is3_d_manufacturing_target_enabled"), (getter)PrintTask_get_Is3DManufacturingTargetEnabled, (setter)PrintTask_put_Is3DManufacturingTargetEnabled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTask[] = 
    {
        { Py_tp_new, _new_PrintTask },
        { Py_tp_dealloc, _dealloc_PrintTask },
        { Py_tp_methods, _methods_PrintTask },
        { Py_tp_getset, _getset_PrintTask },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTask =
    {
        "_winrt_Windows_Graphics_Printing.PrintTask",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTask),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTask
    };

    // ----- PrintTaskCompletedEventArgs class --------------------
    constexpr const char* const _type_name_PrintTaskCompletedEventArgs = "PrintTaskCompletedEventArgs";

    static PyObject* _new_PrintTaskCompletedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskCompletedEventArgs);
        return nullptr;
    }

    static void _dealloc_PrintTaskCompletedEventArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskCompletedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskCompletedEventArgs_get_Completion(py::wrapper::Windows::Graphics::Printing::PrintTaskCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Completion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskCompletedEventArgs[] = {
        { "_from", (PyCFunction)_from_PrintTaskCompletedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskCompletedEventArgs[] = {
        { const_cast<char*>("completion"), (getter)PrintTaskCompletedEventArgs_get_Completion, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskCompletedEventArgs[] = 
    {
        { Py_tp_new, _new_PrintTaskCompletedEventArgs },
        { Py_tp_dealloc, _dealloc_PrintTaskCompletedEventArgs },
        { Py_tp_methods, _methods_PrintTaskCompletedEventArgs },
        { Py_tp_getset, _getset_PrintTaskCompletedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskCompletedEventArgs =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskCompletedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskCompletedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskCompletedEventArgs
    };

    // ----- PrintTaskOptions class --------------------
    constexpr const char* const _type_name_PrintTaskOptions = "PrintTaskOptions";

    static PyObject* _new_PrintTaskOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskOptions);
        return nullptr;
    }

    static void _dealloc_PrintTaskOptions(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskOptions_GetPageDescription(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetPageDescription(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_GetPagePrintTicket(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintPageInfo>(args, 0);

                return py::convert(self->obj.GetPagePrintTicket(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_Bordering(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bordering());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Bordering(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintBordering>(arg);

            self->obj.Bordering(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_PageRangeOptions(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PageRangeOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_CustomPageRanges(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CustomPageRanges());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_MediaType(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_MediaType(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaType>(arg);

            self->obj.MediaType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_HolePunch(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HolePunch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_HolePunch(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintHolePunch>(arg);

            self->obj.HolePunch(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Binding(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Binding());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Binding(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintBinding>(arg);

            self->obj.Binding(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Duplex(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Duplex());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Duplex(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintDuplex>(arg);

            self->obj.Duplex(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_ColorMode(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ColorMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_ColorMode(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintColorMode>(arg);

            self->obj.ColorMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Collation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Collation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Collation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintCollation>(arg);

            self->obj.Collation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Staple(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Staple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Staple(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintStaple>(arg);

            self->obj.Staple(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_PrintQuality(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PrintQuality());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_PrintQuality(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintQuality>(arg);

            self->obj.PrintQuality(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Orientation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Orientation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintOrientation>(arg);

            self->obj.Orientation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaSize>(arg);

            self->obj.MediaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.NumberOfCopies(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_MaxCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_MinCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_DisplayedOptions(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayedOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskOptions[] = {
        { "get_page_description", (PyCFunction)PrintTaskOptions_GetPageDescription, METH_VARARGS, nullptr },
        { "get_page_print_ticket", (PyCFunction)PrintTaskOptions_GetPagePrintTicket, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PrintTaskOptions, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskOptions[] = {
        { const_cast<char*>("bordering"), (getter)PrintTaskOptions_get_Bordering, (setter)PrintTaskOptions_put_Bordering, nullptr, nullptr },
        { const_cast<char*>("page_range_options"), (getter)PrintTaskOptions_get_PageRangeOptions, nullptr, nullptr, nullptr },
        { const_cast<char*>("custom_page_ranges"), (getter)PrintTaskOptions_get_CustomPageRanges, nullptr, nullptr, nullptr },
        { const_cast<char*>("media_type"), (getter)PrintTaskOptions_get_MediaType, (setter)PrintTaskOptions_put_MediaType, nullptr, nullptr },
        { const_cast<char*>("hole_punch"), (getter)PrintTaskOptions_get_HolePunch, (setter)PrintTaskOptions_put_HolePunch, nullptr, nullptr },
        { const_cast<char*>("binding"), (getter)PrintTaskOptions_get_Binding, (setter)PrintTaskOptions_put_Binding, nullptr, nullptr },
        { const_cast<char*>("duplex"), (getter)PrintTaskOptions_get_Duplex, (setter)PrintTaskOptions_put_Duplex, nullptr, nullptr },
        { const_cast<char*>("color_mode"), (getter)PrintTaskOptions_get_ColorMode, (setter)PrintTaskOptions_put_ColorMode, nullptr, nullptr },
        { const_cast<char*>("collation"), (getter)PrintTaskOptions_get_Collation, (setter)PrintTaskOptions_put_Collation, nullptr, nullptr },
        { const_cast<char*>("staple"), (getter)PrintTaskOptions_get_Staple, (setter)PrintTaskOptions_put_Staple, nullptr, nullptr },
        { const_cast<char*>("print_quality"), (getter)PrintTaskOptions_get_PrintQuality, (setter)PrintTaskOptions_put_PrintQuality, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)PrintTaskOptions_get_Orientation, (setter)PrintTaskOptions_put_Orientation, nullptr, nullptr },
        { const_cast<char*>("media_size"), (getter)PrintTaskOptions_get_MediaSize, (setter)PrintTaskOptions_put_MediaSize, nullptr, nullptr },
        { const_cast<char*>("number_of_copies"), (getter)PrintTaskOptions_get_NumberOfCopies, (setter)PrintTaskOptions_put_NumberOfCopies, nullptr, nullptr },
        { const_cast<char*>("max_copies"), (getter)PrintTaskOptions_get_MaxCopies, nullptr, nullptr, nullptr },
        { const_cast<char*>("min_copies"), (getter)PrintTaskOptions_get_MinCopies, nullptr, nullptr, nullptr },
        { const_cast<char*>("displayed_options"), (getter)PrintTaskOptions_get_DisplayedOptions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskOptions[] = 
    {
        { Py_tp_new, _new_PrintTaskOptions },
        { Py_tp_dealloc, _dealloc_PrintTaskOptions },
        { Py_tp_methods, _methods_PrintTaskOptions },
        { Py_tp_getset, _getset_PrintTaskOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskOptions =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskOptions",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskOptions
    };

    // ----- PrintTaskProgressingEventArgs class --------------------
    constexpr const char* const _type_name_PrintTaskProgressingEventArgs = "PrintTaskProgressingEventArgs";

    static PyObject* _new_PrintTaskProgressingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskProgressingEventArgs);
        return nullptr;
    }

    static void _dealloc_PrintTaskProgressingEventArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskProgressingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskProgressingEventArgs_get_DocumentPageCount(py::wrapper::Windows::Graphics::Printing::PrintTaskProgressingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DocumentPageCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskProgressingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskProgressingEventArgs[] = {
        { "_from", (PyCFunction)_from_PrintTaskProgressingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskProgressingEventArgs[] = {
        { const_cast<char*>("document_page_count"), (getter)PrintTaskProgressingEventArgs_get_DocumentPageCount, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskProgressingEventArgs[] = 
    {
        { Py_tp_new, _new_PrintTaskProgressingEventArgs },
        { Py_tp_dealloc, _dealloc_PrintTaskProgressingEventArgs },
        { Py_tp_methods, _methods_PrintTaskProgressingEventArgs },
        { Py_tp_getset, _getset_PrintTaskProgressingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskProgressingEventArgs =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskProgressingEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskProgressingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskProgressingEventArgs
    };

    // ----- PrintTaskRequest class --------------------
    constexpr const char* const _type_name_PrintTaskRequest = "PrintTaskRequest";

    static PyObject* _new_PrintTaskRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskRequest);
        return nullptr;
    }

    static void _dealloc_PrintTaskRequest(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskRequest_CreatePrintTask(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedHandler>(args, 1);

                return py::convert(self->obj.CreatePrintTask(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskRequest_GetDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskRequest_get_Deadline(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskRequest[] = {
        { "create_print_task", (PyCFunction)PrintTaskRequest_CreatePrintTask, METH_VARARGS, nullptr },
        { "get_deferral", (PyCFunction)PrintTaskRequest_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PrintTaskRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskRequest[] = {
        { const_cast<char*>("deadline"), (getter)PrintTaskRequest_get_Deadline, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskRequest[] = 
    {
        { Py_tp_new, _new_PrintTaskRequest },
        { Py_tp_dealloc, _dealloc_PrintTaskRequest },
        { Py_tp_methods, _methods_PrintTaskRequest },
        { Py_tp_getset, _getset_PrintTaskRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskRequest =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskRequest",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskRequest
    };

    // ----- PrintTaskRequestedDeferral class --------------------
    constexpr const char* const _type_name_PrintTaskRequestedDeferral = "PrintTaskRequestedDeferral";

    static PyObject* _new_PrintTaskRequestedDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskRequestedDeferral);
        return nullptr;
    }

    static void _dealloc_PrintTaskRequestedDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskRequestedDeferral_Complete(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskRequestedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskRequestedDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskRequestedDeferral[] = {
        { "complete", (PyCFunction)PrintTaskRequestedDeferral_Complete, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PrintTaskRequestedDeferral, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskRequestedDeferral[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskRequestedDeferral[] = 
    {
        { Py_tp_new, _new_PrintTaskRequestedDeferral },
        { Py_tp_dealloc, _dealloc_PrintTaskRequestedDeferral },
        { Py_tp_methods, _methods_PrintTaskRequestedDeferral },
        { Py_tp_getset, _getset_PrintTaskRequestedDeferral },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskRequestedDeferral =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskRequestedDeferral",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskRequestedDeferral
    };

    // ----- PrintTaskRequestedEventArgs class --------------------
    constexpr const char* const _type_name_PrintTaskRequestedEventArgs = "PrintTaskRequestedEventArgs";

    static PyObject* _new_PrintTaskRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_PrintTaskRequestedEventArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskRequestedEventArgs_get_Request(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_PrintTaskRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)PrintTaskRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_PrintTaskRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_PrintTaskRequestedEventArgs },
        { Py_tp_methods, _methods_PrintTaskRequestedEventArgs },
        { Py_tp_getset, _getset_PrintTaskRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskRequestedEventArgs =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskRequestedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskRequestedEventArgs
    };

    // ----- PrintTaskSourceRequestedArgs class --------------------
    constexpr const char* const _type_name_PrintTaskSourceRequestedArgs = "PrintTaskSourceRequestedArgs";

    static PyObject* _new_PrintTaskSourceRequestedArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskSourceRequestedArgs);
        return nullptr;
    }

    static void _dealloc_PrintTaskSourceRequestedArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskSourceRequestedArgs_GetDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskSourceRequestedArgs_SetSource(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::IPrintDocumentSource>(args, 0);

                self->obj.SetSource(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskSourceRequestedArgs_get_Deadline(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskSourceRequestedArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskSourceRequestedArgs[] = {
        { "get_deferral", (PyCFunction)PrintTaskSourceRequestedArgs_GetDeferral, METH_VARARGS, nullptr },
        { "set_source", (PyCFunction)PrintTaskSourceRequestedArgs_SetSource, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PrintTaskSourceRequestedArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskSourceRequestedArgs[] = {
        { const_cast<char*>("deadline"), (getter)PrintTaskSourceRequestedArgs_get_Deadline, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskSourceRequestedArgs[] = 
    {
        { Py_tp_new, _new_PrintTaskSourceRequestedArgs },
        { Py_tp_dealloc, _dealloc_PrintTaskSourceRequestedArgs },
        { Py_tp_methods, _methods_PrintTaskSourceRequestedArgs },
        { Py_tp_getset, _getset_PrintTaskSourceRequestedArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskSourceRequestedArgs =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskSourceRequestedArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskSourceRequestedArgs
    };

    // ----- PrintTaskSourceRequestedDeferral class --------------------
    constexpr const char* const _type_name_PrintTaskSourceRequestedDeferral = "PrintTaskSourceRequestedDeferral";

    static PyObject* _new_PrintTaskSourceRequestedDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PrintTaskSourceRequestedDeferral);
        return nullptr;
    }

    static void _dealloc_PrintTaskSourceRequestedDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PrintTaskSourceRequestedDeferral_Complete(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_PrintTaskSourceRequestedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskSourceRequestedDeferral[] = {
        { "complete", (PyCFunction)PrintTaskSourceRequestedDeferral_Complete, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PrintTaskSourceRequestedDeferral, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PrintTaskSourceRequestedDeferral[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintTaskSourceRequestedDeferral[] = 
    {
        { Py_tp_new, _new_PrintTaskSourceRequestedDeferral },
        { Py_tp_dealloc, _dealloc_PrintTaskSourceRequestedDeferral },
        { Py_tp_methods, _methods_PrintTaskSourceRequestedDeferral },
        { Py_tp_getset, _getset_PrintTaskSourceRequestedDeferral },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintTaskSourceRequestedDeferral =
    {
        "_winrt_Windows_Graphics_Printing.PrintTaskSourceRequestedDeferral",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskSourceRequestedDeferral
    };

    // ----- StandardPrintTaskOptions class --------------------
    constexpr const char* const _type_name_StandardPrintTaskOptions = "StandardPrintTaskOptions";

    static PyObject* _new_StandardPrintTaskOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StandardPrintTaskOptions);
        return nullptr;
    }

    static PyObject* StandardPrintTaskOptions_get_Copies(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Copies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Binding(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Binding());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Collation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Collation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_ColorMode(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::ColorMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_MediaType(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Duplex(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Duplex());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_HolePunch(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::HolePunch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_InputBin(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::InputBin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_MediaSize(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_NUp(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::NUp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Orientation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_PrintQuality(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::PrintQuality());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Staple(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Staple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Bordering(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Bordering());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_CustomPageRanges(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::CustomPageRanges());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StandardPrintTaskOptions[] = {
        { "get_copies", (PyCFunction)StandardPrintTaskOptions_get_Copies, METH_NOARGS | METH_STATIC, nullptr },
        { "get_binding", (PyCFunction)StandardPrintTaskOptions_get_Binding, METH_NOARGS | METH_STATIC, nullptr },
        { "get_collation", (PyCFunction)StandardPrintTaskOptions_get_Collation, METH_NOARGS | METH_STATIC, nullptr },
        { "get_color_mode", (PyCFunction)StandardPrintTaskOptions_get_ColorMode, METH_NOARGS | METH_STATIC, nullptr },
        { "get_media_type", (PyCFunction)StandardPrintTaskOptions_get_MediaType, METH_NOARGS | METH_STATIC, nullptr },
        { "get_duplex", (PyCFunction)StandardPrintTaskOptions_get_Duplex, METH_NOARGS | METH_STATIC, nullptr },
        { "get_hole_punch", (PyCFunction)StandardPrintTaskOptions_get_HolePunch, METH_NOARGS | METH_STATIC, nullptr },
        { "get_input_bin", (PyCFunction)StandardPrintTaskOptions_get_InputBin, METH_NOARGS | METH_STATIC, nullptr },
        { "get_media_size", (PyCFunction)StandardPrintTaskOptions_get_MediaSize, METH_NOARGS | METH_STATIC, nullptr },
        { "get_n_up", (PyCFunction)StandardPrintTaskOptions_get_NUp, METH_NOARGS | METH_STATIC, nullptr },
        { "get_orientation", (PyCFunction)StandardPrintTaskOptions_get_Orientation, METH_NOARGS | METH_STATIC, nullptr },
        { "get_print_quality", (PyCFunction)StandardPrintTaskOptions_get_PrintQuality, METH_NOARGS | METH_STATIC, nullptr },
        { "get_staple", (PyCFunction)StandardPrintTaskOptions_get_Staple, METH_NOARGS | METH_STATIC, nullptr },
        { "get_bordering", (PyCFunction)StandardPrintTaskOptions_get_Bordering, METH_NOARGS | METH_STATIC, nullptr },
        { "get_custom_page_ranges", (PyCFunction)StandardPrintTaskOptions_get_CustomPageRanges, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StandardPrintTaskOptions[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_StandardPrintTaskOptions[] = 
    {
        { Py_tp_new, _new_StandardPrintTaskOptions },
        { Py_tp_methods, _methods_StandardPrintTaskOptions },
        { Py_tp_getset, _getset_StandardPrintTaskOptions },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StandardPrintTaskOptions =
    {
        "_winrt_Windows_Graphics_Printing.StandardPrintTaskOptions",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StandardPrintTaskOptions
    };

    // ----- IPrintDocumentSource interface --------------------
    constexpr const char* const _type_name_IPrintDocumentSource = "IPrintDocumentSource";

    static PyObject* _new_IPrintDocumentSource(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IPrintDocumentSource);
        return nullptr;
    }

    static void _dealloc_IPrintDocumentSource(py::wrapper::Windows::Graphics::Printing::IPrintDocumentSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_IPrintDocumentSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintDocumentSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintDocumentSource[] = {
        { "_from", (PyCFunction)_from_IPrintDocumentSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IPrintDocumentSource[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IPrintDocumentSource[] = 
    {
        { Py_tp_new, _new_IPrintDocumentSource },
        { Py_tp_dealloc, _dealloc_IPrintDocumentSource },
        { Py_tp_methods, _methods_IPrintDocumentSource },
        { Py_tp_getset, _getset_IPrintDocumentSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IPrintDocumentSource =
    {
        "_winrt_Windows_Graphics_Printing.IPrintDocumentSource",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintDocumentSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintDocumentSource
    };

    // ----- IPrintTaskOptionsCore interface --------------------
    constexpr const char* const _type_name_IPrintTaskOptionsCore = "IPrintTaskOptionsCore";

    static PyObject* _new_IPrintTaskOptionsCore(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IPrintTaskOptionsCore);
        return nullptr;
    }

    static void _dealloc_IPrintTaskOptionsCore(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCore* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IPrintTaskOptionsCore_GetPageDescription(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetPageDescription(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_IPrintTaskOptionsCore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintTaskOptionsCore[] = {
        { "get_page_description", (PyCFunction)IPrintTaskOptionsCore_GetPageDescription, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IPrintTaskOptionsCore, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IPrintTaskOptionsCore[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_IPrintTaskOptionsCore[] = 
    {
        { Py_tp_new, _new_IPrintTaskOptionsCore },
        { Py_tp_dealloc, _dealloc_IPrintTaskOptionsCore },
        { Py_tp_methods, _methods_IPrintTaskOptionsCore },
        { Py_tp_getset, _getset_IPrintTaskOptionsCore },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IPrintTaskOptionsCore =
    {
        "_winrt_Windows_Graphics_Printing.IPrintTaskOptionsCore",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintTaskOptionsCore
    };

    // ----- IPrintTaskOptionsCoreProperties interface --------------------
    constexpr const char* const _type_name_IPrintTaskOptionsCoreProperties = "IPrintTaskOptionsCoreProperties";

    static PyObject* _new_IPrintTaskOptionsCoreProperties(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IPrintTaskOptionsCoreProperties);
        return nullptr;
    }

    static void _dealloc_IPrintTaskOptionsCoreProperties(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Binding(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Binding());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Binding(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintBinding>(arg);

            self->obj.Binding(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Collation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Collation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Collation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintCollation>(arg);

            self->obj.Collation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_ColorMode(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ColorMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_ColorMode(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintColorMode>(arg);

            self->obj.ColorMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Duplex(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Duplex());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Duplex(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintDuplex>(arg);

            self->obj.Duplex(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_HolePunch(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HolePunch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_HolePunch(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintHolePunch>(arg);

            self->obj.HolePunch(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MaxCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MediaSize(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_MediaSize(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaSize>(arg);

            self->obj.MediaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MediaType(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_MediaType(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaType>(arg);

            self->obj.MediaType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MinCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.NumberOfCopies(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Orientation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Orientation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintOrientation>(arg);

            self->obj.Orientation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_PrintQuality(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PrintQuality());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_PrintQuality(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintQuality>(arg);

            self->obj.PrintQuality(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Staple(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Staple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Staple(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintStaple>(arg);

            self->obj.Staple(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_IPrintTaskOptionsCoreProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintTaskOptionsCoreProperties[] = {
        { "_from", (PyCFunction)_from_IPrintTaskOptionsCoreProperties, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IPrintTaskOptionsCoreProperties[] = {
        { const_cast<char*>("binding"), (getter)IPrintTaskOptionsCoreProperties_get_Binding, (setter)IPrintTaskOptionsCoreProperties_put_Binding, nullptr, nullptr },
        { const_cast<char*>("collation"), (getter)IPrintTaskOptionsCoreProperties_get_Collation, (setter)IPrintTaskOptionsCoreProperties_put_Collation, nullptr, nullptr },
        { const_cast<char*>("color_mode"), (getter)IPrintTaskOptionsCoreProperties_get_ColorMode, (setter)IPrintTaskOptionsCoreProperties_put_ColorMode, nullptr, nullptr },
        { const_cast<char*>("duplex"), (getter)IPrintTaskOptionsCoreProperties_get_Duplex, (setter)IPrintTaskOptionsCoreProperties_put_Duplex, nullptr, nullptr },
        { const_cast<char*>("hole_punch"), (getter)IPrintTaskOptionsCoreProperties_get_HolePunch, (setter)IPrintTaskOptionsCoreProperties_put_HolePunch, nullptr, nullptr },
        { const_cast<char*>("max_copies"), (getter)IPrintTaskOptionsCoreProperties_get_MaxCopies, nullptr, nullptr, nullptr },
        { const_cast<char*>("media_size"), (getter)IPrintTaskOptionsCoreProperties_get_MediaSize, (setter)IPrintTaskOptionsCoreProperties_put_MediaSize, nullptr, nullptr },
        { const_cast<char*>("media_type"), (getter)IPrintTaskOptionsCoreProperties_get_MediaType, (setter)IPrintTaskOptionsCoreProperties_put_MediaType, nullptr, nullptr },
        { const_cast<char*>("min_copies"), (getter)IPrintTaskOptionsCoreProperties_get_MinCopies, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_copies"), (getter)IPrintTaskOptionsCoreProperties_get_NumberOfCopies, (setter)IPrintTaskOptionsCoreProperties_put_NumberOfCopies, nullptr, nullptr },
        { const_cast<char*>("orientation"), (getter)IPrintTaskOptionsCoreProperties_get_Orientation, (setter)IPrintTaskOptionsCoreProperties_put_Orientation, nullptr, nullptr },
        { const_cast<char*>("print_quality"), (getter)IPrintTaskOptionsCoreProperties_get_PrintQuality, (setter)IPrintTaskOptionsCoreProperties_put_PrintQuality, nullptr, nullptr },
        { const_cast<char*>("staple"), (getter)IPrintTaskOptionsCoreProperties_get_Staple, (setter)IPrintTaskOptionsCoreProperties_put_Staple, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IPrintTaskOptionsCoreProperties[] = 
    {
        { Py_tp_new, _new_IPrintTaskOptionsCoreProperties },
        { Py_tp_dealloc, _dealloc_IPrintTaskOptionsCoreProperties },
        { Py_tp_methods, _methods_IPrintTaskOptionsCoreProperties },
        { Py_tp_getset, _getset_IPrintTaskOptionsCoreProperties },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IPrintTaskOptionsCoreProperties =
    {
        "_winrt_Windows_Graphics_Printing.IPrintTaskOptionsCoreProperties",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintTaskOptionsCoreProperties
    };

    // ----- IPrintTaskOptionsCoreUIConfiguration interface --------------------
    constexpr const char* const _type_name_IPrintTaskOptionsCoreUIConfiguration = "IPrintTaskOptionsCoreUIConfiguration";

    static PyObject* _new_IPrintTaskOptionsCoreUIConfiguration(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IPrintTaskOptionsCoreUIConfiguration);
        return nullptr;
    }

    static void _dealloc_IPrintTaskOptionsCoreUIConfiguration(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IPrintTaskOptionsCoreUIConfiguration_get_DisplayedOptions(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayedOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IPrintTaskOptionsCoreUIConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintTaskOptionsCoreUIConfiguration[] = {
        { "_from", (PyCFunction)_from_IPrintTaskOptionsCoreUIConfiguration, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IPrintTaskOptionsCoreUIConfiguration[] = {
        { const_cast<char*>("displayed_options"), (getter)IPrintTaskOptionsCoreUIConfiguration_get_DisplayedOptions, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IPrintTaskOptionsCoreUIConfiguration[] = 
    {
        { Py_tp_new, _new_IPrintTaskOptionsCoreUIConfiguration },
        { Py_tp_dealloc, _dealloc_IPrintTaskOptionsCoreUIConfiguration },
        { Py_tp_methods, _methods_IPrintTaskOptionsCoreUIConfiguration },
        { Py_tp_getset, _getset_IPrintTaskOptionsCoreUIConfiguration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IPrintTaskOptionsCoreUIConfiguration =
    {
        "_winrt_Windows_Graphics_Printing.IPrintTaskOptionsCoreUIConfiguration",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintTaskOptionsCoreUIConfiguration
    };

    // ----- PrintPageDescription struct --------------------
    constexpr const char* const _type_name_PrintPageDescription = "PrintPageDescription";

    PyObject* _new_PrintPageDescription(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Graphics::Printing::PrintPageDescription return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Graphics::Printing::PrintPageDescription>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _PageSize{};
        PyObject* _ImageableRect{};
        uint32_t _DpiX{};
        uint32_t _DpiY{};

        static const char* kwlist[] = {"page_size", "imageable_rect", "dpi_x", "dpi_y", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOII", const_cast<char**>(kwlist), &_PageSize, &_ImageableRect, &_DpiX, &_DpiY))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Graphics::Printing::PrintPageDescription return_value{ py::converter<winrt::Windows::Foundation::Size>::convert_to(_PageSize), py::converter<winrt::Windows::Foundation::Rect>::convert_to(_ImageableRect), _DpiX, _DpiY };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_PrintPageDescription(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self)
    {
    }

    static PyObject* PrintPageDescription_get_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PageSize);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.PageSize = py::converter<winrt::Windows::Foundation::Size>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageDescription_get_ImageableRect(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ImageableRect);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_ImageableRect(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.ImageableRect = py::converter<winrt::Windows::Foundation::Rect>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageDescription_get_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DpiX);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.DpiX = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageDescription_get_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DpiY);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.DpiY = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_PrintPageDescription[] = {
        { const_cast<char*>("page_size"), (getter)PrintPageDescription_get_PageSize, (setter)PrintPageDescription_set_PageSize, nullptr, nullptr },
        { const_cast<char*>("imageable_rect"), (getter)PrintPageDescription_get_ImageableRect, (setter)PrintPageDescription_set_ImageableRect, nullptr, nullptr },
        { const_cast<char*>("dpi_x"), (getter)PrintPageDescription_get_DpiX, (setter)PrintPageDescription_set_DpiX, nullptr, nullptr },
        { const_cast<char*>("dpi_y"), (getter)PrintPageDescription_get_DpiY, (setter)PrintPageDescription_set_DpiY, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PrintPageDescription[] = 
    {
        { Py_tp_new, _new_PrintPageDescription },
        { Py_tp_dealloc, _dealloc_PrintPageDescription },
        { Py_tp_getset, _getset_PrintPageDescription },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PrintPageDescription =
    {
        "_winrt_Windows_Graphics_Printing.PrintPageDescription",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageDescription),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageDescription
    };

    // ----- Windows.Graphics.Printing Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Graphics::Printing::PrintManager>::python_type = py::register_python_type(module, _type_name_PrintManager, &_type_spec_PrintManager, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageInfo>::python_type = py::register_python_type(module, _type_name_PrintPageInfo, &_type_spec_PrintPageInfo, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageRange>::python_type = py::register_python_type(module, _type_name_PrintPageRange, &_type_spec_PrintPageRange, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageRangeOptions>::python_type = py::register_python_type(module, _type_name_PrintPageRangeOptions, &_type_spec_PrintPageRangeOptions, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTask>::python_type = py::register_python_type(module, _type_name_PrintTask, &_type_spec_PrintTask, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>::python_type = py::register_python_type(module, _type_name_PrintTaskCompletedEventArgs, &_type_spec_PrintTaskCompletedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskOptions>::python_type = py::register_python_type(module, _type_name_PrintTaskOptions, &_type_spec_PrintTaskOptions, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>::python_type = py::register_python_type(module, _type_name_PrintTaskProgressingEventArgs, &_type_spec_PrintTaskProgressingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskRequest>::python_type = py::register_python_type(module, _type_name_PrintTaskRequest, &_type_spec_PrintTaskRequest, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedDeferral>::python_type = py::register_python_type(module, _type_name_PrintTaskRequestedDeferral, &_type_spec_PrintTaskRequestedDeferral, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_PrintTaskRequestedEventArgs, &_type_spec_PrintTaskRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>::python_type = py::register_python_type(module, _type_name_PrintTaskSourceRequestedArgs, &_type_spec_PrintTaskSourceRequestedArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>::python_type = py::register_python_type(module, _type_name_PrintTaskSourceRequestedDeferral, &_type_spec_PrintTaskSourceRequestedDeferral, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::StandardPrintTaskOptions>::python_type = py::register_python_type(module, _type_name_StandardPrintTaskOptions, &_type_spec_StandardPrintTaskOptions, nullptr);
            py::winrt_type<winrt::Windows::Graphics::Printing::IPrintDocumentSource>::python_type = py::register_python_type(module, _type_name_IPrintDocumentSource, &_type_spec_IPrintDocumentSource, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCore>::python_type = py::register_python_type(module, _type_name_IPrintTaskOptionsCore, &_type_spec_IPrintTaskOptionsCore, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>::python_type = py::register_python_type(module, _type_name_IPrintTaskOptionsCoreProperties, &_type_spec_IPrintTaskOptionsCoreProperties, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>::python_type = py::register_python_type(module, _type_name_IPrintTaskOptionsCoreUIConfiguration, &_type_spec_IPrintTaskOptionsCoreUIConfiguration, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Printing::PrintPageDescription>::python_type = py::register_python_type(module, _type_name_PrintPageDescription, &_type_spec_PrintPageDescription, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Graphics.Printing");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Graphics_Printing",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Graphics::Printing

PyMODINIT_FUNC
PyInit__winrt_Windows_Graphics_Printing (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Graphics::Printing::module_def);
}
