// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Wallet.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletBarcode>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletItemCustomProperty>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletItemStore>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletRelevantLocation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletTransaction>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletVerb>::python_type;

namespace py::cpp::Windows::ApplicationModel::Wallet
{
    // ----- WalletBarcode class --------------------
    constexpr const char* const _type_name_WalletBarcode = "WalletBarcode";

    static PyObject* _new_WalletBarcode(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletBarcodeSymbology>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Wallet::WalletBarcode instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(args, 0);

                winrt::Windows::ApplicationModel::Wallet::WalletBarcode instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WalletBarcode(py::wrapper::Windows::ApplicationModel::Wallet::WalletBarcode* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WalletBarcode_GetImageAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletBarcode* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetImageAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletBarcode_get_Symbology(py::wrapper::Windows::ApplicationModel::Wallet::WalletBarcode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Symbology());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WalletBarcode_get_Value(py::wrapper::Windows::ApplicationModel::Wallet::WalletBarcode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WalletBarcode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Wallet::WalletBarcode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletBarcode[] = {
        { "get_image_async", (PyCFunction)WalletBarcode_GetImageAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WalletBarcode, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletBarcode[] = {
        { const_cast<char*>("symbology"), (getter)WalletBarcode_get_Symbology, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)WalletBarcode_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletBarcode[] = 
    {
        { Py_tp_new, _new_WalletBarcode },
        { Py_tp_dealloc, _dealloc_WalletBarcode },
        { Py_tp_methods, _methods_WalletBarcode },
        { Py_tp_getset, _getset_WalletBarcode },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletBarcode =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletBarcode",
        sizeof(py::wrapper::Windows::ApplicationModel::Wallet::WalletBarcode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletBarcode
    };

    // ----- WalletItem class --------------------
    constexpr const char* const _type_name_WalletItem = "WalletItem";

    static PyObject* _new_WalletItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletItemKind>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Wallet::WalletItem instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WalletItem(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WalletItem_get_DisplayName(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_DisplayName(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_DisplayMessage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_DisplayMessage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_LogoText(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LogoText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_LogoText(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.LogoText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_BodyFontColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BodyFontColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_BodyFontColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.BodyFontColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_BodyColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BodyColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_BodyColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.BodyColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_BodyBackgroundImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BodyBackgroundImage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_BodyBackgroundImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.BodyBackgroundImage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_IsDisplayMessageLaunchable(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDisplayMessageLaunchable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_IsDisplayMessageLaunchable(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDisplayMessageLaunchable(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_IsAcknowledged(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsAcknowledged());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_IsAcknowledged(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsAcknowledged(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_IsMoreTransactionHistoryLaunchable(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsMoreTransactionHistoryLaunchable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_IsMoreTransactionHistoryLaunchable(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsMoreTransactionHistoryLaunchable(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_HeaderFontColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HeaderFontColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_HeaderFontColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.HeaderFontColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_HeaderColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HeaderColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_HeaderColor(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.HeaderColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_HeaderBackgroundImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HeaderBackgroundImage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_HeaderBackgroundImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.HeaderBackgroundImage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_ExpirationDate(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExpirationDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_ExpirationDate(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.ExpirationDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_Logo99x99(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Logo99x99());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_Logo99x99(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.Logo99x99(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_LogoImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LogoImage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_LogoImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.LogoImage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_PromotionalImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PromotionalImage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_PromotionalImage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.PromotionalImage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_Logo159x159(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Logo159x159());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_Logo159x159(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.Logo159x159(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_LastUpdated(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastUpdated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_LastUpdated(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.LastUpdated(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_IssuerDisplayName(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IssuerDisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_IssuerDisplayName(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.IssuerDisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_Barcode(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Barcode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_Barcode(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletBarcode>(arg);

            self->obj.Barcode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_RelevantDateDisplayMessage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelevantDateDisplayMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_RelevantDateDisplayMessage(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.RelevantDateDisplayMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_RelevantDate(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelevantDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_RelevantDate(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.RelevantDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_Logo336x336(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Logo336x336());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItem_put_Logo336x336(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(arg);

            self->obj.Logo336x336(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItem_get_Kind(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WalletItem_get_DisplayProperties(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WalletItem_get_Id(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WalletItem_get_RelevantLocations(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RelevantLocations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WalletItem_get_TransactionHistory(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TransactionHistory());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WalletItem_get_Verbs(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verbs());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WalletItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Wallet::WalletItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletItem[] = {
        { "_from", (PyCFunction)_from_WalletItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletItem[] = {
        { const_cast<char*>("display_name"), (getter)WalletItem_get_DisplayName, (setter)WalletItem_put_DisplayName, nullptr, nullptr },
        { const_cast<char*>("display_message"), (getter)WalletItem_get_DisplayMessage, (setter)WalletItem_put_DisplayMessage, nullptr, nullptr },
        { const_cast<char*>("logo_text"), (getter)WalletItem_get_LogoText, (setter)WalletItem_put_LogoText, nullptr, nullptr },
        { const_cast<char*>("body_font_color"), (getter)WalletItem_get_BodyFontColor, (setter)WalletItem_put_BodyFontColor, nullptr, nullptr },
        { const_cast<char*>("body_color"), (getter)WalletItem_get_BodyColor, (setter)WalletItem_put_BodyColor, nullptr, nullptr },
        { const_cast<char*>("body_background_image"), (getter)WalletItem_get_BodyBackgroundImage, (setter)WalletItem_put_BodyBackgroundImage, nullptr, nullptr },
        { const_cast<char*>("is_display_message_launchable"), (getter)WalletItem_get_IsDisplayMessageLaunchable, (setter)WalletItem_put_IsDisplayMessageLaunchable, nullptr, nullptr },
        { const_cast<char*>("is_acknowledged"), (getter)WalletItem_get_IsAcknowledged, (setter)WalletItem_put_IsAcknowledged, nullptr, nullptr },
        { const_cast<char*>("is_more_transaction_history_launchable"), (getter)WalletItem_get_IsMoreTransactionHistoryLaunchable, (setter)WalletItem_put_IsMoreTransactionHistoryLaunchable, nullptr, nullptr },
        { const_cast<char*>("header_font_color"), (getter)WalletItem_get_HeaderFontColor, (setter)WalletItem_put_HeaderFontColor, nullptr, nullptr },
        { const_cast<char*>("header_color"), (getter)WalletItem_get_HeaderColor, (setter)WalletItem_put_HeaderColor, nullptr, nullptr },
        { const_cast<char*>("header_background_image"), (getter)WalletItem_get_HeaderBackgroundImage, (setter)WalletItem_put_HeaderBackgroundImage, nullptr, nullptr },
        { const_cast<char*>("expiration_date"), (getter)WalletItem_get_ExpirationDate, (setter)WalletItem_put_ExpirationDate, nullptr, nullptr },
        { const_cast<char*>("logo99x99"), (getter)WalletItem_get_Logo99x99, (setter)WalletItem_put_Logo99x99, nullptr, nullptr },
        { const_cast<char*>("logo_image"), (getter)WalletItem_get_LogoImage, (setter)WalletItem_put_LogoImage, nullptr, nullptr },
        { const_cast<char*>("promotional_image"), (getter)WalletItem_get_PromotionalImage, (setter)WalletItem_put_PromotionalImage, nullptr, nullptr },
        { const_cast<char*>("logo159x159"), (getter)WalletItem_get_Logo159x159, (setter)WalletItem_put_Logo159x159, nullptr, nullptr },
        { const_cast<char*>("last_updated"), (getter)WalletItem_get_LastUpdated, (setter)WalletItem_put_LastUpdated, nullptr, nullptr },
        { const_cast<char*>("issuer_display_name"), (getter)WalletItem_get_IssuerDisplayName, (setter)WalletItem_put_IssuerDisplayName, nullptr, nullptr },
        { const_cast<char*>("barcode"), (getter)WalletItem_get_Barcode, (setter)WalletItem_put_Barcode, nullptr, nullptr },
        { const_cast<char*>("relevant_date_display_message"), (getter)WalletItem_get_RelevantDateDisplayMessage, (setter)WalletItem_put_RelevantDateDisplayMessage, nullptr, nullptr },
        { const_cast<char*>("relevant_date"), (getter)WalletItem_get_RelevantDate, (setter)WalletItem_put_RelevantDate, nullptr, nullptr },
        { const_cast<char*>("logo336x336"), (getter)WalletItem_get_Logo336x336, (setter)WalletItem_put_Logo336x336, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)WalletItem_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_properties"), (getter)WalletItem_get_DisplayProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)WalletItem_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("relevant_locations"), (getter)WalletItem_get_RelevantLocations, nullptr, nullptr, nullptr },
        { const_cast<char*>("transaction_history"), (getter)WalletItem_get_TransactionHistory, nullptr, nullptr, nullptr },
        { const_cast<char*>("verbs"), (getter)WalletItem_get_Verbs, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletItem[] = 
    {
        { Py_tp_new, _new_WalletItem },
        { Py_tp_dealloc, _dealloc_WalletItem },
        { Py_tp_methods, _methods_WalletItem },
        { Py_tp_getset, _getset_WalletItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletItem =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletItem",
        sizeof(py::wrapper::Windows::ApplicationModel::Wallet::WalletItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletItem
    };

    // ----- WalletItemCustomProperty class --------------------
    constexpr const char* const _type_name_WalletItemCustomProperty = "WalletItemCustomProperty";

    static PyObject* _new_WalletItemCustomProperty(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Wallet::WalletItemCustomProperty instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WalletItemCustomProperty(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WalletItemCustomProperty_get_Value(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItemCustomProperty_put_Value(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Value(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItemCustomProperty_get_SummaryViewPosition(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SummaryViewPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItemCustomProperty_put_SummaryViewPosition(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletSummaryViewPosition>(arg);

            self->obj.SummaryViewPosition(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItemCustomProperty_get_Name(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItemCustomProperty_put_Name(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItemCustomProperty_get_DetailViewPosition(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DetailViewPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItemCustomProperty_put_DetailViewPosition(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletDetailViewPosition>(arg);

            self->obj.DetailViewPosition(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletItemCustomProperty_get_AutoDetectLinks(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutoDetectLinks());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletItemCustomProperty_put_AutoDetectLinks(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AutoDetectLinks(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_WalletItemCustomProperty(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Wallet::WalletItemCustomProperty>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletItemCustomProperty[] = {
        { "_from", (PyCFunction)_from_WalletItemCustomProperty, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletItemCustomProperty[] = {
        { const_cast<char*>("value"), (getter)WalletItemCustomProperty_get_Value, (setter)WalletItemCustomProperty_put_Value, nullptr, nullptr },
        { const_cast<char*>("summary_view_position"), (getter)WalletItemCustomProperty_get_SummaryViewPosition, (setter)WalletItemCustomProperty_put_SummaryViewPosition, nullptr, nullptr },
        { const_cast<char*>("name"), (getter)WalletItemCustomProperty_get_Name, (setter)WalletItemCustomProperty_put_Name, nullptr, nullptr },
        { const_cast<char*>("detail_view_position"), (getter)WalletItemCustomProperty_get_DetailViewPosition, (setter)WalletItemCustomProperty_put_DetailViewPosition, nullptr, nullptr },
        { const_cast<char*>("auto_detect_links"), (getter)WalletItemCustomProperty_get_AutoDetectLinks, (setter)WalletItemCustomProperty_put_AutoDetectLinks, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletItemCustomProperty[] = 
    {
        { Py_tp_new, _new_WalletItemCustomProperty },
        { Py_tp_dealloc, _dealloc_WalletItemCustomProperty },
        { Py_tp_methods, _methods_WalletItemCustomProperty },
        { Py_tp_getset, _getset_WalletItemCustomProperty },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletItemCustomProperty =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletItemCustomProperty",
        sizeof(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemCustomProperty),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletItemCustomProperty
    };

    // ----- WalletItemStore class --------------------
    constexpr const char* const _type_name_WalletItemStore = "WalletItemStore";

    static PyObject* _new_WalletItemStore(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WalletItemStore);
        return nullptr;
    }

    static void _dealloc_WalletItemStore(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WalletItemStore_AddAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletItem>(args, 1);

                return py::convert(self->obj.AddAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletItemStore_ClearAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ClearAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletItemStore_DeleteAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.DeleteAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletItemStore_GetItemsAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetItemsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletItemKind>(args, 0);

                return py::convert(self->obj.GetItemsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletItemStore_GetWalletItemAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetWalletItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletItemStore_ImportItemAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(args, 0);

                return py::convert(self->obj.ImportItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletItemStore_ShowAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ShowAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ShowAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WalletItemStore_UpdateAsync(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Wallet::WalletItem>(args, 0);

                return py::convert(self->obj.UpdateAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_WalletItemStore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Wallet::WalletItemStore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletItemStore[] = {
        { "add_async", (PyCFunction)WalletItemStore_AddAsync, METH_VARARGS, nullptr },
        { "clear_async", (PyCFunction)WalletItemStore_ClearAsync, METH_VARARGS, nullptr },
        { "delete_async", (PyCFunction)WalletItemStore_DeleteAsync, METH_VARARGS, nullptr },
        { "get_items_async", (PyCFunction)WalletItemStore_GetItemsAsync, METH_VARARGS, nullptr },
        { "get_wallet_item_async", (PyCFunction)WalletItemStore_GetWalletItemAsync, METH_VARARGS, nullptr },
        { "import_item_async", (PyCFunction)WalletItemStore_ImportItemAsync, METH_VARARGS, nullptr },
        { "show_async", (PyCFunction)WalletItemStore_ShowAsync, METH_VARARGS, nullptr },
        { "update_async", (PyCFunction)WalletItemStore_UpdateAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_WalletItemStore, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletItemStore[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletItemStore[] = 
    {
        { Py_tp_new, _new_WalletItemStore },
        { Py_tp_dealloc, _dealloc_WalletItemStore },
        { Py_tp_methods, _methods_WalletItemStore },
        { Py_tp_getset, _getset_WalletItemStore },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletItemStore =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletItemStore",
        sizeof(py::wrapper::Windows::ApplicationModel::Wallet::WalletItemStore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletItemStore
    };

    // ----- WalletManager class --------------------
    constexpr const char* const _type_name_WalletManager = "WalletManager";

    static PyObject* _new_WalletManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WalletManager);
        return nullptr;
    }

    static PyObject* WalletManager_RequestStoreAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Wallet::WalletManager::RequestStoreAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletManager[] = {
        { "request_store_async", (PyCFunction)WalletManager_RequestStoreAsync, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletManager[] = 
    {
        { Py_tp_new, _new_WalletManager },
        { Py_tp_methods, _methods_WalletManager },
        { Py_tp_getset, _getset_WalletManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletManager =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletManager
    };

    // ----- WalletRelevantLocation class --------------------
    constexpr const char* const _type_name_WalletRelevantLocation = "WalletRelevantLocation";

    static PyObject* _new_WalletRelevantLocation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Wallet::WalletRelevantLocation instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WalletRelevantLocation(py::wrapper::Windows::ApplicationModel::Wallet::WalletRelevantLocation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WalletRelevantLocation_get_Position(py::wrapper::Windows::ApplicationModel::Wallet::WalletRelevantLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletRelevantLocation_put_Position(py::wrapper::Windows::ApplicationModel::Wallet::WalletRelevantLocation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::BasicGeoposition>(arg);

            self->obj.Position(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletRelevantLocation_get_DisplayMessage(py::wrapper::Windows::ApplicationModel::Wallet::WalletRelevantLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayMessage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletRelevantLocation_put_DisplayMessage(py::wrapper::Windows::ApplicationModel::Wallet::WalletRelevantLocation* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayMessage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_WalletRelevantLocation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Wallet::WalletRelevantLocation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletRelevantLocation[] = {
        { "_from", (PyCFunction)_from_WalletRelevantLocation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletRelevantLocation[] = {
        { const_cast<char*>("position"), (getter)WalletRelevantLocation_get_Position, (setter)WalletRelevantLocation_put_Position, nullptr, nullptr },
        { const_cast<char*>("display_message"), (getter)WalletRelevantLocation_get_DisplayMessage, (setter)WalletRelevantLocation_put_DisplayMessage, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletRelevantLocation[] = 
    {
        { Py_tp_new, _new_WalletRelevantLocation },
        { Py_tp_dealloc, _dealloc_WalletRelevantLocation },
        { Py_tp_methods, _methods_WalletRelevantLocation },
        { Py_tp_getset, _getset_WalletRelevantLocation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletRelevantLocation =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletRelevantLocation",
        sizeof(py::wrapper::Windows::ApplicationModel::Wallet::WalletRelevantLocation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletRelevantLocation
    };

    // ----- WalletTransaction class --------------------
    constexpr const char* const _type_name_WalletTransaction = "WalletTransaction";

    static PyObject* _new_WalletTransaction(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Wallet::WalletTransaction instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WalletTransaction(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WalletTransaction_get_TransactionDate(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TransactionDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletTransaction_put_TransactionDate(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.TransactionDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletTransaction_get_IsLaunchable(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsLaunchable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletTransaction_put_IsLaunchable(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsLaunchable(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletTransaction_get_IgnoreTimeOfDay(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IgnoreTimeOfDay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletTransaction_put_IgnoreTimeOfDay(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IgnoreTimeOfDay(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletTransaction_get_DisplayLocation(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletTransaction_put_DisplayLocation(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayLocation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletTransaction_get_DisplayAmount(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayAmount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletTransaction_put_DisplayAmount(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayAmount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WalletTransaction_get_Description(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletTransaction_put_Description(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Description(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_WalletTransaction(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Wallet::WalletTransaction>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletTransaction[] = {
        { "_from", (PyCFunction)_from_WalletTransaction, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletTransaction[] = {
        { const_cast<char*>("transaction_date"), (getter)WalletTransaction_get_TransactionDate, (setter)WalletTransaction_put_TransactionDate, nullptr, nullptr },
        { const_cast<char*>("is_launchable"), (getter)WalletTransaction_get_IsLaunchable, (setter)WalletTransaction_put_IsLaunchable, nullptr, nullptr },
        { const_cast<char*>("ignore_time_of_day"), (getter)WalletTransaction_get_IgnoreTimeOfDay, (setter)WalletTransaction_put_IgnoreTimeOfDay, nullptr, nullptr },
        { const_cast<char*>("display_location"), (getter)WalletTransaction_get_DisplayLocation, (setter)WalletTransaction_put_DisplayLocation, nullptr, nullptr },
        { const_cast<char*>("display_amount"), (getter)WalletTransaction_get_DisplayAmount, (setter)WalletTransaction_put_DisplayAmount, nullptr, nullptr },
        { const_cast<char*>("description"), (getter)WalletTransaction_get_Description, (setter)WalletTransaction_put_Description, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletTransaction[] = 
    {
        { Py_tp_new, _new_WalletTransaction },
        { Py_tp_dealloc, _dealloc_WalletTransaction },
        { Py_tp_methods, _methods_WalletTransaction },
        { Py_tp_getset, _getset_WalletTransaction },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletTransaction =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletTransaction",
        sizeof(py::wrapper::Windows::ApplicationModel::Wallet::WalletTransaction),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletTransaction
    };

    // ----- WalletVerb class --------------------
    constexpr const char* const _type_name_WalletVerb = "WalletVerb";

    static PyObject* _new_WalletVerb(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Wallet::WalletVerb instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_WalletVerb(py::wrapper::Windows::ApplicationModel::Wallet::WalletVerb* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WalletVerb_get_Name(py::wrapper::Windows::ApplicationModel::Wallet::WalletVerb* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WalletVerb_put_Name(py::wrapper::Windows::ApplicationModel::Wallet::WalletVerb* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_WalletVerb(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Wallet::WalletVerb>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WalletVerb[] = {
        { "_from", (PyCFunction)_from_WalletVerb, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WalletVerb[] = {
        { const_cast<char*>("name"), (getter)WalletVerb_get_Name, (setter)WalletVerb_put_Name, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WalletVerb[] = 
    {
        { Py_tp_new, _new_WalletVerb },
        { Py_tp_dealloc, _dealloc_WalletVerb },
        { Py_tp_methods, _methods_WalletVerb },
        { Py_tp_getset, _getset_WalletVerb },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WalletVerb =
    {
        "_winrt_Windows_ApplicationModel_Wallet.WalletVerb",
        sizeof(py::wrapper::Windows::ApplicationModel::Wallet::WalletVerb),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WalletVerb
    };

    // ----- Windows.ApplicationModel.Wallet Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletBarcode>::python_type = py::register_python_type(module, _type_name_WalletBarcode, &_type_spec_WalletBarcode, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletItem>::python_type = py::register_python_type(module, _type_name_WalletItem, &_type_spec_WalletItem, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletItemCustomProperty>::python_type = py::register_python_type(module, _type_name_WalletItemCustomProperty, &_type_spec_WalletItemCustomProperty, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletItemStore>::python_type = py::register_python_type(module, _type_name_WalletItemStore, &_type_spec_WalletItemStore, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletManager>::python_type = py::register_python_type(module, _type_name_WalletManager, &_type_spec_WalletManager, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletRelevantLocation>::python_type = py::register_python_type(module, _type_name_WalletRelevantLocation, &_type_spec_WalletRelevantLocation, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletTransaction>::python_type = py::register_python_type(module, _type_name_WalletTransaction, &_type_spec_WalletTransaction, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Wallet::WalletVerb>::python_type = py::register_python_type(module, _type_name_WalletVerb, &_type_spec_WalletVerb, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Wallet");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Wallet",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Wallet

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Wallet (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Wallet::module_def);
}
