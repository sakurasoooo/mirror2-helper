// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Graphics.Holographic.h"

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCamera>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCameraPose>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCameraRenderingParameters>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCameraViewportParameters>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicDisplay>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFramePrediction>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationMonitor>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationReport>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameRenderingReport>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutReport>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicQuadLayer>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicSpace>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicViewConfiguration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicAdapterId>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameId>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>::python_type;

PyObject* py::converter<winrt::Windows::Graphics::Holographic::HolographicAdapterId>::convert(winrt::Windows::Graphics::Holographic::HolographicAdapterId instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Graphics::Holographic::HolographicAdapterId>());
}
winrt::Windows::Graphics::Holographic::HolographicAdapterId py::converter<winrt::Windows::Graphics::Holographic::HolographicAdapterId>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::Holographic::HolographicAdapterId>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::Holographic::HolographicAdapterId>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Graphics::Holographic::HolographicAdapterId return_value{};

    PyObject* py_LowPart = PyDict_GetItemString(obj, "low_part");
    if (!py_LowPart) { throw winrt::hresult_invalid_argument(); }
    return_value.LowPart = converter<uint32_t>::convert_to(py_LowPart);

    PyObject* py_HighPart = PyDict_GetItemString(obj, "high_part");
    if (!py_HighPart) { throw winrt::hresult_invalid_argument(); }
    return_value.HighPart = converter<int32_t>::convert_to(py_HighPart);

    return return_value;
}

PyObject* py::converter<winrt::Windows::Graphics::Holographic::HolographicFrameId>::convert(winrt::Windows::Graphics::Holographic::HolographicFrameId instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Graphics::Holographic::HolographicFrameId>());
}
winrt::Windows::Graphics::Holographic::HolographicFrameId py::converter<winrt::Windows::Graphics::Holographic::HolographicFrameId>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::Holographic::HolographicFrameId>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::Holographic::HolographicFrameId>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Graphics::Holographic::HolographicFrameId return_value{};

    PyObject* py_Value = PyDict_GetItemString(obj, "value");
    if (!py_Value) { throw winrt::hresult_invalid_argument(); }
    return_value.Value = converter<uint64_t>::convert_to(py_Value);

    return return_value;
}

PyObject* py::converter<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>::convert(winrt::Windows::Graphics::Holographic::HolographicStereoTransform instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>());
}
winrt::Windows::Graphics::Holographic::HolographicStereoTransform py::converter<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::Graphics::Holographic::HolographicStereoTransform return_value{};

    PyObject* py_Left = PyDict_GetItemString(obj, "left");
    if (!py_Left) { throw winrt::hresult_invalid_argument(); }
    return_value.Left = converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(py_Left);

    PyObject* py_Right = PyDict_GetItemString(obj, "right");
    if (!py_Right) { throw winrt::hresult_invalid_argument(); }
    return_value.Right = converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(py_Right);

    return return_value;
}

namespace py::cpp::Windows::Graphics::Holographic
{
    // ----- HolographicCamera class --------------------
    constexpr const char* const _type_name_HolographicCamera = "HolographicCamera";

    static PyObject* _new_HolographicCamera(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicCamera);
        return nullptr;
    }

    static void _dealloc_HolographicCamera(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicCamera_SetFarPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                self->obj.SetFarPlaneDistance(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_SetNearPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                self->obj.SetNearPlaneDistance(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_ViewportScaleFactor(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViewportScaleFactor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCamera_put_ViewportScaleFactor(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.ViewportScaleFactor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCamera_get_Id(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_IsStereo(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsStereo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_RenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RenderTargetSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_Display(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Display());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_LeftViewportParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LeftViewportParameters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_RightViewportParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RightViewportParameters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_IsPrimaryLayerEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsPrimaryLayerEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCamera_put_IsPrimaryLayerEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPrimaryLayerEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCamera_get_MaxQuadLayerCount(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxQuadLayerCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_QuadLayers(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.QuadLayers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_CanOverrideViewport(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanOverrideViewport());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_IsHardwareContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsHardwareContentProtectionEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCamera_put_IsHardwareContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsHardwareContentProtectionEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCamera_get_IsHardwareContentProtectionSupported(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsHardwareContentProtectionSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_ViewConfiguration(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViewConfiguration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicCamera(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCamera>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCamera[] = {
        { "set_far_plane_distance", (PyCFunction)HolographicCamera_SetFarPlaneDistance, METH_VARARGS, nullptr },
        { "set_near_plane_distance", (PyCFunction)HolographicCamera_SetNearPlaneDistance, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicCamera, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicCamera[] = {
        { const_cast<char*>("viewport_scale_factor"), (getter)HolographicCamera_get_ViewportScaleFactor, (setter)HolographicCamera_put_ViewportScaleFactor, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)HolographicCamera_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_stereo"), (getter)HolographicCamera_get_IsStereo, nullptr, nullptr, nullptr },
        { const_cast<char*>("render_target_size"), (getter)HolographicCamera_get_RenderTargetSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("display"), (getter)HolographicCamera_get_Display, nullptr, nullptr, nullptr },
        { const_cast<char*>("left_viewport_parameters"), (getter)HolographicCamera_get_LeftViewportParameters, nullptr, nullptr, nullptr },
        { const_cast<char*>("right_viewport_parameters"), (getter)HolographicCamera_get_RightViewportParameters, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_primary_layer_enabled"), (getter)HolographicCamera_get_IsPrimaryLayerEnabled, (setter)HolographicCamera_put_IsPrimaryLayerEnabled, nullptr, nullptr },
        { const_cast<char*>("max_quad_layer_count"), (getter)HolographicCamera_get_MaxQuadLayerCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("quad_layers"), (getter)HolographicCamera_get_QuadLayers, nullptr, nullptr, nullptr },
        { const_cast<char*>("can_override_viewport"), (getter)HolographicCamera_get_CanOverrideViewport, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_hardware_content_protection_enabled"), (getter)HolographicCamera_get_IsHardwareContentProtectionEnabled, (setter)HolographicCamera_put_IsHardwareContentProtectionEnabled, nullptr, nullptr },
        { const_cast<char*>("is_hardware_content_protection_supported"), (getter)HolographicCamera_get_IsHardwareContentProtectionSupported, nullptr, nullptr, nullptr },
        { const_cast<char*>("view_configuration"), (getter)HolographicCamera_get_ViewConfiguration, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicCamera[] = 
    {
        { Py_tp_new, _new_HolographicCamera },
        { Py_tp_dealloc, _dealloc_HolographicCamera },
        { Py_tp_methods, _methods_HolographicCamera },
        { Py_tp_getset, _getset_HolographicCamera },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicCamera =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicCamera",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCamera),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCamera
    };

    // ----- HolographicCameraPose class --------------------
    constexpr const char* const _type_name_HolographicCameraPose = "HolographicCameraPose";

    static PyObject* _new_HolographicCameraPose(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicCameraPose);
        return nullptr;
    }

    static void _dealloc_HolographicCameraPose(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicCameraPose_OverrideProjectionTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>(args, 0);

                self->obj.OverrideProjectionTransform(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_OverrideViewTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>(args, 1);

                self->obj.OverrideViewTransform(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_OverrideViewport(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 1);

                self->obj.OverrideViewport(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_TryGetCullingFrustum(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(self->obj.TryGetCullingFrustum(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_TryGetViewTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(self->obj.TryGetViewTransform(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_TryGetVisibleFrustum(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert(self->obj.TryGetVisibleFrustum(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_FarPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FarPlaneDistance());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_HolographicCamera(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HolographicCamera());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_NearPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NearPlaneDistance());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_ProjectionTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProjectionTransform());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_Viewport(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Viewport());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicCameraPose(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCameraPose>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCameraPose[] = {
        { "override_projection_transform", (PyCFunction)HolographicCameraPose_OverrideProjectionTransform, METH_VARARGS, nullptr },
        { "override_view_transform", (PyCFunction)HolographicCameraPose_OverrideViewTransform, METH_VARARGS, nullptr },
        { "override_viewport", (PyCFunction)HolographicCameraPose_OverrideViewport, METH_VARARGS, nullptr },
        { "try_get_culling_frustum", (PyCFunction)HolographicCameraPose_TryGetCullingFrustum, METH_VARARGS, nullptr },
        { "try_get_view_transform", (PyCFunction)HolographicCameraPose_TryGetViewTransform, METH_VARARGS, nullptr },
        { "try_get_visible_frustum", (PyCFunction)HolographicCameraPose_TryGetVisibleFrustum, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicCameraPose, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicCameraPose[] = {
        { const_cast<char*>("far_plane_distance"), (getter)HolographicCameraPose_get_FarPlaneDistance, nullptr, nullptr, nullptr },
        { const_cast<char*>("holographic_camera"), (getter)HolographicCameraPose_get_HolographicCamera, nullptr, nullptr, nullptr },
        { const_cast<char*>("near_plane_distance"), (getter)HolographicCameraPose_get_NearPlaneDistance, nullptr, nullptr, nullptr },
        { const_cast<char*>("projection_transform"), (getter)HolographicCameraPose_get_ProjectionTransform, nullptr, nullptr, nullptr },
        { const_cast<char*>("viewport"), (getter)HolographicCameraPose_get_Viewport, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicCameraPose[] = 
    {
        { Py_tp_new, _new_HolographicCameraPose },
        { Py_tp_dealloc, _dealloc_HolographicCameraPose },
        { Py_tp_methods, _methods_HolographicCameraPose },
        { Py_tp_getset, _getset_HolographicCameraPose },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicCameraPose =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicCameraPose",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCameraPose
    };

    // ----- HolographicCameraRenderingParameters class --------------------
    constexpr const char* const _type_name_HolographicCameraRenderingParameters = "HolographicCameraRenderingParameters";

    static PyObject* _new_HolographicCameraRenderingParameters(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicCameraRenderingParameters);
        return nullptr;
    }

    static void _dealloc_HolographicCameraRenderingParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicCameraRenderingParameters_CommitDirect3D11DepthBuffer(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>(args, 0);

                self->obj.CommitDirect3D11DepthBuffer(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_SetFocusPoint(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);

                self->obj.SetFocusPoint(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 2);

                self->obj.SetFocusPoint(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 3);

                self->obj.SetFocusPoint(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_Direct3D11BackBuffer(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Direct3D11BackBuffer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_Direct3D11Device(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Direct3D11Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_ReprojectionMode(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ReprojectionMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCameraRenderingParameters_put_ReprojectionMode(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicReprojectionMode>(arg);

            self->obj.ReprojectionMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_IsContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsContentProtectionEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCameraRenderingParameters_put_IsContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsContentProtectionEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_DepthReprojectionMethod(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DepthReprojectionMethod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCameraRenderingParameters_put_DepthReprojectionMethod(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicDepthReprojectionMethod>(arg);

            self->obj.DepthReprojectionMethod(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_HolographicCameraRenderingParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCameraRenderingParameters>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCameraRenderingParameters[] = {
        { "commit_direct3_d11_depth_buffer", (PyCFunction)HolographicCameraRenderingParameters_CommitDirect3D11DepthBuffer, METH_VARARGS, nullptr },
        { "set_focus_point", (PyCFunction)HolographicCameraRenderingParameters_SetFocusPoint, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicCameraRenderingParameters, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicCameraRenderingParameters[] = {
        { const_cast<char*>("direct3_d11_back_buffer"), (getter)HolographicCameraRenderingParameters_get_Direct3D11BackBuffer, nullptr, nullptr, nullptr },
        { const_cast<char*>("direct3_d11_device"), (getter)HolographicCameraRenderingParameters_get_Direct3D11Device, nullptr, nullptr, nullptr },
        { const_cast<char*>("reprojection_mode"), (getter)HolographicCameraRenderingParameters_get_ReprojectionMode, (setter)HolographicCameraRenderingParameters_put_ReprojectionMode, nullptr, nullptr },
        { const_cast<char*>("is_content_protection_enabled"), (getter)HolographicCameraRenderingParameters_get_IsContentProtectionEnabled, (setter)HolographicCameraRenderingParameters_put_IsContentProtectionEnabled, nullptr, nullptr },
        { const_cast<char*>("depth_reprojection_method"), (getter)HolographicCameraRenderingParameters_get_DepthReprojectionMethod, (setter)HolographicCameraRenderingParameters_put_DepthReprojectionMethod, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicCameraRenderingParameters[] = 
    {
        { Py_tp_new, _new_HolographicCameraRenderingParameters },
        { Py_tp_dealloc, _dealloc_HolographicCameraRenderingParameters },
        { Py_tp_methods, _methods_HolographicCameraRenderingParameters },
        { Py_tp_getset, _getset_HolographicCameraRenderingParameters },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicCameraRenderingParameters =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicCameraRenderingParameters",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCameraRenderingParameters
    };

    // ----- HolographicCameraViewportParameters class --------------------
    constexpr const char* const _type_name_HolographicCameraViewportParameters = "HolographicCameraViewportParameters";

    static PyObject* _new_HolographicCameraViewportParameters(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicCameraViewportParameters);
        return nullptr;
    }

    static void _dealloc_HolographicCameraViewportParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicCameraViewportParameters_get_HiddenAreaMesh(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HiddenAreaMesh());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraViewportParameters_get_VisibleAreaMesh(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VisibleAreaMesh());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicCameraViewportParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCameraViewportParameters>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCameraViewportParameters[] = {
        { "_from", (PyCFunction)_from_HolographicCameraViewportParameters, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicCameraViewportParameters[] = {
        { const_cast<char*>("hidden_area_mesh"), (getter)HolographicCameraViewportParameters_get_HiddenAreaMesh, nullptr, nullptr, nullptr },
        { const_cast<char*>("visible_area_mesh"), (getter)HolographicCameraViewportParameters_get_VisibleAreaMesh, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicCameraViewportParameters[] = 
    {
        { Py_tp_new, _new_HolographicCameraViewportParameters },
        { Py_tp_dealloc, _dealloc_HolographicCameraViewportParameters },
        { Py_tp_methods, _methods_HolographicCameraViewportParameters },
        { Py_tp_getset, _getset_HolographicCameraViewportParameters },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicCameraViewportParameters =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicCameraViewportParameters",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCameraViewportParameters
    };

    // ----- HolographicDisplay class --------------------
    constexpr const char* const _type_name_HolographicDisplay = "HolographicDisplay";

    static PyObject* _new_HolographicDisplay(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicDisplay);
        return nullptr;
    }

    static void _dealloc_HolographicDisplay(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicDisplay_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Graphics::Holographic::HolographicDisplay::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_TryGetViewConfiguration(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicViewConfigurationKind>(args, 0);

                return py::convert(self->obj.TryGetViewConfiguration(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_AdapterId(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AdapterId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_DisplayName(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_IsOpaque(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsOpaque());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_IsStereo(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsStereo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_MaxViewportSize(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxViewportSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_SpatialLocator(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SpatialLocator());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_RefreshRate(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RefreshRate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicDisplay(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicDisplay>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicDisplay[] = {
        { "get_default", (PyCFunction)HolographicDisplay_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "try_get_view_configuration", (PyCFunction)HolographicDisplay_TryGetViewConfiguration, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicDisplay, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicDisplay[] = {
        { const_cast<char*>("adapter_id"), (getter)HolographicDisplay_get_AdapterId, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)HolographicDisplay_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_opaque"), (getter)HolographicDisplay_get_IsOpaque, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_stereo"), (getter)HolographicDisplay_get_IsStereo, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_viewport_size"), (getter)HolographicDisplay_get_MaxViewportSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("spatial_locator"), (getter)HolographicDisplay_get_SpatialLocator, nullptr, nullptr, nullptr },
        { const_cast<char*>("refresh_rate"), (getter)HolographicDisplay_get_RefreshRate, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicDisplay[] = 
    {
        { Py_tp_new, _new_HolographicDisplay },
        { Py_tp_dealloc, _dealloc_HolographicDisplay },
        { Py_tp_methods, _methods_HolographicDisplay },
        { Py_tp_getset, _getset_HolographicDisplay },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicDisplay =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicDisplay",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicDisplay
    };

    // ----- HolographicFrame class --------------------
    constexpr const char* const _type_name_HolographicFrame = "HolographicFrame";

    static PyObject* _new_HolographicFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicFrame);
        return nullptr;
    }

    static void _dealloc_HolographicFrame(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicFrame_GetQuadLayerUpdateParameters(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicQuadLayer>(args, 0);

                return py::convert(self->obj.GetQuadLayerUpdateParameters(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_GetRenderingParameters(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicCameraPose>(args, 0);

                return py::convert(self->obj.GetRenderingParameters(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_PresentUsingCurrentPrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PresentUsingCurrentPrediction());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicFramePresentWaitBehavior>(args, 0);

                return py::convert(self->obj.PresentUsingCurrentPrediction(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_UpdateCurrentPrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.UpdateCurrentPrediction();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_WaitForFrameToFinish(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.WaitForFrameToFinish();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_AddedCameras(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AddedCameras());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_CurrentPrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentPrediction());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_Duration(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_RemovedCameras(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RemovedCameras());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_Id(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrame[] = {
        { "get_quad_layer_update_parameters", (PyCFunction)HolographicFrame_GetQuadLayerUpdateParameters, METH_VARARGS, nullptr },
        { "get_rendering_parameters", (PyCFunction)HolographicFrame_GetRenderingParameters, METH_VARARGS, nullptr },
        { "present_using_current_prediction", (PyCFunction)HolographicFrame_PresentUsingCurrentPrediction, METH_VARARGS, nullptr },
        { "update_current_prediction", (PyCFunction)HolographicFrame_UpdateCurrentPrediction, METH_VARARGS, nullptr },
        { "wait_for_frame_to_finish", (PyCFunction)HolographicFrame_WaitForFrameToFinish, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicFrame, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicFrame[] = {
        { const_cast<char*>("added_cameras"), (getter)HolographicFrame_get_AddedCameras, nullptr, nullptr, nullptr },
        { const_cast<char*>("current_prediction"), (getter)HolographicFrame_get_CurrentPrediction, nullptr, nullptr, nullptr },
        { const_cast<char*>("duration"), (getter)HolographicFrame_get_Duration, nullptr, nullptr, nullptr },
        { const_cast<char*>("removed_cameras"), (getter)HolographicFrame_get_RemovedCameras, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)HolographicFrame_get_Id, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFrame[] = 
    {
        { Py_tp_new, _new_HolographicFrame },
        { Py_tp_dealloc, _dealloc_HolographicFrame },
        { Py_tp_methods, _methods_HolographicFrame },
        { Py_tp_getset, _getset_HolographicFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFrame =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFrame",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrame
    };

    // ----- HolographicFramePrediction class --------------------
    constexpr const char* const _type_name_HolographicFramePrediction = "HolographicFramePrediction";

    static PyObject* _new_HolographicFramePrediction(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicFramePrediction);
        return nullptr;
    }

    static void _dealloc_HolographicFramePrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicFramePrediction_get_CameraPoses(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CameraPoses());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePrediction_get_Timestamp(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicFramePrediction(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFramePrediction>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFramePrediction[] = {
        { "_from", (PyCFunction)_from_HolographicFramePrediction, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicFramePrediction[] = {
        { const_cast<char*>("camera_poses"), (getter)HolographicFramePrediction_get_CameraPoses, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)HolographicFramePrediction_get_Timestamp, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFramePrediction[] = 
    {
        { Py_tp_new, _new_HolographicFramePrediction },
        { Py_tp_dealloc, _dealloc_HolographicFramePrediction },
        { Py_tp_methods, _methods_HolographicFramePrediction },
        { Py_tp_getset, _getset_HolographicFramePrediction },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFramePrediction =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFramePrediction",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFramePrediction
    };

    // ----- HolographicFramePresentationMonitor class --------------------
    constexpr const char* const _type_name_HolographicFramePresentationMonitor = "HolographicFramePresentationMonitor";

    static PyObject* _new_HolographicFramePresentationMonitor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicFramePresentationMonitor);
        return nullptr;
    }

    static void _dealloc_HolographicFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicFramePresentationMonitor_Close(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationMonitor_ReadReports(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReadReports());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_HolographicFramePresentationMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFramePresentationMonitor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HolographicFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_HolographicFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFramePresentationMonitor[] = {
        { "close", (PyCFunction)HolographicFramePresentationMonitor_Close, METH_VARARGS, nullptr },
        { "read_reports", (PyCFunction)HolographicFramePresentationMonitor_ReadReports, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicFramePresentationMonitor, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_HolographicFramePresentationMonitor, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_HolographicFramePresentationMonitor, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicFramePresentationMonitor[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFramePresentationMonitor[] = 
    {
        { Py_tp_new, _new_HolographicFramePresentationMonitor },
        { Py_tp_dealloc, _dealloc_HolographicFramePresentationMonitor },
        { Py_tp_methods, _methods_HolographicFramePresentationMonitor },
        { Py_tp_getset, _getset_HolographicFramePresentationMonitor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFramePresentationMonitor =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFramePresentationMonitor",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFramePresentationMonitor
    };

    // ----- HolographicFramePresentationReport class --------------------
    constexpr const char* const _type_name_HolographicFramePresentationReport = "HolographicFramePresentationReport";

    static PyObject* _new_HolographicFramePresentationReport(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicFramePresentationReport);
        return nullptr;
    }

    static void _dealloc_HolographicFramePresentationReport(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicFramePresentationReport_get_AppGpuDuration(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppGpuDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_AppGpuOverrun(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppGpuOverrun());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_CompositorGpuDuration(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CompositorGpuDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_MissedPresentationOpportunityCount(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MissedPresentationOpportunityCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_PresentationCount(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PresentationCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicFramePresentationReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFramePresentationReport>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFramePresentationReport[] = {
        { "_from", (PyCFunction)_from_HolographicFramePresentationReport, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicFramePresentationReport[] = {
        { const_cast<char*>("app_gpu_duration"), (getter)HolographicFramePresentationReport_get_AppGpuDuration, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_gpu_overrun"), (getter)HolographicFramePresentationReport_get_AppGpuOverrun, nullptr, nullptr, nullptr },
        { const_cast<char*>("compositor_gpu_duration"), (getter)HolographicFramePresentationReport_get_CompositorGpuDuration, nullptr, nullptr, nullptr },
        { const_cast<char*>("missed_presentation_opportunity_count"), (getter)HolographicFramePresentationReport_get_MissedPresentationOpportunityCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("presentation_count"), (getter)HolographicFramePresentationReport_get_PresentationCount, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFramePresentationReport[] = 
    {
        { Py_tp_new, _new_HolographicFramePresentationReport },
        { Py_tp_dealloc, _dealloc_HolographicFramePresentationReport },
        { Py_tp_methods, _methods_HolographicFramePresentationReport },
        { Py_tp_getset, _getset_HolographicFramePresentationReport },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFramePresentationReport =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFramePresentationReport",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFramePresentationReport
    };

    // ----- HolographicFrameRenderingReport class --------------------
    constexpr const char* const _type_name_HolographicFrameRenderingReport = "HolographicFrameRenderingReport";

    static PyObject* _new_HolographicFrameRenderingReport(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicFrameRenderingReport);
        return nullptr;
    }

    static void _dealloc_HolographicFrameRenderingReport(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicFrameRenderingReport_get_FrameId(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_MissedLatchCount(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MissedLatchCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_SystemRelativeActualGpuFinishTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeActualGpuFinishTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_SystemRelativeFrameReadyTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeFrameReadyTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_SystemRelativeTargetLatchTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeTargetLatchTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicFrameRenderingReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrameRenderingReport>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrameRenderingReport[] = {
        { "_from", (PyCFunction)_from_HolographicFrameRenderingReport, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicFrameRenderingReport[] = {
        { const_cast<char*>("frame_id"), (getter)HolographicFrameRenderingReport_get_FrameId, nullptr, nullptr, nullptr },
        { const_cast<char*>("missed_latch_count"), (getter)HolographicFrameRenderingReport_get_MissedLatchCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_actual_gpu_finish_time"), (getter)HolographicFrameRenderingReport_get_SystemRelativeActualGpuFinishTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_frame_ready_time"), (getter)HolographicFrameRenderingReport_get_SystemRelativeFrameReadyTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_target_latch_time"), (getter)HolographicFrameRenderingReport_get_SystemRelativeTargetLatchTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFrameRenderingReport[] = 
    {
        { Py_tp_new, _new_HolographicFrameRenderingReport },
        { Py_tp_dealloc, _dealloc_HolographicFrameRenderingReport },
        { Py_tp_methods, _methods_HolographicFrameRenderingReport },
        { Py_tp_getset, _getset_HolographicFrameRenderingReport },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFrameRenderingReport =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFrameRenderingReport",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameRenderingReport
    };

    // ----- HolographicFrameScanoutMonitor class --------------------
    constexpr const char* const _type_name_HolographicFrameScanoutMonitor = "HolographicFrameScanoutMonitor";

    static PyObject* _new_HolographicFrameScanoutMonitor(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicFrameScanoutMonitor);
        return nullptr;
    }

    static void _dealloc_HolographicFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicFrameScanoutMonitor_Close(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutMonitor_ReadReports(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReadReports());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_HolographicFrameScanoutMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HolographicFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_HolographicFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrameScanoutMonitor[] = {
        { "close", (PyCFunction)HolographicFrameScanoutMonitor_Close, METH_VARARGS, nullptr },
        { "read_reports", (PyCFunction)HolographicFrameScanoutMonitor_ReadReports, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicFrameScanoutMonitor, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_HolographicFrameScanoutMonitor, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_HolographicFrameScanoutMonitor, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicFrameScanoutMonitor[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFrameScanoutMonitor[] = 
    {
        { Py_tp_new, _new_HolographicFrameScanoutMonitor },
        { Py_tp_dealloc, _dealloc_HolographicFrameScanoutMonitor },
        { Py_tp_methods, _methods_HolographicFrameScanoutMonitor },
        { Py_tp_getset, _getset_HolographicFrameScanoutMonitor },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFrameScanoutMonitor =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFrameScanoutMonitor",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameScanoutMonitor
    };

    // ----- HolographicFrameScanoutReport class --------------------
    constexpr const char* const _type_name_HolographicFrameScanoutReport = "HolographicFrameScanoutReport";

    static PyObject* _new_HolographicFrameScanoutReport(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicFrameScanoutReport);
        return nullptr;
    }

    static void _dealloc_HolographicFrameScanoutReport(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicFrameScanoutReport_get_MissedScanoutCount(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MissedScanoutCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_RenderingReport(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RenderingReport());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_SystemRelativeLatchTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeLatchTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_SystemRelativePhotonTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativePhotonTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_SystemRelativeScanoutStartTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeScanoutStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicFrameScanoutReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutReport>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrameScanoutReport[] = {
        { "_from", (PyCFunction)_from_HolographicFrameScanoutReport, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicFrameScanoutReport[] = {
        { const_cast<char*>("missed_scanout_count"), (getter)HolographicFrameScanoutReport_get_MissedScanoutCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("rendering_report"), (getter)HolographicFrameScanoutReport_get_RenderingReport, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_latch_time"), (getter)HolographicFrameScanoutReport_get_SystemRelativeLatchTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_photon_time"), (getter)HolographicFrameScanoutReport_get_SystemRelativePhotonTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_scanout_start_time"), (getter)HolographicFrameScanoutReport_get_SystemRelativeScanoutStartTime, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFrameScanoutReport[] = 
    {
        { Py_tp_new, _new_HolographicFrameScanoutReport },
        { Py_tp_dealloc, _dealloc_HolographicFrameScanoutReport },
        { Py_tp_methods, _methods_HolographicFrameScanoutReport },
        { Py_tp_getset, _getset_HolographicFrameScanoutReport },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFrameScanoutReport =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFrameScanoutReport",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameScanoutReport
    };

    // ----- HolographicQuadLayer class --------------------
    constexpr const char* const _type_name_HolographicQuadLayer = "HolographicQuadLayer";

    static PyObject* _new_HolographicQuadLayer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                winrt::Windows::Graphics::Holographic::HolographicQuadLayer instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(args, 1);

                winrt::Windows::Graphics::Holographic::HolographicQuadLayer instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_HolographicQuadLayer(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicQuadLayer_Close(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayer_get_PixelFormat(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PixelFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayer_get_Size(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicQuadLayer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicQuadLayer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HolographicQuadLayer(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_HolographicQuadLayer(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicQuadLayer[] = {
        { "close", (PyCFunction)HolographicQuadLayer_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicQuadLayer, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_HolographicQuadLayer, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_HolographicQuadLayer, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicQuadLayer[] = {
        { const_cast<char*>("pixel_format"), (getter)HolographicQuadLayer_get_PixelFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)HolographicQuadLayer_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicQuadLayer[] = 
    {
        { Py_tp_new, _new_HolographicQuadLayer },
        { Py_tp_dealloc, _dealloc_HolographicQuadLayer },
        { Py_tp_methods, _methods_HolographicQuadLayer },
        { Py_tp_getset, _getset_HolographicQuadLayer },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicQuadLayer =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicQuadLayer",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicQuadLayer
    };

    // ----- HolographicQuadLayerUpdateParameters class --------------------
    constexpr const char* const _type_name_HolographicQuadLayerUpdateParameters = "HolographicQuadLayerUpdateParameters";

    static PyObject* _new_HolographicQuadLayerUpdateParameters(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicQuadLayerUpdateParameters);
        return nullptr;
    }

    static void _dealloc_HolographicQuadLayerUpdateParameters(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContent(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AcquireBufferToUpdateContent());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContentWithHardwareProtection(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.AcquireBufferToUpdateContentWithHardwareProtection());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                self->obj.UpdateContentProtectionEnabled(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateExtents(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float2>(args, 0);

                self->obj.UpdateExtents(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateLocationWithDisplayRelativeMode(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 1);

                self->obj.UpdateLocationWithDisplayRelativeMode(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateLocationWithStationaryMode(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 2);

                self->obj.UpdateLocationWithStationaryMode(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateViewport(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                self->obj.UpdateViewport(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_get_CanAcquireWithHardwareProtection(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanAcquireWithHardwareProtection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicQuadLayerUpdateParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicQuadLayerUpdateParameters[] = {
        { "acquire_buffer_to_update_content", (PyCFunction)HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContent, METH_VARARGS, nullptr },
        { "acquire_buffer_to_update_content_with_hardware_protection", (PyCFunction)HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContentWithHardwareProtection, METH_VARARGS, nullptr },
        { "update_content_protection_enabled", (PyCFunction)HolographicQuadLayerUpdateParameters_UpdateContentProtectionEnabled, METH_VARARGS, nullptr },
        { "update_extents", (PyCFunction)HolographicQuadLayerUpdateParameters_UpdateExtents, METH_VARARGS, nullptr },
        { "update_location_with_display_relative_mode", (PyCFunction)HolographicQuadLayerUpdateParameters_UpdateLocationWithDisplayRelativeMode, METH_VARARGS, nullptr },
        { "update_location_with_stationary_mode", (PyCFunction)HolographicQuadLayerUpdateParameters_UpdateLocationWithStationaryMode, METH_VARARGS, nullptr },
        { "update_viewport", (PyCFunction)HolographicQuadLayerUpdateParameters_UpdateViewport, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicQuadLayerUpdateParameters, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicQuadLayerUpdateParameters[] = {
        { const_cast<char*>("can_acquire_with_hardware_protection"), (getter)HolographicQuadLayerUpdateParameters_get_CanAcquireWithHardwareProtection, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicQuadLayerUpdateParameters[] = 
    {
        { Py_tp_new, _new_HolographicQuadLayerUpdateParameters },
        { Py_tp_dealloc, _dealloc_HolographicQuadLayerUpdateParameters },
        { Py_tp_methods, _methods_HolographicQuadLayerUpdateParameters },
        { Py_tp_getset, _getset_HolographicQuadLayerUpdateParameters },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicQuadLayerUpdateParameters =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicQuadLayerUpdateParameters",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicQuadLayerUpdateParameters
    };

    // ----- HolographicSpace class --------------------
    constexpr const char* const _type_name_HolographicSpace = "HolographicSpace";

    static PyObject* _new_HolographicSpace(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicSpace);
        return nullptr;
    }

    static void _dealloc_HolographicSpace(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicSpace_CreateForCoreWindow(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreWindow>(args, 0);

                return py::convert(winrt::Windows::Graphics::Holographic::HolographicSpace::CreateForCoreWindow(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_CreateFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.CreateFramePresentationMonitor(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_CreateFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.CreateFrameScanoutMonitor(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_CreateNextFrame(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CreateNextFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_SetDirect3D11Device(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(args, 0);

                self->obj.SetDirect3D11Device(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_WaitForNextFrameReady(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.WaitForNextFrameReady();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_WaitForNextFrameReadyWithHeadStart(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 0);

                self->obj.WaitForNextFrameReadyWithHeadStart(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_PrimaryAdapterId(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PrimaryAdapterId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_UserPresence(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserPresence());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_IsAvailable(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Holographic::HolographicSpace::IsAvailable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_IsSupported(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Holographic::HolographicSpace::IsSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_IsConfigured(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Graphics::Holographic::HolographicSpace::IsConfigured());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_CameraAdded(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Holographic::HolographicSpace, winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>>(arg);

            return py::convert(self->obj.CameraAdded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_CameraAdded(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CameraAdded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_CameraRemoved(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Holographic::HolographicSpace, winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>>(arg);

            return py::convert(self->obj.CameraRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_CameraRemoved(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CameraRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_UserPresenceChanged(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Holographic::HolographicSpace, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.UserPresenceChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_UserPresenceChanged(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UserPresenceChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_IsAvailableChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::Graphics::Holographic::HolographicSpace::IsAvailableChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_IsAvailableChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Graphics::Holographic::HolographicSpace::IsAvailableChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicSpace(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicSpace>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicSpace[] = {
        { "create_for_core_window", (PyCFunction)HolographicSpace_CreateForCoreWindow, METH_VARARGS | METH_STATIC, nullptr },
        { "create_frame_presentation_monitor", (PyCFunction)HolographicSpace_CreateFramePresentationMonitor, METH_VARARGS, nullptr },
        { "create_frame_scanout_monitor", (PyCFunction)HolographicSpace_CreateFrameScanoutMonitor, METH_VARARGS, nullptr },
        { "create_next_frame", (PyCFunction)HolographicSpace_CreateNextFrame, METH_VARARGS, nullptr },
        { "set_direct3_d11_device", (PyCFunction)HolographicSpace_SetDirect3D11Device, METH_VARARGS, nullptr },
        { "wait_for_next_frame_ready", (PyCFunction)HolographicSpace_WaitForNextFrameReady, METH_VARARGS, nullptr },
        { "wait_for_next_frame_ready_with_head_start", (PyCFunction)HolographicSpace_WaitForNextFrameReadyWithHeadStart, METH_VARARGS, nullptr },
        { "get_is_available", (PyCFunction)HolographicSpace_get_IsAvailable, METH_NOARGS | METH_STATIC, nullptr },
        { "get_is_supported", (PyCFunction)HolographicSpace_get_IsSupported, METH_NOARGS | METH_STATIC, nullptr },
        { "get_is_configured", (PyCFunction)HolographicSpace_get_IsConfigured, METH_NOARGS | METH_STATIC, nullptr },
        { "add_camera_added", (PyCFunction)HolographicSpace_add_CameraAdded, METH_O, nullptr },
        { "remove_camera_added", (PyCFunction)HolographicSpace_remove_CameraAdded, METH_O, nullptr },
        { "add_camera_removed", (PyCFunction)HolographicSpace_add_CameraRemoved, METH_O, nullptr },
        { "remove_camera_removed", (PyCFunction)HolographicSpace_remove_CameraRemoved, METH_O, nullptr },
        { "add_user_presence_changed", (PyCFunction)HolographicSpace_add_UserPresenceChanged, METH_O, nullptr },
        { "remove_user_presence_changed", (PyCFunction)HolographicSpace_remove_UserPresenceChanged, METH_O, nullptr },
        { "add_is_available_changed", (PyCFunction)HolographicSpace_add_IsAvailableChanged, METH_O | METH_STATIC, nullptr },
        { "remove_is_available_changed", (PyCFunction)HolographicSpace_remove_IsAvailableChanged, METH_O | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_HolographicSpace, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicSpace[] = {
        { const_cast<char*>("primary_adapter_id"), (getter)HolographicSpace_get_PrimaryAdapterId, nullptr, nullptr, nullptr },
        { const_cast<char*>("user_presence"), (getter)HolographicSpace_get_UserPresence, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicSpace[] = 
    {
        { Py_tp_new, _new_HolographicSpace },
        { Py_tp_dealloc, _dealloc_HolographicSpace },
        { Py_tp_methods, _methods_HolographicSpace },
        { Py_tp_getset, _getset_HolographicSpace },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicSpace =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicSpace",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicSpace),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicSpace
    };

    // ----- HolographicSpaceCameraAddedEventArgs class --------------------
    constexpr const char* const _type_name_HolographicSpaceCameraAddedEventArgs = "HolographicSpaceCameraAddedEventArgs";

    static PyObject* _new_HolographicSpaceCameraAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicSpaceCameraAddedEventArgs);
        return nullptr;
    }

    static void _dealloc_HolographicSpaceCameraAddedEventArgs(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicSpaceCameraAddedEventArgs_GetDeferral(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpaceCameraAddedEventArgs_get_Camera(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Camera());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicSpaceCameraAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicSpaceCameraAddedEventArgs[] = {
        { "get_deferral", (PyCFunction)HolographicSpaceCameraAddedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicSpaceCameraAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicSpaceCameraAddedEventArgs[] = {
        { const_cast<char*>("camera"), (getter)HolographicSpaceCameraAddedEventArgs_get_Camera, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicSpaceCameraAddedEventArgs[] = 
    {
        { Py_tp_new, _new_HolographicSpaceCameraAddedEventArgs },
        { Py_tp_dealloc, _dealloc_HolographicSpaceCameraAddedEventArgs },
        { Py_tp_methods, _methods_HolographicSpaceCameraAddedEventArgs },
        { Py_tp_getset, _getset_HolographicSpaceCameraAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicSpaceCameraAddedEventArgs =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicSpaceCameraAddedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicSpaceCameraAddedEventArgs
    };

    // ----- HolographicSpaceCameraRemovedEventArgs class --------------------
    constexpr const char* const _type_name_HolographicSpaceCameraRemovedEventArgs = "HolographicSpaceCameraRemovedEventArgs";

    static PyObject* _new_HolographicSpaceCameraRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicSpaceCameraRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_HolographicSpaceCameraRemovedEventArgs(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicSpaceCameraRemovedEventArgs_get_Camera(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Camera());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicSpaceCameraRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicSpaceCameraRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_HolographicSpaceCameraRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicSpaceCameraRemovedEventArgs[] = {
        { const_cast<char*>("camera"), (getter)HolographicSpaceCameraRemovedEventArgs_get_Camera, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicSpaceCameraRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_HolographicSpaceCameraRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_HolographicSpaceCameraRemovedEventArgs },
        { Py_tp_methods, _methods_HolographicSpaceCameraRemovedEventArgs },
        { Py_tp_getset, _getset_HolographicSpaceCameraRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicSpaceCameraRemovedEventArgs =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicSpaceCameraRemovedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicSpaceCameraRemovedEventArgs
    };

    // ----- HolographicViewConfiguration class --------------------
    constexpr const char* const _type_name_HolographicViewConfiguration = "HolographicViewConfiguration";

    static PyObject* _new_HolographicViewConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HolographicViewConfiguration);
        return nullptr;
    }

    static void _dealloc_HolographicViewConfiguration(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HolographicViewConfiguration_RequestRenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                return py::convert(self->obj.RequestRenderTargetSize(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_PixelFormat(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PixelFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicViewConfiguration_put_PixelFormat(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(arg);

            self->obj.PixelFormat(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicViewConfiguration_get_IsEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicViewConfiguration_put_IsEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicViewConfiguration_get_Display(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Display());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_IsStereo(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsStereo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_Kind(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_NativeRenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NativeRenderTargetSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_RefreshRate(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RefreshRate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_RenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RenderTargetSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_SupportedPixelFormats(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedPixelFormats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_SupportedDepthReprojectionMethods(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedDepthReprojectionMethods());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HolographicViewConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicViewConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicViewConfiguration[] = {
        { "request_render_target_size", (PyCFunction)HolographicViewConfiguration_RequestRenderTargetSize, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_HolographicViewConfiguration, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_HolographicViewConfiguration[] = {
        { const_cast<char*>("pixel_format"), (getter)HolographicViewConfiguration_get_PixelFormat, (setter)HolographicViewConfiguration_put_PixelFormat, nullptr, nullptr },
        { const_cast<char*>("is_enabled"), (getter)HolographicViewConfiguration_get_IsEnabled, (setter)HolographicViewConfiguration_put_IsEnabled, nullptr, nullptr },
        { const_cast<char*>("display"), (getter)HolographicViewConfiguration_get_Display, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_stereo"), (getter)HolographicViewConfiguration_get_IsStereo, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)HolographicViewConfiguration_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("native_render_target_size"), (getter)HolographicViewConfiguration_get_NativeRenderTargetSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("refresh_rate"), (getter)HolographicViewConfiguration_get_RefreshRate, nullptr, nullptr, nullptr },
        { const_cast<char*>("render_target_size"), (getter)HolographicViewConfiguration_get_RenderTargetSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_pixel_formats"), (getter)HolographicViewConfiguration_get_SupportedPixelFormats, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_depth_reprojection_methods"), (getter)HolographicViewConfiguration_get_SupportedDepthReprojectionMethods, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicViewConfiguration[] = 
    {
        { Py_tp_new, _new_HolographicViewConfiguration },
        { Py_tp_dealloc, _dealloc_HolographicViewConfiguration },
        { Py_tp_methods, _methods_HolographicViewConfiguration },
        { Py_tp_getset, _getset_HolographicViewConfiguration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicViewConfiguration =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicViewConfiguration",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicViewConfiguration
    };

    // ----- HolographicAdapterId struct --------------------
    constexpr const char* const _type_name_HolographicAdapterId = "HolographicAdapterId";

    PyObject* _new_HolographicAdapterId(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Graphics::Holographic::HolographicAdapterId return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicAdapterId>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        uint32_t _LowPart{};
        int32_t _HighPart{};

        static const char* kwlist[] = {"low_part", "high_part", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "Ii", const_cast<char**>(kwlist), &_LowPart, &_HighPart))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Graphics::Holographic::HolographicAdapterId return_value{ _LowPart, _HighPart };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_HolographicAdapterId(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self)
    {
    }

    static PyObject* HolographicAdapterId_get_LowPart(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LowPart);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicAdapterId_set_LowPart(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.LowPart = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicAdapterId_get_HighPart(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HighPart);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicAdapterId_set_HighPart(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.HighPart = py::converter<int32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_HolographicAdapterId[] = {
        { const_cast<char*>("low_part"), (getter)HolographicAdapterId_get_LowPart, (setter)HolographicAdapterId_set_LowPart, nullptr, nullptr },
        { const_cast<char*>("high_part"), (getter)HolographicAdapterId_get_HighPart, (setter)HolographicAdapterId_set_HighPart, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicAdapterId[] = 
    {
        { Py_tp_new, _new_HolographicAdapterId },
        { Py_tp_dealloc, _dealloc_HolographicAdapterId },
        { Py_tp_getset, _getset_HolographicAdapterId },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicAdapterId =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicAdapterId",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicAdapterId
    };

    // ----- HolographicFrameId struct --------------------
    constexpr const char* const _type_name_HolographicFrameId = "HolographicFrameId";

    PyObject* _new_HolographicFrameId(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Graphics::Holographic::HolographicFrameId return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicFrameId>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        uint64_t _Value{};

        static const char* kwlist[] = {"value", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "K", const_cast<char**>(kwlist), &_Value))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Graphics::Holographic::HolographicFrameId return_value{ _Value };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_HolographicFrameId(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId* self)
    {
    }

    static PyObject* HolographicFrameId_get_Value(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicFrameId_set_Value(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Value = py::converter<uint64_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_HolographicFrameId[] = {
        { const_cast<char*>("value"), (getter)HolographicFrameId_get_Value, (setter)HolographicFrameId_set_Value, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicFrameId[] = 
    {
        { Py_tp_new, _new_HolographicFrameId },
        { Py_tp_dealloc, _dealloc_HolographicFrameId },
        { Py_tp_getset, _getset_HolographicFrameId },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicFrameId =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicFrameId",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameId
    };

    // ----- HolographicStereoTransform struct --------------------
    constexpr const char* const _type_name_HolographicStereoTransform = "HolographicStereoTransform";

    PyObject* _new_HolographicStereoTransform(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::Graphics::Holographic::HolographicStereoTransform return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        PyObject* _Left{};
        PyObject* _Right{};

        static const char* kwlist[] = {"left", "right", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO", const_cast<char**>(kwlist), &_Left, &_Right))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::Graphics::Holographic::HolographicStereoTransform return_value{ py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(_Left), py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(_Right) };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_HolographicStereoTransform(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self)
    {
    }

    static PyObject* HolographicStereoTransform_get_Left(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Left);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicStereoTransform_set_Left(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Left = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicStereoTransform_get_Right(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Right);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicStereoTransform_set_Right(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Right = py::converter<winrt::Windows::Foundation::Numerics::float4x4>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_HolographicStereoTransform[] = {
        { const_cast<char*>("left"), (getter)HolographicStereoTransform_get_Left, (setter)HolographicStereoTransform_set_Left, nullptr, nullptr },
        { const_cast<char*>("right"), (getter)HolographicStereoTransform_get_Right, (setter)HolographicStereoTransform_set_Right, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_HolographicStereoTransform[] = 
    {
        { Py_tp_new, _new_HolographicStereoTransform },
        { Py_tp_dealloc, _dealloc_HolographicStereoTransform },
        { Py_tp_getset, _getset_HolographicStereoTransform },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_HolographicStereoTransform =
    {
        "_winrt_Windows_Graphics_Holographic.HolographicStereoTransform",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicStereoTransform
    };

    // ----- Windows.Graphics.Holographic Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCamera>::python_type = py::register_python_type(module, _type_name_HolographicCamera, &_type_spec_HolographicCamera, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCameraPose>::python_type = py::register_python_type(module, _type_name_HolographicCameraPose, &_type_spec_HolographicCameraPose, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCameraRenderingParameters>::python_type = py::register_python_type(module, _type_name_HolographicCameraRenderingParameters, &_type_spec_HolographicCameraRenderingParameters, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicCameraViewportParameters>::python_type = py::register_python_type(module, _type_name_HolographicCameraViewportParameters, &_type_spec_HolographicCameraViewportParameters, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicDisplay>::python_type = py::register_python_type(module, _type_name_HolographicDisplay, &_type_spec_HolographicDisplay, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrame>::python_type = py::register_python_type(module, _type_name_HolographicFrame, &_type_spec_HolographicFrame, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFramePrediction>::python_type = py::register_python_type(module, _type_name_HolographicFramePrediction, &_type_spec_HolographicFramePrediction, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationMonitor>::python_type = py::register_python_type(module, _type_name_HolographicFramePresentationMonitor, &_type_spec_HolographicFramePresentationMonitor, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationReport>::python_type = py::register_python_type(module, _type_name_HolographicFramePresentationReport, &_type_spec_HolographicFramePresentationReport, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameRenderingReport>::python_type = py::register_python_type(module, _type_name_HolographicFrameRenderingReport, &_type_spec_HolographicFrameRenderingReport, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor>::python_type = py::register_python_type(module, _type_name_HolographicFrameScanoutMonitor, &_type_spec_HolographicFrameScanoutMonitor, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutReport>::python_type = py::register_python_type(module, _type_name_HolographicFrameScanoutReport, &_type_spec_HolographicFrameScanoutReport, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicQuadLayer>::python_type = py::register_python_type(module, _type_name_HolographicQuadLayer, &_type_spec_HolographicQuadLayer, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters>::python_type = py::register_python_type(module, _type_name_HolographicQuadLayerUpdateParameters, &_type_spec_HolographicQuadLayerUpdateParameters, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicSpace>::python_type = py::register_python_type(module, _type_name_HolographicSpace, &_type_spec_HolographicSpace, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>::python_type = py::register_python_type(module, _type_name_HolographicSpaceCameraAddedEventArgs, &_type_spec_HolographicSpaceCameraAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_HolographicSpaceCameraRemovedEventArgs, &_type_spec_HolographicSpaceCameraRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicViewConfiguration>::python_type = py::register_python_type(module, _type_name_HolographicViewConfiguration, &_type_spec_HolographicViewConfiguration, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicAdapterId>::python_type = py::register_python_type(module, _type_name_HolographicAdapterId, &_type_spec_HolographicAdapterId, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicFrameId>::python_type = py::register_python_type(module, _type_name_HolographicFrameId, &_type_spec_HolographicFrameId, bases.get());
            py::winrt_type<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>::python_type = py::register_python_type(module, _type_name_HolographicStereoTransform, &_type_spec_HolographicStereoTransform, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Graphics.Holographic");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Graphics_Holographic",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Graphics::Holographic

PyMODINIT_FUNC
PyInit__winrt_Windows_Graphics_Holographic (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Graphics::Holographic::module_def);
}
