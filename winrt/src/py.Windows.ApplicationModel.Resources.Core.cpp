// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.Resources.Core.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>::python_type;

PyObject* py::converter<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>());
}
winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo py::converter<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>*>(obj)->obj;
    }

    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }

    winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo return_value{};

    PyObject* py_MajorVersion = PyDict_GetItemString(obj, "major_version");
    if (!py_MajorVersion) { throw winrt::hresult_invalid_argument(); }
    return_value.MajorVersion = converter<uint32_t>::convert_to(py_MajorVersion);

    PyObject* py_MinorVersion = PyDict_GetItemString(obj, "minor_version");
    if (!py_MinorVersion) { throw winrt::hresult_invalid_argument(); }
    return_value.MinorVersion = converter<uint32_t>::convert_to(py_MinorVersion);

    PyObject* py_ResourceSubtreeCount = PyDict_GetItemString(obj, "resource_subtree_count");
    if (!py_ResourceSubtreeCount) { throw winrt::hresult_invalid_argument(); }
    return_value.ResourceSubtreeCount = converter<uint32_t>::convert_to(py_ResourceSubtreeCount);

    PyObject* py_NamedResourceCount = PyDict_GetItemString(obj, "named_resource_count");
    if (!py_NamedResourceCount) { throw winrt::hresult_invalid_argument(); }
    return_value.NamedResourceCount = converter<uint32_t>::convert_to(py_NamedResourceCount);

    PyObject* py_Checksum = PyDict_GetItemString(obj, "checksum");
    if (!py_Checksum) { throw winrt::hresult_invalid_argument(); }
    return_value.Checksum = converter<int32_t>::convert_to(py_Checksum);

    return return_value;
}

namespace py::cpp::Windows::ApplicationModel::Resources::Core
{
    // ----- NamedResource class --------------------
    constexpr const char* const _type_name_NamedResource = "NamedResource";

    static PyObject* _new_NamedResource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_NamedResource);
        return nullptr;
    }

    static void _dealloc_NamedResource(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* NamedResource_Resolve(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Resolve());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>(args, 0);

                return py::convert(self->obj.Resolve(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* NamedResource_ResolveAll(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ResolveAll());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>(args, 0);

                return py::convert(self->obj.ResolveAll(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* NamedResource_get_Candidates(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Candidates());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NamedResource_get_Uri(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_NamedResource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NamedResource[] = {
        { "resolve", (PyCFunction)NamedResource_Resolve, METH_VARARGS, nullptr },
        { "resolve_all", (PyCFunction)NamedResource_ResolveAll, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_NamedResource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_NamedResource[] = {
        { const_cast<char*>("candidates"), (getter)NamedResource_get_Candidates, nullptr, nullptr, nullptr },
        { const_cast<char*>("uri"), (getter)NamedResource_get_Uri, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_NamedResource[] = 
    {
        { Py_tp_new, _new_NamedResource },
        { Py_tp_dealloc, _dealloc_NamedResource },
        { Py_tp_methods, _methods_NamedResource },
        { Py_tp_getset, _getset_NamedResource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_NamedResource =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.NamedResource",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NamedResource
    };

    // ----- ResourceCandidate class --------------------
    constexpr const char* const _type_name_ResourceCandidate = "ResourceCandidate";

    static PyObject* _new_ResourceCandidate(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceCandidate);
        return nullptr;
    }

    static void _dealloc_ResourceCandidate(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceCandidate_GetQualifierValue(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetQualifierValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_GetValueAsFileAsync(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetValueAsFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_GetValueAsStreamAsync(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetValueAsStreamAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_IsDefault(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDefault());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_IsMatch(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsMatch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_IsMatchAsDefault(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsMatchAsDefault());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_Qualifiers(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Qualifiers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_ValueAsString(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ValueAsString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_Kind(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceCandidate(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceCandidate[] = {
        { "get_qualifier_value", (PyCFunction)ResourceCandidate_GetQualifierValue, METH_VARARGS, nullptr },
        { "get_value_as_file_async", (PyCFunction)ResourceCandidate_GetValueAsFileAsync, METH_VARARGS, nullptr },
        { "get_value_as_stream_async", (PyCFunction)ResourceCandidate_GetValueAsStreamAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceCandidate, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceCandidate[] = {
        { const_cast<char*>("is_default"), (getter)ResourceCandidate_get_IsDefault, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_match"), (getter)ResourceCandidate_get_IsMatch, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_match_as_default"), (getter)ResourceCandidate_get_IsMatchAsDefault, nullptr, nullptr, nullptr },
        { const_cast<char*>("qualifiers"), (getter)ResourceCandidate_get_Qualifiers, nullptr, nullptr, nullptr },
        { const_cast<char*>("value_as_string"), (getter)ResourceCandidate_get_ValueAsString, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)ResourceCandidate_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceCandidate[] = 
    {
        { Py_tp_new, _new_ResourceCandidate },
        { Py_tp_dealloc, _dealloc_ResourceCandidate },
        { Py_tp_methods, _methods_ResourceCandidate },
        { Py_tp_getset, _getset_ResourceCandidate },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceCandidate =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceCandidate",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceCandidate
    };

    // ----- ResourceCandidateVectorView class --------------------
    constexpr const char* const _type_name_ResourceCandidateVectorView = "ResourceCandidateVectorView";

    static PyObject* _new_ResourceCandidateVectorView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceCandidateVectorView);
        return nullptr;
    }

    static void _dealloc_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceCandidateVectorView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_GetAt(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>::size_type>(args, 1);
                winrt::com_array<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate> param1 ( param1_count, py::empty_instance<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>::get() );

                auto return_value = self->obj.GetMany(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_IndexOf(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceCandidateVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceCandidateVectorView[] = {
        { "first", (PyCFunction)ResourceCandidateVectorView_First, METH_VARARGS, nullptr },
        { "get_at", (PyCFunction)ResourceCandidateVectorView_GetAt, METH_VARARGS, nullptr },
        { "get_many", (PyCFunction)ResourceCandidateVectorView_GetMany, METH_VARARGS, nullptr },
        { "index_of", (PyCFunction)ResourceCandidateVectorView_IndexOf, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceCandidateVectorView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceCandidateVectorView[] = {
        { const_cast<char*>("size"), (getter)ResourceCandidateVectorView_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceCandidateVectorView[] = 
    {
        { Py_tp_new, _new_ResourceCandidateVectorView },
        { Py_tp_dealloc, _dealloc_ResourceCandidateVectorView },
        { Py_tp_methods, _methods_ResourceCandidateVectorView },
        { Py_tp_getset, _getset_ResourceCandidateVectorView },
        { Py_tp_iter, _iterator_ResourceCandidateVectorView },
        { Py_sq_length, _seq_length_ResourceCandidateVectorView },
        { Py_sq_item, _seq_item_ResourceCandidateVectorView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceCandidateVectorView =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceCandidateVectorView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceCandidateVectorView
    };

    // ----- ResourceContext class --------------------
    constexpr const char* const _type_name_ResourceContext = "ResourceContext";

    static PyObject* _new_ResourceContext(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ResourceContext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceContext_Clone(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Clone());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_CreateMatchingContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::CreateMatchingContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_GetForUIContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::UIContext>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::GetForUIContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_GetForViewIndependentUse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::GetForViewIndependentUse());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_OverrideToMatch(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>>(args, 0);

                self->obj.OverrideToMatch(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_Reset(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Reset();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                self->obj.Reset(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_ResetGlobalQualifierValues(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::ResetGlobalQualifierValues();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::ResetGlobalQualifierValues(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_SetGlobalQualifierValue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::SetGlobalQualifierValue(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierPersistence>(args, 2);

                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::SetGlobalQualifierValue(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_get_Languages(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceContext_put_Languages(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring>>(arg);

            self->obj.Languages(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceContext_get_QualifierValues(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.QualifierValues());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceContext[] = {
        { "clone", (PyCFunction)ResourceContext_Clone, METH_VARARGS, nullptr },
        { "create_matching_context", (PyCFunction)ResourceContext_CreateMatchingContext, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_current_view", (PyCFunction)ResourceContext_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_u_i_context", (PyCFunction)ResourceContext_GetForUIContext, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_view_independent_use", (PyCFunction)ResourceContext_GetForViewIndependentUse, METH_VARARGS | METH_STATIC, nullptr },
        { "override_to_match", (PyCFunction)ResourceContext_OverrideToMatch, METH_VARARGS, nullptr },
        { "reset", (PyCFunction)ResourceContext_Reset, METH_VARARGS, nullptr },
        { "reset_global_qualifier_values", (PyCFunction)ResourceContext_ResetGlobalQualifierValues, METH_VARARGS | METH_STATIC, nullptr },
        { "set_global_qualifier_value", (PyCFunction)ResourceContext_SetGlobalQualifierValue, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_ResourceContext, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceContext[] = {
        { const_cast<char*>("languages"), (getter)ResourceContext_get_Languages, (setter)ResourceContext_put_Languages, nullptr, nullptr },
        { const_cast<char*>("qualifier_values"), (getter)ResourceContext_get_QualifierValues, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceContext[] = 
    {
        { Py_tp_new, _new_ResourceContext },
        { Py_tp_dealloc, _dealloc_ResourceContext },
        { Py_tp_methods, _methods_ResourceContext },
        { Py_tp_getset, _getset_ResourceContext },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceContext =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceContext",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceContext
    };

    // ----- ResourceContextLanguagesVectorView class --------------------
    constexpr const char* const _type_name_ResourceContextLanguagesVectorView = "ResourceContextLanguagesVectorView";

    static PyObject* _new_ResourceContextLanguagesVectorView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceContextLanguagesVectorView);
        return nullptr;
    }

    static void _dealloc_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceContextLanguagesVectorView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_GetAt(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::hstring>::size_type>(args, 1);
                winrt::com_array<winrt::hstring> param1 ( param1_count, py::empty_instance<winrt::hstring>::get() );

                auto return_value = self->obj.GetMany(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_IndexOf(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceContextLanguagesVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceContextLanguagesVectorView[] = {
        { "first", (PyCFunction)ResourceContextLanguagesVectorView_First, METH_VARARGS, nullptr },
        { "get_at", (PyCFunction)ResourceContextLanguagesVectorView_GetAt, METH_VARARGS, nullptr },
        { "get_many", (PyCFunction)ResourceContextLanguagesVectorView_GetMany, METH_VARARGS, nullptr },
        { "index_of", (PyCFunction)ResourceContextLanguagesVectorView_IndexOf, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceContextLanguagesVectorView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceContextLanguagesVectorView[] = {
        { const_cast<char*>("size"), (getter)ResourceContextLanguagesVectorView_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceContextLanguagesVectorView[] = 
    {
        { Py_tp_new, _new_ResourceContextLanguagesVectorView },
        { Py_tp_dealloc, _dealloc_ResourceContextLanguagesVectorView },
        { Py_tp_methods, _methods_ResourceContextLanguagesVectorView },
        { Py_tp_getset, _getset_ResourceContextLanguagesVectorView },
        { Py_tp_iter, _iterator_ResourceContextLanguagesVectorView },
        { Py_sq_length, _seq_length_ResourceContextLanguagesVectorView },
        { Py_sq_item, _seq_item_ResourceContextLanguagesVectorView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceContextLanguagesVectorView =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceContextLanguagesVectorView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceContextLanguagesVectorView
    };

    // ----- ResourceManager class --------------------
    constexpr const char* const _type_name_ResourceManager = "ResourceManager";

    static PyObject* _new_ResourceManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceManager);
        return nullptr;
    }

    static void _dealloc_ResourceManager(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceManager_GetAllNamedResourcesForPackage(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>(args, 1);

                return py::convert(self->obj.GetAllNamedResourcesForPackage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_GetAllSubtreesForPackage(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>(args, 1);

                return py::convert(self->obj.GetAllSubtreesForPackage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_IsResourceReference(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceManager::IsResourceReference(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_LoadPriFiles(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageFile>>(args, 0);

                self->obj.LoadPriFiles(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_UnloadPriFiles(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageFile>>(args, 0);

                self->obj.UnloadPriFiles(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_AllResourceMaps(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllResourceMaps());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_DefaultContext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_MainResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MainResourceMap());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceManager::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceManager[] = {
        { "get_all_named_resources_for_package", (PyCFunction)ResourceManager_GetAllNamedResourcesForPackage, METH_VARARGS, nullptr },
        { "get_all_subtrees_for_package", (PyCFunction)ResourceManager_GetAllSubtreesForPackage, METH_VARARGS, nullptr },
        { "is_resource_reference", (PyCFunction)ResourceManager_IsResourceReference, METH_VARARGS | METH_STATIC, nullptr },
        { "load_pri_files", (PyCFunction)ResourceManager_LoadPriFiles, METH_VARARGS, nullptr },
        { "unload_pri_files", (PyCFunction)ResourceManager_UnloadPriFiles, METH_VARARGS, nullptr },
        { "get_current", (PyCFunction)ResourceManager_get_Current, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_ResourceManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceManager[] = {
        { const_cast<char*>("all_resource_maps"), (getter)ResourceManager_get_AllResourceMaps, nullptr, nullptr, nullptr },
        { const_cast<char*>("default_context"), (getter)ResourceManager_get_DefaultContext, nullptr, nullptr, nullptr },
        { const_cast<char*>("main_resource_map"), (getter)ResourceManager_get_MainResourceMap, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceManager[] = 
    {
        { Py_tp_new, _new_ResourceManager },
        { Py_tp_dealloc, _dealloc_ResourceManager },
        { Py_tp_methods, _methods_ResourceManager },
        { Py_tp_getset, _getset_ResourceManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceManager =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceManager",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceManager
    };

    // ----- ResourceMap class --------------------
    constexpr const char* const _type_name_ResourceMap = "ResourceMap";

    static PyObject* _new_ResourceMap(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceMap);
        return nullptr;
    }

    static void _dealloc_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceMap_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_GetSubtree(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetSubtree(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_GetValue(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>(args, 1);

                return py::convert(self->obj.GetValue(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_Split(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource> param0 { nullptr };
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource> param1 { nullptr };

                self->obj.Split(param0, param1);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out0.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_get_Uri(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceMap_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _map_length_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* key) noexcept
    {
        try
        {
            return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMap[] = {
        { "first", (PyCFunction)ResourceMap_First, METH_VARARGS, nullptr },
        { "get_subtree", (PyCFunction)ResourceMap_GetSubtree, METH_VARARGS, nullptr },
        { "get_value", (PyCFunction)ResourceMap_GetValue, METH_VARARGS, nullptr },
        { "has_key", (PyCFunction)ResourceMap_HasKey, METH_VARARGS, nullptr },
        { "lookup", (PyCFunction)ResourceMap_Lookup, METH_VARARGS, nullptr },
        { "split", (PyCFunction)ResourceMap_Split, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceMap, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceMap[] = {
        { const_cast<char*>("uri"), (getter)ResourceMap_get_Uri, nullptr, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)ResourceMap_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceMap[] = 
    {
        { Py_tp_new, _new_ResourceMap },
        { Py_tp_dealloc, _dealloc_ResourceMap },
        { Py_tp_methods, _methods_ResourceMap },
        { Py_tp_getset, _getset_ResourceMap },
        { Py_tp_iter, _iterator_ResourceMap },
        { Py_mp_length, _map_length_ResourceMap },
        { Py_mp_subscript, _map_subscript_ResourceMap },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceMap =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceMap",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMap
    };

    // ----- ResourceMapIterator class --------------------
    constexpr const char* const _type_name_ResourceMapIterator = "ResourceMapIterator";

    static PyObject* _new_ResourceMapIterator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceMapIterator);
        return nullptr;
    }

    static void _dealloc_ResourceMapIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceMapIterator_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource>>::size_type>(args, 0);
                winrt::com_array<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource>> param0 ( param0_count, py::empty_instance<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource>>::get() );

                auto return_value = self->obj.GetMany(param0);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out0.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapIterator_MoveNext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.MoveNext());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapIterator_get_Current(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceMapIterator_get_HasCurrent(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasCurrent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceMapIterator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMapIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self) noexcept
    {
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _iterator_next_ResourceMapIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self) noexcept
    {
        try
        {
            if (self->obj.HasCurrent())
            {
                auto cur = self->obj.Current();
                self->obj.MoveNext();
                return py::convert(cur);
            }
            else
            {
                return nullptr;
            }}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMapIterator[] = {
        { "get_many", (PyCFunction)ResourceMapIterator_GetMany, METH_VARARGS, nullptr },
        { "move_next", (PyCFunction)ResourceMapIterator_MoveNext, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceMapIterator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceMapIterator[] = {
        { const_cast<char*>("current"), (getter)ResourceMapIterator_get_Current, nullptr, nullptr, nullptr },
        { const_cast<char*>("has_current"), (getter)ResourceMapIterator_get_HasCurrent, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceMapIterator[] = 
    {
        { Py_tp_new, _new_ResourceMapIterator },
        { Py_tp_dealloc, _dealloc_ResourceMapIterator },
        { Py_tp_methods, _methods_ResourceMapIterator },
        { Py_tp_getset, _getset_ResourceMapIterator },
        { Py_tp_iter, _iterator_ResourceMapIterator },
        { Py_tp_iternext, _iterator_next_ResourceMapIterator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceMapIterator =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceMapIterator",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMapIterator
    };

    // ----- ResourceMapMapView class --------------------
    constexpr const char* const _type_name_ResourceMapMapView = "ResourceMapMapView";

    static PyObject* _new_ResourceMapMapView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceMapMapView);
        return nullptr;
    }

    static void _dealloc_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceMapMapView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_Split(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap> param0 { nullptr };
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap> param1 { nullptr };

                self->obj.Split(param0, param1);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out0.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceMapMapView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _map_length_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* key) noexcept
    {
        try
        {
            return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMapMapView[] = {
        { "first", (PyCFunction)ResourceMapMapView_First, METH_VARARGS, nullptr },
        { "has_key", (PyCFunction)ResourceMapMapView_HasKey, METH_VARARGS, nullptr },
        { "lookup", (PyCFunction)ResourceMapMapView_Lookup, METH_VARARGS, nullptr },
        { "split", (PyCFunction)ResourceMapMapView_Split, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceMapMapView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceMapMapView[] = {
        { const_cast<char*>("size"), (getter)ResourceMapMapView_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceMapMapView[] = 
    {
        { Py_tp_new, _new_ResourceMapMapView },
        { Py_tp_dealloc, _dealloc_ResourceMapMapView },
        { Py_tp_methods, _methods_ResourceMapMapView },
        { Py_tp_getset, _getset_ResourceMapMapView },
        { Py_tp_iter, _iterator_ResourceMapMapView },
        { Py_mp_length, _map_length_ResourceMapMapView },
        { Py_mp_subscript, _map_subscript_ResourceMapMapView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceMapMapView =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceMapMapView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMapMapView
    };

    // ----- ResourceMapMapViewIterator class --------------------
    constexpr const char* const _type_name_ResourceMapMapViewIterator = "ResourceMapMapViewIterator";

    static PyObject* _new_ResourceMapMapViewIterator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceMapMapViewIterator);
        return nullptr;
    }

    static void _dealloc_ResourceMapMapViewIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceMapMapViewIterator_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0_count = py::convert_to<winrt::com_array<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>>::size_type>(args, 0);
                winrt::com_array<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>> param0 ( param0_count, py::empty_instance<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>>::get() );

                auto return_value = self->obj.GetMany(param0);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out0.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapViewIterator_MoveNext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.MoveNext());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapViewIterator_get_Current(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapViewIterator_get_HasCurrent(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasCurrent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceMapMapViewIterator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMapMapViewIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self) noexcept
    {
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _iterator_next_ResourceMapMapViewIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self) noexcept
    {
        try
        {
            if (self->obj.HasCurrent())
            {
                auto cur = self->obj.Current();
                self->obj.MoveNext();
                return py::convert(cur);
            }
            else
            {
                return nullptr;
            }}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMapMapViewIterator[] = {
        { "get_many", (PyCFunction)ResourceMapMapViewIterator_GetMany, METH_VARARGS, nullptr },
        { "move_next", (PyCFunction)ResourceMapMapViewIterator_MoveNext, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceMapMapViewIterator, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceMapMapViewIterator[] = {
        { const_cast<char*>("current"), (getter)ResourceMapMapViewIterator_get_Current, nullptr, nullptr, nullptr },
        { const_cast<char*>("has_current"), (getter)ResourceMapMapViewIterator_get_HasCurrent, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceMapMapViewIterator[] = 
    {
        { Py_tp_new, _new_ResourceMapMapViewIterator },
        { Py_tp_dealloc, _dealloc_ResourceMapMapViewIterator },
        { Py_tp_methods, _methods_ResourceMapMapViewIterator },
        { Py_tp_getset, _getset_ResourceMapMapViewIterator },
        { Py_tp_iter, _iterator_ResourceMapMapViewIterator },
        { Py_tp_iternext, _iterator_next_ResourceMapMapViewIterator },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceMapMapViewIterator =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceMapMapViewIterator",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMapMapViewIterator
    };

    // ----- ResourceQualifier class --------------------
    constexpr const char* const _type_name_ResourceQualifier = "ResourceQualifier";

    static PyObject* _new_ResourceQualifier(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceQualifier);
        return nullptr;
    }

    static void _dealloc_ResourceQualifier(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceQualifier_get_IsDefault(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDefault());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_IsMatch(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsMatch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_QualifierName(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.QualifierName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_QualifierValue(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.QualifierValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_Score(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Score());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceQualifier(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceQualifier[] = {
        { "_from", (PyCFunction)_from_ResourceQualifier, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceQualifier[] = {
        { const_cast<char*>("is_default"), (getter)ResourceQualifier_get_IsDefault, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_match"), (getter)ResourceQualifier_get_IsMatch, nullptr, nullptr, nullptr },
        { const_cast<char*>("qualifier_name"), (getter)ResourceQualifier_get_QualifierName, nullptr, nullptr, nullptr },
        { const_cast<char*>("qualifier_value"), (getter)ResourceQualifier_get_QualifierValue, nullptr, nullptr, nullptr },
        { const_cast<char*>("score"), (getter)ResourceQualifier_get_Score, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceQualifier[] = 
    {
        { Py_tp_new, _new_ResourceQualifier },
        { Py_tp_dealloc, _dealloc_ResourceQualifier },
        { Py_tp_methods, _methods_ResourceQualifier },
        { Py_tp_getset, _getset_ResourceQualifier },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceQualifier =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceQualifier",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifier
    };

    // ----- ResourceQualifierMapView class --------------------
    constexpr const char* const _type_name_ResourceQualifierMapView = "ResourceQualifierMapView";

    static PyObject* _new_ResourceQualifierMapView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceQualifierMapView);
        return nullptr;
    }

    static void _dealloc_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceQualifierMapView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_Split(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring> param0 { nullptr };
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring> param1 { nullptr };

                self->obj.Split(param0, param1);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out0.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceQualifierMapView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _map_length_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* key) noexcept
    {
        try
        {
            return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceQualifierMapView[] = {
        { "first", (PyCFunction)ResourceQualifierMapView_First, METH_VARARGS, nullptr },
        { "has_key", (PyCFunction)ResourceQualifierMapView_HasKey, METH_VARARGS, nullptr },
        { "lookup", (PyCFunction)ResourceQualifierMapView_Lookup, METH_VARARGS, nullptr },
        { "split", (PyCFunction)ResourceQualifierMapView_Split, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceQualifierMapView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceQualifierMapView[] = {
        { const_cast<char*>("size"), (getter)ResourceQualifierMapView_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceQualifierMapView[] = 
    {
        { Py_tp_new, _new_ResourceQualifierMapView },
        { Py_tp_dealloc, _dealloc_ResourceQualifierMapView },
        { Py_tp_methods, _methods_ResourceQualifierMapView },
        { Py_tp_getset, _getset_ResourceQualifierMapView },
        { Py_tp_iter, _iterator_ResourceQualifierMapView },
        { Py_mp_length, _map_length_ResourceQualifierMapView },
        { Py_mp_subscript, _map_subscript_ResourceQualifierMapView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceQualifierMapView =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceQualifierMapView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifierMapView
    };

    // ----- ResourceQualifierObservableMap class --------------------
    constexpr const char* const _type_name_ResourceQualifierObservableMap = "ResourceQualifierObservableMap";

    static PyObject* _new_ResourceQualifierObservableMap(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceQualifierObservableMap);
        return nullptr;
    }

    static void _dealloc_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceQualifierObservableMap_Clear(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_GetView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_Insert(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Insert(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_Remove(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_add_MapChanged(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::MapChangedEventHandler<winrt::hstring, winrt::hstring>>(arg);

            return py::convert(self->obj.MapChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_remove_MapChanged(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MapChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceQualifierObservableMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _map_length_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* key) noexcept
    {
        try
        {
            return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_assign_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* key, PyObject* value) noexcept
    {
        try
        {
            auto _key = py::convert_to<winrt::hstring>(key);
            if (value == nullptr) { self->obj.Remove(_key); }
            else { self->obj.Insert(_key, py::convert_to<winrt::hstring>(value)); }
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_ResourceQualifierObservableMap[] = {
        { "clear", (PyCFunction)ResourceQualifierObservableMap_Clear, METH_VARARGS, nullptr },
        { "first", (PyCFunction)ResourceQualifierObservableMap_First, METH_VARARGS, nullptr },
        { "get_view", (PyCFunction)ResourceQualifierObservableMap_GetView, METH_VARARGS, nullptr },
        { "has_key", (PyCFunction)ResourceQualifierObservableMap_HasKey, METH_VARARGS, nullptr },
        { "insert", (PyCFunction)ResourceQualifierObservableMap_Insert, METH_VARARGS, nullptr },
        { "lookup", (PyCFunction)ResourceQualifierObservableMap_Lookup, METH_VARARGS, nullptr },
        { "remove", (PyCFunction)ResourceQualifierObservableMap_Remove, METH_VARARGS, nullptr },
        { "add_map_changed", (PyCFunction)ResourceQualifierObservableMap_add_MapChanged, METH_O, nullptr },
        { "remove_map_changed", (PyCFunction)ResourceQualifierObservableMap_remove_MapChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ResourceQualifierObservableMap, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceQualifierObservableMap[] = {
        { const_cast<char*>("size"), (getter)ResourceQualifierObservableMap_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceQualifierObservableMap[] = 
    {
        { Py_tp_new, _new_ResourceQualifierObservableMap },
        { Py_tp_dealloc, _dealloc_ResourceQualifierObservableMap },
        { Py_tp_methods, _methods_ResourceQualifierObservableMap },
        { Py_tp_getset, _getset_ResourceQualifierObservableMap },
        { Py_tp_iter, _iterator_ResourceQualifierObservableMap },
        { Py_mp_length, _map_length_ResourceQualifierObservableMap },
        { Py_mp_subscript, _map_subscript_ResourceQualifierObservableMap },
        { Py_mp_ass_subscript, _map_assign_ResourceQualifierObservableMap },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceQualifierObservableMap =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceQualifierObservableMap",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifierObservableMap
    };

    // ----- ResourceQualifierVectorView class --------------------
    constexpr const char* const _type_name_ResourceQualifierVectorView = "ResourceQualifierVectorView";

    static PyObject* _new_ResourceQualifierVectorView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ResourceQualifierVectorView);
        return nullptr;
    }

    static void _dealloc_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ResourceQualifierVectorView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_GetAt(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>::size_type>(args, 1);
                winrt::com_array<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier> param1 ( param1_count, py::empty_instance<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>::get() );

                auto return_value = self->obj.GetMany(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_IndexOf(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ResourceQualifierVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceQualifierVectorView[] = {
        { "first", (PyCFunction)ResourceQualifierVectorView_First, METH_VARARGS, nullptr },
        { "get_at", (PyCFunction)ResourceQualifierVectorView_GetAt, METH_VARARGS, nullptr },
        { "get_many", (PyCFunction)ResourceQualifierVectorView_GetMany, METH_VARARGS, nullptr },
        { "index_of", (PyCFunction)ResourceQualifierVectorView_IndexOf, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_ResourceQualifierVectorView, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ResourceQualifierVectorView[] = {
        { const_cast<char*>("size"), (getter)ResourceQualifierVectorView_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceQualifierVectorView[] = 
    {
        { Py_tp_new, _new_ResourceQualifierVectorView },
        { Py_tp_dealloc, _dealloc_ResourceQualifierVectorView },
        { Py_tp_methods, _methods_ResourceQualifierVectorView },
        { Py_tp_getset, _getset_ResourceQualifierVectorView },
        { Py_tp_iter, _iterator_ResourceQualifierVectorView },
        { Py_sq_length, _seq_length_ResourceQualifierVectorView },
        { Py_sq_item, _seq_item_ResourceQualifierVectorView },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceQualifierVectorView =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceQualifierVectorView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifierVectorView
    };

    // ----- ResourceLayoutInfo struct --------------------
    constexpr const char* const _type_name_ResourceLayoutInfo = "ResourceLayoutInfo";

    PyObject* _new_ResourceLayoutInfo(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        if ((tuple_size == 1) && (kwds == nullptr))
        {
            auto arg = PyTuple_GetItem(args, 0);
            if (PyDict_Check(arg))
            {
                try
                {
                    auto return_value = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>(arg);
                    return py::convert(return_value);
                }
                catch (...)
                {
                    py::to_PyErr();
                    return nullptr;
                }
            }
        }

        uint32_t _MajorVersion{};
        uint32_t _MinorVersion{};
        uint32_t _ResourceSubtreeCount{};
        uint32_t _NamedResourceCount{};
        int32_t _Checksum{};

        static const char* kwlist[] = {"major_version", "minor_version", "resource_subtree_count", "named_resource_count", "checksum", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "IIIIi", const_cast<char**>(kwlist), &_MajorVersion, &_MinorVersion, &_ResourceSubtreeCount, &_NamedResourceCount, &_Checksum))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo return_value{ _MajorVersion, _MinorVersion, _ResourceSubtreeCount, _NamedResourceCount, _Checksum };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_ResourceLayoutInfo(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self)
    {
    }

    static PyObject* ResourceLayoutInfo_get_MajorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MajorVersion);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_MajorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.MajorVersion = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_MinorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinorVersion);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_MinorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.MinorVersion = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_ResourceSubtreeCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResourceSubtreeCount);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_ResourceSubtreeCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.ResourceSubtreeCount = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_NamedResourceCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NamedResourceCount);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_NamedResourceCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.NamedResourceCount = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_Checksum(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Checksum);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_Checksum(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            self->obj.Checksum = py::converter<int32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_ResourceLayoutInfo[] = {
        { const_cast<char*>("major_version"), (getter)ResourceLayoutInfo_get_MajorVersion, (setter)ResourceLayoutInfo_set_MajorVersion, nullptr, nullptr },
        { const_cast<char*>("minor_version"), (getter)ResourceLayoutInfo_get_MinorVersion, (setter)ResourceLayoutInfo_set_MinorVersion, nullptr, nullptr },
        { const_cast<char*>("resource_subtree_count"), (getter)ResourceLayoutInfo_get_ResourceSubtreeCount, (setter)ResourceLayoutInfo_set_ResourceSubtreeCount, nullptr, nullptr },
        { const_cast<char*>("named_resource_count"), (getter)ResourceLayoutInfo_get_NamedResourceCount, (setter)ResourceLayoutInfo_set_NamedResourceCount, nullptr, nullptr },
        { const_cast<char*>("checksum"), (getter)ResourceLayoutInfo_get_Checksum, (setter)ResourceLayoutInfo_set_Checksum, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ResourceLayoutInfo[] = 
    {
        { Py_tp_new, _new_ResourceLayoutInfo },
        { Py_tp_dealloc, _dealloc_ResourceLayoutInfo },
        { Py_tp_getset, _getset_ResourceLayoutInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ResourceLayoutInfo =
    {
        "_winrt_Windows_ApplicationModel_Resources_Core.ResourceLayoutInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceLayoutInfo
    };

    // ----- Windows.ApplicationModel.Resources.Core Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>::python_type = py::register_python_type(module, _type_name_NamedResource, &_type_spec_NamedResource, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>::python_type = py::register_python_type(module, _type_name_ResourceCandidate, &_type_spec_ResourceCandidate, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>::python_type = py::register_python_type(module, _type_name_ResourceCandidateVectorView, &_type_spec_ResourceCandidateVectorView, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>::python_type = py::register_python_type(module, _type_name_ResourceContext, &_type_spec_ResourceContext, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>::python_type = py::register_python_type(module, _type_name_ResourceContextLanguagesVectorView, &_type_spec_ResourceContextLanguagesVectorView, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>::python_type = py::register_python_type(module, _type_name_ResourceManager, &_type_spec_ResourceManager, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>::python_type = py::register_python_type(module, _type_name_ResourceMap, &_type_spec_ResourceMap, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>::python_type = py::register_python_type(module, _type_name_ResourceMapIterator, &_type_spec_ResourceMapIterator, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>::python_type = py::register_python_type(module, _type_name_ResourceMapMapView, &_type_spec_ResourceMapMapView, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>::python_type = py::register_python_type(module, _type_name_ResourceMapMapViewIterator, &_type_spec_ResourceMapMapViewIterator, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>::python_type = py::register_python_type(module, _type_name_ResourceQualifier, &_type_spec_ResourceQualifier, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>::python_type = py::register_python_type(module, _type_name_ResourceQualifierMapView, &_type_spec_ResourceQualifierMapView, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>::python_type = py::register_python_type(module, _type_name_ResourceQualifierObservableMap, &_type_spec_ResourceQualifierObservableMap, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>::python_type = py::register_python_type(module, _type_name_ResourceQualifierVectorView, &_type_spec_ResourceQualifierVectorView, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>::python_type = py::register_python_type(module, _type_name_ResourceLayoutInfo, &_type_spec_ResourceLayoutInfo, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.Resources.Core");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_Resources_Core",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::Resources::Core

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_Resources_Core (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::Resources::Core::module_def);
}
