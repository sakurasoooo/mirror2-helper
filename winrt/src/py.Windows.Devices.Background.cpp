// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Background.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Background::DeviceServicingDetails>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Background::DeviceUseDetails>::python_type;

namespace py::cpp::Windows::Devices::Background
{
    // ----- DeviceServicingDetails class --------------------
    constexpr const char* const _type_name_DeviceServicingDetails = "DeviceServicingDetails";

    static PyObject* _new_DeviceServicingDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DeviceServicingDetails);
        return nullptr;
    }

    static void _dealloc_DeviceServicingDetails(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DeviceServicingDetails_get_Arguments(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeviceServicingDetails_get_DeviceId(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeviceServicingDetails_get_ExpectedDuration(py::wrapper::Windows::Devices::Background::DeviceServicingDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExpectedDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DeviceServicingDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Background::DeviceServicingDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeviceServicingDetails[] = {
        { "_from", (PyCFunction)_from_DeviceServicingDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DeviceServicingDetails[] = {
        { const_cast<char*>("arguments"), (getter)DeviceServicingDetails_get_Arguments, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)DeviceServicingDetails_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("expected_duration"), (getter)DeviceServicingDetails_get_ExpectedDuration, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DeviceServicingDetails[] = 
    {
        { Py_tp_new, _new_DeviceServicingDetails },
        { Py_tp_dealloc, _dealloc_DeviceServicingDetails },
        { Py_tp_methods, _methods_DeviceServicingDetails },
        { Py_tp_getset, _getset_DeviceServicingDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DeviceServicingDetails =
    {
        "_winrt_Windows_Devices_Background.DeviceServicingDetails",
        sizeof(py::wrapper::Windows::Devices::Background::DeviceServicingDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeviceServicingDetails
    };

    // ----- DeviceUseDetails class --------------------
    constexpr const char* const _type_name_DeviceUseDetails = "DeviceUseDetails";

    static PyObject* _new_DeviceUseDetails(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DeviceUseDetails);
        return nullptr;
    }

    static void _dealloc_DeviceUseDetails(py::wrapper::Windows::Devices::Background::DeviceUseDetails* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DeviceUseDetails_get_Arguments(py::wrapper::Windows::Devices::Background::DeviceUseDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DeviceUseDetails_get_DeviceId(py::wrapper::Windows::Devices::Background::DeviceUseDetails* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DeviceUseDetails(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Background::DeviceUseDetails>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DeviceUseDetails[] = {
        { "_from", (PyCFunction)_from_DeviceUseDetails, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DeviceUseDetails[] = {
        { const_cast<char*>("arguments"), (getter)DeviceUseDetails_get_Arguments, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)DeviceUseDetails_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DeviceUseDetails[] = 
    {
        { Py_tp_new, _new_DeviceUseDetails },
        { Py_tp_dealloc, _dealloc_DeviceUseDetails },
        { Py_tp_methods, _methods_DeviceUseDetails },
        { Py_tp_getset, _getset_DeviceUseDetails },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DeviceUseDetails =
    {
        "_winrt_Windows_Devices_Background.DeviceUseDetails",
        sizeof(py::wrapper::Windows::Devices::Background::DeviceUseDetails),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DeviceUseDetails
    };

    // ----- Windows.Devices.Background Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Background::DeviceServicingDetails>::python_type = py::register_python_type(module, _type_name_DeviceServicingDetails, &_type_spec_DeviceServicingDetails, bases.get());
            py::winrt_type<winrt::Windows::Devices::Background::DeviceUseDetails>::python_type = py::register_python_type(module, _type_name_DeviceUseDetails, &_type_spec_DeviceUseDetails, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Background");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Background",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Background

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Background (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Background::module_def);
}
