// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Globalization.h"

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::ApplicationLanguages>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::Calendar>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::CalendarIdentifiers>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::ClockIdentifiers>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::CurrencyAmount>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::CurrencyIdentifiers>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::GeographicRegion>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::Language>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumeralSystemIdentifiers>::python_type;

namespace py::cpp::Windows::Globalization
{
    // ----- ApplicationLanguages class --------------------
    constexpr const char* const _type_name_ApplicationLanguages = "ApplicationLanguages";

    static PyObject* _new_ApplicationLanguages(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ApplicationLanguages);
        return nullptr;
    }

    static PyObject* ApplicationLanguages_GetLanguagesForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Globalization::ApplicationLanguages::GetLanguagesForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ApplicationLanguages_get_PrimaryLanguageOverride(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::ApplicationLanguages::PrimaryLanguageOverride());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationLanguages_put_PrimaryLanguageOverride(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            winrt::Windows::Globalization::ApplicationLanguages::PrimaryLanguageOverride(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationLanguages_get_Languages(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::ApplicationLanguages::Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ApplicationLanguages_get_ManifestLanguages(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::ApplicationLanguages::ManifestLanguages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationLanguages[] = {
        { "get_languages_for_user", (PyCFunction)ApplicationLanguages_GetLanguagesForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "get_primary_language_override", (PyCFunction)ApplicationLanguages_get_PrimaryLanguageOverride, METH_NOARGS | METH_STATIC, nullptr },
        { "put_primary_language_override", (PyCFunction)ApplicationLanguages_put_PrimaryLanguageOverride, METH_O | METH_STATIC, nullptr },
        { "get_languages", (PyCFunction)ApplicationLanguages_get_Languages, METH_NOARGS | METH_STATIC, nullptr },
        { "get_manifest_languages", (PyCFunction)ApplicationLanguages_get_ManifestLanguages, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ApplicationLanguages[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ApplicationLanguages[] = 
    {
        { Py_tp_new, _new_ApplicationLanguages },
        { Py_tp_methods, _methods_ApplicationLanguages },
        { Py_tp_getset, _getset_ApplicationLanguages },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ApplicationLanguages =
    {
        "_winrt_Windows_Globalization.ApplicationLanguages",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationLanguages
    };

    // ----- Calendar class --------------------
    constexpr const char* const _type_name_Calendar = "Calendar";

    static PyObject* _new_Calendar(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                winrt::Windows::Globalization::Calendar instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                winrt::Windows::Globalization::Calendar instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Globalization::Calendar instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::Calendar instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Calendar(py::wrapper::Windows::Globalization::Calendar* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Calendar_AddDays(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddDays(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddEras(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddEras(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddHours(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddHours(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddMinutes(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddMinutes(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddMonths(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddMonths(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddNanoseconds(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddNanoseconds(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddPeriods(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddPeriods(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddSeconds(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddSeconds(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddWeeks(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddWeeks(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_AddYears(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                self->obj.AddYears(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_ChangeCalendarSystem(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.ChangeCalendarSystem(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_ChangeClock(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.ChangeClock(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_ChangeTimeZone(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.ChangeTimeZone(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_Clone(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Clone());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_Compare(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Globalization::Calendar>(args, 0);

                return py::convert(self->obj.Compare(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_CompareDateTime(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 0);

                return py::convert(self->obj.CompareDateTime(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_CopyTo(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Globalization::Calendar>(args, 0);

                self->obj.CopyTo(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_DayAsPaddedString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.DayAsPaddedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_DayAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DayAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_DayOfWeekAsSoloString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DayOfWeekAsSoloString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.DayOfWeekAsSoloString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_DayOfWeekAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.DayOfWeekAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.DayOfWeekAsString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_EraAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.EraAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.EraAsString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_GetCalendarSystem(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCalendarSystem());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_GetClock(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetClock());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_GetDateTime(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDateTime());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_GetTimeZone(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetTimeZone());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_HourAsPaddedString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.HourAsPaddedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_HourAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.HourAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_MinuteAsPaddedString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.MinuteAsPaddedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_MinuteAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.MinuteAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_MonthAsNumericString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.MonthAsNumericString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_MonthAsPaddedNumericString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.MonthAsPaddedNumericString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_MonthAsSoloString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.MonthAsSoloString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.MonthAsSoloString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_MonthAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.MonthAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.MonthAsString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_NanosecondAsPaddedString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.NanosecondAsPaddedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_NanosecondAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.NanosecondAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_PeriodAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PeriodAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.PeriodAsString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_SecondAsPaddedString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.SecondAsPaddedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_SecondAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SecondAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_SetDateTime(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 0);

                self->obj.SetDateTime(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_SetToMax(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetToMax();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_SetToMin(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetToMin();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_SetToNow(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.SetToNow();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_TimeZoneAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TimeZoneAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.TimeZoneAsString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_YearAsPaddedString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.YearAsPaddedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_YearAsString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.YearAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_YearAsTruncatedString(py::wrapper::Windows::Globalization::Calendar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.YearAsTruncatedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Calendar_get_Year(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Year());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Year(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Year(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Second(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Second());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Second(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Second(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Period(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Period());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Period(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Period(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Nanosecond(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Nanosecond());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Nanosecond(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Nanosecond(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Month(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Month());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Month(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Month(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Minute(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Minute());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Minute(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Minute(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_NumeralSystem(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_NumeralSystem(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Era(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Era());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Era(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Era(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Hour(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Hour());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Hour(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Hour(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_Day(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Day());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Calendar_put_Day(py::wrapper::Windows::Globalization::Calendar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Day(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Calendar_get_FirstSecondInThisMinute(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstSecondInThisMinute());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_FirstYearInThisEra(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstYearInThisEra());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_IsDaylightSavingTime(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDaylightSavingTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_Languages(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastDayInThisMonth(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastDayInThisMonth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastEra(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastEra());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastHourInThisPeriod(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastHourInThisPeriod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastMinuteInThisHour(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastMinuteInThisHour());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastMonthInThisYear(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastMonthInThisYear());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastSecondInThisMinute(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastSecondInThisMinute());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastYearInThisEra(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastYearInThisEra());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_DayOfWeek(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DayOfWeek());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_FirstDayInThisMonth(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstDayInThisMonth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_LastPeriodInThisDay(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastPeriodInThisDay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_FirstEra(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstEra());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfDaysInThisMonth(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfDaysInThisMonth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfEras(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfEras());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfHoursInThisPeriod(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfHoursInThisPeriod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfMinutesInThisHour(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfMinutesInThisHour());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_FirstHourInThisPeriod(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstHourInThisPeriod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfMonthsInThisYear(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfMonthsInThisYear());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfPeriodsInThisDay(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfPeriodsInThisDay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfSecondsInThisMinute(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfSecondsInThisMinute());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_NumberOfYearsInThisEra(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberOfYearsInThisEra());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_FirstMinuteInThisHour(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstMinuteInThisHour());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_ResolvedLanguage(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_FirstMonthInThisYear(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstMonthInThisYear());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Calendar_get_FirstPeriodInThisDay(py::wrapper::Windows::Globalization::Calendar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FirstPeriodInThisDay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Calendar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::Calendar>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Calendar[] = {
        { "add_days", (PyCFunction)Calendar_AddDays, METH_VARARGS, nullptr },
        { "add_eras", (PyCFunction)Calendar_AddEras, METH_VARARGS, nullptr },
        { "add_hours", (PyCFunction)Calendar_AddHours, METH_VARARGS, nullptr },
        { "add_minutes", (PyCFunction)Calendar_AddMinutes, METH_VARARGS, nullptr },
        { "add_months", (PyCFunction)Calendar_AddMonths, METH_VARARGS, nullptr },
        { "add_nanoseconds", (PyCFunction)Calendar_AddNanoseconds, METH_VARARGS, nullptr },
        { "add_periods", (PyCFunction)Calendar_AddPeriods, METH_VARARGS, nullptr },
        { "add_seconds", (PyCFunction)Calendar_AddSeconds, METH_VARARGS, nullptr },
        { "add_weeks", (PyCFunction)Calendar_AddWeeks, METH_VARARGS, nullptr },
        { "add_years", (PyCFunction)Calendar_AddYears, METH_VARARGS, nullptr },
        { "change_calendar_system", (PyCFunction)Calendar_ChangeCalendarSystem, METH_VARARGS, nullptr },
        { "change_clock", (PyCFunction)Calendar_ChangeClock, METH_VARARGS, nullptr },
        { "change_time_zone", (PyCFunction)Calendar_ChangeTimeZone, METH_VARARGS, nullptr },
        { "clone", (PyCFunction)Calendar_Clone, METH_VARARGS, nullptr },
        { "compare", (PyCFunction)Calendar_Compare, METH_VARARGS, nullptr },
        { "compare_date_time", (PyCFunction)Calendar_CompareDateTime, METH_VARARGS, nullptr },
        { "copy_to", (PyCFunction)Calendar_CopyTo, METH_VARARGS, nullptr },
        { "day_as_padded_string", (PyCFunction)Calendar_DayAsPaddedString, METH_VARARGS, nullptr },
        { "day_as_string", (PyCFunction)Calendar_DayAsString, METH_VARARGS, nullptr },
        { "day_of_week_as_solo_string", (PyCFunction)Calendar_DayOfWeekAsSoloString, METH_VARARGS, nullptr },
        { "day_of_week_as_string", (PyCFunction)Calendar_DayOfWeekAsString, METH_VARARGS, nullptr },
        { "era_as_string", (PyCFunction)Calendar_EraAsString, METH_VARARGS, nullptr },
        { "get_calendar_system", (PyCFunction)Calendar_GetCalendarSystem, METH_VARARGS, nullptr },
        { "get_clock", (PyCFunction)Calendar_GetClock, METH_VARARGS, nullptr },
        { "get_date_time", (PyCFunction)Calendar_GetDateTime, METH_VARARGS, nullptr },
        { "get_time_zone", (PyCFunction)Calendar_GetTimeZone, METH_VARARGS, nullptr },
        { "hour_as_padded_string", (PyCFunction)Calendar_HourAsPaddedString, METH_VARARGS, nullptr },
        { "hour_as_string", (PyCFunction)Calendar_HourAsString, METH_VARARGS, nullptr },
        { "minute_as_padded_string", (PyCFunction)Calendar_MinuteAsPaddedString, METH_VARARGS, nullptr },
        { "minute_as_string", (PyCFunction)Calendar_MinuteAsString, METH_VARARGS, nullptr },
        { "month_as_numeric_string", (PyCFunction)Calendar_MonthAsNumericString, METH_VARARGS, nullptr },
        { "month_as_padded_numeric_string", (PyCFunction)Calendar_MonthAsPaddedNumericString, METH_VARARGS, nullptr },
        { "month_as_solo_string", (PyCFunction)Calendar_MonthAsSoloString, METH_VARARGS, nullptr },
        { "month_as_string", (PyCFunction)Calendar_MonthAsString, METH_VARARGS, nullptr },
        { "nanosecond_as_padded_string", (PyCFunction)Calendar_NanosecondAsPaddedString, METH_VARARGS, nullptr },
        { "nanosecond_as_string", (PyCFunction)Calendar_NanosecondAsString, METH_VARARGS, nullptr },
        { "period_as_string", (PyCFunction)Calendar_PeriodAsString, METH_VARARGS, nullptr },
        { "second_as_padded_string", (PyCFunction)Calendar_SecondAsPaddedString, METH_VARARGS, nullptr },
        { "second_as_string", (PyCFunction)Calendar_SecondAsString, METH_VARARGS, nullptr },
        { "set_date_time", (PyCFunction)Calendar_SetDateTime, METH_VARARGS, nullptr },
        { "set_to_max", (PyCFunction)Calendar_SetToMax, METH_VARARGS, nullptr },
        { "set_to_min", (PyCFunction)Calendar_SetToMin, METH_VARARGS, nullptr },
        { "set_to_now", (PyCFunction)Calendar_SetToNow, METH_VARARGS, nullptr },
        { "time_zone_as_string", (PyCFunction)Calendar_TimeZoneAsString, METH_VARARGS, nullptr },
        { "year_as_padded_string", (PyCFunction)Calendar_YearAsPaddedString, METH_VARARGS, nullptr },
        { "year_as_string", (PyCFunction)Calendar_YearAsString, METH_VARARGS, nullptr },
        { "year_as_truncated_string", (PyCFunction)Calendar_YearAsTruncatedString, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_Calendar, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Calendar[] = {
        { const_cast<char*>("year"), (getter)Calendar_get_Year, (setter)Calendar_put_Year, nullptr, nullptr },
        { const_cast<char*>("second"), (getter)Calendar_get_Second, (setter)Calendar_put_Second, nullptr, nullptr },
        { const_cast<char*>("period"), (getter)Calendar_get_Period, (setter)Calendar_put_Period, nullptr, nullptr },
        { const_cast<char*>("nanosecond"), (getter)Calendar_get_Nanosecond, (setter)Calendar_put_Nanosecond, nullptr, nullptr },
        { const_cast<char*>("month"), (getter)Calendar_get_Month, (setter)Calendar_put_Month, nullptr, nullptr },
        { const_cast<char*>("minute"), (getter)Calendar_get_Minute, (setter)Calendar_put_Minute, nullptr, nullptr },
        { const_cast<char*>("numeral_system"), (getter)Calendar_get_NumeralSystem, (setter)Calendar_put_NumeralSystem, nullptr, nullptr },
        { const_cast<char*>("era"), (getter)Calendar_get_Era, (setter)Calendar_put_Era, nullptr, nullptr },
        { const_cast<char*>("hour"), (getter)Calendar_get_Hour, (setter)Calendar_put_Hour, nullptr, nullptr },
        { const_cast<char*>("day"), (getter)Calendar_get_Day, (setter)Calendar_put_Day, nullptr, nullptr },
        { const_cast<char*>("first_second_in_this_minute"), (getter)Calendar_get_FirstSecondInThisMinute, nullptr, nullptr, nullptr },
        { const_cast<char*>("first_year_in_this_era"), (getter)Calendar_get_FirstYearInThisEra, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_daylight_saving_time"), (getter)Calendar_get_IsDaylightSavingTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("languages"), (getter)Calendar_get_Languages, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_day_in_this_month"), (getter)Calendar_get_LastDayInThisMonth, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_era"), (getter)Calendar_get_LastEra, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_hour_in_this_period"), (getter)Calendar_get_LastHourInThisPeriod, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_minute_in_this_hour"), (getter)Calendar_get_LastMinuteInThisHour, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_month_in_this_year"), (getter)Calendar_get_LastMonthInThisYear, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_second_in_this_minute"), (getter)Calendar_get_LastSecondInThisMinute, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_year_in_this_era"), (getter)Calendar_get_LastYearInThisEra, nullptr, nullptr, nullptr },
        { const_cast<char*>("day_of_week"), (getter)Calendar_get_DayOfWeek, nullptr, nullptr, nullptr },
        { const_cast<char*>("first_day_in_this_month"), (getter)Calendar_get_FirstDayInThisMonth, nullptr, nullptr, nullptr },
        { const_cast<char*>("last_period_in_this_day"), (getter)Calendar_get_LastPeriodInThisDay, nullptr, nullptr, nullptr },
        { const_cast<char*>("first_era"), (getter)Calendar_get_FirstEra, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_days_in_this_month"), (getter)Calendar_get_NumberOfDaysInThisMonth, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_eras"), (getter)Calendar_get_NumberOfEras, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_hours_in_this_period"), (getter)Calendar_get_NumberOfHoursInThisPeriod, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_minutes_in_this_hour"), (getter)Calendar_get_NumberOfMinutesInThisHour, nullptr, nullptr, nullptr },
        { const_cast<char*>("first_hour_in_this_period"), (getter)Calendar_get_FirstHourInThisPeriod, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_months_in_this_year"), (getter)Calendar_get_NumberOfMonthsInThisYear, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_periods_in_this_day"), (getter)Calendar_get_NumberOfPeriodsInThisDay, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_seconds_in_this_minute"), (getter)Calendar_get_NumberOfSecondsInThisMinute, nullptr, nullptr, nullptr },
        { const_cast<char*>("number_of_years_in_this_era"), (getter)Calendar_get_NumberOfYearsInThisEra, nullptr, nullptr, nullptr },
        { const_cast<char*>("first_minute_in_this_hour"), (getter)Calendar_get_FirstMinuteInThisHour, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolved_language"), (getter)Calendar_get_ResolvedLanguage, nullptr, nullptr, nullptr },
        { const_cast<char*>("first_month_in_this_year"), (getter)Calendar_get_FirstMonthInThisYear, nullptr, nullptr, nullptr },
        { const_cast<char*>("first_period_in_this_day"), (getter)Calendar_get_FirstPeriodInThisDay, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Calendar[] = 
    {
        { Py_tp_new, _new_Calendar },
        { Py_tp_dealloc, _dealloc_Calendar },
        { Py_tp_methods, _methods_Calendar },
        { Py_tp_getset, _getset_Calendar },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Calendar =
    {
        "_winrt_Windows_Globalization.Calendar",
        sizeof(py::wrapper::Windows::Globalization::Calendar),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Calendar
    };

    // ----- CalendarIdentifiers class --------------------
    constexpr const char* const _type_name_CalendarIdentifiers = "CalendarIdentifiers";

    static PyObject* _new_CalendarIdentifiers(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CalendarIdentifiers);
        return nullptr;
    }

    static PyObject* CalendarIdentifiers_get_Julian(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Julian());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Gregorian(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Gregorian());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Hebrew(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Hebrew());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Hijri(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Hijri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Japanese(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Japanese());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Korean(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Korean());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Taiwan(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Taiwan());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Thai(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Thai());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_UmAlQura(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::UmAlQura());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_Persian(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::Persian());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_ChineseLunar(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::ChineseLunar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_VietnameseLunar(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::VietnameseLunar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_TaiwanLunar(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::TaiwanLunar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_KoreanLunar(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::KoreanLunar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CalendarIdentifiers_get_JapaneseLunar(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CalendarIdentifiers::JapaneseLunar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CalendarIdentifiers[] = {
        { "get_julian", (PyCFunction)CalendarIdentifiers_get_Julian, METH_NOARGS | METH_STATIC, nullptr },
        { "get_gregorian", (PyCFunction)CalendarIdentifiers_get_Gregorian, METH_NOARGS | METH_STATIC, nullptr },
        { "get_hebrew", (PyCFunction)CalendarIdentifiers_get_Hebrew, METH_NOARGS | METH_STATIC, nullptr },
        { "get_hijri", (PyCFunction)CalendarIdentifiers_get_Hijri, METH_NOARGS | METH_STATIC, nullptr },
        { "get_japanese", (PyCFunction)CalendarIdentifiers_get_Japanese, METH_NOARGS | METH_STATIC, nullptr },
        { "get_korean", (PyCFunction)CalendarIdentifiers_get_Korean, METH_NOARGS | METH_STATIC, nullptr },
        { "get_taiwan", (PyCFunction)CalendarIdentifiers_get_Taiwan, METH_NOARGS | METH_STATIC, nullptr },
        { "get_thai", (PyCFunction)CalendarIdentifiers_get_Thai, METH_NOARGS | METH_STATIC, nullptr },
        { "get_um_al_qura", (PyCFunction)CalendarIdentifiers_get_UmAlQura, METH_NOARGS | METH_STATIC, nullptr },
        { "get_persian", (PyCFunction)CalendarIdentifiers_get_Persian, METH_NOARGS | METH_STATIC, nullptr },
        { "get_chinese_lunar", (PyCFunction)CalendarIdentifiers_get_ChineseLunar, METH_NOARGS | METH_STATIC, nullptr },
        { "get_vietnamese_lunar", (PyCFunction)CalendarIdentifiers_get_VietnameseLunar, METH_NOARGS | METH_STATIC, nullptr },
        { "get_taiwan_lunar", (PyCFunction)CalendarIdentifiers_get_TaiwanLunar, METH_NOARGS | METH_STATIC, nullptr },
        { "get_korean_lunar", (PyCFunction)CalendarIdentifiers_get_KoreanLunar, METH_NOARGS | METH_STATIC, nullptr },
        { "get_japanese_lunar", (PyCFunction)CalendarIdentifiers_get_JapaneseLunar, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CalendarIdentifiers[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CalendarIdentifiers[] = 
    {
        { Py_tp_new, _new_CalendarIdentifiers },
        { Py_tp_methods, _methods_CalendarIdentifiers },
        { Py_tp_getset, _getset_CalendarIdentifiers },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CalendarIdentifiers =
    {
        "_winrt_Windows_Globalization.CalendarIdentifiers",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CalendarIdentifiers
    };

    // ----- ClockIdentifiers class --------------------
    constexpr const char* const _type_name_ClockIdentifiers = "ClockIdentifiers";

    static PyObject* _new_ClockIdentifiers(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ClockIdentifiers);
        return nullptr;
    }

    static PyObject* ClockIdentifiers_get_TwelveHour(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::ClockIdentifiers::TwelveHour());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ClockIdentifiers_get_TwentyFourHour(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::ClockIdentifiers::TwentyFourHour());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ClockIdentifiers[] = {
        { "get_twelve_hour", (PyCFunction)ClockIdentifiers_get_TwelveHour, METH_NOARGS | METH_STATIC, nullptr },
        { "get_twenty_four_hour", (PyCFunction)ClockIdentifiers_get_TwentyFourHour, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ClockIdentifiers[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ClockIdentifiers[] = 
    {
        { Py_tp_new, _new_ClockIdentifiers },
        { Py_tp_methods, _methods_ClockIdentifiers },
        { Py_tp_getset, _getset_ClockIdentifiers },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ClockIdentifiers =
    {
        "_winrt_Windows_Globalization.ClockIdentifiers",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ClockIdentifiers
    };

    // ----- CurrencyAmount class --------------------
    constexpr const char* const _type_name_CurrencyAmount = "CurrencyAmount";

    static PyObject* _new_CurrencyAmount(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Globalization::CurrencyAmount instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CurrencyAmount(py::wrapper::Windows::Globalization::CurrencyAmount* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CurrencyAmount_get_Amount(py::wrapper::Windows::Globalization::CurrencyAmount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Amount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyAmount_get_Currency(py::wrapper::Windows::Globalization::CurrencyAmount* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Currency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CurrencyAmount(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::CurrencyAmount>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CurrencyAmount[] = {
        { "_from", (PyCFunction)_from_CurrencyAmount, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CurrencyAmount[] = {
        { const_cast<char*>("amount"), (getter)CurrencyAmount_get_Amount, nullptr, nullptr, nullptr },
        { const_cast<char*>("currency"), (getter)CurrencyAmount_get_Currency, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CurrencyAmount[] = 
    {
        { Py_tp_new, _new_CurrencyAmount },
        { Py_tp_dealloc, _dealloc_CurrencyAmount },
        { Py_tp_methods, _methods_CurrencyAmount },
        { Py_tp_getset, _getset_CurrencyAmount },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CurrencyAmount =
    {
        "_winrt_Windows_Globalization.CurrencyAmount",
        sizeof(py::wrapper::Windows::Globalization::CurrencyAmount),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CurrencyAmount
    };

    // ----- CurrencyIdentifiers class --------------------
    constexpr const char* const _type_name_CurrencyIdentifiers = "CurrencyIdentifiers";

    static PyObject* _new_CurrencyIdentifiers(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CurrencyIdentifiers);
        return nullptr;
    }

    static PyObject* CurrencyIdentifiers_get_HNL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::HNL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_AED(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::AED());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_AFN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::AFN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ALL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ALL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_AMD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::AMD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ANG(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ANG());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_AOA(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::AOA());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ARS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ARS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_AUD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::AUD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_AWG(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::AWG());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_AZN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::AZN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BAM(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BAM());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BBD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BBD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BDT(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BDT());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BGN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BGN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BHD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BHD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BIF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BIF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BMD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BMD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BND(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BND());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BOB(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BOB());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BRL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BRL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BSD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BSD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BTN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BTN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BWP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BWP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BYR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BYR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BZD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BZD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CAD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CAD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CDF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CDF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CHF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CHF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CLP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CLP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CNY(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CNY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_COP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::COP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CRC(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CRC());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CUP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CUP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CVE(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CVE());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_CZK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::CZK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_DJF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::DJF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_DKK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::DKK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_DOP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::DOP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_DZD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::DZD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_EGP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::EGP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ERN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ERN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ETB(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ETB());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_EUR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::EUR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_FJD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::FJD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_FKP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::FKP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GBP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GBP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GEL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GEL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GHS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GHS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GIP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GIP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GMD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GMD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GNF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GNF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GTQ(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GTQ());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_GYD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::GYD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_HKD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::HKD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_RON(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::RON());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_HRK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::HRK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_HTG(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::HTG());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_HUF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::HUF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_IDR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::IDR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ILS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ILS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_INR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::INR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_IQD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::IQD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_IRR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::IRR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ISK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ISK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_JMD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::JMD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_JOD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::JOD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_JPY(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::JPY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KES(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KES());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KGS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KGS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KHR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KHR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KMF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KMF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KPW(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KPW());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KRW(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KRW());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KWD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KWD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KYD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KYD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_KZT(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::KZT());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LAK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LAK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LBP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LBP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LKR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LKR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LRD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LRD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LSL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LSL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LTL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LTL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LVL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LVL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_LYD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::LYD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MAD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MAD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MDL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MDL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MGA(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MGA());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MKD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MKD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MMK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MMK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MNT(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MNT());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MOP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MOP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MRO(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MRO());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MUR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MUR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MVR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MVR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MWK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MWK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MXN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MXN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MYR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MYR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MZN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MZN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_NAD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::NAD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_NGN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::NGN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_NIO(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::NIO());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_NOK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::NOK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_NPR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::NPR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_NZD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::NZD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_OMR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::OMR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_PAB(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::PAB());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_PEN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::PEN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_PGK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::PGK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_PHP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::PHP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_PKR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::PKR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_PLN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::PLN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_PYG(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::PYG());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_QAR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::QAR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_RSD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::RSD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_RUB(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::RUB());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_RWF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::RWF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SAR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SAR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SBD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SBD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SCR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SCR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SDG(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SDG());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SEK(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SEK());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SGD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SGD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SHP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SHP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SLL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SLL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SOS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SOS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SRD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SRD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_STD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::STD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SYP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SYP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SZL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SZL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_THB(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::THB());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TJS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TJS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TMT(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TMT());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TND(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TND());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TOP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TOP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TRY(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TRY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TTD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TTD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TWD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TWD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_TZS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::TZS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_UAH(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::UAH());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_UGX(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::UGX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_USD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::USD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_UYU(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::UYU());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_UZS(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::UZS());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_VEF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::VEF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_VND(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::VND());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_VUV(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::VUV());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_WST(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::WST());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_XAF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::XAF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_XCD(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::XCD());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_XOF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::XOF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_XPF(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::XPF());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_XXX(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::XXX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_YER(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::YER());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ZAR(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ZAR());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ZMW(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ZMW());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_ZWL(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::ZWL());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_BYN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::BYN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_SSP(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::SSP());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_STN(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::STN());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_VES(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::VES());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyIdentifiers_get_MRU(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::CurrencyIdentifiers::MRU());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CurrencyIdentifiers[] = {
        { "get_h_n_l", (PyCFunction)CurrencyIdentifiers_get_HNL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_e_d", (PyCFunction)CurrencyIdentifiers_get_AED, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_f_n", (PyCFunction)CurrencyIdentifiers_get_AFN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_l_l", (PyCFunction)CurrencyIdentifiers_get_ALL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_m_d", (PyCFunction)CurrencyIdentifiers_get_AMD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_n_g", (PyCFunction)CurrencyIdentifiers_get_ANG, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_o_a", (PyCFunction)CurrencyIdentifiers_get_AOA, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_r_s", (PyCFunction)CurrencyIdentifiers_get_ARS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_u_d", (PyCFunction)CurrencyIdentifiers_get_AUD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_w_g", (PyCFunction)CurrencyIdentifiers_get_AWG, METH_NOARGS | METH_STATIC, nullptr },
        { "get_a_z_n", (PyCFunction)CurrencyIdentifiers_get_AZN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_a_m", (PyCFunction)CurrencyIdentifiers_get_BAM, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_b_d", (PyCFunction)CurrencyIdentifiers_get_BBD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_d_t", (PyCFunction)CurrencyIdentifiers_get_BDT, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_g_n", (PyCFunction)CurrencyIdentifiers_get_BGN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_h_d", (PyCFunction)CurrencyIdentifiers_get_BHD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_i_f", (PyCFunction)CurrencyIdentifiers_get_BIF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_m_d", (PyCFunction)CurrencyIdentifiers_get_BMD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_n_d", (PyCFunction)CurrencyIdentifiers_get_BND, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_o_b", (PyCFunction)CurrencyIdentifiers_get_BOB, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_r_l", (PyCFunction)CurrencyIdentifiers_get_BRL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_s_d", (PyCFunction)CurrencyIdentifiers_get_BSD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_t_n", (PyCFunction)CurrencyIdentifiers_get_BTN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_w_p", (PyCFunction)CurrencyIdentifiers_get_BWP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_y_r", (PyCFunction)CurrencyIdentifiers_get_BYR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_z_d", (PyCFunction)CurrencyIdentifiers_get_BZD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_a_d", (PyCFunction)CurrencyIdentifiers_get_CAD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_d_f", (PyCFunction)CurrencyIdentifiers_get_CDF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_h_f", (PyCFunction)CurrencyIdentifiers_get_CHF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_l_p", (PyCFunction)CurrencyIdentifiers_get_CLP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_n_y", (PyCFunction)CurrencyIdentifiers_get_CNY, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_o_p", (PyCFunction)CurrencyIdentifiers_get_COP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_r_c", (PyCFunction)CurrencyIdentifiers_get_CRC, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_u_p", (PyCFunction)CurrencyIdentifiers_get_CUP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_v_e", (PyCFunction)CurrencyIdentifiers_get_CVE, METH_NOARGS | METH_STATIC, nullptr },
        { "get_c_z_k", (PyCFunction)CurrencyIdentifiers_get_CZK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_d_j_f", (PyCFunction)CurrencyIdentifiers_get_DJF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_d_k_k", (PyCFunction)CurrencyIdentifiers_get_DKK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_d_o_p", (PyCFunction)CurrencyIdentifiers_get_DOP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_d_z_d", (PyCFunction)CurrencyIdentifiers_get_DZD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_e_g_p", (PyCFunction)CurrencyIdentifiers_get_EGP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_e_r_n", (PyCFunction)CurrencyIdentifiers_get_ERN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_e_t_b", (PyCFunction)CurrencyIdentifiers_get_ETB, METH_NOARGS | METH_STATIC, nullptr },
        { "get_e_u_r", (PyCFunction)CurrencyIdentifiers_get_EUR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_f_j_d", (PyCFunction)CurrencyIdentifiers_get_FJD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_f_k_p", (PyCFunction)CurrencyIdentifiers_get_FKP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_b_p", (PyCFunction)CurrencyIdentifiers_get_GBP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_e_l", (PyCFunction)CurrencyIdentifiers_get_GEL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_h_s", (PyCFunction)CurrencyIdentifiers_get_GHS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_i_p", (PyCFunction)CurrencyIdentifiers_get_GIP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_m_d", (PyCFunction)CurrencyIdentifiers_get_GMD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_n_f", (PyCFunction)CurrencyIdentifiers_get_GNF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_t_q", (PyCFunction)CurrencyIdentifiers_get_GTQ, METH_NOARGS | METH_STATIC, nullptr },
        { "get_g_y_d", (PyCFunction)CurrencyIdentifiers_get_GYD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_h_k_d", (PyCFunction)CurrencyIdentifiers_get_HKD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_r_o_n", (PyCFunction)CurrencyIdentifiers_get_RON, METH_NOARGS | METH_STATIC, nullptr },
        { "get_h_r_k", (PyCFunction)CurrencyIdentifiers_get_HRK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_h_t_g", (PyCFunction)CurrencyIdentifiers_get_HTG, METH_NOARGS | METH_STATIC, nullptr },
        { "get_h_u_f", (PyCFunction)CurrencyIdentifiers_get_HUF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_i_d_r", (PyCFunction)CurrencyIdentifiers_get_IDR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_i_l_s", (PyCFunction)CurrencyIdentifiers_get_ILS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_i_n_r", (PyCFunction)CurrencyIdentifiers_get_INR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_i_q_d", (PyCFunction)CurrencyIdentifiers_get_IQD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_i_r_r", (PyCFunction)CurrencyIdentifiers_get_IRR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_i_s_k", (PyCFunction)CurrencyIdentifiers_get_ISK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_j_m_d", (PyCFunction)CurrencyIdentifiers_get_JMD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_j_o_d", (PyCFunction)CurrencyIdentifiers_get_JOD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_j_p_y", (PyCFunction)CurrencyIdentifiers_get_JPY, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_e_s", (PyCFunction)CurrencyIdentifiers_get_KES, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_g_s", (PyCFunction)CurrencyIdentifiers_get_KGS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_h_r", (PyCFunction)CurrencyIdentifiers_get_KHR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_m_f", (PyCFunction)CurrencyIdentifiers_get_KMF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_p_w", (PyCFunction)CurrencyIdentifiers_get_KPW, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_r_w", (PyCFunction)CurrencyIdentifiers_get_KRW, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_w_d", (PyCFunction)CurrencyIdentifiers_get_KWD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_y_d", (PyCFunction)CurrencyIdentifiers_get_KYD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_k_z_t", (PyCFunction)CurrencyIdentifiers_get_KZT, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_a_k", (PyCFunction)CurrencyIdentifiers_get_LAK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_b_p", (PyCFunction)CurrencyIdentifiers_get_LBP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_k_r", (PyCFunction)CurrencyIdentifiers_get_LKR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_r_d", (PyCFunction)CurrencyIdentifiers_get_LRD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_s_l", (PyCFunction)CurrencyIdentifiers_get_LSL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_t_l", (PyCFunction)CurrencyIdentifiers_get_LTL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_v_l", (PyCFunction)CurrencyIdentifiers_get_LVL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_l_y_d", (PyCFunction)CurrencyIdentifiers_get_LYD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_a_d", (PyCFunction)CurrencyIdentifiers_get_MAD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_d_l", (PyCFunction)CurrencyIdentifiers_get_MDL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_g_a", (PyCFunction)CurrencyIdentifiers_get_MGA, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_k_d", (PyCFunction)CurrencyIdentifiers_get_MKD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_m_k", (PyCFunction)CurrencyIdentifiers_get_MMK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_n_t", (PyCFunction)CurrencyIdentifiers_get_MNT, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_o_p", (PyCFunction)CurrencyIdentifiers_get_MOP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_r_o", (PyCFunction)CurrencyIdentifiers_get_MRO, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_u_r", (PyCFunction)CurrencyIdentifiers_get_MUR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_v_r", (PyCFunction)CurrencyIdentifiers_get_MVR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_w_k", (PyCFunction)CurrencyIdentifiers_get_MWK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_x_n", (PyCFunction)CurrencyIdentifiers_get_MXN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_y_r", (PyCFunction)CurrencyIdentifiers_get_MYR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_z_n", (PyCFunction)CurrencyIdentifiers_get_MZN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_n_a_d", (PyCFunction)CurrencyIdentifiers_get_NAD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_n_g_n", (PyCFunction)CurrencyIdentifiers_get_NGN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_n_i_o", (PyCFunction)CurrencyIdentifiers_get_NIO, METH_NOARGS | METH_STATIC, nullptr },
        { "get_n_o_k", (PyCFunction)CurrencyIdentifiers_get_NOK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_n_p_r", (PyCFunction)CurrencyIdentifiers_get_NPR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_n_z_d", (PyCFunction)CurrencyIdentifiers_get_NZD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_o_m_r", (PyCFunction)CurrencyIdentifiers_get_OMR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_p_a_b", (PyCFunction)CurrencyIdentifiers_get_PAB, METH_NOARGS | METH_STATIC, nullptr },
        { "get_p_e_n", (PyCFunction)CurrencyIdentifiers_get_PEN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_p_g_k", (PyCFunction)CurrencyIdentifiers_get_PGK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_p_h_p", (PyCFunction)CurrencyIdentifiers_get_PHP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_p_k_r", (PyCFunction)CurrencyIdentifiers_get_PKR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_p_l_n", (PyCFunction)CurrencyIdentifiers_get_PLN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_p_y_g", (PyCFunction)CurrencyIdentifiers_get_PYG, METH_NOARGS | METH_STATIC, nullptr },
        { "get_q_a_r", (PyCFunction)CurrencyIdentifiers_get_QAR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_r_s_d", (PyCFunction)CurrencyIdentifiers_get_RSD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_r_u_b", (PyCFunction)CurrencyIdentifiers_get_RUB, METH_NOARGS | METH_STATIC, nullptr },
        { "get_r_w_f", (PyCFunction)CurrencyIdentifiers_get_RWF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_a_r", (PyCFunction)CurrencyIdentifiers_get_SAR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_b_d", (PyCFunction)CurrencyIdentifiers_get_SBD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_c_r", (PyCFunction)CurrencyIdentifiers_get_SCR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_d_g", (PyCFunction)CurrencyIdentifiers_get_SDG, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_e_k", (PyCFunction)CurrencyIdentifiers_get_SEK, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_g_d", (PyCFunction)CurrencyIdentifiers_get_SGD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_h_p", (PyCFunction)CurrencyIdentifiers_get_SHP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_l_l", (PyCFunction)CurrencyIdentifiers_get_SLL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_o_s", (PyCFunction)CurrencyIdentifiers_get_SOS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_r_d", (PyCFunction)CurrencyIdentifiers_get_SRD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_t_d", (PyCFunction)CurrencyIdentifiers_get_STD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_y_p", (PyCFunction)CurrencyIdentifiers_get_SYP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_z_l", (PyCFunction)CurrencyIdentifiers_get_SZL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_h_b", (PyCFunction)CurrencyIdentifiers_get_THB, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_j_s", (PyCFunction)CurrencyIdentifiers_get_TJS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_m_t", (PyCFunction)CurrencyIdentifiers_get_TMT, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_n_d", (PyCFunction)CurrencyIdentifiers_get_TND, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_o_p", (PyCFunction)CurrencyIdentifiers_get_TOP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_r_y", (PyCFunction)CurrencyIdentifiers_get_TRY, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_t_d", (PyCFunction)CurrencyIdentifiers_get_TTD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_w_d", (PyCFunction)CurrencyIdentifiers_get_TWD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_t_z_s", (PyCFunction)CurrencyIdentifiers_get_TZS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_u_a_h", (PyCFunction)CurrencyIdentifiers_get_UAH, METH_NOARGS | METH_STATIC, nullptr },
        { "get_u_g_x", (PyCFunction)CurrencyIdentifiers_get_UGX, METH_NOARGS | METH_STATIC, nullptr },
        { "get_u_s_d", (PyCFunction)CurrencyIdentifiers_get_USD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_u_y_u", (PyCFunction)CurrencyIdentifiers_get_UYU, METH_NOARGS | METH_STATIC, nullptr },
        { "get_u_z_s", (PyCFunction)CurrencyIdentifiers_get_UZS, METH_NOARGS | METH_STATIC, nullptr },
        { "get_v_e_f", (PyCFunction)CurrencyIdentifiers_get_VEF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_v_n_d", (PyCFunction)CurrencyIdentifiers_get_VND, METH_NOARGS | METH_STATIC, nullptr },
        { "get_v_u_v", (PyCFunction)CurrencyIdentifiers_get_VUV, METH_NOARGS | METH_STATIC, nullptr },
        { "get_w_s_t", (PyCFunction)CurrencyIdentifiers_get_WST, METH_NOARGS | METH_STATIC, nullptr },
        { "get_x_a_f", (PyCFunction)CurrencyIdentifiers_get_XAF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_x_c_d", (PyCFunction)CurrencyIdentifiers_get_XCD, METH_NOARGS | METH_STATIC, nullptr },
        { "get_x_o_f", (PyCFunction)CurrencyIdentifiers_get_XOF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_x_p_f", (PyCFunction)CurrencyIdentifiers_get_XPF, METH_NOARGS | METH_STATIC, nullptr },
        { "get_x_x_x", (PyCFunction)CurrencyIdentifiers_get_XXX, METH_NOARGS | METH_STATIC, nullptr },
        { "get_y_e_r", (PyCFunction)CurrencyIdentifiers_get_YER, METH_NOARGS | METH_STATIC, nullptr },
        { "get_z_a_r", (PyCFunction)CurrencyIdentifiers_get_ZAR, METH_NOARGS | METH_STATIC, nullptr },
        { "get_z_m_w", (PyCFunction)CurrencyIdentifiers_get_ZMW, METH_NOARGS | METH_STATIC, nullptr },
        { "get_z_w_l", (PyCFunction)CurrencyIdentifiers_get_ZWL, METH_NOARGS | METH_STATIC, nullptr },
        { "get_b_y_n", (PyCFunction)CurrencyIdentifiers_get_BYN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_s_p", (PyCFunction)CurrencyIdentifiers_get_SSP, METH_NOARGS | METH_STATIC, nullptr },
        { "get_s_t_n", (PyCFunction)CurrencyIdentifiers_get_STN, METH_NOARGS | METH_STATIC, nullptr },
        { "get_v_e_s", (PyCFunction)CurrencyIdentifiers_get_VES, METH_NOARGS | METH_STATIC, nullptr },
        { "get_m_r_u", (PyCFunction)CurrencyIdentifiers_get_MRU, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CurrencyIdentifiers[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CurrencyIdentifiers[] = 
    {
        { Py_tp_new, _new_CurrencyIdentifiers },
        { Py_tp_methods, _methods_CurrencyIdentifiers },
        { Py_tp_getset, _getset_CurrencyIdentifiers },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CurrencyIdentifiers =
    {
        "_winrt_Windows_Globalization.CurrencyIdentifiers",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CurrencyIdentifiers
    };

    // ----- GeographicRegion class --------------------
    constexpr const char* const _type_name_GeographicRegion = "GeographicRegion";

    static PyObject* _new_GeographicRegion(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Globalization::GeographicRegion instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::GeographicRegion instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_GeographicRegion(py::wrapper::Windows::Globalization::GeographicRegion* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* GeographicRegion_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Globalization::GeographicRegion::IsSupported(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GeographicRegion_get_Code(py::wrapper::Windows::Globalization::GeographicRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Code());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeographicRegion_get_CodeThreeDigit(py::wrapper::Windows::Globalization::GeographicRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CodeThreeDigit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeographicRegion_get_CodeThreeLetter(py::wrapper::Windows::Globalization::GeographicRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CodeThreeLetter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeographicRegion_get_CodeTwoLetter(py::wrapper::Windows::Globalization::GeographicRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CodeTwoLetter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeographicRegion_get_CurrenciesInUse(py::wrapper::Windows::Globalization::GeographicRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrenciesInUse());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeographicRegion_get_DisplayName(py::wrapper::Windows::Globalization::GeographicRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeographicRegion_get_NativeName(py::wrapper::Windows::Globalization::GeographicRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NativeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_GeographicRegion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::GeographicRegion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GeographicRegion[] = {
        { "is_supported", (PyCFunction)GeographicRegion_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_GeographicRegion, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_GeographicRegion[] = {
        { const_cast<char*>("code"), (getter)GeographicRegion_get_Code, nullptr, nullptr, nullptr },
        { const_cast<char*>("code_three_digit"), (getter)GeographicRegion_get_CodeThreeDigit, nullptr, nullptr, nullptr },
        { const_cast<char*>("code_three_letter"), (getter)GeographicRegion_get_CodeThreeLetter, nullptr, nullptr, nullptr },
        { const_cast<char*>("code_two_letter"), (getter)GeographicRegion_get_CodeTwoLetter, nullptr, nullptr, nullptr },
        { const_cast<char*>("currencies_in_use"), (getter)GeographicRegion_get_CurrenciesInUse, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)GeographicRegion_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("native_name"), (getter)GeographicRegion_get_NativeName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_GeographicRegion[] = 
    {
        { Py_tp_new, _new_GeographicRegion },
        { Py_tp_dealloc, _dealloc_GeographicRegion },
        { Py_tp_methods, _methods_GeographicRegion },
        { Py_tp_getset, _getset_GeographicRegion },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_GeographicRegion =
    {
        "_winrt_Windows_Globalization.GeographicRegion",
        sizeof(py::wrapper::Windows::Globalization::GeographicRegion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GeographicRegion
    };

    // ----- Language class --------------------
    constexpr const char* const _type_name_Language = "Language";

    static PyObject* _new_Language(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Globalization::Language instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_Language(py::wrapper::Windows::Globalization::Language* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* Language_GetExtensionSubtags(py::wrapper::Windows::Globalization::Language* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetExtensionSubtags(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Language_GetMuiCompatibleLanguageListFromLanguageTags(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::Globalization::Language::GetMuiCompatibleLanguageListFromLanguageTags(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Language_IsWellFormed(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Globalization::Language::IsWellFormed(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Language_TrySetInputMethodLanguageTag(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Globalization::Language::TrySetInputMethodLanguageTag(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Language_get_DisplayName(py::wrapper::Windows::Globalization::Language* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Language_get_LanguageTag(py::wrapper::Windows::Globalization::Language* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LanguageTag());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Language_get_NativeName(py::wrapper::Windows::Globalization::Language* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NativeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Language_get_Script(py::wrapper::Windows::Globalization::Language* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Script());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Language_get_LayoutDirection(py::wrapper::Windows::Globalization::Language* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LayoutDirection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Language_get_AbbreviatedName(py::wrapper::Windows::Globalization::Language* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AbbreviatedName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Language_get_CurrentInputMethodLanguageTag(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::Language::CurrentInputMethodLanguageTag());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Language(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::Language>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Language[] = {
        { "get_extension_subtags", (PyCFunction)Language_GetExtensionSubtags, METH_VARARGS, nullptr },
        { "get_mui_compatible_language_list_from_language_tags", (PyCFunction)Language_GetMuiCompatibleLanguageListFromLanguageTags, METH_VARARGS | METH_STATIC, nullptr },
        { "is_well_formed", (PyCFunction)Language_IsWellFormed, METH_VARARGS | METH_STATIC, nullptr },
        { "try_set_input_method_language_tag", (PyCFunction)Language_TrySetInputMethodLanguageTag, METH_VARARGS | METH_STATIC, nullptr },
        { "get_current_input_method_language_tag", (PyCFunction)Language_get_CurrentInputMethodLanguageTag, METH_NOARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_Language, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_Language[] = {
        { const_cast<char*>("display_name"), (getter)Language_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("language_tag"), (getter)Language_get_LanguageTag, nullptr, nullptr, nullptr },
        { const_cast<char*>("native_name"), (getter)Language_get_NativeName, nullptr, nullptr, nullptr },
        { const_cast<char*>("script"), (getter)Language_get_Script, nullptr, nullptr, nullptr },
        { const_cast<char*>("layout_direction"), (getter)Language_get_LayoutDirection, nullptr, nullptr, nullptr },
        { const_cast<char*>("abbreviated_name"), (getter)Language_get_AbbreviatedName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_Language[] = 
    {
        { Py_tp_new, _new_Language },
        { Py_tp_dealloc, _dealloc_Language },
        { Py_tp_methods, _methods_Language },
        { Py_tp_getset, _getset_Language },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_Language =
    {
        "_winrt_Windows_Globalization.Language",
        sizeof(py::wrapper::Windows::Globalization::Language),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Language
    };

    // ----- NumeralSystemIdentifiers class --------------------
    constexpr const char* const _type_name_NumeralSystemIdentifiers = "NumeralSystemIdentifiers";

    static PyObject* _new_NumeralSystemIdentifiers(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_NumeralSystemIdentifiers);
        return nullptr;
    }

    static PyObject* NumeralSystemIdentifiers_get_FullWide(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::FullWide());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Arab(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Arab());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_ArabExt(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::ArabExt());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Bali(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Bali());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Beng(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Beng());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Cham(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Cham());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Deva(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Deva());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_MymrShan(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::MymrShan());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Gujr(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Gujr());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Guru(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Guru());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_HaniDec(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::HaniDec());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Java(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Java());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Kali(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Kali());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Khmr(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Khmr());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Knda(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Knda());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Lana(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Lana());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_LanaTham(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::LanaTham());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Laoo(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Laoo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Latn(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Latn());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Lepc(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Lepc());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Limb(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Limb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Mlym(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Mlym());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Mong(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Mong());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Mtei(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Mtei());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Mymr(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Mymr());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Nkoo(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Nkoo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Olck(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Olck());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Orya(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Orya());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Saur(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Saur());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Sund(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Sund());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Talu(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Talu());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_TamlDec(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::TamlDec());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Telu(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Telu());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Thai(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Thai());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Tibt(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Tibt());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Vaii(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Vaii());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_MathBold(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::MathBold());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_MathDbl(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::MathDbl());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_MathMono(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::MathMono());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_MathSanb(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::MathSanb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_MathSans(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::MathSans());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Osma(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Osma());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_ZmthBold(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::ZmthBold());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_ZmthDbl(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::ZmthDbl());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_ZmthMono(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::ZmthMono());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_ZmthSanb(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::ZmthSanb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_ZmthSans(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::ZmthSans());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemIdentifiers_get_Brah(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Globalization::NumeralSystemIdentifiers::Brah());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NumeralSystemIdentifiers[] = {
        { "get_full_wide", (PyCFunction)NumeralSystemIdentifiers_get_FullWide, METH_NOARGS | METH_STATIC, nullptr },
        { "get_arab", (PyCFunction)NumeralSystemIdentifiers_get_Arab, METH_NOARGS | METH_STATIC, nullptr },
        { "get_arab_ext", (PyCFunction)NumeralSystemIdentifiers_get_ArabExt, METH_NOARGS | METH_STATIC, nullptr },
        { "get_bali", (PyCFunction)NumeralSystemIdentifiers_get_Bali, METH_NOARGS | METH_STATIC, nullptr },
        { "get_beng", (PyCFunction)NumeralSystemIdentifiers_get_Beng, METH_NOARGS | METH_STATIC, nullptr },
        { "get_cham", (PyCFunction)NumeralSystemIdentifiers_get_Cham, METH_NOARGS | METH_STATIC, nullptr },
        { "get_deva", (PyCFunction)NumeralSystemIdentifiers_get_Deva, METH_NOARGS | METH_STATIC, nullptr },
        { "get_mymr_shan", (PyCFunction)NumeralSystemIdentifiers_get_MymrShan, METH_NOARGS | METH_STATIC, nullptr },
        { "get_gujr", (PyCFunction)NumeralSystemIdentifiers_get_Gujr, METH_NOARGS | METH_STATIC, nullptr },
        { "get_guru", (PyCFunction)NumeralSystemIdentifiers_get_Guru, METH_NOARGS | METH_STATIC, nullptr },
        { "get_hani_dec", (PyCFunction)NumeralSystemIdentifiers_get_HaniDec, METH_NOARGS | METH_STATIC, nullptr },
        { "get_java", (PyCFunction)NumeralSystemIdentifiers_get_Java, METH_NOARGS | METH_STATIC, nullptr },
        { "get_kali", (PyCFunction)NumeralSystemIdentifiers_get_Kali, METH_NOARGS | METH_STATIC, nullptr },
        { "get_khmr", (PyCFunction)NumeralSystemIdentifiers_get_Khmr, METH_NOARGS | METH_STATIC, nullptr },
        { "get_knda", (PyCFunction)NumeralSystemIdentifiers_get_Knda, METH_NOARGS | METH_STATIC, nullptr },
        { "get_lana", (PyCFunction)NumeralSystemIdentifiers_get_Lana, METH_NOARGS | METH_STATIC, nullptr },
        { "get_lana_tham", (PyCFunction)NumeralSystemIdentifiers_get_LanaTham, METH_NOARGS | METH_STATIC, nullptr },
        { "get_laoo", (PyCFunction)NumeralSystemIdentifiers_get_Laoo, METH_NOARGS | METH_STATIC, nullptr },
        { "get_latn", (PyCFunction)NumeralSystemIdentifiers_get_Latn, METH_NOARGS | METH_STATIC, nullptr },
        { "get_lepc", (PyCFunction)NumeralSystemIdentifiers_get_Lepc, METH_NOARGS | METH_STATIC, nullptr },
        { "get_limb", (PyCFunction)NumeralSystemIdentifiers_get_Limb, METH_NOARGS | METH_STATIC, nullptr },
        { "get_mlym", (PyCFunction)NumeralSystemIdentifiers_get_Mlym, METH_NOARGS | METH_STATIC, nullptr },
        { "get_mong", (PyCFunction)NumeralSystemIdentifiers_get_Mong, METH_NOARGS | METH_STATIC, nullptr },
        { "get_mtei", (PyCFunction)NumeralSystemIdentifiers_get_Mtei, METH_NOARGS | METH_STATIC, nullptr },
        { "get_mymr", (PyCFunction)NumeralSystemIdentifiers_get_Mymr, METH_NOARGS | METH_STATIC, nullptr },
        { "get_nkoo", (PyCFunction)NumeralSystemIdentifiers_get_Nkoo, METH_NOARGS | METH_STATIC, nullptr },
        { "get_olck", (PyCFunction)NumeralSystemIdentifiers_get_Olck, METH_NOARGS | METH_STATIC, nullptr },
        { "get_orya", (PyCFunction)NumeralSystemIdentifiers_get_Orya, METH_NOARGS | METH_STATIC, nullptr },
        { "get_saur", (PyCFunction)NumeralSystemIdentifiers_get_Saur, METH_NOARGS | METH_STATIC, nullptr },
        { "get_sund", (PyCFunction)NumeralSystemIdentifiers_get_Sund, METH_NOARGS | METH_STATIC, nullptr },
        { "get_talu", (PyCFunction)NumeralSystemIdentifiers_get_Talu, METH_NOARGS | METH_STATIC, nullptr },
        { "get_taml_dec", (PyCFunction)NumeralSystemIdentifiers_get_TamlDec, METH_NOARGS | METH_STATIC, nullptr },
        { "get_telu", (PyCFunction)NumeralSystemIdentifiers_get_Telu, METH_NOARGS | METH_STATIC, nullptr },
        { "get_thai", (PyCFunction)NumeralSystemIdentifiers_get_Thai, METH_NOARGS | METH_STATIC, nullptr },
        { "get_tibt", (PyCFunction)NumeralSystemIdentifiers_get_Tibt, METH_NOARGS | METH_STATIC, nullptr },
        { "get_vaii", (PyCFunction)NumeralSystemIdentifiers_get_Vaii, METH_NOARGS | METH_STATIC, nullptr },
        { "get_math_bold", (PyCFunction)NumeralSystemIdentifiers_get_MathBold, METH_NOARGS | METH_STATIC, nullptr },
        { "get_math_dbl", (PyCFunction)NumeralSystemIdentifiers_get_MathDbl, METH_NOARGS | METH_STATIC, nullptr },
        { "get_math_mono", (PyCFunction)NumeralSystemIdentifiers_get_MathMono, METH_NOARGS | METH_STATIC, nullptr },
        { "get_math_sanb", (PyCFunction)NumeralSystemIdentifiers_get_MathSanb, METH_NOARGS | METH_STATIC, nullptr },
        { "get_math_sans", (PyCFunction)NumeralSystemIdentifiers_get_MathSans, METH_NOARGS | METH_STATIC, nullptr },
        { "get_osma", (PyCFunction)NumeralSystemIdentifiers_get_Osma, METH_NOARGS | METH_STATIC, nullptr },
        { "get_zmth_bold", (PyCFunction)NumeralSystemIdentifiers_get_ZmthBold, METH_NOARGS | METH_STATIC, nullptr },
        { "get_zmth_dbl", (PyCFunction)NumeralSystemIdentifiers_get_ZmthDbl, METH_NOARGS | METH_STATIC, nullptr },
        { "get_zmth_mono", (PyCFunction)NumeralSystemIdentifiers_get_ZmthMono, METH_NOARGS | METH_STATIC, nullptr },
        { "get_zmth_sanb", (PyCFunction)NumeralSystemIdentifiers_get_ZmthSanb, METH_NOARGS | METH_STATIC, nullptr },
        { "get_zmth_sans", (PyCFunction)NumeralSystemIdentifiers_get_ZmthSans, METH_NOARGS | METH_STATIC, nullptr },
        { "get_brah", (PyCFunction)NumeralSystemIdentifiers_get_Brah, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_NumeralSystemIdentifiers[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_NumeralSystemIdentifiers[] = 
    {
        { Py_tp_new, _new_NumeralSystemIdentifiers },
        { Py_tp_methods, _methods_NumeralSystemIdentifiers },
        { Py_tp_getset, _getset_NumeralSystemIdentifiers },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_NumeralSystemIdentifiers =
    {
        "_winrt_Windows_Globalization.NumeralSystemIdentifiers",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NumeralSystemIdentifiers
    };

    // ----- Windows.Globalization Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Globalization::ApplicationLanguages>::python_type = py::register_python_type(module, _type_name_ApplicationLanguages, &_type_spec_ApplicationLanguages, nullptr);
            py::winrt_type<winrt::Windows::Globalization::Calendar>::python_type = py::register_python_type(module, _type_name_Calendar, &_type_spec_Calendar, bases.get());
            py::winrt_type<winrt::Windows::Globalization::CalendarIdentifiers>::python_type = py::register_python_type(module, _type_name_CalendarIdentifiers, &_type_spec_CalendarIdentifiers, nullptr);
            py::winrt_type<winrt::Windows::Globalization::ClockIdentifiers>::python_type = py::register_python_type(module, _type_name_ClockIdentifiers, &_type_spec_ClockIdentifiers, nullptr);
            py::winrt_type<winrt::Windows::Globalization::CurrencyAmount>::python_type = py::register_python_type(module, _type_name_CurrencyAmount, &_type_spec_CurrencyAmount, bases.get());
            py::winrt_type<winrt::Windows::Globalization::CurrencyIdentifiers>::python_type = py::register_python_type(module, _type_name_CurrencyIdentifiers, &_type_spec_CurrencyIdentifiers, nullptr);
            py::winrt_type<winrt::Windows::Globalization::GeographicRegion>::python_type = py::register_python_type(module, _type_name_GeographicRegion, &_type_spec_GeographicRegion, bases.get());
            py::winrt_type<winrt::Windows::Globalization::Language>::python_type = py::register_python_type(module, _type_name_Language, &_type_spec_Language, bases.get());
            py::winrt_type<winrt::Windows::Globalization::NumeralSystemIdentifiers>::python_type = py::register_python_type(module, _type_name_NumeralSystemIdentifiers, &_type_spec_NumeralSystemIdentifiers, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Globalization");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Globalization",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Globalization

PyMODINIT_FUNC
PyInit__winrt_Windows_Globalization (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Globalization::module_def);
}
