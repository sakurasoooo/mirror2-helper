// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.CommunicationBlocking.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager>::python_type;

namespace py::cpp::Windows::ApplicationModel::CommunicationBlocking
{
    // ----- CommunicationBlockingAccessManager class --------------------
    constexpr const char* const _type_name_CommunicationBlockingAccessManager = "CommunicationBlockingAccessManager";

    static PyObject* _new_CommunicationBlockingAccessManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CommunicationBlockingAccessManager);
        return nullptr;
    }

    static PyObject* CommunicationBlockingAccessManager_IsBlockedNumberAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::IsBlockedNumberAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowBlockNumbersUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowBlockNumbersUI(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowBlockedCallsUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowBlockedCallsUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowBlockedMessagesUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowBlockedMessagesUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowUnblockNumbersUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowUnblockNumbersUI(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_get_IsBlockingActive(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::IsBlockingActive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CommunicationBlockingAccessManager[] = {
        { "is_blocked_number_async", (PyCFunction)CommunicationBlockingAccessManager_IsBlockedNumberAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "show_block_numbers_u_i", (PyCFunction)CommunicationBlockingAccessManager_ShowBlockNumbersUI, METH_VARARGS | METH_STATIC, nullptr },
        { "show_blocked_calls_u_i", (PyCFunction)CommunicationBlockingAccessManager_ShowBlockedCallsUI, METH_VARARGS | METH_STATIC, nullptr },
        { "show_blocked_messages_u_i", (PyCFunction)CommunicationBlockingAccessManager_ShowBlockedMessagesUI, METH_VARARGS | METH_STATIC, nullptr },
        { "show_unblock_numbers_u_i", (PyCFunction)CommunicationBlockingAccessManager_ShowUnblockNumbersUI, METH_VARARGS | METH_STATIC, nullptr },
        { "get_is_blocking_active", (PyCFunction)CommunicationBlockingAccessManager_get_IsBlockingActive, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CommunicationBlockingAccessManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CommunicationBlockingAccessManager[] = 
    {
        { Py_tp_new, _new_CommunicationBlockingAccessManager },
        { Py_tp_methods, _methods_CommunicationBlockingAccessManager },
        { Py_tp_getset, _getset_CommunicationBlockingAccessManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CommunicationBlockingAccessManager =
    {
        "_winrt_Windows_ApplicationModel_CommunicationBlocking.CommunicationBlockingAccessManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CommunicationBlockingAccessManager
    };

    // ----- CommunicationBlockingAppManager class --------------------
    constexpr const char* const _type_name_CommunicationBlockingAppManager = "CommunicationBlockingAppManager";

    static PyObject* _new_CommunicationBlockingAppManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CommunicationBlockingAppManager);
        return nullptr;
    }

    static PyObject* CommunicationBlockingAppManager_RequestSetAsActiveBlockingAppAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager::RequestSetAsActiveBlockingAppAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAppManager_ShowCommunicationBlockingSettingsUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager::ShowCommunicationBlockingSettingsUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAppManager_get_IsCurrentAppActiveBlockingApp(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager::IsCurrentAppActiveBlockingApp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CommunicationBlockingAppManager[] = {
        { "request_set_as_active_blocking_app_async", (PyCFunction)CommunicationBlockingAppManager_RequestSetAsActiveBlockingAppAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "show_communication_blocking_settings_u_i", (PyCFunction)CommunicationBlockingAppManager_ShowCommunicationBlockingSettingsUI, METH_VARARGS | METH_STATIC, nullptr },
        { "get_is_current_app_active_blocking_app", (PyCFunction)CommunicationBlockingAppManager_get_IsCurrentAppActiveBlockingApp, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CommunicationBlockingAppManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CommunicationBlockingAppManager[] = 
    {
        { Py_tp_new, _new_CommunicationBlockingAppManager },
        { Py_tp_methods, _methods_CommunicationBlockingAppManager },
        { Py_tp_getset, _getset_CommunicationBlockingAppManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CommunicationBlockingAppManager =
    {
        "_winrt_Windows_ApplicationModel_CommunicationBlocking.CommunicationBlockingAppManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CommunicationBlockingAppManager
    };

    // ----- Windows.ApplicationModel.CommunicationBlocking Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager>::python_type = py::register_python_type(module, _type_name_CommunicationBlockingAccessManager, &_type_spec_CommunicationBlockingAccessManager, nullptr);
            py::winrt_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager>::python_type = py::register_python_type(module, _type_name_CommunicationBlockingAppManager, &_type_spec_CommunicationBlockingAppManager, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.CommunicationBlocking");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_CommunicationBlocking",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::CommunicationBlocking

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_CommunicationBlocking (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::CommunicationBlocking::module_def);
}
