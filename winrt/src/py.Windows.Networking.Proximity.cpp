// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Networking.Proximity.h"

PyTypeObject* py::winrt_type<winrt::Windows::Networking::Proximity::ConnectionRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Networking::Proximity::PeerFinder>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Networking::Proximity::PeerInformation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Networking::Proximity::PeerWatcher>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Networking::Proximity::ProximityDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Networking::Proximity::ProximityMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>::python_type;

namespace py::cpp::Windows::Networking::Proximity
{
    // ----- ConnectionRequestedEventArgs class --------------------
    constexpr const char* const _type_name_ConnectionRequestedEventArgs = "ConnectionRequestedEventArgs";

    static PyObject* _new_ConnectionRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ConnectionRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_ConnectionRequestedEventArgs(py::wrapper::Windows::Networking::Proximity::ConnectionRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ConnectionRequestedEventArgs_get_PeerInformation(py::wrapper::Windows::Networking::Proximity::ConnectionRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PeerInformation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ConnectionRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::Proximity::ConnectionRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ConnectionRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_ConnectionRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ConnectionRequestedEventArgs[] = {
        { const_cast<char*>("peer_information"), (getter)ConnectionRequestedEventArgs_get_PeerInformation, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ConnectionRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_ConnectionRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_ConnectionRequestedEventArgs },
        { Py_tp_methods, _methods_ConnectionRequestedEventArgs },
        { Py_tp_getset, _getset_ConnectionRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ConnectionRequestedEventArgs =
    {
        "_winrt_Windows_Networking_Proximity.ConnectionRequestedEventArgs",
        sizeof(py::wrapper::Windows::Networking::Proximity::ConnectionRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ConnectionRequestedEventArgs
    };

    // ----- PeerFinder class --------------------
    constexpr const char* const _type_name_PeerFinder = "PeerFinder";

    static PyObject* _new_PeerFinder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PeerFinder);
        return nullptr;
    }

    static PyObject* PeerFinder_ConnectAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Networking::Proximity::PeerInformation>(args, 0);

                return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::ConnectAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeerFinder_CreateWatcher(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::CreateWatcher());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeerFinder_FindAllPeersAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::FindAllPeersAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeerFinder_Start(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Networking::Proximity::PeerFinder::Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Networking::Proximity::PeerFinder::Start(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeerFinder_Stop(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Networking::Proximity::PeerFinder::Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_DisplayName(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_put_DisplayName(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::DisplayName(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_AllowWiFiDirect(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::AllowWiFiDirect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_put_AllowWiFiDirect(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<bool>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::AllowWiFiDirect(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_AllowInfrastructure(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::AllowInfrastructure());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_put_AllowInfrastructure(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<bool>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::AllowInfrastructure(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_AllowBluetooth(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::AllowBluetooth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_put_AllowBluetooth(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<bool>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::AllowBluetooth(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_AlternateIdentities(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::AlternateIdentities());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_SupportedDiscoveryTypes(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::SupportedDiscoveryTypes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_Role(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::Role());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_put_Role(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Networking::Proximity::PeerRole>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::Role(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_get_DiscoveryData(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::DiscoveryData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_put_DiscoveryData(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::DiscoveryData(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_add_ConnectionRequested(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::Networking::Proximity::ConnectionRequestedEventArgs>>(arg);

            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::ConnectionRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_remove_ConnectionRequested(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::ConnectionRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_add_TriggeredConnectionStateChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>>(arg);

            return py::convert(winrt::Windows::Networking::Proximity::PeerFinder::TriggeredConnectionStateChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerFinder_remove_TriggeredConnectionStateChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Networking::Proximity::PeerFinder::TriggeredConnectionStateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PeerFinder[] = {
        { "connect_async", (PyCFunction)PeerFinder_ConnectAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "create_watcher", (PyCFunction)PeerFinder_CreateWatcher, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_peers_async", (PyCFunction)PeerFinder_FindAllPeersAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "start", (PyCFunction)PeerFinder_Start, METH_VARARGS | METH_STATIC, nullptr },
        { "stop", (PyCFunction)PeerFinder_Stop, METH_VARARGS | METH_STATIC, nullptr },
        { "get_display_name", (PyCFunction)PeerFinder_get_DisplayName, METH_NOARGS | METH_STATIC, nullptr },
        { "put_display_name", (PyCFunction)PeerFinder_put_DisplayName, METH_O | METH_STATIC, nullptr },
        { "get_allow_wi_fi_direct", (PyCFunction)PeerFinder_get_AllowWiFiDirect, METH_NOARGS | METH_STATIC, nullptr },
        { "put_allow_wi_fi_direct", (PyCFunction)PeerFinder_put_AllowWiFiDirect, METH_O | METH_STATIC, nullptr },
        { "get_allow_infrastructure", (PyCFunction)PeerFinder_get_AllowInfrastructure, METH_NOARGS | METH_STATIC, nullptr },
        { "put_allow_infrastructure", (PyCFunction)PeerFinder_put_AllowInfrastructure, METH_O | METH_STATIC, nullptr },
        { "get_allow_bluetooth", (PyCFunction)PeerFinder_get_AllowBluetooth, METH_NOARGS | METH_STATIC, nullptr },
        { "put_allow_bluetooth", (PyCFunction)PeerFinder_put_AllowBluetooth, METH_O | METH_STATIC, nullptr },
        { "get_alternate_identities", (PyCFunction)PeerFinder_get_AlternateIdentities, METH_NOARGS | METH_STATIC, nullptr },
        { "get_supported_discovery_types", (PyCFunction)PeerFinder_get_SupportedDiscoveryTypes, METH_NOARGS | METH_STATIC, nullptr },
        { "get_role", (PyCFunction)PeerFinder_get_Role, METH_NOARGS | METH_STATIC, nullptr },
        { "put_role", (PyCFunction)PeerFinder_put_Role, METH_O | METH_STATIC, nullptr },
        { "get_discovery_data", (PyCFunction)PeerFinder_get_DiscoveryData, METH_NOARGS | METH_STATIC, nullptr },
        { "put_discovery_data", (PyCFunction)PeerFinder_put_DiscoveryData, METH_O | METH_STATIC, nullptr },
        { "add_connection_requested", (PyCFunction)PeerFinder_add_ConnectionRequested, METH_O | METH_STATIC, nullptr },
        { "remove_connection_requested", (PyCFunction)PeerFinder_remove_ConnectionRequested, METH_O | METH_STATIC, nullptr },
        { "add_triggered_connection_state_changed", (PyCFunction)PeerFinder_add_TriggeredConnectionStateChanged, METH_O | METH_STATIC, nullptr },
        { "remove_triggered_connection_state_changed", (PyCFunction)PeerFinder_remove_TriggeredConnectionStateChanged, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PeerFinder[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PeerFinder[] = 
    {
        { Py_tp_new, _new_PeerFinder },
        { Py_tp_methods, _methods_PeerFinder },
        { Py_tp_getset, _getset_PeerFinder },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PeerFinder =
    {
        "_winrt_Windows_Networking_Proximity.PeerFinder",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PeerFinder
    };

    // ----- PeerInformation class --------------------
    constexpr const char* const _type_name_PeerInformation = "PeerInformation";

    static PyObject* _new_PeerInformation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PeerInformation);
        return nullptr;
    }

    static void _dealloc_PeerInformation(py::wrapper::Windows::Networking::Proximity::PeerInformation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PeerInformation_get_DisplayName(py::wrapper::Windows::Networking::Proximity::PeerInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerInformation_get_DiscoveryData(py::wrapper::Windows::Networking::Proximity::PeerInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DiscoveryData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerInformation_get_Id(py::wrapper::Windows::Networking::Proximity::PeerInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerInformation_get_HostName(py::wrapper::Windows::Networking::Proximity::PeerInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HostName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerInformation_get_ServiceName(py::wrapper::Windows::Networking::Proximity::PeerInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ServiceName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PeerInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::Proximity::PeerInformation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PeerInformation[] = {
        { "_from", (PyCFunction)_from_PeerInformation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PeerInformation[] = {
        { const_cast<char*>("display_name"), (getter)PeerInformation_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("discovery_data"), (getter)PeerInformation_get_DiscoveryData, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)PeerInformation_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("host_name"), (getter)PeerInformation_get_HostName, nullptr, nullptr, nullptr },
        { const_cast<char*>("service_name"), (getter)PeerInformation_get_ServiceName, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PeerInformation[] = 
    {
        { Py_tp_new, _new_PeerInformation },
        { Py_tp_dealloc, _dealloc_PeerInformation },
        { Py_tp_methods, _methods_PeerInformation },
        { Py_tp_getset, _getset_PeerInformation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PeerInformation =
    {
        "_winrt_Windows_Networking_Proximity.PeerInformation",
        sizeof(py::wrapper::Windows::Networking::Proximity::PeerInformation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PeerInformation
    };

    // ----- PeerWatcher class --------------------
    constexpr const char* const _type_name_PeerWatcher = "PeerWatcher";

    static PyObject* _new_PeerWatcher(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PeerWatcher);
        return nullptr;
    }

    static void _dealloc_PeerWatcher(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PeerWatcher_Start(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_Stop(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_get_Status(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_add_Added(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Networking::Proximity::PeerWatcher, winrt::Windows::Networking::Proximity::PeerInformation>>(arg);

            return py::convert(self->obj.Added(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_remove_Added(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Added(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_add_EnumerationCompleted(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Networking::Proximity::PeerWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.EnumerationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_remove_EnumerationCompleted(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.EnumerationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_add_Removed(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Networking::Proximity::PeerWatcher, winrt::Windows::Networking::Proximity::PeerInformation>>(arg);

            return py::convert(self->obj.Removed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_remove_Removed(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Removed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_add_Stopped(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Networking::Proximity::PeerWatcher, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Stopped(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_remove_Stopped(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Stopped(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_add_Updated(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Networking::Proximity::PeerWatcher, winrt::Windows::Networking::Proximity::PeerInformation>>(arg);

            return py::convert(self->obj.Updated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PeerWatcher_remove_Updated(py::wrapper::Windows::Networking::Proximity::PeerWatcher* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Updated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PeerWatcher(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::Proximity::PeerWatcher>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PeerWatcher[] = {
        { "start", (PyCFunction)PeerWatcher_Start, METH_VARARGS, nullptr },
        { "stop", (PyCFunction)PeerWatcher_Stop, METH_VARARGS, nullptr },
        { "add_added", (PyCFunction)PeerWatcher_add_Added, METH_O, nullptr },
        { "remove_added", (PyCFunction)PeerWatcher_remove_Added, METH_O, nullptr },
        { "add_enumeration_completed", (PyCFunction)PeerWatcher_add_EnumerationCompleted, METH_O, nullptr },
        { "remove_enumeration_completed", (PyCFunction)PeerWatcher_remove_EnumerationCompleted, METH_O, nullptr },
        { "add_removed", (PyCFunction)PeerWatcher_add_Removed, METH_O, nullptr },
        { "remove_removed", (PyCFunction)PeerWatcher_remove_Removed, METH_O, nullptr },
        { "add_stopped", (PyCFunction)PeerWatcher_add_Stopped, METH_O, nullptr },
        { "remove_stopped", (PyCFunction)PeerWatcher_remove_Stopped, METH_O, nullptr },
        { "add_updated", (PyCFunction)PeerWatcher_add_Updated, METH_O, nullptr },
        { "remove_updated", (PyCFunction)PeerWatcher_remove_Updated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_PeerWatcher, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PeerWatcher[] = {
        { const_cast<char*>("status"), (getter)PeerWatcher_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PeerWatcher[] = 
    {
        { Py_tp_new, _new_PeerWatcher },
        { Py_tp_dealloc, _dealloc_PeerWatcher },
        { Py_tp_methods, _methods_PeerWatcher },
        { Py_tp_getset, _getset_PeerWatcher },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PeerWatcher =
    {
        "_winrt_Windows_Networking_Proximity.PeerWatcher",
        sizeof(py::wrapper::Windows::Networking::Proximity::PeerWatcher),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PeerWatcher
    };

    // ----- ProximityDevice class --------------------
    constexpr const char* const _type_name_ProximityDevice = "ProximityDevice";

    static PyObject* _new_ProximityDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ProximityDevice);
        return nullptr;
    }

    static void _dealloc_ProximityDevice(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ProximityDevice_FromId(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Networking::Proximity::ProximityDevice::FromId(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Networking::Proximity::ProximityDevice::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Networking::Proximity::ProximityDevice::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_PublishBinaryMessage(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);

                return py::convert(self->obj.PublishBinaryMessage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Networking::Proximity::MessageTransmittedHandler>(args, 2);

                return py::convert(self->obj.PublishBinaryMessage(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_PublishMessage(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.PublishMessage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Networking::Proximity::MessageTransmittedHandler>(args, 2);

                return py::convert(self->obj.PublishMessage(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_PublishUriMessage(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.PublishUriMessage(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Networking::Proximity::MessageTransmittedHandler>(args, 1);

                return py::convert(self->obj.PublishUriMessage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_StopPublishingMessage(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                self->obj.StopPublishingMessage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_StopSubscribingForMessage(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                self->obj.StopSubscribingForMessage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_SubscribeForMessage(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Networking::Proximity::MessageReceivedHandler>(args, 1);

                return py::convert(self->obj.SubscribeForMessage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_get_BitsPerSecond(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BitsPerSecond());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_get_DeviceId(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_get_MaxMessageBytes(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxMessageBytes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_add_DeviceArrived(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Networking::Proximity::DeviceArrivedEventHandler>(arg);

            return py::convert(self->obj.DeviceArrived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_remove_DeviceArrived(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DeviceArrived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_add_DeviceDeparted(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Networking::Proximity::DeviceDepartedEventHandler>(arg);

            return py::convert(self->obj.DeviceDeparted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityDevice_remove_DeviceDeparted(py::wrapper::Windows::Networking::Proximity::ProximityDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DeviceDeparted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ProximityDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::Proximity::ProximityDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProximityDevice[] = {
        { "from_id", (PyCFunction)ProximityDevice_FromId, METH_VARARGS | METH_STATIC, nullptr },
        { "get_default", (PyCFunction)ProximityDevice_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)ProximityDevice_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "publish_binary_message", (PyCFunction)ProximityDevice_PublishBinaryMessage, METH_VARARGS, nullptr },
        { "publish_message", (PyCFunction)ProximityDevice_PublishMessage, METH_VARARGS, nullptr },
        { "publish_uri_message", (PyCFunction)ProximityDevice_PublishUriMessage, METH_VARARGS, nullptr },
        { "stop_publishing_message", (PyCFunction)ProximityDevice_StopPublishingMessage, METH_VARARGS, nullptr },
        { "stop_subscribing_for_message", (PyCFunction)ProximityDevice_StopSubscribingForMessage, METH_VARARGS, nullptr },
        { "subscribe_for_message", (PyCFunction)ProximityDevice_SubscribeForMessage, METH_VARARGS, nullptr },
        { "add_device_arrived", (PyCFunction)ProximityDevice_add_DeviceArrived, METH_O, nullptr },
        { "remove_device_arrived", (PyCFunction)ProximityDevice_remove_DeviceArrived, METH_O, nullptr },
        { "add_device_departed", (PyCFunction)ProximityDevice_add_DeviceDeparted, METH_O, nullptr },
        { "remove_device_departed", (PyCFunction)ProximityDevice_remove_DeviceDeparted, METH_O, nullptr },
        { "_from", (PyCFunction)_from_ProximityDevice, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ProximityDevice[] = {
        { const_cast<char*>("bits_per_second"), (getter)ProximityDevice_get_BitsPerSecond, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_id"), (getter)ProximityDevice_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_message_bytes"), (getter)ProximityDevice_get_MaxMessageBytes, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ProximityDevice[] = 
    {
        { Py_tp_new, _new_ProximityDevice },
        { Py_tp_dealloc, _dealloc_ProximityDevice },
        { Py_tp_methods, _methods_ProximityDevice },
        { Py_tp_getset, _getset_ProximityDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ProximityDevice =
    {
        "_winrt_Windows_Networking_Proximity.ProximityDevice",
        sizeof(py::wrapper::Windows::Networking::Proximity::ProximityDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProximityDevice
    };

    // ----- ProximityMessage class --------------------
    constexpr const char* const _type_name_ProximityMessage = "ProximityMessage";

    static PyObject* _new_ProximityMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ProximityMessage);
        return nullptr;
    }

    static void _dealloc_ProximityMessage(py::wrapper::Windows::Networking::Proximity::ProximityMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ProximityMessage_get_Data(py::wrapper::Windows::Networking::Proximity::ProximityMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Data());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityMessage_get_DataAsString(py::wrapper::Windows::Networking::Proximity::ProximityMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DataAsString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityMessage_get_MessageType(py::wrapper::Windows::Networking::Proximity::ProximityMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MessageType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProximityMessage_get_SubscriptionId(py::wrapper::Windows::Networking::Proximity::ProximityMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SubscriptionId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ProximityMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::Proximity::ProximityMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProximityMessage[] = {
        { "_from", (PyCFunction)_from_ProximityMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ProximityMessage[] = {
        { const_cast<char*>("data"), (getter)ProximityMessage_get_Data, nullptr, nullptr, nullptr },
        { const_cast<char*>("data_as_string"), (getter)ProximityMessage_get_DataAsString, nullptr, nullptr, nullptr },
        { const_cast<char*>("message_type"), (getter)ProximityMessage_get_MessageType, nullptr, nullptr, nullptr },
        { const_cast<char*>("subscription_id"), (getter)ProximityMessage_get_SubscriptionId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_ProximityMessage[] = 
    {
        { Py_tp_new, _new_ProximityMessage },
        { Py_tp_dealloc, _dealloc_ProximityMessage },
        { Py_tp_methods, _methods_ProximityMessage },
        { Py_tp_getset, _getset_ProximityMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ProximityMessage =
    {
        "_winrt_Windows_Networking_Proximity.ProximityMessage",
        sizeof(py::wrapper::Windows::Networking::Proximity::ProximityMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProximityMessage
    };

    // ----- TriggeredConnectionStateChangedEventArgs class --------------------
    constexpr const char* const _type_name_TriggeredConnectionStateChangedEventArgs = "TriggeredConnectionStateChangedEventArgs";

    static PyObject* _new_TriggeredConnectionStateChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TriggeredConnectionStateChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_TriggeredConnectionStateChangedEventArgs(py::wrapper::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TriggeredConnectionStateChangedEventArgs_get_Id(py::wrapper::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TriggeredConnectionStateChangedEventArgs_get_Socket(py::wrapper::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Socket());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TriggeredConnectionStateChangedEventArgs_get_State(py::wrapper::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.State());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TriggeredConnectionStateChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TriggeredConnectionStateChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_TriggeredConnectionStateChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TriggeredConnectionStateChangedEventArgs[] = {
        { const_cast<char*>("id"), (getter)TriggeredConnectionStateChangedEventArgs_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("socket"), (getter)TriggeredConnectionStateChangedEventArgs_get_Socket, nullptr, nullptr, nullptr },
        { const_cast<char*>("state"), (getter)TriggeredConnectionStateChangedEventArgs_get_State, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TriggeredConnectionStateChangedEventArgs[] = 
    {
        { Py_tp_new, _new_TriggeredConnectionStateChangedEventArgs },
        { Py_tp_dealloc, _dealloc_TriggeredConnectionStateChangedEventArgs },
        { Py_tp_methods, _methods_TriggeredConnectionStateChangedEventArgs },
        { Py_tp_getset, _getset_TriggeredConnectionStateChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TriggeredConnectionStateChangedEventArgs =
    {
        "_winrt_Windows_Networking_Proximity.TriggeredConnectionStateChangedEventArgs",
        sizeof(py::wrapper::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TriggeredConnectionStateChangedEventArgs
    };

    // ----- Windows.Networking.Proximity Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Networking::Proximity::ConnectionRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_ConnectionRequestedEventArgs, &_type_spec_ConnectionRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Networking::Proximity::PeerFinder>::python_type = py::register_python_type(module, _type_name_PeerFinder, &_type_spec_PeerFinder, nullptr);
            py::winrt_type<winrt::Windows::Networking::Proximity::PeerInformation>::python_type = py::register_python_type(module, _type_name_PeerInformation, &_type_spec_PeerInformation, bases.get());
            py::winrt_type<winrt::Windows::Networking::Proximity::PeerWatcher>::python_type = py::register_python_type(module, _type_name_PeerWatcher, &_type_spec_PeerWatcher, bases.get());
            py::winrt_type<winrt::Windows::Networking::Proximity::ProximityDevice>::python_type = py::register_python_type(module, _type_name_ProximityDevice, &_type_spec_ProximityDevice, bases.get());
            py::winrt_type<winrt::Windows::Networking::Proximity::ProximityMessage>::python_type = py::register_python_type(module, _type_name_ProximityMessage, &_type_spec_ProximityMessage, bases.get());
            py::winrt_type<winrt::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>::python_type = py::register_python_type(module, _type_name_TriggeredConnectionStateChangedEventArgs, &_type_spec_TriggeredConnectionStateChangedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Networking.Proximity");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Networking_Proximity",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Networking::Proximity

PyMODINIT_FUNC
PyInit__winrt_Windows_Networking_Proximity (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Networking::Proximity::module_def);
}
