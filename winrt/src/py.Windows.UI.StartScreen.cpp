// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.StartScreen.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::JumpList>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::JumpListItem>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::SecondaryTile>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::SecondaryTileVisualElements>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::StartScreenManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::TileMixedRealityModel>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::VisualElementsRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::VisualElementsRequestDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::StartScreen::VisualElementsRequestedEventArgs>::python_type;

namespace py::cpp::Windows::UI::StartScreen
{
    // ----- JumpList class --------------------
    constexpr const char* const _type_name_JumpList = "JumpList";

    static PyObject* _new_JumpList(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_JumpList);
        return nullptr;
    }

    static void _dealloc_JumpList(py::wrapper::Windows::UI::StartScreen::JumpList* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* JumpList_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::StartScreen::JumpList::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JumpList_LoadCurrentAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::StartScreen::JumpList::LoadCurrentAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JumpList_SaveAsync(py::wrapper::Windows::UI::StartScreen::JumpList* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SaveAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JumpList_get_SystemGroupKind(py::wrapper::Windows::UI::StartScreen::JumpList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemGroupKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JumpList_put_SystemGroupKind(py::wrapper::Windows::UI::StartScreen::JumpList* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::StartScreen::JumpListSystemGroupKind>(arg);

            self->obj.SystemGroupKind(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JumpList_get_Items(py::wrapper::Windows::UI::StartScreen::JumpList* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Items());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_JumpList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::JumpList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_JumpList[] = {
        { "is_supported", (PyCFunction)JumpList_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "load_current_async", (PyCFunction)JumpList_LoadCurrentAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "save_async", (PyCFunction)JumpList_SaveAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_JumpList, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_JumpList[] = {
        { const_cast<char*>("system_group_kind"), (getter)JumpList_get_SystemGroupKind, (setter)JumpList_put_SystemGroupKind, nullptr, nullptr },
        { const_cast<char*>("items"), (getter)JumpList_get_Items, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_JumpList[] = 
    {
        { Py_tp_new, _new_JumpList },
        { Py_tp_dealloc, _dealloc_JumpList },
        { Py_tp_methods, _methods_JumpList },
        { Py_tp_getset, _getset_JumpList },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_JumpList =
    {
        "_winrt_Windows_UI_StartScreen.JumpList",
        sizeof(py::wrapper::Windows::UI::StartScreen::JumpList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_JumpList
    };

    // ----- JumpListItem class --------------------
    constexpr const char* const _type_name_JumpListItem = "JumpListItem";

    static PyObject* _new_JumpListItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_JumpListItem);
        return nullptr;
    }

    static void _dealloc_JumpListItem(py::wrapper::Windows::UI::StartScreen::JumpListItem* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* JumpListItem_CreateSeparator(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::StartScreen::JumpListItem::CreateSeparator());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JumpListItem_CreateWithArguments(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::UI::StartScreen::JumpListItem::CreateWithArguments(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JumpListItem_get_Logo(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JumpListItem_put_Logo(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JumpListItem_get_GroupName(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GroupName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JumpListItem_put_GroupName(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.GroupName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JumpListItem_get_DisplayName(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JumpListItem_put_DisplayName(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JumpListItem_get_Description(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int JumpListItem_put_Description(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Description(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* JumpListItem_get_Arguments(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* JumpListItem_get_Kind(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* JumpListItem_get_RemovedByUser(py::wrapper::Windows::UI::StartScreen::JumpListItem* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RemovedByUser());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_JumpListItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::JumpListItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_JumpListItem[] = {
        { "create_separator", (PyCFunction)JumpListItem_CreateSeparator, METH_VARARGS | METH_STATIC, nullptr },
        { "create_with_arguments", (PyCFunction)JumpListItem_CreateWithArguments, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_JumpListItem, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_JumpListItem[] = {
        { const_cast<char*>("logo"), (getter)JumpListItem_get_Logo, (setter)JumpListItem_put_Logo, nullptr, nullptr },
        { const_cast<char*>("group_name"), (getter)JumpListItem_get_GroupName, (setter)JumpListItem_put_GroupName, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)JumpListItem_get_DisplayName, (setter)JumpListItem_put_DisplayName, nullptr, nullptr },
        { const_cast<char*>("description"), (getter)JumpListItem_get_Description, (setter)JumpListItem_put_Description, nullptr, nullptr },
        { const_cast<char*>("arguments"), (getter)JumpListItem_get_Arguments, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)JumpListItem_get_Kind, nullptr, nullptr, nullptr },
        { const_cast<char*>("removed_by_user"), (getter)JumpListItem_get_RemovedByUser, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_JumpListItem[] = 
    {
        { Py_tp_new, _new_JumpListItem },
        { Py_tp_dealloc, _dealloc_JumpListItem },
        { Py_tp_methods, _methods_JumpListItem },
        { Py_tp_getset, _getset_JumpListItem },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_JumpListItem =
    {
        "_winrt_Windows_UI_StartScreen.JumpListItem",
        sizeof(py::wrapper::Windows::UI::StartScreen::JumpListItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_JumpListItem
    };

    // ----- SecondaryTile class --------------------
    constexpr const char* const _type_name_SecondaryTile = "SecondaryTile";

    static PyObject* _new_SecondaryTile(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::UI::StartScreen::TileSize>(args, 4);

                winrt::Windows::UI::StartScreen::SecondaryTile instance{ param0, param1, param2, param3, param4 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 6)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::UI::StartScreen::TileOptions>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 5);

                winrt::Windows::UI::StartScreen::SecondaryTile instance{ param0, param1, param2, param3, param4, param5 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 7)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::UI::StartScreen::TileOptions>(args, 4);
                auto param5 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 5);
                auto param6 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 6);

                winrt::Windows::UI::StartScreen::SecondaryTile instance{ param0, param1, param2, param3, param4, param5, param6 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::UI::StartScreen::SecondaryTile instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::StartScreen::SecondaryTile instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SecondaryTile(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SecondaryTile_Exists(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::UI::StartScreen::SecondaryTile::Exists(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_FindAllAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::StartScreen::SecondaryTile::FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::UI::StartScreen::SecondaryTile::FindAllAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_FindAllForPackageAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::StartScreen::SecondaryTile::FindAllForPackageAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_RequestCreateAsync(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.RequestCreateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Point>(args, 0);

                return py::convert(self->obj.RequestCreateAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_RequestCreateForSelectionAsync(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                return py::convert(self->obj.RequestCreateForSelectionAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                return py::convert(self->obj.RequestCreateForSelectionAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_RequestDeleteAsync(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.RequestDeleteAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Point>(args, 0);

                return py::convert(self->obj.RequestDeleteAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_RequestDeleteForSelectionAsync(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                return py::convert(self->obj.RequestDeleteForSelectionAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                return py::convert(self->obj.RequestDeleteForSelectionAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_UpdateAsync(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.UpdateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_get_ShortName(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShortName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_ShortName(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.ShortName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_TileId(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TileId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_TileId(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TileId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_LockScreenDisplayBadgeAndTileText(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LockScreenDisplayBadgeAndTileText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_LockScreenDisplayBadgeAndTileText(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.LockScreenDisplayBadgeAndTileText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_LockScreenBadgeLogo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LockScreenBadgeLogo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_LockScreenBadgeLogo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.LockScreenBadgeLogo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_Arguments(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_Arguments(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Arguments(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_ForegroundText(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ForegroundText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_ForegroundText(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::StartScreen::ForegroundText>(arg);

            self->obj.ForegroundText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_DisplayName(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_DisplayName(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_BackgroundColor(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_BackgroundColor(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.BackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_WideLogo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WideLogo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_WideLogo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.WideLogo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_TileOptions(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TileOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_TileOptions(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::StartScreen::TileOptions>(arg);

            self->obj.TileOptions(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_SmallLogo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SmallLogo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_SmallLogo(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.SmallLogo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_RoamingEnabled(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RoamingEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_RoamingEnabled(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.RoamingEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_PhoneticName(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PhoneticName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTile_put_PhoneticName(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PhoneticName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTile_get_VisualElements(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VisualElements());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_add_VisualElementsRequested(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::StartScreen::SecondaryTile, winrt::Windows::UI::StartScreen::VisualElementsRequestedEventArgs>>(arg);

            return py::convert(self->obj.VisualElementsRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SecondaryTile_remove_VisualElementsRequested(py::wrapper::Windows::UI::StartScreen::SecondaryTile* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.VisualElementsRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SecondaryTile(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::SecondaryTile>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SecondaryTile[] = {
        { "exists", (PyCFunction)SecondaryTile_Exists, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_async", (PyCFunction)SecondaryTile_FindAllAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "find_all_for_package_async", (PyCFunction)SecondaryTile_FindAllForPackageAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "request_create_async", (PyCFunction)SecondaryTile_RequestCreateAsync, METH_VARARGS, nullptr },
        { "request_create_for_selection_async", (PyCFunction)SecondaryTile_RequestCreateForSelectionAsync, METH_VARARGS, nullptr },
        { "request_delete_async", (PyCFunction)SecondaryTile_RequestDeleteAsync, METH_VARARGS, nullptr },
        { "request_delete_for_selection_async", (PyCFunction)SecondaryTile_RequestDeleteForSelectionAsync, METH_VARARGS, nullptr },
        { "update_async", (PyCFunction)SecondaryTile_UpdateAsync, METH_VARARGS, nullptr },
        { "add_visual_elements_requested", (PyCFunction)SecondaryTile_add_VisualElementsRequested, METH_O, nullptr },
        { "remove_visual_elements_requested", (PyCFunction)SecondaryTile_remove_VisualElementsRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_SecondaryTile, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SecondaryTile[] = {
        { const_cast<char*>("short_name"), (getter)SecondaryTile_get_ShortName, (setter)SecondaryTile_put_ShortName, nullptr, nullptr },
        { const_cast<char*>("logo"), (getter)SecondaryTile_get_Logo, (setter)SecondaryTile_put_Logo, nullptr, nullptr },
        { const_cast<char*>("tile_id"), (getter)SecondaryTile_get_TileId, (setter)SecondaryTile_put_TileId, nullptr, nullptr },
        { const_cast<char*>("lock_screen_display_badge_and_tile_text"), (getter)SecondaryTile_get_LockScreenDisplayBadgeAndTileText, (setter)SecondaryTile_put_LockScreenDisplayBadgeAndTileText, nullptr, nullptr },
        { const_cast<char*>("lock_screen_badge_logo"), (getter)SecondaryTile_get_LockScreenBadgeLogo, (setter)SecondaryTile_put_LockScreenBadgeLogo, nullptr, nullptr },
        { const_cast<char*>("arguments"), (getter)SecondaryTile_get_Arguments, (setter)SecondaryTile_put_Arguments, nullptr, nullptr },
        { const_cast<char*>("foreground_text"), (getter)SecondaryTile_get_ForegroundText, (setter)SecondaryTile_put_ForegroundText, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)SecondaryTile_get_DisplayName, (setter)SecondaryTile_put_DisplayName, nullptr, nullptr },
        { const_cast<char*>("background_color"), (getter)SecondaryTile_get_BackgroundColor, (setter)SecondaryTile_put_BackgroundColor, nullptr, nullptr },
        { const_cast<char*>("wide_logo"), (getter)SecondaryTile_get_WideLogo, (setter)SecondaryTile_put_WideLogo, nullptr, nullptr },
        { const_cast<char*>("tile_options"), (getter)SecondaryTile_get_TileOptions, (setter)SecondaryTile_put_TileOptions, nullptr, nullptr },
        { const_cast<char*>("small_logo"), (getter)SecondaryTile_get_SmallLogo, (setter)SecondaryTile_put_SmallLogo, nullptr, nullptr },
        { const_cast<char*>("roaming_enabled"), (getter)SecondaryTile_get_RoamingEnabled, (setter)SecondaryTile_put_RoamingEnabled, nullptr, nullptr },
        { const_cast<char*>("phonetic_name"), (getter)SecondaryTile_get_PhoneticName, (setter)SecondaryTile_put_PhoneticName, nullptr, nullptr },
        { const_cast<char*>("visual_elements"), (getter)SecondaryTile_get_VisualElements, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SecondaryTile[] = 
    {
        { Py_tp_new, _new_SecondaryTile },
        { Py_tp_dealloc, _dealloc_SecondaryTile },
        { Py_tp_methods, _methods_SecondaryTile },
        { Py_tp_getset, _getset_SecondaryTile },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SecondaryTile =
    {
        "_winrt_Windows_UI_StartScreen.SecondaryTile",
        sizeof(py::wrapper::Windows::UI::StartScreen::SecondaryTile),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SecondaryTile
    };

    // ----- SecondaryTileVisualElements class --------------------
    constexpr const char* const _type_name_SecondaryTileVisualElements = "SecondaryTileVisualElements";

    static PyObject* _new_SecondaryTileVisualElements(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SecondaryTileVisualElements);
        return nullptr;
    }

    static void _dealloc_SecondaryTileVisualElements(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SecondaryTileVisualElements_get_Square150x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Square150x150Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_Square150x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Square150x150Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_ShowNameOnWide310x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShowNameOnWide310x150Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_ShowNameOnWide310x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShowNameOnWide310x150Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_ShowNameOnSquare310x310Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShowNameOnSquare310x310Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_ShowNameOnSquare310x310Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShowNameOnSquare310x310Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_ShowNameOnSquare150x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShowNameOnSquare150x150Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_ShowNameOnSquare150x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShowNameOnSquare150x150Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_ForegroundText(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ForegroundText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_ForegroundText(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::StartScreen::ForegroundText>(arg);

            self->obj.ForegroundText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_BackgroundColor(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_BackgroundColor(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.BackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_Wide310x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Wide310x150Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_Wide310x150Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Wide310x150Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_Square70x70Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Square70x70Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_Square70x70Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Square70x70Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_Square310x310Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Square310x310Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_Square310x310Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Square310x310Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_Square30x30Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Square30x30Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_Square30x30Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Square30x30Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_Square71x71Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Square71x71Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_Square71x71Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Square71x71Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_Square44x44Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Square44x44Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SecondaryTileVisualElements_put_Square44x44Logo(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Square44x44Logo(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SecondaryTileVisualElements_get_MixedRealityModel(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MixedRealityModel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SecondaryTileVisualElements(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::SecondaryTileVisualElements>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SecondaryTileVisualElements[] = {
        { "_from", (PyCFunction)_from_SecondaryTileVisualElements, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_SecondaryTileVisualElements[] = {
        { const_cast<char*>("square150x150_logo"), (getter)SecondaryTileVisualElements_get_Square150x150Logo, (setter)SecondaryTileVisualElements_put_Square150x150Logo, nullptr, nullptr },
        { const_cast<char*>("show_name_on_wide310x150_logo"), (getter)SecondaryTileVisualElements_get_ShowNameOnWide310x150Logo, (setter)SecondaryTileVisualElements_put_ShowNameOnWide310x150Logo, nullptr, nullptr },
        { const_cast<char*>("show_name_on_square310x310_logo"), (getter)SecondaryTileVisualElements_get_ShowNameOnSquare310x310Logo, (setter)SecondaryTileVisualElements_put_ShowNameOnSquare310x310Logo, nullptr, nullptr },
        { const_cast<char*>("show_name_on_square150x150_logo"), (getter)SecondaryTileVisualElements_get_ShowNameOnSquare150x150Logo, (setter)SecondaryTileVisualElements_put_ShowNameOnSquare150x150Logo, nullptr, nullptr },
        { const_cast<char*>("foreground_text"), (getter)SecondaryTileVisualElements_get_ForegroundText, (setter)SecondaryTileVisualElements_put_ForegroundText, nullptr, nullptr },
        { const_cast<char*>("background_color"), (getter)SecondaryTileVisualElements_get_BackgroundColor, (setter)SecondaryTileVisualElements_put_BackgroundColor, nullptr, nullptr },
        { const_cast<char*>("wide310x150_logo"), (getter)SecondaryTileVisualElements_get_Wide310x150Logo, (setter)SecondaryTileVisualElements_put_Wide310x150Logo, nullptr, nullptr },
        { const_cast<char*>("square70x70_logo"), (getter)SecondaryTileVisualElements_get_Square70x70Logo, (setter)SecondaryTileVisualElements_put_Square70x70Logo, nullptr, nullptr },
        { const_cast<char*>("square310x310_logo"), (getter)SecondaryTileVisualElements_get_Square310x310Logo, (setter)SecondaryTileVisualElements_put_Square310x310Logo, nullptr, nullptr },
        { const_cast<char*>("square30x30_logo"), (getter)SecondaryTileVisualElements_get_Square30x30Logo, (setter)SecondaryTileVisualElements_put_Square30x30Logo, nullptr, nullptr },
        { const_cast<char*>("square71x71_logo"), (getter)SecondaryTileVisualElements_get_Square71x71Logo, (setter)SecondaryTileVisualElements_put_Square71x71Logo, nullptr, nullptr },
        { const_cast<char*>("square44x44_logo"), (getter)SecondaryTileVisualElements_get_Square44x44Logo, (setter)SecondaryTileVisualElements_put_Square44x44Logo, nullptr, nullptr },
        { const_cast<char*>("mixed_reality_model"), (getter)SecondaryTileVisualElements_get_MixedRealityModel, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_SecondaryTileVisualElements[] = 
    {
        { Py_tp_new, _new_SecondaryTileVisualElements },
        { Py_tp_dealloc, _dealloc_SecondaryTileVisualElements },
        { Py_tp_methods, _methods_SecondaryTileVisualElements },
        { Py_tp_getset, _getset_SecondaryTileVisualElements },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_SecondaryTileVisualElements =
    {
        "_winrt_Windows_UI_StartScreen.SecondaryTileVisualElements",
        sizeof(py::wrapper::Windows::UI::StartScreen::SecondaryTileVisualElements),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SecondaryTileVisualElements
    };

    // ----- StartScreenManager class --------------------
    constexpr const char* const _type_name_StartScreenManager = "StartScreenManager";

    static PyObject* _new_StartScreenManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_StartScreenManager);
        return nullptr;
    }

    static void _dealloc_StartScreenManager(py::wrapper::Windows::UI::StartScreen::StartScreenManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* StartScreenManager_ContainsAppListEntryAsync(py::wrapper::Windows::UI::StartScreen::StartScreenManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::AppListEntry>(args, 0);

                return py::convert(self->obj.ContainsAppListEntryAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StartScreenManager_ContainsSecondaryTileAsync(py::wrapper::Windows::UI::StartScreen::StartScreenManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsSecondaryTileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StartScreenManager_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::StartScreen::StartScreenManager::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StartScreenManager_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::UI::StartScreen::StartScreenManager::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StartScreenManager_RequestAddAppListEntryAsync(py::wrapper::Windows::UI::StartScreen::StartScreenManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::AppListEntry>(args, 0);

                return py::convert(self->obj.RequestAddAppListEntryAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StartScreenManager_SupportsAppListEntry(py::wrapper::Windows::UI::StartScreen::StartScreenManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::AppListEntry>(args, 0);

                return py::convert(self->obj.SupportsAppListEntry(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StartScreenManager_TryRemoveSecondaryTileAsync(py::wrapper::Windows::UI::StartScreen::StartScreenManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryRemoveSecondaryTileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StartScreenManager_get_User(py::wrapper::Windows::UI::StartScreen::StartScreenManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_StartScreenManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::StartScreenManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StartScreenManager[] = {
        { "contains_app_list_entry_async", (PyCFunction)StartScreenManager_ContainsAppListEntryAsync, METH_VARARGS, nullptr },
        { "contains_secondary_tile_async", (PyCFunction)StartScreenManager_ContainsSecondaryTileAsync, METH_VARARGS, nullptr },
        { "get_default", (PyCFunction)StartScreenManager_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "get_for_user", (PyCFunction)StartScreenManager_GetForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "request_add_app_list_entry_async", (PyCFunction)StartScreenManager_RequestAddAppListEntryAsync, METH_VARARGS, nullptr },
        { "supports_app_list_entry", (PyCFunction)StartScreenManager_SupportsAppListEntry, METH_VARARGS, nullptr },
        { "try_remove_secondary_tile_async", (PyCFunction)StartScreenManager_TryRemoveSecondaryTileAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_StartScreenManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_StartScreenManager[] = {
        { const_cast<char*>("user"), (getter)StartScreenManager_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_StartScreenManager[] = 
    {
        { Py_tp_new, _new_StartScreenManager },
        { Py_tp_dealloc, _dealloc_StartScreenManager },
        { Py_tp_methods, _methods_StartScreenManager },
        { Py_tp_getset, _getset_StartScreenManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_StartScreenManager =
    {
        "_winrt_Windows_UI_StartScreen.StartScreenManager",
        sizeof(py::wrapper::Windows::UI::StartScreen::StartScreenManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StartScreenManager
    };

    // ----- TileMixedRealityModel class --------------------
    constexpr const char* const _type_name_TileMixedRealityModel = "TileMixedRealityModel";

    static PyObject* _new_TileMixedRealityModel(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TileMixedRealityModel);
        return nullptr;
    }

    static void _dealloc_TileMixedRealityModel(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TileMixedRealityModel_get_Uri(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TileMixedRealityModel_put_Uri(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Uri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TileMixedRealityModel_get_BoundingBox(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TileMixedRealityModel_put_BoundingBox(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Perception::Spatial::SpatialBoundingBox>>(arg);

            self->obj.BoundingBox(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TileMixedRealityModel_get_ActivationBehavior(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivationBehavior());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TileMixedRealityModel_put_ActivationBehavior(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::StartScreen::TileMixedRealityModelActivationBehavior>(arg);

            self->obj.ActivationBehavior(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_TileMixedRealityModel(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::TileMixedRealityModel>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TileMixedRealityModel[] = {
        { "_from", (PyCFunction)_from_TileMixedRealityModel, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TileMixedRealityModel[] = {
        { const_cast<char*>("uri"), (getter)TileMixedRealityModel_get_Uri, (setter)TileMixedRealityModel_put_Uri, nullptr, nullptr },
        { const_cast<char*>("bounding_box"), (getter)TileMixedRealityModel_get_BoundingBox, (setter)TileMixedRealityModel_put_BoundingBox, nullptr, nullptr },
        { const_cast<char*>("activation_behavior"), (getter)TileMixedRealityModel_get_ActivationBehavior, (setter)TileMixedRealityModel_put_ActivationBehavior, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TileMixedRealityModel[] = 
    {
        { Py_tp_new, _new_TileMixedRealityModel },
        { Py_tp_dealloc, _dealloc_TileMixedRealityModel },
        { Py_tp_methods, _methods_TileMixedRealityModel },
        { Py_tp_getset, _getset_TileMixedRealityModel },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TileMixedRealityModel =
    {
        "_winrt_Windows_UI_StartScreen.TileMixedRealityModel",
        sizeof(py::wrapper::Windows::UI::StartScreen::TileMixedRealityModel),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TileMixedRealityModel
    };

    // ----- VisualElementsRequest class --------------------
    constexpr const char* const _type_name_VisualElementsRequest = "VisualElementsRequest";

    static PyObject* _new_VisualElementsRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VisualElementsRequest);
        return nullptr;
    }

    static void _dealloc_VisualElementsRequest(py::wrapper::Windows::UI::StartScreen::VisualElementsRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VisualElementsRequest_GetDeferral(py::wrapper::Windows::UI::StartScreen::VisualElementsRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VisualElementsRequest_get_AlternateVisualElements(py::wrapper::Windows::UI::StartScreen::VisualElementsRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlternateVisualElements());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VisualElementsRequest_get_Deadline(py::wrapper::Windows::UI::StartScreen::VisualElementsRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VisualElementsRequest_get_VisualElements(py::wrapper::Windows::UI::StartScreen::VisualElementsRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VisualElements());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VisualElementsRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::VisualElementsRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VisualElementsRequest[] = {
        { "get_deferral", (PyCFunction)VisualElementsRequest_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_VisualElementsRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VisualElementsRequest[] = {
        { const_cast<char*>("alternate_visual_elements"), (getter)VisualElementsRequest_get_AlternateVisualElements, nullptr, nullptr, nullptr },
        { const_cast<char*>("deadline"), (getter)VisualElementsRequest_get_Deadline, nullptr, nullptr, nullptr },
        { const_cast<char*>("visual_elements"), (getter)VisualElementsRequest_get_VisualElements, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VisualElementsRequest[] = 
    {
        { Py_tp_new, _new_VisualElementsRequest },
        { Py_tp_dealloc, _dealloc_VisualElementsRequest },
        { Py_tp_methods, _methods_VisualElementsRequest },
        { Py_tp_getset, _getset_VisualElementsRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VisualElementsRequest =
    {
        "_winrt_Windows_UI_StartScreen.VisualElementsRequest",
        sizeof(py::wrapper::Windows::UI::StartScreen::VisualElementsRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VisualElementsRequest
    };

    // ----- VisualElementsRequestDeferral class --------------------
    constexpr const char* const _type_name_VisualElementsRequestDeferral = "VisualElementsRequestDeferral";

    static PyObject* _new_VisualElementsRequestDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VisualElementsRequestDeferral);
        return nullptr;
    }

    static void _dealloc_VisualElementsRequestDeferral(py::wrapper::Windows::UI::StartScreen::VisualElementsRequestDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VisualElementsRequestDeferral_Complete(py::wrapper::Windows::UI::StartScreen::VisualElementsRequestDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_VisualElementsRequestDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::VisualElementsRequestDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VisualElementsRequestDeferral[] = {
        { "complete", (PyCFunction)VisualElementsRequestDeferral_Complete, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_VisualElementsRequestDeferral, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VisualElementsRequestDeferral[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_VisualElementsRequestDeferral[] = 
    {
        { Py_tp_new, _new_VisualElementsRequestDeferral },
        { Py_tp_dealloc, _dealloc_VisualElementsRequestDeferral },
        { Py_tp_methods, _methods_VisualElementsRequestDeferral },
        { Py_tp_getset, _getset_VisualElementsRequestDeferral },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VisualElementsRequestDeferral =
    {
        "_winrt_Windows_UI_StartScreen.VisualElementsRequestDeferral",
        sizeof(py::wrapper::Windows::UI::StartScreen::VisualElementsRequestDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VisualElementsRequestDeferral
    };

    // ----- VisualElementsRequestedEventArgs class --------------------
    constexpr const char* const _type_name_VisualElementsRequestedEventArgs = "VisualElementsRequestedEventArgs";

    static PyObject* _new_VisualElementsRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VisualElementsRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_VisualElementsRequestedEventArgs(py::wrapper::Windows::UI::StartScreen::VisualElementsRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VisualElementsRequestedEventArgs_get_Request(py::wrapper::Windows::UI::StartScreen::VisualElementsRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VisualElementsRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::StartScreen::VisualElementsRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VisualElementsRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_VisualElementsRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VisualElementsRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)VisualElementsRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VisualElementsRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_VisualElementsRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_VisualElementsRequestedEventArgs },
        { Py_tp_methods, _methods_VisualElementsRequestedEventArgs },
        { Py_tp_getset, _getset_VisualElementsRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VisualElementsRequestedEventArgs =
    {
        "_winrt_Windows_UI_StartScreen.VisualElementsRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::StartScreen::VisualElementsRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VisualElementsRequestedEventArgs
    };

    // ----- Windows.UI.StartScreen Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::StartScreen::JumpList>::python_type = py::register_python_type(module, _type_name_JumpList, &_type_spec_JumpList, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::JumpListItem>::python_type = py::register_python_type(module, _type_name_JumpListItem, &_type_spec_JumpListItem, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::SecondaryTile>::python_type = py::register_python_type(module, _type_name_SecondaryTile, &_type_spec_SecondaryTile, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::SecondaryTileVisualElements>::python_type = py::register_python_type(module, _type_name_SecondaryTileVisualElements, &_type_spec_SecondaryTileVisualElements, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::StartScreenManager>::python_type = py::register_python_type(module, _type_name_StartScreenManager, &_type_spec_StartScreenManager, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::TileMixedRealityModel>::python_type = py::register_python_type(module, _type_name_TileMixedRealityModel, &_type_spec_TileMixedRealityModel, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::VisualElementsRequest>::python_type = py::register_python_type(module, _type_name_VisualElementsRequest, &_type_spec_VisualElementsRequest, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::VisualElementsRequestDeferral>::python_type = py::register_python_type(module, _type_name_VisualElementsRequestDeferral, &_type_spec_VisualElementsRequestDeferral, bases.get());
            py::winrt_type<winrt::Windows::UI::StartScreen::VisualElementsRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_VisualElementsRequestedEventArgs, &_type_spec_VisualElementsRequestedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.StartScreen");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_StartScreen",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::StartScreen

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_StartScreen (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::StartScreen::module_def);
}
