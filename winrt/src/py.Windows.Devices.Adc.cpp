// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Adc.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Adc::AdcChannel>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Adc::AdcController>::python_type;

namespace py::cpp::Windows::Devices::Adc
{
    // ----- AdcChannel class --------------------
    constexpr const char* const _type_name_AdcChannel = "AdcChannel";

    static PyObject* _new_AdcChannel(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AdcChannel);
        return nullptr;
    }

    static void _dealloc_AdcChannel(py::wrapper::Windows::Devices::Adc::AdcChannel* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AdcChannel_Close(py::wrapper::Windows::Devices::Adc::AdcChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdcChannel_ReadRatio(py::wrapper::Windows::Devices::Adc::AdcChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReadRatio());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdcChannel_ReadValue(py::wrapper::Windows::Devices::Adc::AdcChannel* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ReadValue());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdcChannel_get_Controller(py::wrapper::Windows::Devices::Adc::AdcChannel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Controller());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AdcChannel(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Adc::AdcChannel>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_AdcChannel(py::wrapper::Windows::Devices::Adc::AdcChannel* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_AdcChannel(py::wrapper::Windows::Devices::Adc::AdcChannel* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AdcChannel[] = {
        { "close", (PyCFunction)AdcChannel_Close, METH_VARARGS, nullptr },
        { "read_ratio", (PyCFunction)AdcChannel_ReadRatio, METH_VARARGS, nullptr },
        { "read_value", (PyCFunction)AdcChannel_ReadValue, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AdcChannel, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_AdcChannel, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_AdcChannel, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AdcChannel[] = {
        { const_cast<char*>("controller"), (getter)AdcChannel_get_Controller, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AdcChannel[] = 
    {
        { Py_tp_new, _new_AdcChannel },
        { Py_tp_dealloc, _dealloc_AdcChannel },
        { Py_tp_methods, _methods_AdcChannel },
        { Py_tp_getset, _getset_AdcChannel },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AdcChannel =
    {
        "_winrt_Windows_Devices_Adc.AdcChannel",
        sizeof(py::wrapper::Windows::Devices::Adc::AdcChannel),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AdcChannel
    };

    // ----- AdcController class --------------------
    constexpr const char* const _type_name_AdcController = "AdcController";

    static PyObject* _new_AdcController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AdcController);
        return nullptr;
    }

    static void _dealloc_AdcController(py::wrapper::Windows::Devices::Adc::AdcController* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AdcController_GetControllersAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Adc::Provider::IAdcProvider>(args, 0);

                return py::convert(winrt::Windows::Devices::Adc::AdcController::GetControllersAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdcController_GetDefaultAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Adc::AdcController::GetDefaultAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdcController_IsChannelModeSupported(py::wrapper::Windows::Devices::Adc::AdcController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Adc::AdcChannelMode>(args, 0);

                return py::convert(self->obj.IsChannelModeSupported(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdcController_OpenChannel(py::wrapper::Windows::Devices::Adc::AdcController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.OpenChannel(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AdcController_get_ChannelMode(py::wrapper::Windows::Devices::Adc::AdcController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChannelMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AdcController_put_ChannelMode(py::wrapper::Windows::Devices::Adc::AdcController* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::Adc::AdcChannelMode>(arg);

            self->obj.ChannelMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AdcController_get_ChannelCount(py::wrapper::Windows::Devices::Adc::AdcController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ChannelCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AdcController_get_MaxValue(py::wrapper::Windows::Devices::Adc::AdcController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AdcController_get_MinValue(py::wrapper::Windows::Devices::Adc::AdcController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AdcController_get_ResolutionInBits(py::wrapper::Windows::Devices::Adc::AdcController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolutionInBits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AdcController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Adc::AdcController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AdcController[] = {
        { "get_controllers_async", (PyCFunction)AdcController_GetControllersAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_default_async", (PyCFunction)AdcController_GetDefaultAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "is_channel_mode_supported", (PyCFunction)AdcController_IsChannelModeSupported, METH_VARARGS, nullptr },
        { "open_channel", (PyCFunction)AdcController_OpenChannel, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AdcController, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AdcController[] = {
        { const_cast<char*>("channel_mode"), (getter)AdcController_get_ChannelMode, (setter)AdcController_put_ChannelMode, nullptr, nullptr },
        { const_cast<char*>("channel_count"), (getter)AdcController_get_ChannelCount, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_value"), (getter)AdcController_get_MaxValue, nullptr, nullptr, nullptr },
        { const_cast<char*>("min_value"), (getter)AdcController_get_MinValue, nullptr, nullptr, nullptr },
        { const_cast<char*>("resolution_in_bits"), (getter)AdcController_get_ResolutionInBits, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AdcController[] = 
    {
        { Py_tp_new, _new_AdcController },
        { Py_tp_dealloc, _dealloc_AdcController },
        { Py_tp_methods, _methods_AdcController },
        { Py_tp_getset, _getset_AdcController },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AdcController =
    {
        "_winrt_Windows_Devices_Adc.AdcController",
        sizeof(py::wrapper::Windows::Devices::Adc::AdcController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AdcController
    };

    // ----- Windows.Devices.Adc Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Adc::AdcChannel>::python_type = py::register_python_type(module, _type_name_AdcChannel, &_type_spec_AdcChannel, bases.get());
            py::winrt_type<winrt::Windows::Devices::Adc::AdcController>::python_type = py::register_python_type(module, _type_name_AdcController, &_type_spec_AdcController, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Adc");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Adc",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Adc

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Adc (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Adc::module_def);
}
