// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Management.Update.h"

PyTypeObject* py::winrt_type<winrt::Windows::Management::Update::PreviewBuildsManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Management::Update::PreviewBuildsState>::python_type;

namespace py::cpp::Windows::Management::Update
{
    // ----- PreviewBuildsManager class --------------------
    constexpr const char* const _type_name_PreviewBuildsManager = "PreviewBuildsManager";

    static PyObject* _new_PreviewBuildsManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PreviewBuildsManager);
        return nullptr;
    }

    static void _dealloc_PreviewBuildsManager(py::wrapper::Windows::Management::Update::PreviewBuildsManager* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PreviewBuildsManager_GetCurrentState(py::wrapper::Windows::Management::Update::PreviewBuildsManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCurrentState());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PreviewBuildsManager_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Management::Update::PreviewBuildsManager::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PreviewBuildsManager_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Management::Update::PreviewBuildsManager::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PreviewBuildsManager_SyncAsync(py::wrapper::Windows::Management::Update::PreviewBuildsManager* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.SyncAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PreviewBuildsManager_get_ArePreviewBuildsAllowed(py::wrapper::Windows::Management::Update::PreviewBuildsManager* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ArePreviewBuildsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PreviewBuildsManager_put_ArePreviewBuildsAllowed(py::wrapper::Windows::Management::Update::PreviewBuildsManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ArePreviewBuildsAllowed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PreviewBuildsManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Management::Update::PreviewBuildsManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PreviewBuildsManager[] = {
        { "get_current_state", (PyCFunction)PreviewBuildsManager_GetCurrentState, METH_VARARGS, nullptr },
        { "get_default", (PyCFunction)PreviewBuildsManager_GetDefault, METH_VARARGS | METH_STATIC, nullptr },
        { "is_supported", (PyCFunction)PreviewBuildsManager_IsSupported, METH_VARARGS | METH_STATIC, nullptr },
        { "sync_async", (PyCFunction)PreviewBuildsManager_SyncAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PreviewBuildsManager, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PreviewBuildsManager[] = {
        { const_cast<char*>("are_preview_builds_allowed"), (getter)PreviewBuildsManager_get_ArePreviewBuildsAllowed, (setter)PreviewBuildsManager_put_ArePreviewBuildsAllowed, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PreviewBuildsManager[] = 
    {
        { Py_tp_new, _new_PreviewBuildsManager },
        { Py_tp_dealloc, _dealloc_PreviewBuildsManager },
        { Py_tp_methods, _methods_PreviewBuildsManager },
        { Py_tp_getset, _getset_PreviewBuildsManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PreviewBuildsManager =
    {
        "_winrt_Windows_Management_Update.PreviewBuildsManager",
        sizeof(py::wrapper::Windows::Management::Update::PreviewBuildsManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PreviewBuildsManager
    };

    // ----- PreviewBuildsState class --------------------
    constexpr const char* const _type_name_PreviewBuildsState = "PreviewBuildsState";

    static PyObject* _new_PreviewBuildsState(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PreviewBuildsState);
        return nullptr;
    }

    static void _dealloc_PreviewBuildsState(py::wrapper::Windows::Management::Update::PreviewBuildsState* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PreviewBuildsState_get_Properties(py::wrapper::Windows::Management::Update::PreviewBuildsState* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PreviewBuildsState(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Management::Update::PreviewBuildsState>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PreviewBuildsState[] = {
        { "_from", (PyCFunction)_from_PreviewBuildsState, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PreviewBuildsState[] = {
        { const_cast<char*>("properties"), (getter)PreviewBuildsState_get_Properties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PreviewBuildsState[] = 
    {
        { Py_tp_new, _new_PreviewBuildsState },
        { Py_tp_dealloc, _dealloc_PreviewBuildsState },
        { Py_tp_methods, _methods_PreviewBuildsState },
        { Py_tp_getset, _getset_PreviewBuildsState },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PreviewBuildsState =
    {
        "_winrt_Windows_Management_Update.PreviewBuildsState",
        sizeof(py::wrapper::Windows::Management::Update::PreviewBuildsState),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PreviewBuildsState
    };

    // ----- Windows.Management.Update Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Management::Update::PreviewBuildsManager>::python_type = py::register_python_type(module, _type_name_PreviewBuildsManager, &_type_spec_PreviewBuildsManager, bases.get());
            py::winrt_type<winrt::Windows::Management::Update::PreviewBuildsState>::python_type = py::register_python_type(module, _type_name_PreviewBuildsState, &_type_spec_PreviewBuildsState, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Management.Update");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Management_Update",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Management::Update

PyMODINIT_FUNC
PyInit__winrt_Windows_Management_Update (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Management::Update::module_def);
}
