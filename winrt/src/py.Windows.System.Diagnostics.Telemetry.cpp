// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.System.Diagnostics.Telemetry.h"

PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings>::python_type;

namespace py::cpp::Windows::System::Diagnostics::Telemetry
{
    // ----- PlatformTelemetryClient class --------------------
    constexpr const char* const _type_name_PlatformTelemetryClient = "PlatformTelemetryClient";

    static PyObject* _new_PlatformTelemetryClient(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PlatformTelemetryClient);
        return nullptr;
    }

    static PyObject* PlatformTelemetryClient_Register(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient::Register(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings>(args, 1);

                return py::convert(winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient::Register(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformTelemetryClient[] = {
        { "register", (PyCFunction)PlatformTelemetryClient_Register, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PlatformTelemetryClient[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PlatformTelemetryClient[] = 
    {
        { Py_tp_new, _new_PlatformTelemetryClient },
        { Py_tp_methods, _methods_PlatformTelemetryClient },
        { Py_tp_getset, _getset_PlatformTelemetryClient },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PlatformTelemetryClient =
    {
        "_winrt_Windows_System_Diagnostics_Telemetry.PlatformTelemetryClient",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformTelemetryClient
    };

    // ----- PlatformTelemetryRegistrationResult class --------------------
    constexpr const char* const _type_name_PlatformTelemetryRegistrationResult = "PlatformTelemetryRegistrationResult";

    static PyObject* _new_PlatformTelemetryRegistrationResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PlatformTelemetryRegistrationResult);
        return nullptr;
    }

    static void _dealloc_PlatformTelemetryRegistrationResult(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PlatformTelemetryRegistrationResult_get_Status(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PlatformTelemetryRegistrationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformTelemetryRegistrationResult[] = {
        { "_from", (PyCFunction)_from_PlatformTelemetryRegistrationResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PlatformTelemetryRegistrationResult[] = {
        { const_cast<char*>("status"), (getter)PlatformTelemetryRegistrationResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PlatformTelemetryRegistrationResult[] = 
    {
        { Py_tp_new, _new_PlatformTelemetryRegistrationResult },
        { Py_tp_dealloc, _dealloc_PlatformTelemetryRegistrationResult },
        { Py_tp_methods, _methods_PlatformTelemetryRegistrationResult },
        { Py_tp_getset, _getset_PlatformTelemetryRegistrationResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PlatformTelemetryRegistrationResult =
    {
        "_winrt_Windows_System_Diagnostics_Telemetry.PlatformTelemetryRegistrationResult",
        sizeof(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformTelemetryRegistrationResult
    };

    // ----- PlatformTelemetryRegistrationSettings class --------------------
    constexpr const char* const _type_name_PlatformTelemetryRegistrationSettings = "PlatformTelemetryRegistrationSettings";

    static PyObject* _new_PlatformTelemetryRegistrationSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PlatformTelemetryRegistrationSettings(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PlatformTelemetryRegistrationSettings_get_UploadQuotaSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UploadQuotaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlatformTelemetryRegistrationSettings_put_UploadQuotaSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.UploadQuotaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PlatformTelemetryRegistrationSettings_get_StorageSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StorageSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlatformTelemetryRegistrationSettings_put_StorageSize(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.StorageSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PlatformTelemetryRegistrationSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlatformTelemetryRegistrationSettings[] = {
        { "_from", (PyCFunction)_from_PlatformTelemetryRegistrationSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PlatformTelemetryRegistrationSettings[] = {
        { const_cast<char*>("upload_quota_size"), (getter)PlatformTelemetryRegistrationSettings_get_UploadQuotaSize, (setter)PlatformTelemetryRegistrationSettings_put_UploadQuotaSize, nullptr, nullptr },
        { const_cast<char*>("storage_size"), (getter)PlatformTelemetryRegistrationSettings_get_StorageSize, (setter)PlatformTelemetryRegistrationSettings_put_StorageSize, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PlatformTelemetryRegistrationSettings[] = 
    {
        { Py_tp_new, _new_PlatformTelemetryRegistrationSettings },
        { Py_tp_dealloc, _dealloc_PlatformTelemetryRegistrationSettings },
        { Py_tp_methods, _methods_PlatformTelemetryRegistrationSettings },
        { Py_tp_getset, _getset_PlatformTelemetryRegistrationSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PlatformTelemetryRegistrationSettings =
    {
        "_winrt_Windows_System_Diagnostics_Telemetry.PlatformTelemetryRegistrationSettings",
        sizeof(py::wrapper::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlatformTelemetryRegistrationSettings
    };

    // ----- Windows.System.Diagnostics.Telemetry Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient>::python_type = py::register_python_type(module, _type_name_PlatformTelemetryClient, &_type_spec_PlatformTelemetryClient, nullptr);
            py::winrt_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult>::python_type = py::register_python_type(module, _type_name_PlatformTelemetryRegistrationResult, &_type_spec_PlatformTelemetryRegistrationResult, bases.get());
            py::winrt_type<winrt::Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings>::python_type = py::register_python_type(module, _type_name_PlatformTelemetryRegistrationSettings, &_type_spec_PlatformTelemetryRegistrationSettings, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.System.Diagnostics.Telemetry");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_System_Diagnostics_Telemetry",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::System::Diagnostics::Telemetry

PyMODINIT_FUNC
PyInit__winrt_Windows_System_Diagnostics_Telemetry (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::System::Diagnostics::Telemetry::module_def);
}
