// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Media.Miracast.h"

PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiver>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverApplySettingsResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverConnection>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannel>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverDisconnectedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverGameControllerDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverInputDevices>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverKeyboardDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverSession>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverSessionStartResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverStatus>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverStreamControl>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Miracast::MiracastTransmitter>::python_type;

namespace py::cpp::Windows::Media::Miracast
{
    // ----- MiracastReceiver class --------------------
    constexpr const char* const _type_name_MiracastReceiver = "MiracastReceiver";

    static PyObject* _new_MiracastReceiver(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::Miracast::MiracastReceiver instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MiracastReceiver(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiver_ClearKnownTransmitters(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.ClearKnownTransmitters();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_CreateSession(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::CoreApplicationView>(args, 0);

                return py::convert(self->obj.CreateSession(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_CreateSessionAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Core::CoreApplicationView>(args, 0);

                return py::convert(self->obj.CreateSessionAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_DisconnectAllAndApplySettings(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverSettings>(args, 0);

                return py::convert(self->obj.DisconnectAllAndApplySettings(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_DisconnectAllAndApplySettingsAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverSettings>(args, 0);

                return py::convert(self->obj.DisconnectAllAndApplySettingsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_GetCurrentSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCurrentSettings());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_GetCurrentSettingsAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetCurrentSettingsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_GetDefaultSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDefaultSettings());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_GetStatus(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStatus());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_GetStatusAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetStatusAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_RemoveKnownTransmitter(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastTransmitter>(args, 0);

                self->obj.RemoveKnownTransmitter(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_add_StatusChanged(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiver, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.StatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiver_remove_StatusChanged(py::wrapper::Windows::Media::Miracast::MiracastReceiver* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.StatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiver[] = {
        { "clear_known_transmitters", (PyCFunction)MiracastReceiver_ClearKnownTransmitters, METH_VARARGS, nullptr },
        { "create_session", (PyCFunction)MiracastReceiver_CreateSession, METH_VARARGS, nullptr },
        { "create_session_async", (PyCFunction)MiracastReceiver_CreateSessionAsync, METH_VARARGS, nullptr },
        { "disconnect_all_and_apply_settings", (PyCFunction)MiracastReceiver_DisconnectAllAndApplySettings, METH_VARARGS, nullptr },
        { "disconnect_all_and_apply_settings_async", (PyCFunction)MiracastReceiver_DisconnectAllAndApplySettingsAsync, METH_VARARGS, nullptr },
        { "get_current_settings", (PyCFunction)MiracastReceiver_GetCurrentSettings, METH_VARARGS, nullptr },
        { "get_current_settings_async", (PyCFunction)MiracastReceiver_GetCurrentSettingsAsync, METH_VARARGS, nullptr },
        { "get_default_settings", (PyCFunction)MiracastReceiver_GetDefaultSettings, METH_VARARGS, nullptr },
        { "get_status", (PyCFunction)MiracastReceiver_GetStatus, METH_VARARGS, nullptr },
        { "get_status_async", (PyCFunction)MiracastReceiver_GetStatusAsync, METH_VARARGS, nullptr },
        { "remove_known_transmitter", (PyCFunction)MiracastReceiver_RemoveKnownTransmitter, METH_VARARGS, nullptr },
        { "add_status_changed", (PyCFunction)MiracastReceiver_add_StatusChanged, METH_O, nullptr },
        { "remove_status_changed", (PyCFunction)MiracastReceiver_remove_StatusChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiver, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiver[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiver[] = 
    {
        { Py_tp_new, _new_MiracastReceiver },
        { Py_tp_dealloc, _dealloc_MiracastReceiver },
        { Py_tp_methods, _methods_MiracastReceiver },
        { Py_tp_getset, _getset_MiracastReceiver },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiver =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiver",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiver),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiver
    };

    // ----- MiracastReceiverApplySettingsResult class --------------------
    constexpr const char* const _type_name_MiracastReceiverApplySettingsResult = "MiracastReceiverApplySettingsResult";

    static PyObject* _new_MiracastReceiverApplySettingsResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverApplySettingsResult);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverApplySettingsResult(py::wrapper::Windows::Media::Miracast::MiracastReceiverApplySettingsResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverApplySettingsResult_get_ExtendedError(py::wrapper::Windows::Media::Miracast::MiracastReceiverApplySettingsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExtendedError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverApplySettingsResult_get_Status(py::wrapper::Windows::Media::Miracast::MiracastReceiverApplySettingsResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverApplySettingsResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverApplySettingsResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverApplySettingsResult[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverApplySettingsResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverApplySettingsResult[] = {
        { const_cast<char*>("extended_error"), (getter)MiracastReceiverApplySettingsResult_get_ExtendedError, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)MiracastReceiverApplySettingsResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverApplySettingsResult[] = 
    {
        { Py_tp_new, _new_MiracastReceiverApplySettingsResult },
        { Py_tp_dealloc, _dealloc_MiracastReceiverApplySettingsResult },
        { Py_tp_methods, _methods_MiracastReceiverApplySettingsResult },
        { Py_tp_getset, _getset_MiracastReceiverApplySettingsResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverApplySettingsResult =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverApplySettingsResult",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverApplySettingsResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverApplySettingsResult
    };

    // ----- MiracastReceiverConnection class --------------------
    constexpr const char* const _type_name_MiracastReceiverConnection = "MiracastReceiverConnection";

    static PyObject* _new_MiracastReceiverConnection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverConnection);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverConnection(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverConnection_Close(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_Disconnect(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverDisconnectReason>(args, 0);

                self->obj.Disconnect(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverDisconnectReason>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.Disconnect(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_Pause(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Pause();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_PauseAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PauseAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_Resume(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Resume();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_ResumeAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ResumeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_get_CursorImageChannel(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CursorImageChannel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_get_InputDevices(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputDevices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_get_StreamControl(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StreamControl());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnection_get_Transmitter(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Transmitter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverConnection(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverConnection>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MiracastReceiverConnection(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MiracastReceiverConnection(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverConnection[] = {
        { "close", (PyCFunction)MiracastReceiverConnection_Close, METH_VARARGS, nullptr },
        { "disconnect", (PyCFunction)MiracastReceiverConnection_Disconnect, METH_VARARGS, nullptr },
        { "pause", (PyCFunction)MiracastReceiverConnection_Pause, METH_VARARGS, nullptr },
        { "pause_async", (PyCFunction)MiracastReceiverConnection_PauseAsync, METH_VARARGS, nullptr },
        { "resume", (PyCFunction)MiracastReceiverConnection_Resume, METH_VARARGS, nullptr },
        { "resume_async", (PyCFunction)MiracastReceiverConnection_ResumeAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverConnection, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MiracastReceiverConnection, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MiracastReceiverConnection, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverConnection[] = {
        { const_cast<char*>("cursor_image_channel"), (getter)MiracastReceiverConnection_get_CursorImageChannel, nullptr, nullptr, nullptr },
        { const_cast<char*>("input_devices"), (getter)MiracastReceiverConnection_get_InputDevices, nullptr, nullptr, nullptr },
        { const_cast<char*>("stream_control"), (getter)MiracastReceiverConnection_get_StreamControl, nullptr, nullptr, nullptr },
        { const_cast<char*>("transmitter"), (getter)MiracastReceiverConnection_get_Transmitter, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverConnection[] = 
    {
        { Py_tp_new, _new_MiracastReceiverConnection },
        { Py_tp_dealloc, _dealloc_MiracastReceiverConnection },
        { Py_tp_methods, _methods_MiracastReceiverConnection },
        { Py_tp_getset, _getset_MiracastReceiverConnection },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverConnection =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverConnection",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnection),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverConnection
    };

    // ----- MiracastReceiverConnectionCreatedEventArgs class --------------------
    constexpr const char* const _type_name_MiracastReceiverConnectionCreatedEventArgs = "MiracastReceiverConnectionCreatedEventArgs";

    static PyObject* _new_MiracastReceiverConnectionCreatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverConnectionCreatedEventArgs);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverConnectionCreatedEventArgs(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverConnectionCreatedEventArgs_GetDeferral(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnectionCreatedEventArgs_get_Connection(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Connection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverConnectionCreatedEventArgs_get_Pin(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Pin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverConnectionCreatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverConnectionCreatedEventArgs[] = {
        { "get_deferral", (PyCFunction)MiracastReceiverConnectionCreatedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverConnectionCreatedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverConnectionCreatedEventArgs[] = {
        { const_cast<char*>("connection"), (getter)MiracastReceiverConnectionCreatedEventArgs_get_Connection, nullptr, nullptr, nullptr },
        { const_cast<char*>("pin"), (getter)MiracastReceiverConnectionCreatedEventArgs_get_Pin, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverConnectionCreatedEventArgs[] = 
    {
        { Py_tp_new, _new_MiracastReceiverConnectionCreatedEventArgs },
        { Py_tp_dealloc, _dealloc_MiracastReceiverConnectionCreatedEventArgs },
        { Py_tp_methods, _methods_MiracastReceiverConnectionCreatedEventArgs },
        { Py_tp_getset, _getset_MiracastReceiverConnectionCreatedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverConnectionCreatedEventArgs =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverConnectionCreatedEventArgs",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverConnectionCreatedEventArgs
    };

    // ----- MiracastReceiverCursorImageChannel class --------------------
    constexpr const char* const _type_name_MiracastReceiverCursorImageChannel = "MiracastReceiverCursorImageChannel";

    static PyObject* _new_MiracastReceiverCursorImageChannel(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverCursorImageChannel);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverCursorImageChannel(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverCursorImageChannel_get_ImageStream(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ImageStream());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannel_get_IsEnabled(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannel_get_MaxImageSize(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxImageSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannel_get_Position(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Position());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannel_add_ImageStreamChanged(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannel, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ImageStreamChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannel_remove_ImageStreamChanged(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ImageStreamChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannel_add_PositionChanged(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannel, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.PositionChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannel_remove_PositionChanged(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PositionChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverCursorImageChannel(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannel>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverCursorImageChannel[] = {
        { "add_image_stream_changed", (PyCFunction)MiracastReceiverCursorImageChannel_add_ImageStreamChanged, METH_O, nullptr },
        { "remove_image_stream_changed", (PyCFunction)MiracastReceiverCursorImageChannel_remove_ImageStreamChanged, METH_O, nullptr },
        { "add_position_changed", (PyCFunction)MiracastReceiverCursorImageChannel_add_PositionChanged, METH_O, nullptr },
        { "remove_position_changed", (PyCFunction)MiracastReceiverCursorImageChannel_remove_PositionChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverCursorImageChannel, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverCursorImageChannel[] = {
        { const_cast<char*>("image_stream"), (getter)MiracastReceiverCursorImageChannel_get_ImageStream, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_enabled"), (getter)MiracastReceiverCursorImageChannel_get_IsEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_image_size"), (getter)MiracastReceiverCursorImageChannel_get_MaxImageSize, nullptr, nullptr, nullptr },
        { const_cast<char*>("position"), (getter)MiracastReceiverCursorImageChannel_get_Position, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverCursorImageChannel[] = 
    {
        { Py_tp_new, _new_MiracastReceiverCursorImageChannel },
        { Py_tp_dealloc, _dealloc_MiracastReceiverCursorImageChannel },
        { Py_tp_methods, _methods_MiracastReceiverCursorImageChannel },
        { Py_tp_getset, _getset_MiracastReceiverCursorImageChannel },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverCursorImageChannel =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverCursorImageChannel",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannel),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverCursorImageChannel
    };

    // ----- MiracastReceiverCursorImageChannelSettings class --------------------
    constexpr const char* const _type_name_MiracastReceiverCursorImageChannelSettings = "MiracastReceiverCursorImageChannelSettings";

    static PyObject* _new_MiracastReceiverCursorImageChannelSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverCursorImageChannelSettings);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverCursorImageChannelSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverCursorImageChannelSettings_get_MaxImageSize(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxImageSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverCursorImageChannelSettings_put_MaxImageSize(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::SizeInt32>(arg);

            self->obj.MaxImageSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverCursorImageChannelSettings_get_IsEnabled(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverCursorImageChannelSettings_put_IsEnabled(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_MiracastReceiverCursorImageChannelSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverCursorImageChannelSettings[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverCursorImageChannelSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverCursorImageChannelSettings[] = {
        { const_cast<char*>("max_image_size"), (getter)MiracastReceiverCursorImageChannelSettings_get_MaxImageSize, (setter)MiracastReceiverCursorImageChannelSettings_put_MaxImageSize, nullptr, nullptr },
        { const_cast<char*>("is_enabled"), (getter)MiracastReceiverCursorImageChannelSettings_get_IsEnabled, (setter)MiracastReceiverCursorImageChannelSettings_put_IsEnabled, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverCursorImageChannelSettings[] = 
    {
        { Py_tp_new, _new_MiracastReceiverCursorImageChannelSettings },
        { Py_tp_dealloc, _dealloc_MiracastReceiverCursorImageChannelSettings },
        { Py_tp_methods, _methods_MiracastReceiverCursorImageChannelSettings },
        { Py_tp_getset, _getset_MiracastReceiverCursorImageChannelSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverCursorImageChannelSettings =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverCursorImageChannelSettings",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverCursorImageChannelSettings
    };

    // ----- MiracastReceiverDisconnectedEventArgs class --------------------
    constexpr const char* const _type_name_MiracastReceiverDisconnectedEventArgs = "MiracastReceiverDisconnectedEventArgs";

    static PyObject* _new_MiracastReceiverDisconnectedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverDisconnectedEventArgs);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverDisconnectedEventArgs(py::wrapper::Windows::Media::Miracast::MiracastReceiverDisconnectedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverDisconnectedEventArgs_get_Connection(py::wrapper::Windows::Media::Miracast::MiracastReceiverDisconnectedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Connection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverDisconnectedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverDisconnectedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverDisconnectedEventArgs[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverDisconnectedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverDisconnectedEventArgs[] = {
        { const_cast<char*>("connection"), (getter)MiracastReceiverDisconnectedEventArgs_get_Connection, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverDisconnectedEventArgs[] = 
    {
        { Py_tp_new, _new_MiracastReceiverDisconnectedEventArgs },
        { Py_tp_dealloc, _dealloc_MiracastReceiverDisconnectedEventArgs },
        { Py_tp_methods, _methods_MiracastReceiverDisconnectedEventArgs },
        { Py_tp_getset, _getset_MiracastReceiverDisconnectedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverDisconnectedEventArgs =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverDisconnectedEventArgs",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverDisconnectedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverDisconnectedEventArgs
    };

    // ----- MiracastReceiverGameControllerDevice class --------------------
    constexpr const char* const _type_name_MiracastReceiverGameControllerDevice = "MiracastReceiverGameControllerDevice";

    static PyObject* _new_MiracastReceiverGameControllerDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverGameControllerDevice);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverGameControllerDevice(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverGameControllerDevice_get_TransmitInput(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TransmitInput());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverGameControllerDevice_put_TransmitInput(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.TransmitInput(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverGameControllerDevice_get_Mode(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Mode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverGameControllerDevice_put_Mode(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverGameControllerDeviceUsageMode>(arg);

            self->obj.Mode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverGameControllerDevice_get_IsRequestedByTransmitter(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRequestedByTransmitter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverGameControllerDevice_get_IsTransmittingInput(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsTransmittingInput());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverGameControllerDevice_add_Changed(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiverGameControllerDevice, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverGameControllerDevice_remove_Changed(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverGameControllerDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverGameControllerDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverGameControllerDevice[] = {
        { "add_changed", (PyCFunction)MiracastReceiverGameControllerDevice_add_Changed, METH_O, nullptr },
        { "remove_changed", (PyCFunction)MiracastReceiverGameControllerDevice_remove_Changed, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverGameControllerDevice, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverGameControllerDevice[] = {
        { const_cast<char*>("transmit_input"), (getter)MiracastReceiverGameControllerDevice_get_TransmitInput, (setter)MiracastReceiverGameControllerDevice_put_TransmitInput, nullptr, nullptr },
        { const_cast<char*>("mode"), (getter)MiracastReceiverGameControllerDevice_get_Mode, (setter)MiracastReceiverGameControllerDevice_put_Mode, nullptr, nullptr },
        { const_cast<char*>("is_requested_by_transmitter"), (getter)MiracastReceiverGameControllerDevice_get_IsRequestedByTransmitter, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_transmitting_input"), (getter)MiracastReceiverGameControllerDevice_get_IsTransmittingInput, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverGameControllerDevice[] = 
    {
        { Py_tp_new, _new_MiracastReceiverGameControllerDevice },
        { Py_tp_dealloc, _dealloc_MiracastReceiverGameControllerDevice },
        { Py_tp_methods, _methods_MiracastReceiverGameControllerDevice },
        { Py_tp_getset, _getset_MiracastReceiverGameControllerDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverGameControllerDevice =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverGameControllerDevice",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverGameControllerDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverGameControllerDevice
    };

    // ----- MiracastReceiverInputDevices class --------------------
    constexpr const char* const _type_name_MiracastReceiverInputDevices = "MiracastReceiverInputDevices";

    static PyObject* _new_MiracastReceiverInputDevices(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverInputDevices);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverInputDevices(py::wrapper::Windows::Media::Miracast::MiracastReceiverInputDevices* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverInputDevices_get_GameController(py::wrapper::Windows::Media::Miracast::MiracastReceiverInputDevices* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GameController());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverInputDevices_get_Keyboard(py::wrapper::Windows::Media::Miracast::MiracastReceiverInputDevices* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Keyboard());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverInputDevices(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverInputDevices>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverInputDevices[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverInputDevices, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverInputDevices[] = {
        { const_cast<char*>("game_controller"), (getter)MiracastReceiverInputDevices_get_GameController, nullptr, nullptr, nullptr },
        { const_cast<char*>("keyboard"), (getter)MiracastReceiverInputDevices_get_Keyboard, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverInputDevices[] = 
    {
        { Py_tp_new, _new_MiracastReceiverInputDevices },
        { Py_tp_dealloc, _dealloc_MiracastReceiverInputDevices },
        { Py_tp_methods, _methods_MiracastReceiverInputDevices },
        { Py_tp_getset, _getset_MiracastReceiverInputDevices },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverInputDevices =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverInputDevices",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverInputDevices),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverInputDevices
    };

    // ----- MiracastReceiverKeyboardDevice class --------------------
    constexpr const char* const _type_name_MiracastReceiverKeyboardDevice = "MiracastReceiverKeyboardDevice";

    static PyObject* _new_MiracastReceiverKeyboardDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverKeyboardDevice);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverKeyboardDevice(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverKeyboardDevice_get_TransmitInput(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TransmitInput());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverKeyboardDevice_put_TransmitInput(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.TransmitInput(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverKeyboardDevice_get_IsRequestedByTransmitter(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsRequestedByTransmitter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverKeyboardDevice_get_IsTransmittingInput(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsTransmittingInput());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverKeyboardDevice_add_Changed(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiverKeyboardDevice, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverKeyboardDevice_remove_Changed(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverKeyboardDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverKeyboardDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverKeyboardDevice[] = {
        { "add_changed", (PyCFunction)MiracastReceiverKeyboardDevice_add_Changed, METH_O, nullptr },
        { "remove_changed", (PyCFunction)MiracastReceiverKeyboardDevice_remove_Changed, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverKeyboardDevice, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverKeyboardDevice[] = {
        { const_cast<char*>("transmit_input"), (getter)MiracastReceiverKeyboardDevice_get_TransmitInput, (setter)MiracastReceiverKeyboardDevice_put_TransmitInput, nullptr, nullptr },
        { const_cast<char*>("is_requested_by_transmitter"), (getter)MiracastReceiverKeyboardDevice_get_IsRequestedByTransmitter, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_transmitting_input"), (getter)MiracastReceiverKeyboardDevice_get_IsTransmittingInput, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverKeyboardDevice[] = 
    {
        { Py_tp_new, _new_MiracastReceiverKeyboardDevice },
        { Py_tp_dealloc, _dealloc_MiracastReceiverKeyboardDevice },
        { Py_tp_methods, _methods_MiracastReceiverKeyboardDevice },
        { Py_tp_getset, _getset_MiracastReceiverKeyboardDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverKeyboardDevice =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverKeyboardDevice",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverKeyboardDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverKeyboardDevice
    };

    // ----- MiracastReceiverMediaSourceCreatedEventArgs class --------------------
    constexpr const char* const _type_name_MiracastReceiverMediaSourceCreatedEventArgs = "MiracastReceiverMediaSourceCreatedEventArgs";

    static PyObject* _new_MiracastReceiverMediaSourceCreatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverMediaSourceCreatedEventArgs);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverMediaSourceCreatedEventArgs(py::wrapper::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverMediaSourceCreatedEventArgs_GetDeferral(py::wrapper::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverMediaSourceCreatedEventArgs_get_Connection(py::wrapper::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Connection());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverMediaSourceCreatedEventArgs_get_CursorImageChannelSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CursorImageChannelSettings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverMediaSourceCreatedEventArgs_get_MediaSource(py::wrapper::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaSource());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverMediaSourceCreatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverMediaSourceCreatedEventArgs[] = {
        { "get_deferral", (PyCFunction)MiracastReceiverMediaSourceCreatedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverMediaSourceCreatedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverMediaSourceCreatedEventArgs[] = {
        { const_cast<char*>("connection"), (getter)MiracastReceiverMediaSourceCreatedEventArgs_get_Connection, nullptr, nullptr, nullptr },
        { const_cast<char*>("cursor_image_channel_settings"), (getter)MiracastReceiverMediaSourceCreatedEventArgs_get_CursorImageChannelSettings, nullptr, nullptr, nullptr },
        { const_cast<char*>("media_source"), (getter)MiracastReceiverMediaSourceCreatedEventArgs_get_MediaSource, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverMediaSourceCreatedEventArgs[] = 
    {
        { Py_tp_new, _new_MiracastReceiverMediaSourceCreatedEventArgs },
        { Py_tp_dealloc, _dealloc_MiracastReceiverMediaSourceCreatedEventArgs },
        { Py_tp_methods, _methods_MiracastReceiverMediaSourceCreatedEventArgs },
        { Py_tp_getset, _getset_MiracastReceiverMediaSourceCreatedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverMediaSourceCreatedEventArgs =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverMediaSourceCreatedEventArgs",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverMediaSourceCreatedEventArgs
    };

    // ----- MiracastReceiverSession class --------------------
    constexpr const char* const _type_name_MiracastReceiverSession = "MiracastReceiverSession";

    static PyObject* _new_MiracastReceiverSession(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverSession);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverSession(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverSession_Close(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_Start(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Start());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_StartAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StartAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_get_MaxSimultaneousConnections(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxSimultaneousConnections());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverSession_put_MaxSimultaneousConnections(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.MaxSimultaneousConnections(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverSession_get_AllowConnectionTakeover(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowConnectionTakeover());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverSession_put_AllowConnectionTakeover(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowConnectionTakeover(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverSession_add_ConnectionCreated(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiverSession, winrt::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs>>(arg);

            return py::convert(self->obj.ConnectionCreated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_remove_ConnectionCreated(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ConnectionCreated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_add_Disconnected(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiverSession, winrt::Windows::Media::Miracast::MiracastReceiverDisconnectedEventArgs>>(arg);

            return py::convert(self->obj.Disconnected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_remove_Disconnected(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Disconnected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_add_MediaSourceCreated(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Miracast::MiracastReceiverSession, winrt::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs>>(arg);

            return py::convert(self->obj.MediaSourceCreated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSession_remove_MediaSourceCreated(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MediaSourceCreated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverSession(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverSession>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MiracastReceiverSession(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MiracastReceiverSession(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverSession[] = {
        { "close", (PyCFunction)MiracastReceiverSession_Close, METH_VARARGS, nullptr },
        { "start", (PyCFunction)MiracastReceiverSession_Start, METH_VARARGS, nullptr },
        { "start_async", (PyCFunction)MiracastReceiverSession_StartAsync, METH_VARARGS, nullptr },
        { "add_connection_created", (PyCFunction)MiracastReceiverSession_add_ConnectionCreated, METH_O, nullptr },
        { "remove_connection_created", (PyCFunction)MiracastReceiverSession_remove_ConnectionCreated, METH_O, nullptr },
        { "add_disconnected", (PyCFunction)MiracastReceiverSession_add_Disconnected, METH_O, nullptr },
        { "remove_disconnected", (PyCFunction)MiracastReceiverSession_remove_Disconnected, METH_O, nullptr },
        { "add_media_source_created", (PyCFunction)MiracastReceiverSession_add_MediaSourceCreated, METH_O, nullptr },
        { "remove_media_source_created", (PyCFunction)MiracastReceiverSession_remove_MediaSourceCreated, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverSession, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MiracastReceiverSession, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MiracastReceiverSession, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverSession[] = {
        { const_cast<char*>("max_simultaneous_connections"), (getter)MiracastReceiverSession_get_MaxSimultaneousConnections, (setter)MiracastReceiverSession_put_MaxSimultaneousConnections, nullptr, nullptr },
        { const_cast<char*>("allow_connection_takeover"), (getter)MiracastReceiverSession_get_AllowConnectionTakeover, (setter)MiracastReceiverSession_put_AllowConnectionTakeover, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverSession[] = 
    {
        { Py_tp_new, _new_MiracastReceiverSession },
        { Py_tp_dealloc, _dealloc_MiracastReceiverSession },
        { Py_tp_methods, _methods_MiracastReceiverSession },
        { Py_tp_getset, _getset_MiracastReceiverSession },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverSession =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverSession",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverSession),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverSession
    };

    // ----- MiracastReceiverSessionStartResult class --------------------
    constexpr const char* const _type_name_MiracastReceiverSessionStartResult = "MiracastReceiverSessionStartResult";

    static PyObject* _new_MiracastReceiverSessionStartResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverSessionStartResult);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverSessionStartResult(py::wrapper::Windows::Media::Miracast::MiracastReceiverSessionStartResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverSessionStartResult_get_ExtendedError(py::wrapper::Windows::Media::Miracast::MiracastReceiverSessionStartResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExtendedError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverSessionStartResult_get_Status(py::wrapper::Windows::Media::Miracast::MiracastReceiverSessionStartResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverSessionStartResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverSessionStartResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverSessionStartResult[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverSessionStartResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverSessionStartResult[] = {
        { const_cast<char*>("extended_error"), (getter)MiracastReceiverSessionStartResult_get_ExtendedError, nullptr, nullptr, nullptr },
        { const_cast<char*>("status"), (getter)MiracastReceiverSessionStartResult_get_Status, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverSessionStartResult[] = 
    {
        { Py_tp_new, _new_MiracastReceiverSessionStartResult },
        { Py_tp_dealloc, _dealloc_MiracastReceiverSessionStartResult },
        { Py_tp_methods, _methods_MiracastReceiverSessionStartResult },
        { Py_tp_getset, _getset_MiracastReceiverSessionStartResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverSessionStartResult =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverSessionStartResult",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverSessionStartResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverSessionStartResult
    };

    // ----- MiracastReceiverSettings class --------------------
    constexpr const char* const _type_name_MiracastReceiverSettings = "MiracastReceiverSettings";

    static PyObject* _new_MiracastReceiverSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverSettings);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverSettings_get_RequireAuthorizationFromKnownTransmitters(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RequireAuthorizationFromKnownTransmitters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverSettings_put_RequireAuthorizationFromKnownTransmitters(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.RequireAuthorizationFromKnownTransmitters(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverSettings_get_ModelNumber(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ModelNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverSettings_put_ModelNumber(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.ModelNumber(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverSettings_get_ModelName(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ModelName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverSettings_put_ModelName(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.ModelName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverSettings_get_FriendlyName(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FriendlyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverSettings_put_FriendlyName(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.FriendlyName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverSettings_get_AuthorizationMethod(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AuthorizationMethod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverSettings_put_AuthorizationMethod(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverAuthorizationMethod>(arg);

            self->obj.AuthorizationMethod(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_MiracastReceiverSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverSettings[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverSettings[] = {
        { const_cast<char*>("require_authorization_from_known_transmitters"), (getter)MiracastReceiverSettings_get_RequireAuthorizationFromKnownTransmitters, (setter)MiracastReceiverSettings_put_RequireAuthorizationFromKnownTransmitters, nullptr, nullptr },
        { const_cast<char*>("model_number"), (getter)MiracastReceiverSettings_get_ModelNumber, (setter)MiracastReceiverSettings_put_ModelNumber, nullptr, nullptr },
        { const_cast<char*>("model_name"), (getter)MiracastReceiverSettings_get_ModelName, (setter)MiracastReceiverSettings_put_ModelName, nullptr, nullptr },
        { const_cast<char*>("friendly_name"), (getter)MiracastReceiverSettings_get_FriendlyName, (setter)MiracastReceiverSettings_put_FriendlyName, nullptr, nullptr },
        { const_cast<char*>("authorization_method"), (getter)MiracastReceiverSettings_get_AuthorizationMethod, (setter)MiracastReceiverSettings_put_AuthorizationMethod, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverSettings[] = 
    {
        { Py_tp_new, _new_MiracastReceiverSettings },
        { Py_tp_dealloc, _dealloc_MiracastReceiverSettings },
        { Py_tp_methods, _methods_MiracastReceiverSettings },
        { Py_tp_getset, _getset_MiracastReceiverSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverSettings =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverSettings",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverSettings
    };

    // ----- MiracastReceiverStatus class --------------------
    constexpr const char* const _type_name_MiracastReceiverStatus = "MiracastReceiverStatus";

    static PyObject* _new_MiracastReceiverStatus(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverStatus);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverStatus(py::wrapper::Windows::Media::Miracast::MiracastReceiverStatus* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverStatus_get_IsConnectionTakeoverSupported(py::wrapper::Windows::Media::Miracast::MiracastReceiverStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsConnectionTakeoverSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStatus_get_KnownTransmitters(py::wrapper::Windows::Media::Miracast::MiracastReceiverStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.KnownTransmitters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStatus_get_ListeningStatus(py::wrapper::Windows::Media::Miracast::MiracastReceiverStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ListeningStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStatus_get_MaxSimultaneousConnections(py::wrapper::Windows::Media::Miracast::MiracastReceiverStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxSimultaneousConnections());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStatus_get_WiFiStatus(py::wrapper::Windows::Media::Miracast::MiracastReceiverStatus* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WiFiStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastReceiverStatus(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverStatus>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverStatus[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverStatus, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverStatus[] = {
        { const_cast<char*>("is_connection_takeover_supported"), (getter)MiracastReceiverStatus_get_IsConnectionTakeoverSupported, nullptr, nullptr, nullptr },
        { const_cast<char*>("known_transmitters"), (getter)MiracastReceiverStatus_get_KnownTransmitters, nullptr, nullptr, nullptr },
        { const_cast<char*>("listening_status"), (getter)MiracastReceiverStatus_get_ListeningStatus, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_simultaneous_connections"), (getter)MiracastReceiverStatus_get_MaxSimultaneousConnections, nullptr, nullptr, nullptr },
        { const_cast<char*>("wi_fi_status"), (getter)MiracastReceiverStatus_get_WiFiStatus, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverStatus[] = 
    {
        { Py_tp_new, _new_MiracastReceiverStatus },
        { Py_tp_dealloc, _dealloc_MiracastReceiverStatus },
        { Py_tp_methods, _methods_MiracastReceiverStatus },
        { Py_tp_getset, _getset_MiracastReceiverStatus },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverStatus =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverStatus",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverStatus),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverStatus
    };

    // ----- MiracastReceiverStreamControl class --------------------
    constexpr const char* const _type_name_MiracastReceiverStreamControl = "MiracastReceiverStreamControl";

    static PyObject* _new_MiracastReceiverStreamControl(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverStreamControl);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverStreamControl(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverStreamControl_GetVideoStreamSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetVideoStreamSettings());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStreamControl_GetVideoStreamSettingsAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetVideoStreamSettingsAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStreamControl_SuggestVideoStreamSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings>(args, 0);

                self->obj.SuggestVideoStreamSettings(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStreamControl_SuggestVideoStreamSettingsAsync(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings>(args, 0);

                return py::convert(self->obj.SuggestVideoStreamSettingsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastReceiverStreamControl_get_MuteAudio(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MuteAudio());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverStreamControl_put_MuteAudio(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.MuteAudio(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_MiracastReceiverStreamControl(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverStreamControl>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverStreamControl[] = {
        { "get_video_stream_settings", (PyCFunction)MiracastReceiverStreamControl_GetVideoStreamSettings, METH_VARARGS, nullptr },
        { "get_video_stream_settings_async", (PyCFunction)MiracastReceiverStreamControl_GetVideoStreamSettingsAsync, METH_VARARGS, nullptr },
        { "suggest_video_stream_settings", (PyCFunction)MiracastReceiverStreamControl_SuggestVideoStreamSettings, METH_VARARGS, nullptr },
        { "suggest_video_stream_settings_async", (PyCFunction)MiracastReceiverStreamControl_SuggestVideoStreamSettingsAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MiracastReceiverStreamControl, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverStreamControl[] = {
        { const_cast<char*>("mute_audio"), (getter)MiracastReceiverStreamControl_get_MuteAudio, (setter)MiracastReceiverStreamControl_put_MuteAudio, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverStreamControl[] = 
    {
        { Py_tp_new, _new_MiracastReceiverStreamControl },
        { Py_tp_dealloc, _dealloc_MiracastReceiverStreamControl },
        { Py_tp_methods, _methods_MiracastReceiverStreamControl },
        { Py_tp_getset, _getset_MiracastReceiverStreamControl },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverStreamControl =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverStreamControl",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverStreamControl),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverStreamControl
    };

    // ----- MiracastReceiverVideoStreamSettings class --------------------
    constexpr const char* const _type_name_MiracastReceiverVideoStreamSettings = "MiracastReceiverVideoStreamSettings";

    static PyObject* _new_MiracastReceiverVideoStreamSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastReceiverVideoStreamSettings);
        return nullptr;
    }

    static void _dealloc_MiracastReceiverVideoStreamSettings(py::wrapper::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastReceiverVideoStreamSettings_get_Size(py::wrapper::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverVideoStreamSettings_put_Size(py::wrapper::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::SizeInt32>(arg);

            self->obj.Size(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastReceiverVideoStreamSettings_get_Bitrate(py::wrapper::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bitrate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastReceiverVideoStreamSettings_put_Bitrate(py::wrapper::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.Bitrate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_MiracastReceiverVideoStreamSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastReceiverVideoStreamSettings[] = {
        { "_from", (PyCFunction)_from_MiracastReceiverVideoStreamSettings, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastReceiverVideoStreamSettings[] = {
        { const_cast<char*>("size"), (getter)MiracastReceiverVideoStreamSettings_get_Size, (setter)MiracastReceiverVideoStreamSettings_put_Size, nullptr, nullptr },
        { const_cast<char*>("bitrate"), (getter)MiracastReceiverVideoStreamSettings_get_Bitrate, (setter)MiracastReceiverVideoStreamSettings_put_Bitrate, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastReceiverVideoStreamSettings[] = 
    {
        { Py_tp_new, _new_MiracastReceiverVideoStreamSettings },
        { Py_tp_dealloc, _dealloc_MiracastReceiverVideoStreamSettings },
        { Py_tp_methods, _methods_MiracastReceiverVideoStreamSettings },
        { Py_tp_getset, _getset_MiracastReceiverVideoStreamSettings },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastReceiverVideoStreamSettings =
    {
        "_winrt_Windows_Media_Miracast.MiracastReceiverVideoStreamSettings",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastReceiverVideoStreamSettings
    };

    // ----- MiracastTransmitter class --------------------
    constexpr const char* const _type_name_MiracastTransmitter = "MiracastTransmitter";

    static PyObject* _new_MiracastTransmitter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MiracastTransmitter);
        return nullptr;
    }

    static void _dealloc_MiracastTransmitter(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MiracastTransmitter_GetConnections(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetConnections());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MiracastTransmitter_get_Name(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastTransmitter_put_Name(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastTransmitter_get_AuthorizationStatus(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AuthorizationStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MiracastTransmitter_put_AuthorizationStatus(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Miracast::MiracastTransmitterAuthorizationStatus>(arg);

            self->obj.AuthorizationStatus(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MiracastTransmitter_get_LastConnectionTime(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LastConnectionTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MiracastTransmitter_get_MacAddress(py::wrapper::Windows::Media::Miracast::MiracastTransmitter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MacAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MiracastTransmitter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Miracast::MiracastTransmitter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MiracastTransmitter[] = {
        { "get_connections", (PyCFunction)MiracastTransmitter_GetConnections, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MiracastTransmitter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MiracastTransmitter[] = {
        { const_cast<char*>("name"), (getter)MiracastTransmitter_get_Name, (setter)MiracastTransmitter_put_Name, nullptr, nullptr },
        { const_cast<char*>("authorization_status"), (getter)MiracastTransmitter_get_AuthorizationStatus, (setter)MiracastTransmitter_put_AuthorizationStatus, nullptr, nullptr },
        { const_cast<char*>("last_connection_time"), (getter)MiracastTransmitter_get_LastConnectionTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("mac_address"), (getter)MiracastTransmitter_get_MacAddress, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MiracastTransmitter[] = 
    {
        { Py_tp_new, _new_MiracastTransmitter },
        { Py_tp_dealloc, _dealloc_MiracastTransmitter },
        { Py_tp_methods, _methods_MiracastTransmitter },
        { Py_tp_getset, _getset_MiracastTransmitter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MiracastTransmitter =
    {
        "_winrt_Windows_Media_Miracast.MiracastTransmitter",
        sizeof(py::wrapper::Windows::Media::Miracast::MiracastTransmitter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MiracastTransmitter
    };

    // ----- Windows.Media.Miracast Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiver>::python_type = py::register_python_type(module, _type_name_MiracastReceiver, &_type_spec_MiracastReceiver, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverApplySettingsResult>::python_type = py::register_python_type(module, _type_name_MiracastReceiverApplySettingsResult, &_type_spec_MiracastReceiverApplySettingsResult, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverConnection>::python_type = py::register_python_type(module, _type_name_MiracastReceiverConnection, &_type_spec_MiracastReceiverConnection, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverConnectionCreatedEventArgs>::python_type = py::register_python_type(module, _type_name_MiracastReceiverConnectionCreatedEventArgs, &_type_spec_MiracastReceiverConnectionCreatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannel>::python_type = py::register_python_type(module, _type_name_MiracastReceiverCursorImageChannel, &_type_spec_MiracastReceiverCursorImageChannel, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverCursorImageChannelSettings>::python_type = py::register_python_type(module, _type_name_MiracastReceiverCursorImageChannelSettings, &_type_spec_MiracastReceiverCursorImageChannelSettings, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverDisconnectedEventArgs>::python_type = py::register_python_type(module, _type_name_MiracastReceiverDisconnectedEventArgs, &_type_spec_MiracastReceiverDisconnectedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverGameControllerDevice>::python_type = py::register_python_type(module, _type_name_MiracastReceiverGameControllerDevice, &_type_spec_MiracastReceiverGameControllerDevice, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverInputDevices>::python_type = py::register_python_type(module, _type_name_MiracastReceiverInputDevices, &_type_spec_MiracastReceiverInputDevices, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverKeyboardDevice>::python_type = py::register_python_type(module, _type_name_MiracastReceiverKeyboardDevice, &_type_spec_MiracastReceiverKeyboardDevice, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverMediaSourceCreatedEventArgs>::python_type = py::register_python_type(module, _type_name_MiracastReceiverMediaSourceCreatedEventArgs, &_type_spec_MiracastReceiverMediaSourceCreatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverSession>::python_type = py::register_python_type(module, _type_name_MiracastReceiverSession, &_type_spec_MiracastReceiverSession, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverSessionStartResult>::python_type = py::register_python_type(module, _type_name_MiracastReceiverSessionStartResult, &_type_spec_MiracastReceiverSessionStartResult, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverSettings>::python_type = py::register_python_type(module, _type_name_MiracastReceiverSettings, &_type_spec_MiracastReceiverSettings, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverStatus>::python_type = py::register_python_type(module, _type_name_MiracastReceiverStatus, &_type_spec_MiracastReceiverStatus, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverStreamControl>::python_type = py::register_python_type(module, _type_name_MiracastReceiverStreamControl, &_type_spec_MiracastReceiverStreamControl, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastReceiverVideoStreamSettings>::python_type = py::register_python_type(module, _type_name_MiracastReceiverVideoStreamSettings, &_type_spec_MiracastReceiverVideoStreamSettings, bases.get());
            py::winrt_type<winrt::Windows::Media::Miracast::MiracastTransmitter>::python_type = py::register_python_type(module, _type_name_MiracastTransmitter, &_type_spec_MiracastTransmitter, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Media.Miracast");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Media_Miracast",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Media::Miracast

PyMODINIT_FUNC
PyInit__winrt_Windows_Media_Miracast (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Media::Miracast::module_def);
}
