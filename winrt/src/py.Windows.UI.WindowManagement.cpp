// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.UI.WindowManagement.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindow>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowPlacement>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowPresentationConfiguration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowPresenter>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBar>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::DefaultPresentationConfiguration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::DisplayRegion>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::FullScreenPresentationConfiguration>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::WindowServices>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironment>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs>::python_type;

namespace py::cpp::Windows::UI::WindowManagement
{
    // ----- AppWindow class --------------------
    constexpr const char* const _type_name_AppWindow = "AppWindow";

    static PyObject* _new_AppWindow(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindow);
        return nullptr;
    }

    static void _dealloc_AppWindow(py::wrapper::Windows::UI::WindowManagement::AppWindow* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindow_ClearAllPersistedState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::WindowManagement::AppWindow::ClearAllPersistedState();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_ClearPersistedState(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::UI::WindowManagement::AppWindow::ClearPersistedState(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_CloseAsync(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CloseAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_GetDisplayRegions(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDisplayRegions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_GetPlacement(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetPlacement());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveAdjacentToCurrentView(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.RequestMoveAdjacentToCurrentView();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveAdjacentToWindow(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindow>(args, 0);

                self->obj.RequestMoveAdjacentToWindow(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveRelativeToCurrentViewContent(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Point>(args, 0);

                self->obj.RequestMoveRelativeToCurrentViewContent(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveRelativeToDisplayRegion(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::DisplayRegion>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Point>(args, 1);

                self->obj.RequestMoveRelativeToDisplayRegion(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveRelativeToWindowContent(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindow>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Point>(args, 1);

                self->obj.RequestMoveRelativeToWindowContent(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestMoveToDisplayRegion(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::DisplayRegion>(args, 0);

                self->obj.RequestMoveToDisplayRegion(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_RequestSize(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                self->obj.RequestSize(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_TryCreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::WindowManagement::AppWindow::TryCreateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_TryShowAsync(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryShowAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_Title(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindow_put_Title(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindow_get_PersistedStateId(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PersistedStateId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindow_put_PersistedStateId(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PersistedStateId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindow_get_Content(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_DispatcherQueue(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DispatcherQueue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_Frame(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Frame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_IsVisible(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_Presenter(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Presenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_TitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_UIContext(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UIContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_add_Changed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::AppWindow, winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_remove_Changed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_add_CloseRequested(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::AppWindow, winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>>(arg);

            return py::convert(self->obj.CloseRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_remove_CloseRequested(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.CloseRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_add_Closed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::AppWindow, winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindow_remove_Closed(py::wrapper::Windows::UI::WindowManagement::AppWindow* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindow>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindow[] = {
        { "clear_all_persisted_state", (PyCFunction)AppWindow_ClearAllPersistedState, METH_VARARGS | METH_STATIC, nullptr },
        { "clear_persisted_state", (PyCFunction)AppWindow_ClearPersistedState, METH_VARARGS | METH_STATIC, nullptr },
        { "close_async", (PyCFunction)AppWindow_CloseAsync, METH_VARARGS, nullptr },
        { "get_display_regions", (PyCFunction)AppWindow_GetDisplayRegions, METH_VARARGS, nullptr },
        { "get_placement", (PyCFunction)AppWindow_GetPlacement, METH_VARARGS, nullptr },
        { "request_move_adjacent_to_current_view", (PyCFunction)AppWindow_RequestMoveAdjacentToCurrentView, METH_VARARGS, nullptr },
        { "request_move_adjacent_to_window", (PyCFunction)AppWindow_RequestMoveAdjacentToWindow, METH_VARARGS, nullptr },
        { "request_move_relative_to_current_view_content", (PyCFunction)AppWindow_RequestMoveRelativeToCurrentViewContent, METH_VARARGS, nullptr },
        { "request_move_relative_to_display_region", (PyCFunction)AppWindow_RequestMoveRelativeToDisplayRegion, METH_VARARGS, nullptr },
        { "request_move_relative_to_window_content", (PyCFunction)AppWindow_RequestMoveRelativeToWindowContent, METH_VARARGS, nullptr },
        { "request_move_to_display_region", (PyCFunction)AppWindow_RequestMoveToDisplayRegion, METH_VARARGS, nullptr },
        { "request_size", (PyCFunction)AppWindow_RequestSize, METH_VARARGS, nullptr },
        { "try_create_async", (PyCFunction)AppWindow_TryCreateAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "try_show_async", (PyCFunction)AppWindow_TryShowAsync, METH_VARARGS, nullptr },
        { "add_changed", (PyCFunction)AppWindow_add_Changed, METH_O, nullptr },
        { "remove_changed", (PyCFunction)AppWindow_remove_Changed, METH_O, nullptr },
        { "add_close_requested", (PyCFunction)AppWindow_add_CloseRequested, METH_O, nullptr },
        { "remove_close_requested", (PyCFunction)AppWindow_remove_CloseRequested, METH_O, nullptr },
        { "add_closed", (PyCFunction)AppWindow_add_Closed, METH_O, nullptr },
        { "remove_closed", (PyCFunction)AppWindow_remove_Closed, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AppWindow, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindow[] = {
        { const_cast<char*>("title"), (getter)AppWindow_get_Title, (setter)AppWindow_put_Title, nullptr, nullptr },
        { const_cast<char*>("persisted_state_id"), (getter)AppWindow_get_PersistedStateId, (setter)AppWindow_put_PersistedStateId, nullptr, nullptr },
        { const_cast<char*>("content"), (getter)AppWindow_get_Content, nullptr, nullptr, nullptr },
        { const_cast<char*>("dispatcher_queue"), (getter)AppWindow_get_DispatcherQueue, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame"), (getter)AppWindow_get_Frame, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_visible"), (getter)AppWindow_get_IsVisible, nullptr, nullptr, nullptr },
        { const_cast<char*>("presenter"), (getter)AppWindow_get_Presenter, nullptr, nullptr, nullptr },
        { const_cast<char*>("title_bar"), (getter)AppWindow_get_TitleBar, nullptr, nullptr, nullptr },
        { const_cast<char*>("u_i_context"), (getter)AppWindow_get_UIContext, nullptr, nullptr, nullptr },
        { const_cast<char*>("windowing_environment"), (getter)AppWindow_get_WindowingEnvironment, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindow[] = 
    {
        { Py_tp_new, _new_AppWindow },
        { Py_tp_dealloc, _dealloc_AppWindow },
        { Py_tp_methods, _methods_AppWindow },
        { Py_tp_getset, _getset_AppWindow },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindow =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindow",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindow),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindow
    };

    // ----- AppWindowChangedEventArgs class --------------------
    constexpr const char* const _type_name_AppWindowChangedEventArgs = "AppWindowChangedEventArgs";

    static PyObject* _new_AppWindowChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_AppWindowChangedEventArgs(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowChangedEventArgs_get_DidAvailableWindowPresentationsChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidAvailableWindowPresentationsChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidDisplayRegionsChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidDisplayRegionsChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidFrameChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidFrameChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidSizeChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidSizeChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidTitleBarChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidTitleBarChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidVisibilityChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidVisibilityChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidWindowPresentationChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidWindowPresentationChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowChangedEventArgs_get_DidWindowingEnvironmentChange(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DidWindowingEnvironmentChange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_AppWindowChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowChangedEventArgs[] = {
        { const_cast<char*>("did_available_window_presentations_change"), (getter)AppWindowChangedEventArgs_get_DidAvailableWindowPresentationsChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("did_display_regions_change"), (getter)AppWindowChangedEventArgs_get_DidDisplayRegionsChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("did_frame_change"), (getter)AppWindowChangedEventArgs_get_DidFrameChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("did_size_change"), (getter)AppWindowChangedEventArgs_get_DidSizeChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("did_title_bar_change"), (getter)AppWindowChangedEventArgs_get_DidTitleBarChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("did_visibility_change"), (getter)AppWindowChangedEventArgs_get_DidVisibilityChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("did_window_presentation_change"), (getter)AppWindowChangedEventArgs_get_DidWindowPresentationChange, nullptr, nullptr, nullptr },
        { const_cast<char*>("did_windowing_environment_change"), (getter)AppWindowChangedEventArgs_get_DidWindowingEnvironmentChange, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowChangedEventArgs[] = 
    {
        { Py_tp_new, _new_AppWindowChangedEventArgs },
        { Py_tp_dealloc, _dealloc_AppWindowChangedEventArgs },
        { Py_tp_methods, _methods_AppWindowChangedEventArgs },
        { Py_tp_getset, _getset_AppWindowChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowChangedEventArgs =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowChangedEventArgs
    };

    // ----- AppWindowCloseRequestedEventArgs class --------------------
    constexpr const char* const _type_name_AppWindowCloseRequestedEventArgs = "AppWindowCloseRequestedEventArgs";

    static PyObject* _new_AppWindowCloseRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowCloseRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_AppWindowCloseRequestedEventArgs(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowCloseRequestedEventArgs_GetDeferral(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowCloseRequestedEventArgs_get_Cancel(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Cancel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowCloseRequestedEventArgs_put_Cancel(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Cancel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_AppWindowCloseRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowCloseRequestedEventArgs[] = {
        { "get_deferral", (PyCFunction)AppWindowCloseRequestedEventArgs_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppWindowCloseRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowCloseRequestedEventArgs[] = {
        { const_cast<char*>("cancel"), (getter)AppWindowCloseRequestedEventArgs_get_Cancel, (setter)AppWindowCloseRequestedEventArgs_put_Cancel, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowCloseRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_AppWindowCloseRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_AppWindowCloseRequestedEventArgs },
        { Py_tp_methods, _methods_AppWindowCloseRequestedEventArgs },
        { Py_tp_getset, _getset_AppWindowCloseRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowCloseRequestedEventArgs =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowCloseRequestedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowCloseRequestedEventArgs
    };

    // ----- AppWindowClosedEventArgs class --------------------
    constexpr const char* const _type_name_AppWindowClosedEventArgs = "AppWindowClosedEventArgs";

    static PyObject* _new_AppWindowClosedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowClosedEventArgs);
        return nullptr;
    }

    static void _dealloc_AppWindowClosedEventArgs(py::wrapper::Windows::UI::WindowManagement::AppWindowClosedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowClosedEventArgs_get_Reason(py::wrapper::Windows::UI::WindowManagement::AppWindowClosedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Reason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowClosedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowClosedEventArgs[] = {
        { "_from", (PyCFunction)_from_AppWindowClosedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowClosedEventArgs[] = {
        { const_cast<char*>("reason"), (getter)AppWindowClosedEventArgs_get_Reason, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowClosedEventArgs[] = 
    {
        { Py_tp_new, _new_AppWindowClosedEventArgs },
        { Py_tp_dealloc, _dealloc_AppWindowClosedEventArgs },
        { Py_tp_methods, _methods_AppWindowClosedEventArgs },
        { Py_tp_getset, _getset_AppWindowClosedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowClosedEventArgs =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowClosedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowClosedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowClosedEventArgs
    };

    // ----- AppWindowFrame class --------------------
    constexpr const char* const _type_name_AppWindowFrame = "AppWindowFrame";

    static PyObject* _new_AppWindowFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowFrame);
        return nullptr;
    }

    static void _dealloc_AppWindowFrame(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowFrame_GetFrameStyle(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetFrameStyle());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowFrame_SetFrameStyle(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowFrameStyle>(args, 0);

                self->obj.SetFrameStyle(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowFrame_get_DragRegionVisuals(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DragRegionVisuals());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowFrame[] = {
        { "get_frame_style", (PyCFunction)AppWindowFrame_GetFrameStyle, METH_VARARGS, nullptr },
        { "set_frame_style", (PyCFunction)AppWindowFrame_SetFrameStyle, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppWindowFrame, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowFrame[] = {
        { const_cast<char*>("drag_region_visuals"), (getter)AppWindowFrame_get_DragRegionVisuals, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowFrame[] = 
    {
        { Py_tp_new, _new_AppWindowFrame },
        { Py_tp_dealloc, _dealloc_AppWindowFrame },
        { Py_tp_methods, _methods_AppWindowFrame },
        { Py_tp_getset, _getset_AppWindowFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowFrame =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowFrame",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowFrame
    };

    // ----- AppWindowPlacement class --------------------
    constexpr const char* const _type_name_AppWindowPlacement = "AppWindowPlacement";

    static PyObject* _new_AppWindowPlacement(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowPlacement);
        return nullptr;
    }

    static void _dealloc_AppWindowPlacement(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowPlacement_get_DisplayRegion(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowPlacement_get_Offset(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Offset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppWindowPlacement_get_Size(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowPlacement(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowPlacement>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowPlacement[] = {
        { "_from", (PyCFunction)_from_AppWindowPlacement, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowPlacement[] = {
        { const_cast<char*>("display_region"), (getter)AppWindowPlacement_get_DisplayRegion, nullptr, nullptr, nullptr },
        { const_cast<char*>("offset"), (getter)AppWindowPlacement_get_Offset, nullptr, nullptr, nullptr },
        { const_cast<char*>("size"), (getter)AppWindowPlacement_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowPlacement[] = 
    {
        { Py_tp_new, _new_AppWindowPlacement },
        { Py_tp_dealloc, _dealloc_AppWindowPlacement },
        { Py_tp_methods, _methods_AppWindowPlacement },
        { Py_tp_getset, _getset_AppWindowPlacement },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowPlacement =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowPlacement",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowPlacement),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowPlacement
    };

    // ----- AppWindowPresentationConfiguration class --------------------
    constexpr const char* const _type_name_AppWindowPresentationConfiguration = "AppWindowPresentationConfiguration";

    static PyObject* _new_AppWindowPresentationConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowPresentationConfiguration);
        return nullptr;
    }

    static void _dealloc_AppWindowPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::AppWindowPresentationConfiguration* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowPresentationConfiguration_get_Kind(py::wrapper::Windows::UI::WindowManagement::AppWindowPresentationConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowPresentationConfiguration[] = {
        { "_from", (PyCFunction)_from_AppWindowPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowPresentationConfiguration[] = {
        { const_cast<char*>("kind"), (getter)AppWindowPresentationConfiguration_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowPresentationConfiguration[] = 
    {
        { Py_tp_new, _new_AppWindowPresentationConfiguration },
        { Py_tp_dealloc, _dealloc_AppWindowPresentationConfiguration },
        { Py_tp_methods, _methods_AppWindowPresentationConfiguration },
        { Py_tp_getset, _getset_AppWindowPresentationConfiguration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowPresentationConfiguration =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowPresentationConfiguration
    };

    // ----- AppWindowPresenter class --------------------
    constexpr const char* const _type_name_AppWindowPresenter = "AppWindowPresenter";

    static PyObject* _new_AppWindowPresenter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowPresenter);
        return nullptr;
    }

    static void _dealloc_AppWindowPresenter(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowPresenter_GetConfiguration(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetConfiguration());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowPresenter_IsPresentationSupported(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowPresentationKind>(args, 0);

                return py::convert(self->obj.IsPresentationSupported(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowPresenter_RequestPresentation(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowPresentationKind>(args, 0);

                return py::convert(self->obj.RequestPresentation(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowPresenter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowPresenter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowPresenter[] = {
        { "get_configuration", (PyCFunction)AppWindowPresenter_GetConfiguration, METH_VARARGS, nullptr },
        { "is_presentation_supported", (PyCFunction)AppWindowPresenter_IsPresentationSupported, METH_VARARGS, nullptr },
        { "request_presentation", (PyCFunction)AppWindowPresenter_RequestPresentation, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppWindowPresenter, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowPresenter[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowPresenter[] = 
    {
        { Py_tp_new, _new_AppWindowPresenter },
        { Py_tp_dealloc, _dealloc_AppWindowPresenter },
        { Py_tp_methods, _methods_AppWindowPresenter },
        { Py_tp_getset, _getset_AppWindowPresenter },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowPresenter =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowPresenter",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowPresenter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowPresenter
    };

    // ----- AppWindowTitleBar class --------------------
    constexpr const char* const _type_name_AppWindowTitleBar = "AppWindowTitleBar";

    static PyObject* _new_AppWindowTitleBar(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowTitleBar);
        return nullptr;
    }

    static void _dealloc_AppWindowTitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowTitleBar_GetPreferredVisibility(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetPreferredVisibility());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowTitleBar_GetTitleBarOcclusions(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetTitleBarOcclusions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowTitleBar_SetPreferredVisibility(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::AppWindowTitleBarVisibility>(args, 0);

                self->obj.SetPreferredVisibility(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppWindowTitleBar_get_InactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InactiveForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_InactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.InactiveForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_InactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InactiveBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_InactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.InactiveBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ExtendsContentIntoTitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExtendsContentIntoTitleBar());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ExtendsContentIntoTitleBar(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ExtendsContentIntoTitleBar(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonPressedForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonPressedForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonPressedForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonPressedForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonPressedBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonPressedBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonPressedBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonPressedBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonInactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonInactiveForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonInactiveForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonInactiveForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonInactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonInactiveBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonInactiveBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonInactiveBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonHoverForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonHoverForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonHoverForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonHoverForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonHoverBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonHoverBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonHoverBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonHoverBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonForegroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonForegroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonForegroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_ButtonBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ButtonBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_ButtonBackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.ButtonBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_BackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppWindowTitleBar_put_BackgroundColor(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(arg);

            self->obj.BackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppWindowTitleBar_get_IsVisible(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowTitleBar(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowTitleBar>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowTitleBar[] = {
        { "get_preferred_visibility", (PyCFunction)AppWindowTitleBar_GetPreferredVisibility, METH_VARARGS, nullptr },
        { "get_title_bar_occlusions", (PyCFunction)AppWindowTitleBar_GetTitleBarOcclusions, METH_VARARGS, nullptr },
        { "set_preferred_visibility", (PyCFunction)AppWindowTitleBar_SetPreferredVisibility, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppWindowTitleBar, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowTitleBar[] = {
        { const_cast<char*>("inactive_foreground_color"), (getter)AppWindowTitleBar_get_InactiveForegroundColor, (setter)AppWindowTitleBar_put_InactiveForegroundColor, nullptr, nullptr },
        { const_cast<char*>("inactive_background_color"), (getter)AppWindowTitleBar_get_InactiveBackgroundColor, (setter)AppWindowTitleBar_put_InactiveBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("foreground_color"), (getter)AppWindowTitleBar_get_ForegroundColor, (setter)AppWindowTitleBar_put_ForegroundColor, nullptr, nullptr },
        { const_cast<char*>("extends_content_into_title_bar"), (getter)AppWindowTitleBar_get_ExtendsContentIntoTitleBar, (setter)AppWindowTitleBar_put_ExtendsContentIntoTitleBar, nullptr, nullptr },
        { const_cast<char*>("button_pressed_foreground_color"), (getter)AppWindowTitleBar_get_ButtonPressedForegroundColor, (setter)AppWindowTitleBar_put_ButtonPressedForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_pressed_background_color"), (getter)AppWindowTitleBar_get_ButtonPressedBackgroundColor, (setter)AppWindowTitleBar_put_ButtonPressedBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("button_inactive_foreground_color"), (getter)AppWindowTitleBar_get_ButtonInactiveForegroundColor, (setter)AppWindowTitleBar_put_ButtonInactiveForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_inactive_background_color"), (getter)AppWindowTitleBar_get_ButtonInactiveBackgroundColor, (setter)AppWindowTitleBar_put_ButtonInactiveBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("button_hover_foreground_color"), (getter)AppWindowTitleBar_get_ButtonHoverForegroundColor, (setter)AppWindowTitleBar_put_ButtonHoverForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_hover_background_color"), (getter)AppWindowTitleBar_get_ButtonHoverBackgroundColor, (setter)AppWindowTitleBar_put_ButtonHoverBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("button_foreground_color"), (getter)AppWindowTitleBar_get_ButtonForegroundColor, (setter)AppWindowTitleBar_put_ButtonForegroundColor, nullptr, nullptr },
        { const_cast<char*>("button_background_color"), (getter)AppWindowTitleBar_get_ButtonBackgroundColor, (setter)AppWindowTitleBar_put_ButtonBackgroundColor, nullptr, nullptr },
        { const_cast<char*>("background_color"), (getter)AppWindowTitleBar_get_BackgroundColor, (setter)AppWindowTitleBar_put_BackgroundColor, nullptr, nullptr },
        { const_cast<char*>("is_visible"), (getter)AppWindowTitleBar_get_IsVisible, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowTitleBar[] = 
    {
        { Py_tp_new, _new_AppWindowTitleBar },
        { Py_tp_dealloc, _dealloc_AppWindowTitleBar },
        { Py_tp_methods, _methods_AppWindowTitleBar },
        { Py_tp_getset, _getset_AppWindowTitleBar },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowTitleBar =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowTitleBar",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBar),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowTitleBar
    };

    // ----- AppWindowTitleBarOcclusion class --------------------
    constexpr const char* const _type_name_AppWindowTitleBarOcclusion = "AppWindowTitleBarOcclusion";

    static PyObject* _new_AppWindowTitleBarOcclusion(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppWindowTitleBarOcclusion);
        return nullptr;
    }

    static void _dealloc_AppWindowTitleBarOcclusion(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppWindowTitleBarOcclusion_get_OccludingRect(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OccludingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppWindowTitleBarOcclusion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppWindowTitleBarOcclusion[] = {
        { "_from", (PyCFunction)_from_AppWindowTitleBarOcclusion, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppWindowTitleBarOcclusion[] = {
        { const_cast<char*>("occluding_rect"), (getter)AppWindowTitleBarOcclusion_get_OccludingRect, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppWindowTitleBarOcclusion[] = 
    {
        { Py_tp_new, _new_AppWindowTitleBarOcclusion },
        { Py_tp_dealloc, _dealloc_AppWindowTitleBarOcclusion },
        { Py_tp_methods, _methods_AppWindowTitleBarOcclusion },
        { Py_tp_getset, _getset_AppWindowTitleBarOcclusion },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppWindowTitleBarOcclusion =
    {
        "_winrt_Windows_UI_WindowManagement.AppWindowTitleBarOcclusion",
        sizeof(py::wrapper::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppWindowTitleBarOcclusion
    };

    // ----- CompactOverlayPresentationConfiguration class --------------------
    constexpr const char* const _type_name_CompactOverlayPresentationConfiguration = "CompactOverlayPresentationConfiguration";

    static PyObject* _new_CompactOverlayPresentationConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CompactOverlayPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_CompactOverlayPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CompactOverlayPresentationConfiguration[] = {
        { "_from", (PyCFunction)_from_CompactOverlayPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CompactOverlayPresentationConfiguration[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_CompactOverlayPresentationConfiguration[] = 
    {
        { Py_tp_new, _new_CompactOverlayPresentationConfiguration },
        { Py_tp_dealloc, _dealloc_CompactOverlayPresentationConfiguration },
        { Py_tp_methods, _methods_CompactOverlayPresentationConfiguration },
        { Py_tp_getset, _getset_CompactOverlayPresentationConfiguration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CompactOverlayPresentationConfiguration =
    {
        "_winrt_Windows_UI_WindowManagement.CompactOverlayPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CompactOverlayPresentationConfiguration
    };

    // ----- DefaultPresentationConfiguration class --------------------
    constexpr const char* const _type_name_DefaultPresentationConfiguration = "DefaultPresentationConfiguration";

    static PyObject* _new_DefaultPresentationConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::WindowManagement::DefaultPresentationConfiguration instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DefaultPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::DefaultPresentationConfiguration* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_DefaultPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::DefaultPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DefaultPresentationConfiguration[] = {
        { "_from", (PyCFunction)_from_DefaultPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DefaultPresentationConfiguration[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_DefaultPresentationConfiguration[] = 
    {
        { Py_tp_new, _new_DefaultPresentationConfiguration },
        { Py_tp_dealloc, _dealloc_DefaultPresentationConfiguration },
        { Py_tp_methods, _methods_DefaultPresentationConfiguration },
        { Py_tp_getset, _getset_DefaultPresentationConfiguration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DefaultPresentationConfiguration =
    {
        "_winrt_Windows_UI_WindowManagement.DefaultPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::DefaultPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DefaultPresentationConfiguration
    };

    // ----- DisplayRegion class --------------------
    constexpr const char* const _type_name_DisplayRegion = "DisplayRegion";

    static PyObject* _new_DisplayRegion(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DisplayRegion);
        return nullptr;
    }

    static void _dealloc_DisplayRegion(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DisplayRegion_get_DisplayMonitorDeviceId(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayMonitorDeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_IsVisible(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsVisible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_WorkAreaOffset(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WorkAreaOffset());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_get_WorkAreaSize(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WorkAreaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_add_Changed(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::DisplayRegion, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DisplayRegion_remove_Changed(py::wrapper::Windows::UI::WindowManagement::DisplayRegion* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DisplayRegion(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::DisplayRegion>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DisplayRegion[] = {
        { "add_changed", (PyCFunction)DisplayRegion_add_Changed, METH_O, nullptr },
        { "remove_changed", (PyCFunction)DisplayRegion_remove_Changed, METH_O, nullptr },
        { "_from", (PyCFunction)_from_DisplayRegion, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DisplayRegion[] = {
        { const_cast<char*>("display_monitor_device_id"), (getter)DisplayRegion_get_DisplayMonitorDeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_visible"), (getter)DisplayRegion_get_IsVisible, nullptr, nullptr, nullptr },
        { const_cast<char*>("windowing_environment"), (getter)DisplayRegion_get_WindowingEnvironment, nullptr, nullptr, nullptr },
        { const_cast<char*>("work_area_offset"), (getter)DisplayRegion_get_WorkAreaOffset, nullptr, nullptr, nullptr },
        { const_cast<char*>("work_area_size"), (getter)DisplayRegion_get_WorkAreaSize, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DisplayRegion[] = 
    {
        { Py_tp_new, _new_DisplayRegion },
        { Py_tp_dealloc, _dealloc_DisplayRegion },
        { Py_tp_methods, _methods_DisplayRegion },
        { Py_tp_getset, _getset_DisplayRegion },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DisplayRegion =
    {
        "_winrt_Windows_UI_WindowManagement.DisplayRegion",
        sizeof(py::wrapper::Windows::UI::WindowManagement::DisplayRegion),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DisplayRegion
    };

    // ----- FullScreenPresentationConfiguration class --------------------
    constexpr const char* const _type_name_FullScreenPresentationConfiguration = "FullScreenPresentationConfiguration";

    static PyObject* _new_FullScreenPresentationConfiguration(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::WindowManagement::FullScreenPresentationConfiguration instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FullScreenPresentationConfiguration(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FullScreenPresentationConfiguration_get_IsExclusive(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsExclusive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FullScreenPresentationConfiguration_put_IsExclusive(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsExclusive(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_FullScreenPresentationConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::FullScreenPresentationConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FullScreenPresentationConfiguration[] = {
        { "_from", (PyCFunction)_from_FullScreenPresentationConfiguration, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FullScreenPresentationConfiguration[] = {
        { const_cast<char*>("is_exclusive"), (getter)FullScreenPresentationConfiguration_get_IsExclusive, (setter)FullScreenPresentationConfiguration_put_IsExclusive, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FullScreenPresentationConfiguration[] = 
    {
        { Py_tp_new, _new_FullScreenPresentationConfiguration },
        { Py_tp_dealloc, _dealloc_FullScreenPresentationConfiguration },
        { Py_tp_methods, _methods_FullScreenPresentationConfiguration },
        { Py_tp_getset, _getset_FullScreenPresentationConfiguration },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FullScreenPresentationConfiguration =
    {
        "_winrt_Windows_UI_WindowManagement.FullScreenPresentationConfiguration",
        sizeof(py::wrapper::Windows::UI::WindowManagement::FullScreenPresentationConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FullScreenPresentationConfiguration
    };

    // ----- WindowServices class --------------------
    constexpr const char* const _type_name_WindowServices = "WindowServices";

    static PyObject* _new_WindowServices(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowServices);
        return nullptr;
    }

    static PyObject* WindowServices_FindAllTopLevelWindowIds(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::WindowManagement::WindowServices::FindAllTopLevelWindowIds());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowServices[] = {
        { "find_all_top_level_window_ids", (PyCFunction)WindowServices_FindAllTopLevelWindowIds, METH_VARARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowServices[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowServices[] = 
    {
        { Py_tp_new, _new_WindowServices },
        { Py_tp_methods, _methods_WindowServices },
        { Py_tp_getset, _getset_WindowServices },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowServices =
    {
        "_winrt_Windows_UI_WindowManagement.WindowServices",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowServices
    };

    // ----- WindowingEnvironment class --------------------
    constexpr const char* const _type_name_WindowingEnvironment = "WindowingEnvironment";

    static PyObject* _new_WindowingEnvironment(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowingEnvironment);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WindowingEnvironment_FindAll(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::WindowManagement::WindowingEnvironment::FindAll());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::WindowingEnvironmentKind>(args, 0);

                return py::convert(winrt::Windows::UI::WindowManagement::WindowingEnvironment::FindAll(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_GetDisplayRegions(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDisplayRegions());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_get_IsEnabled(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_get_Kind(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_add_Changed(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WindowManagement::WindowingEnvironment, winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>>(arg);

            return py::convert(self->obj.Changed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WindowingEnvironment_remove_Changed(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Changed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WindowingEnvironment(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironment>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironment[] = {
        { "find_all", (PyCFunction)WindowingEnvironment_FindAll, METH_VARARGS | METH_STATIC, nullptr },
        { "get_display_regions", (PyCFunction)WindowingEnvironment_GetDisplayRegions, METH_VARARGS, nullptr },
        { "add_changed", (PyCFunction)WindowingEnvironment_add_Changed, METH_O, nullptr },
        { "remove_changed", (PyCFunction)WindowingEnvironment_remove_Changed, METH_O, nullptr },
        { "_from", (PyCFunction)_from_WindowingEnvironment, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowingEnvironment[] = {
        { const_cast<char*>("is_enabled"), (getter)WindowingEnvironment_get_IsEnabled, nullptr, nullptr, nullptr },
        { const_cast<char*>("kind"), (getter)WindowingEnvironment_get_Kind, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowingEnvironment[] = 
    {
        { Py_tp_new, _new_WindowingEnvironment },
        { Py_tp_dealloc, _dealloc_WindowingEnvironment },
        { Py_tp_methods, _methods_WindowingEnvironment },
        { Py_tp_getset, _getset_WindowingEnvironment },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowingEnvironment =
    {
        "_winrt_Windows_UI_WindowManagement.WindowingEnvironment",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironment),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironment
    };

    // ----- WindowingEnvironmentAddedEventArgs class --------------------
    constexpr const char* const _type_name_WindowingEnvironmentAddedEventArgs = "WindowingEnvironmentAddedEventArgs";

    static PyObject* _new_WindowingEnvironmentAddedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowingEnvironmentAddedEventArgs);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironmentAddedEventArgs(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WindowingEnvironmentAddedEventArgs_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WindowingEnvironmentAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironmentAddedEventArgs[] = {
        { "_from", (PyCFunction)_from_WindowingEnvironmentAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowingEnvironmentAddedEventArgs[] = {
        { const_cast<char*>("windowing_environment"), (getter)WindowingEnvironmentAddedEventArgs_get_WindowingEnvironment, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowingEnvironmentAddedEventArgs[] = 
    {
        { Py_tp_new, _new_WindowingEnvironmentAddedEventArgs },
        { Py_tp_dealloc, _dealloc_WindowingEnvironmentAddedEventArgs },
        { Py_tp_methods, _methods_WindowingEnvironmentAddedEventArgs },
        { Py_tp_getset, _getset_WindowingEnvironmentAddedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowingEnvironmentAddedEventArgs =
    {
        "_winrt_Windows_UI_WindowManagement.WindowingEnvironmentAddedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironmentAddedEventArgs
    };

    // ----- WindowingEnvironmentChangedEventArgs class --------------------
    constexpr const char* const _type_name_WindowingEnvironmentChangedEventArgs = "WindowingEnvironmentChangedEventArgs";

    static PyObject* _new_WindowingEnvironmentChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowingEnvironmentChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironmentChangedEventArgs(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_WindowingEnvironmentChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironmentChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_WindowingEnvironmentChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowingEnvironmentChangedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowingEnvironmentChangedEventArgs[] = 
    {
        { Py_tp_new, _new_WindowingEnvironmentChangedEventArgs },
        { Py_tp_dealloc, _dealloc_WindowingEnvironmentChangedEventArgs },
        { Py_tp_methods, _methods_WindowingEnvironmentChangedEventArgs },
        { Py_tp_getset, _getset_WindowingEnvironmentChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowingEnvironmentChangedEventArgs =
    {
        "_winrt_Windows_UI_WindowManagement.WindowingEnvironmentChangedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironmentChangedEventArgs
    };

    // ----- WindowingEnvironmentRemovedEventArgs class --------------------
    constexpr const char* const _type_name_WindowingEnvironmentRemovedEventArgs = "WindowingEnvironmentRemovedEventArgs";

    static PyObject* _new_WindowingEnvironmentRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WindowingEnvironmentRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_WindowingEnvironmentRemovedEventArgs(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WindowingEnvironmentRemovedEventArgs_get_WindowingEnvironment(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WindowingEnvironment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WindowingEnvironmentRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WindowingEnvironmentRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_WindowingEnvironmentRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_WindowingEnvironmentRemovedEventArgs[] = {
        { const_cast<char*>("windowing_environment"), (getter)WindowingEnvironmentRemovedEventArgs_get_WindowingEnvironment, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_WindowingEnvironmentRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_WindowingEnvironmentRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_WindowingEnvironmentRemovedEventArgs },
        { Py_tp_methods, _methods_WindowingEnvironmentRemovedEventArgs },
        { Py_tp_getset, _getset_WindowingEnvironmentRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_WindowingEnvironmentRemovedEventArgs =
    {
        "_winrt_Windows_UI_WindowManagement.WindowingEnvironmentRemovedEventArgs",
        sizeof(py::wrapper::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowingEnvironmentRemovedEventArgs
    };

    // ----- Windows.UI.WindowManagement Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindow>::python_type = py::register_python_type(module, _type_name_AppWindow, &_type_spec_AppWindow, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowChangedEventArgs>::python_type = py::register_python_type(module, _type_name_AppWindowChangedEventArgs, &_type_spec_AppWindowChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowCloseRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_AppWindowCloseRequestedEventArgs, &_type_spec_AppWindowCloseRequestedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowClosedEventArgs>::python_type = py::register_python_type(module, _type_name_AppWindowClosedEventArgs, &_type_spec_AppWindowClosedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowFrame>::python_type = py::register_python_type(module, _type_name_AppWindowFrame, &_type_spec_AppWindowFrame, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowPlacement>::python_type = py::register_python_type(module, _type_name_AppWindowPlacement, &_type_spec_AppWindowPlacement, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowPresentationConfiguration>::python_type = py::register_python_type(module, _type_name_AppWindowPresentationConfiguration, &_type_spec_AppWindowPresentationConfiguration, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowPresenter>::python_type = py::register_python_type(module, _type_name_AppWindowPresenter, &_type_spec_AppWindowPresenter, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBar>::python_type = py::register_python_type(module, _type_name_AppWindowTitleBar, &_type_spec_AppWindowTitleBar, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::AppWindowTitleBarOcclusion>::python_type = py::register_python_type(module, _type_name_AppWindowTitleBarOcclusion, &_type_spec_AppWindowTitleBarOcclusion, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::CompactOverlayPresentationConfiguration>::python_type = py::register_python_type(module, _type_name_CompactOverlayPresentationConfiguration, &_type_spec_CompactOverlayPresentationConfiguration, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::DefaultPresentationConfiguration>::python_type = py::register_python_type(module, _type_name_DefaultPresentationConfiguration, &_type_spec_DefaultPresentationConfiguration, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::DisplayRegion>::python_type = py::register_python_type(module, _type_name_DisplayRegion, &_type_spec_DisplayRegion, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::FullScreenPresentationConfiguration>::python_type = py::register_python_type(module, _type_name_FullScreenPresentationConfiguration, &_type_spec_FullScreenPresentationConfiguration, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::WindowServices>::python_type = py::register_python_type(module, _type_name_WindowServices, &_type_spec_WindowServices, nullptr);
            py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironment>::python_type = py::register_python_type(module, _type_name_WindowingEnvironment, &_type_spec_WindowingEnvironment, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentAddedEventArgs>::python_type = py::register_python_type(module, _type_name_WindowingEnvironmentAddedEventArgs, &_type_spec_WindowingEnvironmentAddedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentChangedEventArgs>::python_type = py::register_python_type(module, _type_name_WindowingEnvironmentChangedEventArgs, &_type_spec_WindowingEnvironmentChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WindowManagement::WindowingEnvironmentRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_WindowingEnvironmentRemovedEventArgs, &_type_spec_WindowingEnvironmentRemovedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.UI.WindowManagement");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_UI_WindowManagement",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::UI::WindowManagement

PyMODINIT_FUNC
PyInit__winrt_Windows_UI_WindowManagement (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::WindowManagement::module_def);
}
