// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Storage.Pickers.Provider.h"

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequest>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>::python_type;

namespace py::cpp::Windows::Storage::Pickers::Provider
{
    // ----- FileOpenPickerUI class --------------------
    constexpr const char* const _type_name_FileOpenPickerUI = "FileOpenPickerUI";

    static PyObject* _new_FileOpenPickerUI(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_FileOpenPickerUI);
        return nullptr;
    }

    static void _dealloc_FileOpenPickerUI(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FileOpenPickerUI_AddFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 1);

                return py::convert(self->obj.AddFile(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_CanAddFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(self->obj.CanAddFile(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_ContainsFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsFile(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_RemoveFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.RemoveFile(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_get_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPickerUI_put_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPickerUI_get_AllowedFileTypes(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowedFileTypes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_get_SelectionMode(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SelectionMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_add_Closing(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI, winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>>(arg);

            return py::convert(self->obj.Closing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_remove_Closing(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_add_FileRemoved(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI, winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>>(arg);

            return py::convert(self->obj.FileRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_remove_FileRemoved(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FileRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FileOpenPickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileOpenPickerUI[] = {
        { "add_file", (PyCFunction)FileOpenPickerUI_AddFile, METH_VARARGS, nullptr },
        { "can_add_file", (PyCFunction)FileOpenPickerUI_CanAddFile, METH_VARARGS, nullptr },
        { "contains_file", (PyCFunction)FileOpenPickerUI_ContainsFile, METH_VARARGS, nullptr },
        { "remove_file", (PyCFunction)FileOpenPickerUI_RemoveFile, METH_VARARGS, nullptr },
        { "add_closing", (PyCFunction)FileOpenPickerUI_add_Closing, METH_O, nullptr },
        { "remove_closing", (PyCFunction)FileOpenPickerUI_remove_Closing, METH_O, nullptr },
        { "add_file_removed", (PyCFunction)FileOpenPickerUI_add_FileRemoved, METH_O, nullptr },
        { "remove_file_removed", (PyCFunction)FileOpenPickerUI_remove_FileRemoved, METH_O, nullptr },
        { "_from", (PyCFunction)_from_FileOpenPickerUI, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FileOpenPickerUI[] = {
        { const_cast<char*>("title"), (getter)FileOpenPickerUI_get_Title, (setter)FileOpenPickerUI_put_Title, nullptr, nullptr },
        { const_cast<char*>("allowed_file_types"), (getter)FileOpenPickerUI_get_AllowedFileTypes, nullptr, nullptr, nullptr },
        { const_cast<char*>("selection_mode"), (getter)FileOpenPickerUI_get_SelectionMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("settings_identifier"), (getter)FileOpenPickerUI_get_SettingsIdentifier, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FileOpenPickerUI[] = 
    {
        { Py_tp_new, _new_FileOpenPickerUI },
        { Py_tp_dealloc, _dealloc_FileOpenPickerUI },
        { Py_tp_methods, _methods_FileOpenPickerUI },
        { Py_tp_getset, _getset_FileOpenPickerUI },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FileOpenPickerUI =
    {
        "_winrt_Windows_Storage_Pickers_Provider.FileOpenPickerUI",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileOpenPickerUI
    };

    // ----- FileRemovedEventArgs class --------------------
    constexpr const char* const _type_name_FileRemovedEventArgs = "FileRemovedEventArgs";

    static PyObject* _new_FileRemovedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_FileRemovedEventArgs);
        return nullptr;
    }

    static void _dealloc_FileRemovedEventArgs(py::wrapper::Windows::Storage::Pickers::Provider::FileRemovedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FileRemovedEventArgs_get_Id(py::wrapper::Windows::Storage::Pickers::Provider::FileRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FileRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileRemovedEventArgs[] = {
        { "_from", (PyCFunction)_from_FileRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FileRemovedEventArgs[] = {
        { const_cast<char*>("id"), (getter)FileRemovedEventArgs_get_Id, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FileRemovedEventArgs[] = 
    {
        { Py_tp_new, _new_FileRemovedEventArgs },
        { Py_tp_dealloc, _dealloc_FileRemovedEventArgs },
        { Py_tp_methods, _methods_FileRemovedEventArgs },
        { Py_tp_getset, _getset_FileRemovedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FileRemovedEventArgs =
    {
        "_winrt_Windows_Storage_Pickers_Provider.FileRemovedEventArgs",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::FileRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileRemovedEventArgs
    };

    // ----- FileSavePickerUI class --------------------
    constexpr const char* const _type_name_FileSavePickerUI = "FileSavePickerUI";

    static PyObject* _new_FileSavePickerUI(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_FileSavePickerUI);
        return nullptr;
    }

    static void _dealloc_FileSavePickerUI(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FileSavePickerUI_TrySetFileName(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TrySetFileName(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_get_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePickerUI_put_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePickerUI_get_AllowedFileTypes(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AllowedFileTypes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_get_FileName(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FileName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_add_FileNameChanged(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.FileNameChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_remove_FileNameChanged(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FileNameChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_add_TargetFileRequested(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI, winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>>(arg);

            return py::convert(self->obj.TargetFileRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_remove_TargetFileRequested(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TargetFileRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FileSavePickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileSavePickerUI[] = {
        { "try_set_file_name", (PyCFunction)FileSavePickerUI_TrySetFileName, METH_VARARGS, nullptr },
        { "add_file_name_changed", (PyCFunction)FileSavePickerUI_add_FileNameChanged, METH_O, nullptr },
        { "remove_file_name_changed", (PyCFunction)FileSavePickerUI_remove_FileNameChanged, METH_O, nullptr },
        { "add_target_file_requested", (PyCFunction)FileSavePickerUI_add_TargetFileRequested, METH_O, nullptr },
        { "remove_target_file_requested", (PyCFunction)FileSavePickerUI_remove_TargetFileRequested, METH_O, nullptr },
        { "_from", (PyCFunction)_from_FileSavePickerUI, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FileSavePickerUI[] = {
        { const_cast<char*>("title"), (getter)FileSavePickerUI_get_Title, (setter)FileSavePickerUI_put_Title, nullptr, nullptr },
        { const_cast<char*>("allowed_file_types"), (getter)FileSavePickerUI_get_AllowedFileTypes, nullptr, nullptr, nullptr },
        { const_cast<char*>("file_name"), (getter)FileSavePickerUI_get_FileName, nullptr, nullptr, nullptr },
        { const_cast<char*>("settings_identifier"), (getter)FileSavePickerUI_get_SettingsIdentifier, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FileSavePickerUI[] = 
    {
        { Py_tp_new, _new_FileSavePickerUI },
        { Py_tp_dealloc, _dealloc_FileSavePickerUI },
        { Py_tp_methods, _methods_FileSavePickerUI },
        { Py_tp_getset, _getset_FileSavePickerUI },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FileSavePickerUI =
    {
        "_winrt_Windows_Storage_Pickers_Provider.FileSavePickerUI",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileSavePickerUI
    };

    // ----- PickerClosingDeferral class --------------------
    constexpr const char* const _type_name_PickerClosingDeferral = "PickerClosingDeferral";

    static PyObject* _new_PickerClosingDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PickerClosingDeferral);
        return nullptr;
    }

    static void _dealloc_PickerClosingDeferral(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PickerClosingDeferral_Complete(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_PickerClosingDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::PickerClosingDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickerClosingDeferral[] = {
        { "complete", (PyCFunction)PickerClosingDeferral_Complete, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PickerClosingDeferral, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PickerClosingDeferral[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PickerClosingDeferral[] = 
    {
        { Py_tp_new, _new_PickerClosingDeferral },
        { Py_tp_dealloc, _dealloc_PickerClosingDeferral },
        { Py_tp_methods, _methods_PickerClosingDeferral },
        { Py_tp_getset, _getset_PickerClosingDeferral },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PickerClosingDeferral =
    {
        "_winrt_Windows_Storage_Pickers_Provider.PickerClosingDeferral",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickerClosingDeferral
    };

    // ----- PickerClosingEventArgs class --------------------
    constexpr const char* const _type_name_PickerClosingEventArgs = "PickerClosingEventArgs";

    static PyObject* _new_PickerClosingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PickerClosingEventArgs);
        return nullptr;
    }

    static void _dealloc_PickerClosingEventArgs(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PickerClosingEventArgs_get_ClosingOperation(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ClosingOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PickerClosingEventArgs_get_IsCanceled(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PickerClosingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickerClosingEventArgs[] = {
        { "_from", (PyCFunction)_from_PickerClosingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PickerClosingEventArgs[] = {
        { const_cast<char*>("closing_operation"), (getter)PickerClosingEventArgs_get_ClosingOperation, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_canceled"), (getter)PickerClosingEventArgs_get_IsCanceled, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PickerClosingEventArgs[] = 
    {
        { Py_tp_new, _new_PickerClosingEventArgs },
        { Py_tp_dealloc, _dealloc_PickerClosingEventArgs },
        { Py_tp_methods, _methods_PickerClosingEventArgs },
        { Py_tp_getset, _getset_PickerClosingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PickerClosingEventArgs =
    {
        "_winrt_Windows_Storage_Pickers_Provider.PickerClosingEventArgs",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickerClosingEventArgs
    };

    // ----- PickerClosingOperation class --------------------
    constexpr const char* const _type_name_PickerClosingOperation = "PickerClosingOperation";

    static PyObject* _new_PickerClosingOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PickerClosingOperation);
        return nullptr;
    }

    static void _dealloc_PickerClosingOperation(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PickerClosingOperation_GetDeferral(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PickerClosingOperation_get_Deadline(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PickerClosingOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::PickerClosingOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickerClosingOperation[] = {
        { "get_deferral", (PyCFunction)PickerClosingOperation_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_PickerClosingOperation, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PickerClosingOperation[] = {
        { const_cast<char*>("deadline"), (getter)PickerClosingOperation_get_Deadline, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_PickerClosingOperation[] = 
    {
        { Py_tp_new, _new_PickerClosingOperation },
        { Py_tp_dealloc, _dealloc_PickerClosingOperation },
        { Py_tp_methods, _methods_PickerClosingOperation },
        { Py_tp_getset, _getset_PickerClosingOperation },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PickerClosingOperation =
    {
        "_winrt_Windows_Storage_Pickers_Provider.PickerClosingOperation",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickerClosingOperation
    };

    // ----- TargetFileRequest class --------------------
    constexpr const char* const _type_name_TargetFileRequest = "TargetFileRequest";

    static PyObject* _new_TargetFileRequest(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetFileRequest);
        return nullptr;
    }

    static void _dealloc_TargetFileRequest(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetFileRequest_GetDeferral(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetFileRequest_get_TargetFile(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TargetFile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TargetFileRequest_put_TargetFile(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(arg);

            self->obj.TargetFile(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_TargetFileRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::TargetFileRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetFileRequest[] = {
        { "get_deferral", (PyCFunction)TargetFileRequest_GetDeferral, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetFileRequest, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetFileRequest[] = {
        { const_cast<char*>("target_file"), (getter)TargetFileRequest_get_TargetFile, (setter)TargetFileRequest_put_TargetFile, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetFileRequest[] = 
    {
        { Py_tp_new, _new_TargetFileRequest },
        { Py_tp_dealloc, _dealloc_TargetFileRequest },
        { Py_tp_methods, _methods_TargetFileRequest },
        { Py_tp_getset, _getset_TargetFileRequest },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetFileRequest =
    {
        "_winrt_Windows_Storage_Pickers_Provider.TargetFileRequest",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetFileRequest
    };

    // ----- TargetFileRequestDeferral class --------------------
    constexpr const char* const _type_name_TargetFileRequestDeferral = "TargetFileRequestDeferral";

    static PyObject* _new_TargetFileRequestDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetFileRequestDeferral);
        return nullptr;
    }

    static void _dealloc_TargetFileRequestDeferral(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetFileRequestDeferral_Complete(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_TargetFileRequestDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetFileRequestDeferral[] = {
        { "complete", (PyCFunction)TargetFileRequestDeferral_Complete, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_TargetFileRequestDeferral, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetFileRequestDeferral[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetFileRequestDeferral[] = 
    {
        { Py_tp_new, _new_TargetFileRequestDeferral },
        { Py_tp_dealloc, _dealloc_TargetFileRequestDeferral },
        { Py_tp_methods, _methods_TargetFileRequestDeferral },
        { Py_tp_getset, _getset_TargetFileRequestDeferral },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetFileRequestDeferral =
    {
        "_winrt_Windows_Storage_Pickers_Provider.TargetFileRequestDeferral",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetFileRequestDeferral
    };

    // ----- TargetFileRequestedEventArgs class --------------------
    constexpr const char* const _type_name_TargetFileRequestedEventArgs = "TargetFileRequestedEventArgs";

    static PyObject* _new_TargetFileRequestedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_TargetFileRequestedEventArgs);
        return nullptr;
    }

    static void _dealloc_TargetFileRequestedEventArgs(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* TargetFileRequestedEventArgs_get_Request(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_TargetFileRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetFileRequestedEventArgs[] = {
        { "_from", (PyCFunction)_from_TargetFileRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_TargetFileRequestedEventArgs[] = {
        { const_cast<char*>("request"), (getter)TargetFileRequestedEventArgs_get_Request, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_TargetFileRequestedEventArgs[] = 
    {
        { Py_tp_new, _new_TargetFileRequestedEventArgs },
        { Py_tp_dealloc, _dealloc_TargetFileRequestedEventArgs },
        { Py_tp_methods, _methods_TargetFileRequestedEventArgs },
        { Py_tp_getset, _getset_TargetFileRequestedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_TargetFileRequestedEventArgs =
    {
        "_winrt_Windows_Storage_Pickers_Provider.TargetFileRequestedEventArgs",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetFileRequestedEventArgs
    };

    // ----- Windows.Storage.Pickers.Provider Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI>::python_type = py::register_python_type(module, _type_name_FileOpenPickerUI, &_type_spec_FileOpenPickerUI, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>::python_type = py::register_python_type(module, _type_name_FileRemovedEventArgs, &_type_spec_FileRemovedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI>::python_type = py::register_python_type(module, _type_name_FileSavePickerUI, &_type_spec_FileSavePickerUI, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingDeferral>::python_type = py::register_python_type(module, _type_name_PickerClosingDeferral, &_type_spec_PickerClosingDeferral, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>::python_type = py::register_python_type(module, _type_name_PickerClosingEventArgs, &_type_spec_PickerClosingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingOperation>::python_type = py::register_python_type(module, _type_name_PickerClosingOperation, &_type_spec_PickerClosingOperation, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequest>::python_type = py::register_python_type(module, _type_name_TargetFileRequest, &_type_spec_TargetFileRequest, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>::python_type = py::register_python_type(module, _type_name_TargetFileRequestDeferral, &_type_spec_TargetFileRequestDeferral, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>::python_type = py::register_python_type(module, _type_name_TargetFileRequestedEventArgs, &_type_spec_TargetFileRequestedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Storage.Pickers.Provider");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Storage_Pickers_Provider",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Storage::Pickers::Provider

PyMODINIT_FUNC
PyInit__winrt_Windows_Storage_Pickers_Provider (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Storage::Pickers::Provider::module_def);
}
