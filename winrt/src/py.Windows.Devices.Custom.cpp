// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Custom.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Custom::CustomDevice>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Custom::IOControlCode>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Custom::KnownDeviceTypes>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Custom::IIOControlCode>::python_type;

namespace py::cpp::Windows::Devices::Custom
{
    // ----- CustomDevice class --------------------
    constexpr const char* const _type_name_CustomDevice = "CustomDevice";

    static PyObject* _new_CustomDevice(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CustomDevice);
        return nullptr;
    }

    static void _dealloc_CustomDevice(py::wrapper::Windows::Devices::Custom::CustomDevice* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CustomDevice_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Custom::DeviceAccessMode>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Custom::DeviceSharingMode>(args, 2);

                return py::convert(winrt::Windows::Devices::Custom::CustomDevice::FromIdAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CustomDevice_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::guid>(args, 0);

                return py::convert(winrt::Windows::Devices::Custom::CustomDevice::GetDeviceSelector(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CustomDevice_SendIOControlAsync(py::wrapper::Windows::Devices::Custom::CustomDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Custom::IIOControlCode>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 2);

                return py::convert(self->obj.SendIOControlAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CustomDevice_TrySendIOControlAsync(py::wrapper::Windows::Devices::Custom::CustomDevice* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Custom::IIOControlCode>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 2);

                return py::convert(self->obj.TrySendIOControlAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CustomDevice_get_InputStream(py::wrapper::Windows::Devices::Custom::CustomDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InputStream());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CustomDevice_get_OutputStream(py::wrapper::Windows::Devices::Custom::CustomDevice* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OutputStream());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CustomDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Custom::CustomDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CustomDevice[] = {
        { "from_id_async", (PyCFunction)CustomDevice_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)CustomDevice_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "send_i_o_control_async", (PyCFunction)CustomDevice_SendIOControlAsync, METH_VARARGS, nullptr },
        { "try_send_i_o_control_async", (PyCFunction)CustomDevice_TrySendIOControlAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_CustomDevice, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_CustomDevice[] = {
        { const_cast<char*>("input_stream"), (getter)CustomDevice_get_InputStream, nullptr, nullptr, nullptr },
        { const_cast<char*>("output_stream"), (getter)CustomDevice_get_OutputStream, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_CustomDevice[] = 
    {
        { Py_tp_new, _new_CustomDevice },
        { Py_tp_dealloc, _dealloc_CustomDevice },
        { Py_tp_methods, _methods_CustomDevice },
        { Py_tp_getset, _getset_CustomDevice },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_CustomDevice =
    {
        "_winrt_Windows_Devices_Custom.CustomDevice",
        sizeof(py::wrapper::Windows::Devices::Custom::CustomDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CustomDevice
    };

    // ----- IOControlCode class --------------------
    constexpr const char* const _type_name_IOControlCode = "IOControlCode";

    static PyObject* _new_IOControlCode(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<uint16_t>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Custom::IOControlAccessMode>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Devices::Custom::IOControlBufferingMethod>(args, 3);

                winrt::Windows::Devices::Custom::IOControlCode instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_IOControlCode(py::wrapper::Windows::Devices::Custom::IOControlCode* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IOControlCode_get_AccessMode(py::wrapper::Windows::Devices::Custom::IOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AccessMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IOControlCode_get_BufferingMethod(py::wrapper::Windows::Devices::Custom::IOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BufferingMethod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IOControlCode_get_ControlCode(py::wrapper::Windows::Devices::Custom::IOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ControlCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IOControlCode_get_DeviceType(py::wrapper::Windows::Devices::Custom::IOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IOControlCode_get_Function(py::wrapper::Windows::Devices::Custom::IOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Function());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IOControlCode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Custom::IOControlCode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IOControlCode[] = {
        { "_from", (PyCFunction)_from_IOControlCode, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IOControlCode[] = {
        { const_cast<char*>("access_mode"), (getter)IOControlCode_get_AccessMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("buffering_method"), (getter)IOControlCode_get_BufferingMethod, nullptr, nullptr, nullptr },
        { const_cast<char*>("control_code"), (getter)IOControlCode_get_ControlCode, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_type"), (getter)IOControlCode_get_DeviceType, nullptr, nullptr, nullptr },
        { const_cast<char*>("function"), (getter)IOControlCode_get_Function, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IOControlCode[] = 
    {
        { Py_tp_new, _new_IOControlCode },
        { Py_tp_dealloc, _dealloc_IOControlCode },
        { Py_tp_methods, _methods_IOControlCode },
        { Py_tp_getset, _getset_IOControlCode },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IOControlCode =
    {
        "_winrt_Windows_Devices_Custom.IOControlCode",
        sizeof(py::wrapper::Windows::Devices::Custom::IOControlCode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IOControlCode
    };

    // ----- KnownDeviceTypes class --------------------
    constexpr const char* const _type_name_KnownDeviceTypes = "KnownDeviceTypes";

    static PyObject* _new_KnownDeviceTypes(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_KnownDeviceTypes);
        return nullptr;
    }

    static PyObject* KnownDeviceTypes_get_Unknown(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Devices::Custom::KnownDeviceTypes::Unknown());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_KnownDeviceTypes[] = {
        { "get_unknown", (PyCFunction)KnownDeviceTypes_get_Unknown, METH_NOARGS | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_KnownDeviceTypes[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_KnownDeviceTypes[] = 
    {
        { Py_tp_new, _new_KnownDeviceTypes },
        { Py_tp_methods, _methods_KnownDeviceTypes },
        { Py_tp_getset, _getset_KnownDeviceTypes },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_KnownDeviceTypes =
    {
        "_winrt_Windows_Devices_Custom.KnownDeviceTypes",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_KnownDeviceTypes
    };

    // ----- IIOControlCode interface --------------------
    constexpr const char* const _type_name_IIOControlCode = "IIOControlCode";

    static PyObject* _new_IIOControlCode(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IIOControlCode);
        return nullptr;
    }

    static void _dealloc_IIOControlCode(py::wrapper::Windows::Devices::Custom::IIOControlCode* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IIOControlCode_get_AccessMode(py::wrapper::Windows::Devices::Custom::IIOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AccessMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IIOControlCode_get_BufferingMethod(py::wrapper::Windows::Devices::Custom::IIOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BufferingMethod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IIOControlCode_get_ControlCode(py::wrapper::Windows::Devices::Custom::IIOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ControlCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IIOControlCode_get_DeviceType(py::wrapper::Windows::Devices::Custom::IIOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IIOControlCode_get_Function(py::wrapper::Windows::Devices::Custom::IIOControlCode* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Function());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IIOControlCode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Custom::IIOControlCode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IIOControlCode[] = {
        { "_from", (PyCFunction)_from_IIOControlCode, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IIOControlCode[] = {
        { const_cast<char*>("access_mode"), (getter)IIOControlCode_get_AccessMode, nullptr, nullptr, nullptr },
        { const_cast<char*>("buffering_method"), (getter)IIOControlCode_get_BufferingMethod, nullptr, nullptr, nullptr },
        { const_cast<char*>("control_code"), (getter)IIOControlCode_get_ControlCode, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_type"), (getter)IIOControlCode_get_DeviceType, nullptr, nullptr, nullptr },
        { const_cast<char*>("function"), (getter)IIOControlCode_get_Function, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IIOControlCode[] = 
    {
        { Py_tp_new, _new_IIOControlCode },
        { Py_tp_dealloc, _dealloc_IIOControlCode },
        { Py_tp_methods, _methods_IIOControlCode },
        { Py_tp_getset, _getset_IIOControlCode },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IIOControlCode =
    {
        "_winrt_Windows_Devices_Custom.IIOControlCode",
        sizeof(py::wrapper::Windows::Devices::Custom::IIOControlCode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IIOControlCode
    };

    // ----- Windows.Devices.Custom Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Custom::CustomDevice>::python_type = py::register_python_type(module, _type_name_CustomDevice, &_type_spec_CustomDevice, bases.get());
            py::winrt_type<winrt::Windows::Devices::Custom::IOControlCode>::python_type = py::register_python_type(module, _type_name_IOControlCode, &_type_spec_IOControlCode, bases.get());
            py::winrt_type<winrt::Windows::Devices::Custom::KnownDeviceTypes>::python_type = py::register_python_type(module, _type_name_KnownDeviceTypes, &_type_spec_KnownDeviceTypes, nullptr);
            py::winrt_type<winrt::Windows::Devices::Custom::IIOControlCode>::python_type = py::register_python_type(module, _type_name_IIOControlCode, &_type_spec_IIOControlCode, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Custom");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Custom",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Custom

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Custom (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Custom::module_def);
}
