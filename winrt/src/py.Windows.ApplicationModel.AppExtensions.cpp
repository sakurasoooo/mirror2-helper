// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.AppExtensions.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtension>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>::python_type;

namespace py::cpp::Windows::ApplicationModel::AppExtensions
{
    // ----- AppExtension class --------------------
    constexpr const char* const _type_name_AppExtension = "AppExtension";

    static PyObject* _new_AppExtension(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppExtension);
        return nullptr;
    }

    static void _dealloc_AppExtension(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppExtension_GetExtensionPropertiesAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetExtensionPropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtension_GetPublicFolderAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetPublicFolderAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_AppInfo(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_Description(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_DisplayName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_Id(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_AppUserModelId(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppUserModelId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppExtension(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtension>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtension[] = {
        { "get_extension_properties_async", (PyCFunction)AppExtension_GetExtensionPropertiesAsync, METH_VARARGS, nullptr },
        { "get_public_folder_async", (PyCFunction)AppExtension_GetPublicFolderAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AppExtension, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppExtension[] = {
        { const_cast<char*>("app_info"), (getter)AppExtension_get_AppInfo, nullptr, nullptr, nullptr },
        { const_cast<char*>("description"), (getter)AppExtension_get_Description, nullptr, nullptr, nullptr },
        { const_cast<char*>("display_name"), (getter)AppExtension_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)AppExtension_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("package"), (getter)AppExtension_get_Package, nullptr, nullptr, nullptr },
        { const_cast<char*>("app_user_model_id"), (getter)AppExtension_get_AppUserModelId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppExtension[] = 
    {
        { Py_tp_new, _new_AppExtension },
        { Py_tp_dealloc, _dealloc_AppExtension },
        { Py_tp_methods, _methods_AppExtension },
        { Py_tp_getset, _getset_AppExtension },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppExtension =
    {
        "_winrt_Windows_ApplicationModel_AppExtensions.AppExtension",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtension
    };

    // ----- AppExtensionCatalog class --------------------
    constexpr const char* const _type_name_AppExtensionCatalog = "AppExtensionCatalog";

    static PyObject* _new_AppExtensionCatalog(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppExtensionCatalog);
        return nullptr;
    }

    static void _dealloc_AppExtensionCatalog(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppExtensionCatalog_FindAllAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_Open(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog::Open(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_RequestRemovePackageAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.RequestRemovePackageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageInstalled(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>>(arg);

            return py::convert(self->obj.PackageInstalled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageInstalled(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageInstalled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageStatusChanged(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>>(arg);

            return py::convert(self->obj.PackageStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageStatusChanged(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageUninstalling(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>>(arg);

            return py::convert(self->obj.PackageUninstalling(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageUninstalling(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUninstalling(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageUpdated(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>>(arg);

            return py::convert(self->obj.PackageUpdated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageUpdated(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUpdated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageUpdating(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>>(arg);

            return py::convert(self->obj.PackageUpdating(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageUpdating(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUpdating(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppExtensionCatalog(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionCatalog[] = {
        { "find_all_async", (PyCFunction)AppExtensionCatalog_FindAllAsync, METH_VARARGS, nullptr },
        { "open", (PyCFunction)AppExtensionCatalog_Open, METH_VARARGS | METH_STATIC, nullptr },
        { "request_remove_package_async", (PyCFunction)AppExtensionCatalog_RequestRemovePackageAsync, METH_VARARGS, nullptr },
        { "add_package_installed", (PyCFunction)AppExtensionCatalog_add_PackageInstalled, METH_O, nullptr },
        { "remove_package_installed", (PyCFunction)AppExtensionCatalog_remove_PackageInstalled, METH_O, nullptr },
        { "add_package_status_changed", (PyCFunction)AppExtensionCatalog_add_PackageStatusChanged, METH_O, nullptr },
        { "remove_package_status_changed", (PyCFunction)AppExtensionCatalog_remove_PackageStatusChanged, METH_O, nullptr },
        { "add_package_uninstalling", (PyCFunction)AppExtensionCatalog_add_PackageUninstalling, METH_O, nullptr },
        { "remove_package_uninstalling", (PyCFunction)AppExtensionCatalog_remove_PackageUninstalling, METH_O, nullptr },
        { "add_package_updated", (PyCFunction)AppExtensionCatalog_add_PackageUpdated, METH_O, nullptr },
        { "remove_package_updated", (PyCFunction)AppExtensionCatalog_remove_PackageUpdated, METH_O, nullptr },
        { "add_package_updating", (PyCFunction)AppExtensionCatalog_add_PackageUpdating, METH_O, nullptr },
        { "remove_package_updating", (PyCFunction)AppExtensionCatalog_remove_PackageUpdating, METH_O, nullptr },
        { "_from", (PyCFunction)_from_AppExtensionCatalog, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppExtensionCatalog[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_AppExtensionCatalog[] = 
    {
        { Py_tp_new, _new_AppExtensionCatalog },
        { Py_tp_dealloc, _dealloc_AppExtensionCatalog },
        { Py_tp_methods, _methods_AppExtensionCatalog },
        { Py_tp_getset, _getset_AppExtensionCatalog },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppExtensionCatalog =
    {
        "_winrt_Windows_ApplicationModel_AppExtensions.AppExtensionCatalog",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionCatalog
    };

    // ----- AppExtensionPackageInstalledEventArgs class --------------------
    constexpr const char* const _type_name_AppExtensionPackageInstalledEventArgs = "AppExtensionPackageInstalledEventArgs";

    static PyObject* _new_AppExtensionPackageInstalledEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppExtensionPackageInstalledEventArgs);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageInstalledEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppExtensionPackageInstalledEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageInstalledEventArgs_get_Extensions(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Extensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageInstalledEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppExtensionPackageInstalledEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageInstalledEventArgs[] = {
        { "_from", (PyCFunction)_from_AppExtensionPackageInstalledEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppExtensionPackageInstalledEventArgs[] = {
        { const_cast<char*>("app_extension_name"), (getter)AppExtensionPackageInstalledEventArgs_get_AppExtensionName, nullptr, nullptr, nullptr },
        { const_cast<char*>("extensions"), (getter)AppExtensionPackageInstalledEventArgs_get_Extensions, nullptr, nullptr, nullptr },
        { const_cast<char*>("package"), (getter)AppExtensionPackageInstalledEventArgs_get_Package, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppExtensionPackageInstalledEventArgs[] = 
    {
        { Py_tp_new, _new_AppExtensionPackageInstalledEventArgs },
        { Py_tp_dealloc, _dealloc_AppExtensionPackageInstalledEventArgs },
        { Py_tp_methods, _methods_AppExtensionPackageInstalledEventArgs },
        { Py_tp_getset, _getset_AppExtensionPackageInstalledEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppExtensionPackageInstalledEventArgs =
    {
        "_winrt_Windows_ApplicationModel_AppExtensions.AppExtensionPackageInstalledEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageInstalledEventArgs
    };

    // ----- AppExtensionPackageStatusChangedEventArgs class --------------------
    constexpr const char* const _type_name_AppExtensionPackageStatusChangedEventArgs = "AppExtensionPackageStatusChangedEventArgs";

    static PyObject* _new_AppExtensionPackageStatusChangedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppExtensionPackageStatusChangedEventArgs);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageStatusChangedEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppExtensionPackageStatusChangedEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageStatusChangedEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppExtensionPackageStatusChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageStatusChangedEventArgs[] = {
        { "_from", (PyCFunction)_from_AppExtensionPackageStatusChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppExtensionPackageStatusChangedEventArgs[] = {
        { const_cast<char*>("app_extension_name"), (getter)AppExtensionPackageStatusChangedEventArgs_get_AppExtensionName, nullptr, nullptr, nullptr },
        { const_cast<char*>("package"), (getter)AppExtensionPackageStatusChangedEventArgs_get_Package, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppExtensionPackageStatusChangedEventArgs[] = 
    {
        { Py_tp_new, _new_AppExtensionPackageStatusChangedEventArgs },
        { Py_tp_dealloc, _dealloc_AppExtensionPackageStatusChangedEventArgs },
        { Py_tp_methods, _methods_AppExtensionPackageStatusChangedEventArgs },
        { Py_tp_getset, _getset_AppExtensionPackageStatusChangedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppExtensionPackageStatusChangedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_AppExtensions.AppExtensionPackageStatusChangedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageStatusChangedEventArgs
    };

    // ----- AppExtensionPackageUninstallingEventArgs class --------------------
    constexpr const char* const _type_name_AppExtensionPackageUninstallingEventArgs = "AppExtensionPackageUninstallingEventArgs";

    static PyObject* _new_AppExtensionPackageUninstallingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppExtensionPackageUninstallingEventArgs);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageUninstallingEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppExtensionPackageUninstallingEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUninstallingEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppExtensionPackageUninstallingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageUninstallingEventArgs[] = {
        { "_from", (PyCFunction)_from_AppExtensionPackageUninstallingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppExtensionPackageUninstallingEventArgs[] = {
        { const_cast<char*>("app_extension_name"), (getter)AppExtensionPackageUninstallingEventArgs_get_AppExtensionName, nullptr, nullptr, nullptr },
        { const_cast<char*>("package"), (getter)AppExtensionPackageUninstallingEventArgs_get_Package, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppExtensionPackageUninstallingEventArgs[] = 
    {
        { Py_tp_new, _new_AppExtensionPackageUninstallingEventArgs },
        { Py_tp_dealloc, _dealloc_AppExtensionPackageUninstallingEventArgs },
        { Py_tp_methods, _methods_AppExtensionPackageUninstallingEventArgs },
        { Py_tp_getset, _getset_AppExtensionPackageUninstallingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppExtensionPackageUninstallingEventArgs =
    {
        "_winrt_Windows_ApplicationModel_AppExtensions.AppExtensionPackageUninstallingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageUninstallingEventArgs
    };

    // ----- AppExtensionPackageUpdatedEventArgs class --------------------
    constexpr const char* const _type_name_AppExtensionPackageUpdatedEventArgs = "AppExtensionPackageUpdatedEventArgs";

    static PyObject* _new_AppExtensionPackageUpdatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppExtensionPackageUpdatedEventArgs);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageUpdatedEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppExtensionPackageUpdatedEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUpdatedEventArgs_get_Extensions(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Extensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUpdatedEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppExtensionPackageUpdatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageUpdatedEventArgs[] = {
        { "_from", (PyCFunction)_from_AppExtensionPackageUpdatedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppExtensionPackageUpdatedEventArgs[] = {
        { const_cast<char*>("app_extension_name"), (getter)AppExtensionPackageUpdatedEventArgs_get_AppExtensionName, nullptr, nullptr, nullptr },
        { const_cast<char*>("extensions"), (getter)AppExtensionPackageUpdatedEventArgs_get_Extensions, nullptr, nullptr, nullptr },
        { const_cast<char*>("package"), (getter)AppExtensionPackageUpdatedEventArgs_get_Package, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppExtensionPackageUpdatedEventArgs[] = 
    {
        { Py_tp_new, _new_AppExtensionPackageUpdatedEventArgs },
        { Py_tp_dealloc, _dealloc_AppExtensionPackageUpdatedEventArgs },
        { Py_tp_methods, _methods_AppExtensionPackageUpdatedEventArgs },
        { Py_tp_getset, _getset_AppExtensionPackageUpdatedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppExtensionPackageUpdatedEventArgs =
    {
        "_winrt_Windows_ApplicationModel_AppExtensions.AppExtensionPackageUpdatedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageUpdatedEventArgs
    };

    // ----- AppExtensionPackageUpdatingEventArgs class --------------------
    constexpr const char* const _type_name_AppExtensionPackageUpdatingEventArgs = "AppExtensionPackageUpdatingEventArgs";

    static PyObject* _new_AppExtensionPackageUpdatingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AppExtensionPackageUpdatingEventArgs);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageUpdatingEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AppExtensionPackageUpdatingEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUpdatingEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AppExtensionPackageUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageUpdatingEventArgs[] = {
        { "_from", (PyCFunction)_from_AppExtensionPackageUpdatingEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AppExtensionPackageUpdatingEventArgs[] = {
        { const_cast<char*>("app_extension_name"), (getter)AppExtensionPackageUpdatingEventArgs_get_AppExtensionName, nullptr, nullptr, nullptr },
        { const_cast<char*>("package"), (getter)AppExtensionPackageUpdatingEventArgs_get_Package, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AppExtensionPackageUpdatingEventArgs[] = 
    {
        { Py_tp_new, _new_AppExtensionPackageUpdatingEventArgs },
        { Py_tp_dealloc, _dealloc_AppExtensionPackageUpdatingEventArgs },
        { Py_tp_methods, _methods_AppExtensionPackageUpdatingEventArgs },
        { Py_tp_getset, _getset_AppExtensionPackageUpdatingEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AppExtensionPackageUpdatingEventArgs =
    {
        "_winrt_Windows_ApplicationModel_AppExtensions.AppExtensionPackageUpdatingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageUpdatingEventArgs
    };

    // ----- Windows.ApplicationModel.AppExtensions Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtension>::python_type = py::register_python_type(module, _type_name_AppExtension, &_type_spec_AppExtension, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog>::python_type = py::register_python_type(module, _type_name_AppExtensionCatalog, &_type_spec_AppExtensionCatalog, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>::python_type = py::register_python_type(module, _type_name_AppExtensionPackageInstalledEventArgs, &_type_spec_AppExtensionPackageInstalledEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>::python_type = py::register_python_type(module, _type_name_AppExtensionPackageStatusChangedEventArgs, &_type_spec_AppExtensionPackageStatusChangedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>::python_type = py::register_python_type(module, _type_name_AppExtensionPackageUninstallingEventArgs, &_type_spec_AppExtensionPackageUninstallingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>::python_type = py::register_python_type(module, _type_name_AppExtensionPackageUpdatedEventArgs, &_type_spec_AppExtensionPackageUpdatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>::python_type = py::register_python_type(module, _type_name_AppExtensionPackageUpdatingEventArgs, &_type_spec_AppExtensionPackageUpdatingEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.AppExtensions");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_ApplicationModel_AppExtensions",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::ApplicationModel::AppExtensions

PyMODINIT_FUNC
PyInit__winrt_Windows_ApplicationModel_AppExtensions (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::AppExtensions::module_def);
}
