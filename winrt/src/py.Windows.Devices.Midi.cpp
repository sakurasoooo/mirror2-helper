// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Devices.Midi.h"

PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiActiveSensingMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiChannelPressureMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiContinueMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiControlChangeMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiInPort>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiMessageReceivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiNoteOffMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiNoteOnMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiOutPort>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiProgramChangeMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiSongSelectMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiStartMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiStopMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiSynthesizer>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiSystemExclusiveMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiSystemResetMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiTimeCodeMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiTimingClockMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::MidiTuneRequestMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::IMidiMessage>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Devices::Midi::IMidiOutPort>::python_type;

namespace py::cpp::Windows::Devices::Midi
{
    // ----- MidiActiveSensingMessage class --------------------
    constexpr const char* const _type_name_MidiActiveSensingMessage = "MidiActiveSensingMessage";

    static PyObject* _new_MidiActiveSensingMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Midi::MidiActiveSensingMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiActiveSensingMessage(py::wrapper::Windows::Devices::Midi::MidiActiveSensingMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiActiveSensingMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiActiveSensingMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiActiveSensingMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiActiveSensingMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiActiveSensingMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiActiveSensingMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiActiveSensingMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiActiveSensingMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiActiveSensingMessage[] = {
        { "_from", (PyCFunction)_from_MidiActiveSensingMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiActiveSensingMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiActiveSensingMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiActiveSensingMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiActiveSensingMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiActiveSensingMessage[] = 
    {
        { Py_tp_new, _new_MidiActiveSensingMessage },
        { Py_tp_dealloc, _dealloc_MidiActiveSensingMessage },
        { Py_tp_methods, _methods_MidiActiveSensingMessage },
        { Py_tp_getset, _getset_MidiActiveSensingMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiActiveSensingMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiActiveSensingMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiActiveSensingMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiActiveSensingMessage
    };

    // ----- MidiChannelPressureMessage class --------------------
    constexpr const char* const _type_name_MidiChannelPressureMessage = "MidiChannelPressureMessage";

    static PyObject* _new_MidiChannelPressureMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);

                winrt::Windows::Devices::Midi::MidiChannelPressureMessage instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiChannelPressureMessage(py::wrapper::Windows::Devices::Midi::MidiChannelPressureMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiChannelPressureMessage_get_Channel(py::wrapper::Windows::Devices::Midi::MidiChannelPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Channel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiChannelPressureMessage_get_Pressure(py::wrapper::Windows::Devices::Midi::MidiChannelPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Pressure());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiChannelPressureMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiChannelPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiChannelPressureMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiChannelPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiChannelPressureMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiChannelPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiChannelPressureMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiChannelPressureMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiChannelPressureMessage[] = {
        { "_from", (PyCFunction)_from_MidiChannelPressureMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiChannelPressureMessage[] = {
        { const_cast<char*>("channel"), (getter)MidiChannelPressureMessage_get_Channel, nullptr, nullptr, nullptr },
        { const_cast<char*>("pressure"), (getter)MidiChannelPressureMessage_get_Pressure, nullptr, nullptr, nullptr },
        { const_cast<char*>("raw_data"), (getter)MidiChannelPressureMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiChannelPressureMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiChannelPressureMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiChannelPressureMessage[] = 
    {
        { Py_tp_new, _new_MidiChannelPressureMessage },
        { Py_tp_dealloc, _dealloc_MidiChannelPressureMessage },
        { Py_tp_methods, _methods_MidiChannelPressureMessage },
        { Py_tp_getset, _getset_MidiChannelPressureMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiChannelPressureMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiChannelPressureMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiChannelPressureMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiChannelPressureMessage
    };

    // ----- MidiContinueMessage class --------------------
    constexpr const char* const _type_name_MidiContinueMessage = "MidiContinueMessage";

    static PyObject* _new_MidiContinueMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Midi::MidiContinueMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiContinueMessage(py::wrapper::Windows::Devices::Midi::MidiContinueMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiContinueMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiContinueMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiContinueMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiContinueMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiContinueMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiContinueMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiContinueMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiContinueMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiContinueMessage[] = {
        { "_from", (PyCFunction)_from_MidiContinueMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiContinueMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiContinueMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiContinueMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiContinueMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiContinueMessage[] = 
    {
        { Py_tp_new, _new_MidiContinueMessage },
        { Py_tp_dealloc, _dealloc_MidiContinueMessage },
        { Py_tp_methods, _methods_MidiContinueMessage },
        { Py_tp_getset, _getset_MidiContinueMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiContinueMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiContinueMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiContinueMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiContinueMessage
    };

    // ----- MidiControlChangeMessage class --------------------
    constexpr const char* const _type_name_MidiControlChangeMessage = "MidiControlChangeMessage";

    static PyObject* _new_MidiControlChangeMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);
                auto param2 = py::convert_to<uint8_t>(args, 2);

                winrt::Windows::Devices::Midi::MidiControlChangeMessage instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiControlChangeMessage(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiControlChangeMessage_get_Channel(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Channel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiControlChangeMessage_get_ControlValue(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ControlValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiControlChangeMessage_get_Controller(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Controller());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiControlChangeMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiControlChangeMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiControlChangeMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiControlChangeMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiControlChangeMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiControlChangeMessage[] = {
        { "_from", (PyCFunction)_from_MidiControlChangeMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiControlChangeMessage[] = {
        { const_cast<char*>("channel"), (getter)MidiControlChangeMessage_get_Channel, nullptr, nullptr, nullptr },
        { const_cast<char*>("control_value"), (getter)MidiControlChangeMessage_get_ControlValue, nullptr, nullptr, nullptr },
        { const_cast<char*>("controller"), (getter)MidiControlChangeMessage_get_Controller, nullptr, nullptr, nullptr },
        { const_cast<char*>("raw_data"), (getter)MidiControlChangeMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiControlChangeMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiControlChangeMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiControlChangeMessage[] = 
    {
        { Py_tp_new, _new_MidiControlChangeMessage },
        { Py_tp_dealloc, _dealloc_MidiControlChangeMessage },
        { Py_tp_methods, _methods_MidiControlChangeMessage },
        { Py_tp_getset, _getset_MidiControlChangeMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiControlChangeMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiControlChangeMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiControlChangeMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiControlChangeMessage
    };

    // ----- MidiInPort class --------------------
    constexpr const char* const _type_name_MidiInPort = "MidiInPort";

    static PyObject* _new_MidiInPort(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MidiInPort);
        return nullptr;
    }

    static void _dealloc_MidiInPort(py::wrapper::Windows::Devices::Midi::MidiInPort* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiInPort_Close(py::wrapper::Windows::Devices::Midi::MidiInPort* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiInPort_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Midi::MidiInPort::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiInPort_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Midi::MidiInPort::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiInPort_get_DeviceId(py::wrapper::Windows::Devices::Midi::MidiInPort* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiInPort_add_MessageReceived(py::wrapper::Windows::Devices::Midi::MidiInPort* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Midi::MidiInPort, winrt::Windows::Devices::Midi::MidiMessageReceivedEventArgs>>(arg);

            return py::convert(self->obj.MessageReceived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiInPort_remove_MessageReceived(py::wrapper::Windows::Devices::Midi::MidiInPort* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MessageReceived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiInPort(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiInPort>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MidiInPort(py::wrapper::Windows::Devices::Midi::MidiInPort* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MidiInPort(py::wrapper::Windows::Devices::Midi::MidiInPort* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiInPort[] = {
        { "close", (PyCFunction)MidiInPort_Close, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)MidiInPort_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)MidiInPort_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "add_message_received", (PyCFunction)MidiInPort_add_MessageReceived, METH_O, nullptr },
        { "remove_message_received", (PyCFunction)MidiInPort_remove_MessageReceived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MidiInPort, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MidiInPort, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MidiInPort, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiInPort[] = {
        { const_cast<char*>("device_id"), (getter)MidiInPort_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiInPort[] = 
    {
        { Py_tp_new, _new_MidiInPort },
        { Py_tp_dealloc, _dealloc_MidiInPort },
        { Py_tp_methods, _methods_MidiInPort },
        { Py_tp_getset, _getset_MidiInPort },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiInPort =
    {
        "_winrt_Windows_Devices_Midi.MidiInPort",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiInPort),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiInPort
    };

    // ----- MidiMessageReceivedEventArgs class --------------------
    constexpr const char* const _type_name_MidiMessageReceivedEventArgs = "MidiMessageReceivedEventArgs";

    static PyObject* _new_MidiMessageReceivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MidiMessageReceivedEventArgs);
        return nullptr;
    }

    static void _dealloc_MidiMessageReceivedEventArgs(py::wrapper::Windows::Devices::Midi::MidiMessageReceivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiMessageReceivedEventArgs_get_Message(py::wrapper::Windows::Devices::Midi::MidiMessageReceivedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiMessageReceivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiMessageReceivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiMessageReceivedEventArgs[] = {
        { "_from", (PyCFunction)_from_MidiMessageReceivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiMessageReceivedEventArgs[] = {
        { const_cast<char*>("message"), (getter)MidiMessageReceivedEventArgs_get_Message, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiMessageReceivedEventArgs[] = 
    {
        { Py_tp_new, _new_MidiMessageReceivedEventArgs },
        { Py_tp_dealloc, _dealloc_MidiMessageReceivedEventArgs },
        { Py_tp_methods, _methods_MidiMessageReceivedEventArgs },
        { Py_tp_getset, _getset_MidiMessageReceivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiMessageReceivedEventArgs =
    {
        "_winrt_Windows_Devices_Midi.MidiMessageReceivedEventArgs",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiMessageReceivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiMessageReceivedEventArgs
    };

    // ----- MidiNoteOffMessage class --------------------
    constexpr const char* const _type_name_MidiNoteOffMessage = "MidiNoteOffMessage";

    static PyObject* _new_MidiNoteOffMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);
                auto param2 = py::convert_to<uint8_t>(args, 2);

                winrt::Windows::Devices::Midi::MidiNoteOffMessage instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiNoteOffMessage(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiNoteOffMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOffMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOffMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOffMessage_get_Channel(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Channel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOffMessage_get_Note(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Note());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOffMessage_get_Velocity(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Velocity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiNoteOffMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiNoteOffMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiNoteOffMessage[] = {
        { "_from", (PyCFunction)_from_MidiNoteOffMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiNoteOffMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiNoteOffMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiNoteOffMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiNoteOffMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("channel"), (getter)MidiNoteOffMessage_get_Channel, nullptr, nullptr, nullptr },
        { const_cast<char*>("note"), (getter)MidiNoteOffMessage_get_Note, nullptr, nullptr, nullptr },
        { const_cast<char*>("velocity"), (getter)MidiNoteOffMessage_get_Velocity, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiNoteOffMessage[] = 
    {
        { Py_tp_new, _new_MidiNoteOffMessage },
        { Py_tp_dealloc, _dealloc_MidiNoteOffMessage },
        { Py_tp_methods, _methods_MidiNoteOffMessage },
        { Py_tp_getset, _getset_MidiNoteOffMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiNoteOffMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiNoteOffMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiNoteOffMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiNoteOffMessage
    };

    // ----- MidiNoteOnMessage class --------------------
    constexpr const char* const _type_name_MidiNoteOnMessage = "MidiNoteOnMessage";

    static PyObject* _new_MidiNoteOnMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);
                auto param2 = py::convert_to<uint8_t>(args, 2);

                winrt::Windows::Devices::Midi::MidiNoteOnMessage instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiNoteOnMessage(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiNoteOnMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOnMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOnMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOnMessage_get_Channel(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Channel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOnMessage_get_Note(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Note());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiNoteOnMessage_get_Velocity(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Velocity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiNoteOnMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiNoteOnMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiNoteOnMessage[] = {
        { "_from", (PyCFunction)_from_MidiNoteOnMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiNoteOnMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiNoteOnMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiNoteOnMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiNoteOnMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("channel"), (getter)MidiNoteOnMessage_get_Channel, nullptr, nullptr, nullptr },
        { const_cast<char*>("note"), (getter)MidiNoteOnMessage_get_Note, nullptr, nullptr, nullptr },
        { const_cast<char*>("velocity"), (getter)MidiNoteOnMessage_get_Velocity, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiNoteOnMessage[] = 
    {
        { Py_tp_new, _new_MidiNoteOnMessage },
        { Py_tp_dealloc, _dealloc_MidiNoteOnMessage },
        { Py_tp_methods, _methods_MidiNoteOnMessage },
        { Py_tp_getset, _getset_MidiNoteOnMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiNoteOnMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiNoteOnMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiNoteOnMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiNoteOnMessage
    };

    // ----- MidiOutPort class --------------------
    constexpr const char* const _type_name_MidiOutPort = "MidiOutPort";

    static PyObject* _new_MidiOutPort(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MidiOutPort);
        return nullptr;
    }

    static void _dealloc_MidiOutPort(py::wrapper::Windows::Devices::Midi::MidiOutPort* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiOutPort_Close(py::wrapper::Windows::Devices::Midi::MidiOutPort* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiOutPort_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Devices::Midi::MidiOutPort::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiOutPort_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Midi::MidiOutPort::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiOutPort_SendBuffer(py::wrapper::Windows::Devices::Midi::MidiOutPort* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                self->obj.SendBuffer(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiOutPort_SendMessage(py::wrapper::Windows::Devices::Midi::MidiOutPort* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Midi::IMidiMessage>(args, 0);

                self->obj.SendMessage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiOutPort_get_DeviceId(py::wrapper::Windows::Devices::Midi::MidiOutPort* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiOutPort(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiOutPort>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MidiOutPort(py::wrapper::Windows::Devices::Midi::MidiOutPort* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MidiOutPort(py::wrapper::Windows::Devices::Midi::MidiOutPort* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiOutPort[] = {
        { "close", (PyCFunction)MidiOutPort_Close, METH_VARARGS, nullptr },
        { "from_id_async", (PyCFunction)MidiOutPort_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)MidiOutPort_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "send_buffer", (PyCFunction)MidiOutPort_SendBuffer, METH_VARARGS, nullptr },
        { "send_message", (PyCFunction)MidiOutPort_SendMessage, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MidiOutPort, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MidiOutPort, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MidiOutPort, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiOutPort[] = {
        { const_cast<char*>("device_id"), (getter)MidiOutPort_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiOutPort[] = 
    {
        { Py_tp_new, _new_MidiOutPort },
        { Py_tp_dealloc, _dealloc_MidiOutPort },
        { Py_tp_methods, _methods_MidiOutPort },
        { Py_tp_getset, _getset_MidiOutPort },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiOutPort =
    {
        "_winrt_Windows_Devices_Midi.MidiOutPort",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiOutPort),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiOutPort
    };

    // ----- MidiPitchBendChangeMessage class --------------------
    constexpr const char* const _type_name_MidiPitchBendChangeMessage = "MidiPitchBendChangeMessage";

    static PyObject* _new_MidiPitchBendChangeMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);

                winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiPitchBendChangeMessage(py::wrapper::Windows::Devices::Midi::MidiPitchBendChangeMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiPitchBendChangeMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiPitchBendChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPitchBendChangeMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiPitchBendChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPitchBendChangeMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiPitchBendChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPitchBendChangeMessage_get_Bend(py::wrapper::Windows::Devices::Midi::MidiPitchBendChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Bend());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPitchBendChangeMessage_get_Channel(py::wrapper::Windows::Devices::Midi::MidiPitchBendChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Channel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiPitchBendChangeMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiPitchBendChangeMessage[] = {
        { "_from", (PyCFunction)_from_MidiPitchBendChangeMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiPitchBendChangeMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiPitchBendChangeMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiPitchBendChangeMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiPitchBendChangeMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("bend"), (getter)MidiPitchBendChangeMessage_get_Bend, nullptr, nullptr, nullptr },
        { const_cast<char*>("channel"), (getter)MidiPitchBendChangeMessage_get_Channel, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiPitchBendChangeMessage[] = 
    {
        { Py_tp_new, _new_MidiPitchBendChangeMessage },
        { Py_tp_dealloc, _dealloc_MidiPitchBendChangeMessage },
        { Py_tp_methods, _methods_MidiPitchBendChangeMessage },
        { Py_tp_getset, _getset_MidiPitchBendChangeMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiPitchBendChangeMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiPitchBendChangeMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiPitchBendChangeMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiPitchBendChangeMessage
    };

    // ----- MidiPolyphonicKeyPressureMessage class --------------------
    constexpr const char* const _type_name_MidiPolyphonicKeyPressureMessage = "MidiPolyphonicKeyPressureMessage";

    static PyObject* _new_MidiPolyphonicKeyPressureMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);
                auto param2 = py::convert_to<uint8_t>(args, 2);

                winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiPolyphonicKeyPressureMessage(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiPolyphonicKeyPressureMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPolyphonicKeyPressureMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPolyphonicKeyPressureMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPolyphonicKeyPressureMessage_get_Channel(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Channel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPolyphonicKeyPressureMessage_get_Note(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Note());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiPolyphonicKeyPressureMessage_get_Pressure(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Pressure());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiPolyphonicKeyPressureMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiPolyphonicKeyPressureMessage[] = {
        { "_from", (PyCFunction)_from_MidiPolyphonicKeyPressureMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiPolyphonicKeyPressureMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiPolyphonicKeyPressureMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiPolyphonicKeyPressureMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiPolyphonicKeyPressureMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("channel"), (getter)MidiPolyphonicKeyPressureMessage_get_Channel, nullptr, nullptr, nullptr },
        { const_cast<char*>("note"), (getter)MidiPolyphonicKeyPressureMessage_get_Note, nullptr, nullptr, nullptr },
        { const_cast<char*>("pressure"), (getter)MidiPolyphonicKeyPressureMessage_get_Pressure, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiPolyphonicKeyPressureMessage[] = 
    {
        { Py_tp_new, _new_MidiPolyphonicKeyPressureMessage },
        { Py_tp_dealloc, _dealloc_MidiPolyphonicKeyPressureMessage },
        { Py_tp_methods, _methods_MidiPolyphonicKeyPressureMessage },
        { Py_tp_getset, _getset_MidiPolyphonicKeyPressureMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiPolyphonicKeyPressureMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiPolyphonicKeyPressureMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiPolyphonicKeyPressureMessage
    };

    // ----- MidiProgramChangeMessage class --------------------
    constexpr const char* const _type_name_MidiProgramChangeMessage = "MidiProgramChangeMessage";

    static PyObject* _new_MidiProgramChangeMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);

                winrt::Windows::Devices::Midi::MidiProgramChangeMessage instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiProgramChangeMessage(py::wrapper::Windows::Devices::Midi::MidiProgramChangeMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiProgramChangeMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiProgramChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiProgramChangeMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiProgramChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiProgramChangeMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiProgramChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiProgramChangeMessage_get_Channel(py::wrapper::Windows::Devices::Midi::MidiProgramChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Channel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiProgramChangeMessage_get_Program(py::wrapper::Windows::Devices::Midi::MidiProgramChangeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Program());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiProgramChangeMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiProgramChangeMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiProgramChangeMessage[] = {
        { "_from", (PyCFunction)_from_MidiProgramChangeMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiProgramChangeMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiProgramChangeMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiProgramChangeMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiProgramChangeMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("channel"), (getter)MidiProgramChangeMessage_get_Channel, nullptr, nullptr, nullptr },
        { const_cast<char*>("program"), (getter)MidiProgramChangeMessage_get_Program, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiProgramChangeMessage[] = 
    {
        { Py_tp_new, _new_MidiProgramChangeMessage },
        { Py_tp_dealloc, _dealloc_MidiProgramChangeMessage },
        { Py_tp_methods, _methods_MidiProgramChangeMessage },
        { Py_tp_getset, _getset_MidiProgramChangeMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiProgramChangeMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiProgramChangeMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiProgramChangeMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiProgramChangeMessage
    };

    // ----- MidiSongPositionPointerMessage class --------------------
    constexpr const char* const _type_name_MidiSongPositionPointerMessage = "MidiSongPositionPointerMessage";

    static PyObject* _new_MidiSongPositionPointerMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint16_t>(args, 0);

                winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiSongPositionPointerMessage(py::wrapper::Windows::Devices::Midi::MidiSongPositionPointerMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiSongPositionPointerMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiSongPositionPointerMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSongPositionPointerMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiSongPositionPointerMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSongPositionPointerMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiSongPositionPointerMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSongPositionPointerMessage_get_Beats(py::wrapper::Windows::Devices::Midi::MidiSongPositionPointerMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Beats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiSongPositionPointerMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiSongPositionPointerMessage[] = {
        { "_from", (PyCFunction)_from_MidiSongPositionPointerMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiSongPositionPointerMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiSongPositionPointerMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiSongPositionPointerMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiSongPositionPointerMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("beats"), (getter)MidiSongPositionPointerMessage_get_Beats, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiSongPositionPointerMessage[] = 
    {
        { Py_tp_new, _new_MidiSongPositionPointerMessage },
        { Py_tp_dealloc, _dealloc_MidiSongPositionPointerMessage },
        { Py_tp_methods, _methods_MidiSongPositionPointerMessage },
        { Py_tp_getset, _getset_MidiSongPositionPointerMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiSongPositionPointerMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiSongPositionPointerMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiSongPositionPointerMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiSongPositionPointerMessage
    };

    // ----- MidiSongSelectMessage class --------------------
    constexpr const char* const _type_name_MidiSongSelectMessage = "MidiSongSelectMessage";

    static PyObject* _new_MidiSongSelectMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);

                winrt::Windows::Devices::Midi::MidiSongSelectMessage instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiSongSelectMessage(py::wrapper::Windows::Devices::Midi::MidiSongSelectMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiSongSelectMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiSongSelectMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSongSelectMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiSongSelectMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSongSelectMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiSongSelectMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSongSelectMessage_get_Song(py::wrapper::Windows::Devices::Midi::MidiSongSelectMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Song());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiSongSelectMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiSongSelectMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiSongSelectMessage[] = {
        { "_from", (PyCFunction)_from_MidiSongSelectMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiSongSelectMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiSongSelectMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiSongSelectMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiSongSelectMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("song"), (getter)MidiSongSelectMessage_get_Song, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiSongSelectMessage[] = 
    {
        { Py_tp_new, _new_MidiSongSelectMessage },
        { Py_tp_dealloc, _dealloc_MidiSongSelectMessage },
        { Py_tp_methods, _methods_MidiSongSelectMessage },
        { Py_tp_getset, _getset_MidiSongSelectMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiSongSelectMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiSongSelectMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiSongSelectMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiSongSelectMessage
    };

    // ----- MidiStartMessage class --------------------
    constexpr const char* const _type_name_MidiStartMessage = "MidiStartMessage";

    static PyObject* _new_MidiStartMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Midi::MidiStartMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiStartMessage(py::wrapper::Windows::Devices::Midi::MidiStartMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiStartMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiStartMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiStartMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiStartMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiStartMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiStartMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiStartMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiStartMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiStartMessage[] = {
        { "_from", (PyCFunction)_from_MidiStartMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiStartMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiStartMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiStartMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiStartMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiStartMessage[] = 
    {
        { Py_tp_new, _new_MidiStartMessage },
        { Py_tp_dealloc, _dealloc_MidiStartMessage },
        { Py_tp_methods, _methods_MidiStartMessage },
        { Py_tp_getset, _getset_MidiStartMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiStartMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiStartMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiStartMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiStartMessage
    };

    // ----- MidiStopMessage class --------------------
    constexpr const char* const _type_name_MidiStopMessage = "MidiStopMessage";

    static PyObject* _new_MidiStopMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Midi::MidiStopMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiStopMessage(py::wrapper::Windows::Devices::Midi::MidiStopMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiStopMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiStopMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiStopMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiStopMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiStopMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiStopMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiStopMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiStopMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiStopMessage[] = {
        { "_from", (PyCFunction)_from_MidiStopMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiStopMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiStopMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiStopMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiStopMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiStopMessage[] = 
    {
        { Py_tp_new, _new_MidiStopMessage },
        { Py_tp_dealloc, _dealloc_MidiStopMessage },
        { Py_tp_methods, _methods_MidiStopMessage },
        { Py_tp_getset, _getset_MidiStopMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiStopMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiStopMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiStopMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiStopMessage
    };

    // ----- MidiSynthesizer class --------------------
    constexpr const char* const _type_name_MidiSynthesizer = "MidiSynthesizer";

    static PyObject* _new_MidiSynthesizer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MidiSynthesizer);
        return nullptr;
    }

    static void _dealloc_MidiSynthesizer(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiSynthesizer_Close(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiSynthesizer_CreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Devices::Midi::MidiSynthesizer::CreateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Enumeration::DeviceInformation>(args, 0);

                return py::convert(winrt::Windows::Devices::Midi::MidiSynthesizer::CreateAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiSynthesizer_IsSynthesizer(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Enumeration::DeviceInformation>(args, 0);

                return py::convert(winrt::Windows::Devices::Midi::MidiSynthesizer::IsSynthesizer(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiSynthesizer_SendBuffer(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                self->obj.SendBuffer(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiSynthesizer_SendMessage(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Midi::IMidiMessage>(args, 0);

                self->obj.SendMessage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MidiSynthesizer_get_DeviceId(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSynthesizer_get_Volume(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Volume());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MidiSynthesizer_put_Volume(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Volume(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MidiSynthesizer_get_AudioDevice(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AudioDevice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiSynthesizer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiSynthesizer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MidiSynthesizer(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MidiSynthesizer(py::wrapper::Windows::Devices::Midi::MidiSynthesizer* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiSynthesizer[] = {
        { "close", (PyCFunction)MidiSynthesizer_Close, METH_VARARGS, nullptr },
        { "create_async", (PyCFunction)MidiSynthesizer_CreateAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "is_synthesizer", (PyCFunction)MidiSynthesizer_IsSynthesizer, METH_VARARGS | METH_STATIC, nullptr },
        { "send_buffer", (PyCFunction)MidiSynthesizer_SendBuffer, METH_VARARGS, nullptr },
        { "send_message", (PyCFunction)MidiSynthesizer_SendMessage, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MidiSynthesizer, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MidiSynthesizer, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MidiSynthesizer, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiSynthesizer[] = {
        { const_cast<char*>("device_id"), (getter)MidiSynthesizer_get_DeviceId, nullptr, nullptr, nullptr },
        { const_cast<char*>("volume"), (getter)MidiSynthesizer_get_Volume, (setter)MidiSynthesizer_put_Volume, nullptr, nullptr },
        { const_cast<char*>("audio_device"), (getter)MidiSynthesizer_get_AudioDevice, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiSynthesizer[] = 
    {
        { Py_tp_new, _new_MidiSynthesizer },
        { Py_tp_dealloc, _dealloc_MidiSynthesizer },
        { Py_tp_methods, _methods_MidiSynthesizer },
        { Py_tp_getset, _getset_MidiSynthesizer },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiSynthesizer =
    {
        "_winrt_Windows_Devices_Midi.MidiSynthesizer",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiSynthesizer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiSynthesizer
    };

    // ----- MidiSystemExclusiveMessage class --------------------
    constexpr const char* const _type_name_MidiSystemExclusiveMessage = "MidiSystemExclusiveMessage";

    static PyObject* _new_MidiSystemExclusiveMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                winrt::Windows::Devices::Midi::MidiSystemExclusiveMessage instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiSystemExclusiveMessage(py::wrapper::Windows::Devices::Midi::MidiSystemExclusiveMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiSystemExclusiveMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiSystemExclusiveMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSystemExclusiveMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiSystemExclusiveMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSystemExclusiveMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiSystemExclusiveMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiSystemExclusiveMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiSystemExclusiveMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiSystemExclusiveMessage[] = {
        { "_from", (PyCFunction)_from_MidiSystemExclusiveMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiSystemExclusiveMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiSystemExclusiveMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiSystemExclusiveMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiSystemExclusiveMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiSystemExclusiveMessage[] = 
    {
        { Py_tp_new, _new_MidiSystemExclusiveMessage },
        { Py_tp_dealloc, _dealloc_MidiSystemExclusiveMessage },
        { Py_tp_methods, _methods_MidiSystemExclusiveMessage },
        { Py_tp_getset, _getset_MidiSystemExclusiveMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiSystemExclusiveMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiSystemExclusiveMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiSystemExclusiveMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiSystemExclusiveMessage
    };

    // ----- MidiSystemResetMessage class --------------------
    constexpr const char* const _type_name_MidiSystemResetMessage = "MidiSystemResetMessage";

    static PyObject* _new_MidiSystemResetMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Midi::MidiSystemResetMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiSystemResetMessage(py::wrapper::Windows::Devices::Midi::MidiSystemResetMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiSystemResetMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiSystemResetMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSystemResetMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiSystemResetMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiSystemResetMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiSystemResetMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiSystemResetMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiSystemResetMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiSystemResetMessage[] = {
        { "_from", (PyCFunction)_from_MidiSystemResetMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiSystemResetMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiSystemResetMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiSystemResetMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiSystemResetMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiSystemResetMessage[] = 
    {
        { Py_tp_new, _new_MidiSystemResetMessage },
        { Py_tp_dealloc, _dealloc_MidiSystemResetMessage },
        { Py_tp_methods, _methods_MidiSystemResetMessage },
        { Py_tp_getset, _getset_MidiSystemResetMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiSystemResetMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiSystemResetMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiSystemResetMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiSystemResetMessage
    };

    // ----- MidiTimeCodeMessage class --------------------
    constexpr const char* const _type_name_MidiTimeCodeMessage = "MidiTimeCodeMessage";

    static PyObject* _new_MidiTimeCodeMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);

                winrt::Windows::Devices::Midi::MidiTimeCodeMessage instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiTimeCodeMessage(py::wrapper::Windows::Devices::Midi::MidiTimeCodeMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiTimeCodeMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiTimeCodeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTimeCodeMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiTimeCodeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTimeCodeMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiTimeCodeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTimeCodeMessage_get_FrameType(py::wrapper::Windows::Devices::Midi::MidiTimeCodeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTimeCodeMessage_get_Values(py::wrapper::Windows::Devices::Midi::MidiTimeCodeMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Values());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiTimeCodeMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiTimeCodeMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiTimeCodeMessage[] = {
        { "_from", (PyCFunction)_from_MidiTimeCodeMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiTimeCodeMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiTimeCodeMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiTimeCodeMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiTimeCodeMessage_get_Type, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame_type"), (getter)MidiTimeCodeMessage_get_FrameType, nullptr, nullptr, nullptr },
        { const_cast<char*>("values"), (getter)MidiTimeCodeMessage_get_Values, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiTimeCodeMessage[] = 
    {
        { Py_tp_new, _new_MidiTimeCodeMessage },
        { Py_tp_dealloc, _dealloc_MidiTimeCodeMessage },
        { Py_tp_methods, _methods_MidiTimeCodeMessage },
        { Py_tp_getset, _getset_MidiTimeCodeMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiTimeCodeMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiTimeCodeMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiTimeCodeMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiTimeCodeMessage
    };

    // ----- MidiTimingClockMessage class --------------------
    constexpr const char* const _type_name_MidiTimingClockMessage = "MidiTimingClockMessage";

    static PyObject* _new_MidiTimingClockMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Midi::MidiTimingClockMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiTimingClockMessage(py::wrapper::Windows::Devices::Midi::MidiTimingClockMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiTimingClockMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiTimingClockMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTimingClockMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiTimingClockMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTimingClockMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiTimingClockMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiTimingClockMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiTimingClockMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiTimingClockMessage[] = {
        { "_from", (PyCFunction)_from_MidiTimingClockMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiTimingClockMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiTimingClockMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiTimingClockMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiTimingClockMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiTimingClockMessage[] = 
    {
        { Py_tp_new, _new_MidiTimingClockMessage },
        { Py_tp_dealloc, _dealloc_MidiTimingClockMessage },
        { Py_tp_methods, _methods_MidiTimingClockMessage },
        { Py_tp_getset, _getset_MidiTimingClockMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiTimingClockMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiTimingClockMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiTimingClockMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiTimingClockMessage
    };

    // ----- MidiTuneRequestMessage class --------------------
    constexpr const char* const _type_name_MidiTuneRequestMessage = "MidiTuneRequestMessage";

    static PyObject* _new_MidiTuneRequestMessage(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Midi::MidiTuneRequestMessage instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MidiTuneRequestMessage(py::wrapper::Windows::Devices::Midi::MidiTuneRequestMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MidiTuneRequestMessage_get_RawData(py::wrapper::Windows::Devices::Midi::MidiTuneRequestMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTuneRequestMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::MidiTuneRequestMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MidiTuneRequestMessage_get_Type(py::wrapper::Windows::Devices::Midi::MidiTuneRequestMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MidiTuneRequestMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::MidiTuneRequestMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MidiTuneRequestMessage[] = {
        { "_from", (PyCFunction)_from_MidiTuneRequestMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MidiTuneRequestMessage[] = {
        { const_cast<char*>("raw_data"), (getter)MidiTuneRequestMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)MidiTuneRequestMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)MidiTuneRequestMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MidiTuneRequestMessage[] = 
    {
        { Py_tp_new, _new_MidiTuneRequestMessage },
        { Py_tp_dealloc, _dealloc_MidiTuneRequestMessage },
        { Py_tp_methods, _methods_MidiTuneRequestMessage },
        { Py_tp_getset, _getset_MidiTuneRequestMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MidiTuneRequestMessage =
    {
        "_winrt_Windows_Devices_Midi.MidiTuneRequestMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::MidiTuneRequestMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MidiTuneRequestMessage
    };

    // ----- IMidiMessage interface --------------------
    constexpr const char* const _type_name_IMidiMessage = "IMidiMessage";

    static PyObject* _new_IMidiMessage(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IMidiMessage);
        return nullptr;
    }

    static void _dealloc_IMidiMessage(py::wrapper::Windows::Devices::Midi::IMidiMessage* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IMidiMessage_get_RawData(py::wrapper::Windows::Devices::Midi::IMidiMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RawData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IMidiMessage_get_Timestamp(py::wrapper::Windows::Devices::Midi::IMidiMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IMidiMessage_get_Type(py::wrapper::Windows::Devices::Midi::IMidiMessage* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IMidiMessage(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::IMidiMessage>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IMidiMessage[] = {
        { "_from", (PyCFunction)_from_IMidiMessage, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IMidiMessage[] = {
        { const_cast<char*>("raw_data"), (getter)IMidiMessage_get_RawData, nullptr, nullptr, nullptr },
        { const_cast<char*>("timestamp"), (getter)IMidiMessage_get_Timestamp, nullptr, nullptr, nullptr },
        { const_cast<char*>("type"), (getter)IMidiMessage_get_Type, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IMidiMessage[] = 
    {
        { Py_tp_new, _new_IMidiMessage },
        { Py_tp_dealloc, _dealloc_IMidiMessage },
        { Py_tp_methods, _methods_IMidiMessage },
        { Py_tp_getset, _getset_IMidiMessage },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IMidiMessage =
    {
        "_winrt_Windows_Devices_Midi.IMidiMessage",
        sizeof(py::wrapper::Windows::Devices::Midi::IMidiMessage),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IMidiMessage
    };

    // ----- IMidiOutPort interface --------------------
    constexpr const char* const _type_name_IMidiOutPort = "IMidiOutPort";

    static PyObject* _new_IMidiOutPort(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IMidiOutPort);
        return nullptr;
    }

    static void _dealloc_IMidiOutPort(py::wrapper::Windows::Devices::Midi::IMidiOutPort* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IMidiOutPort_Close(py::wrapper::Windows::Devices::Midi::IMidiOutPort* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IMidiOutPort_SendBuffer(py::wrapper::Windows::Devices::Midi::IMidiOutPort* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                self->obj.SendBuffer(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IMidiOutPort_SendMessage(py::wrapper::Windows::Devices::Midi::IMidiOutPort* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Midi::IMidiMessage>(args, 0);

                self->obj.SendMessage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IMidiOutPort_get_DeviceId(py::wrapper::Windows::Devices::Midi::IMidiOutPort* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IMidiOutPort(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Midi::IMidiOutPort>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_IMidiOutPort(py::wrapper::Windows::Devices::Midi::IMidiOutPort* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_IMidiOutPort(py::wrapper::Windows::Devices::Midi::IMidiOutPort* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IMidiOutPort[] = {
        { "send_buffer", (PyCFunction)IMidiOutPort_SendBuffer, METH_VARARGS, nullptr },
        { "send_message", (PyCFunction)IMidiOutPort_SendMessage, METH_VARARGS, nullptr },
        { "close", (PyCFunction)IMidiOutPort_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_IMidiOutPort, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_IMidiOutPort, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_IMidiOutPort, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_IMidiOutPort[] = {
        { const_cast<char*>("device_id"), (getter)IMidiOutPort_get_DeviceId, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_IMidiOutPort[] = 
    {
        { Py_tp_new, _new_IMidiOutPort },
        { Py_tp_dealloc, _dealloc_IMidiOutPort },
        { Py_tp_methods, _methods_IMidiOutPort },
        { Py_tp_getset, _getset_IMidiOutPort },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_IMidiOutPort =
    {
        "_winrt_Windows_Devices_Midi.IMidiOutPort",
        sizeof(py::wrapper::Windows::Devices::Midi::IMidiOutPort),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IMidiOutPort
    };

    // ----- Windows.Devices.Midi Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Devices::Midi::MidiActiveSensingMessage>::python_type = py::register_python_type(module, _type_name_MidiActiveSensingMessage, &_type_spec_MidiActiveSensingMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiChannelPressureMessage>::python_type = py::register_python_type(module, _type_name_MidiChannelPressureMessage, &_type_spec_MidiChannelPressureMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiContinueMessage>::python_type = py::register_python_type(module, _type_name_MidiContinueMessage, &_type_spec_MidiContinueMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiControlChangeMessage>::python_type = py::register_python_type(module, _type_name_MidiControlChangeMessage, &_type_spec_MidiControlChangeMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiInPort>::python_type = py::register_python_type(module, _type_name_MidiInPort, &_type_spec_MidiInPort, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiMessageReceivedEventArgs>::python_type = py::register_python_type(module, _type_name_MidiMessageReceivedEventArgs, &_type_spec_MidiMessageReceivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiNoteOffMessage>::python_type = py::register_python_type(module, _type_name_MidiNoteOffMessage, &_type_spec_MidiNoteOffMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiNoteOnMessage>::python_type = py::register_python_type(module, _type_name_MidiNoteOnMessage, &_type_spec_MidiNoteOnMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiOutPort>::python_type = py::register_python_type(module, _type_name_MidiOutPort, &_type_spec_MidiOutPort, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage>::python_type = py::register_python_type(module, _type_name_MidiPitchBendChangeMessage, &_type_spec_MidiPitchBendChangeMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage>::python_type = py::register_python_type(module, _type_name_MidiPolyphonicKeyPressureMessage, &_type_spec_MidiPolyphonicKeyPressureMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiProgramChangeMessage>::python_type = py::register_python_type(module, _type_name_MidiProgramChangeMessage, &_type_spec_MidiProgramChangeMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage>::python_type = py::register_python_type(module, _type_name_MidiSongPositionPointerMessage, &_type_spec_MidiSongPositionPointerMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiSongSelectMessage>::python_type = py::register_python_type(module, _type_name_MidiSongSelectMessage, &_type_spec_MidiSongSelectMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiStartMessage>::python_type = py::register_python_type(module, _type_name_MidiStartMessage, &_type_spec_MidiStartMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiStopMessage>::python_type = py::register_python_type(module, _type_name_MidiStopMessage, &_type_spec_MidiStopMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiSynthesizer>::python_type = py::register_python_type(module, _type_name_MidiSynthesizer, &_type_spec_MidiSynthesizer, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiSystemExclusiveMessage>::python_type = py::register_python_type(module, _type_name_MidiSystemExclusiveMessage, &_type_spec_MidiSystemExclusiveMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiSystemResetMessage>::python_type = py::register_python_type(module, _type_name_MidiSystemResetMessage, &_type_spec_MidiSystemResetMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiTimeCodeMessage>::python_type = py::register_python_type(module, _type_name_MidiTimeCodeMessage, &_type_spec_MidiTimeCodeMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiTimingClockMessage>::python_type = py::register_python_type(module, _type_name_MidiTimingClockMessage, &_type_spec_MidiTimingClockMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::MidiTuneRequestMessage>::python_type = py::register_python_type(module, _type_name_MidiTuneRequestMessage, &_type_spec_MidiTuneRequestMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::IMidiMessage>::python_type = py::register_python_type(module, _type_name_IMidiMessage, &_type_spec_IMidiMessage, bases.get());
            py::winrt_type<winrt::Windows::Devices::Midi::IMidiOutPort>::python_type = py::register_python_type(module, _type_name_IMidiOutPort, &_type_spec_IMidiOutPort, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Devices.Midi");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Devices_Midi",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Devices::Midi

PyMODINIT_FUNC
PyInit__winrt_Windows_Devices_Midi (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Devices::Midi::module_def);
}
