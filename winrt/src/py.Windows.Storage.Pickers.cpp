// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Storage.Pickers.h"

PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FileExtensionVector>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FileOpenPicker>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FilePickerSelectedFilesArray>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FileSavePicker>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Storage::Pickers::FolderPicker>::python_type;

namespace py::cpp::Windows::Storage::Pickers
{
    // ----- FileExtensionVector class --------------------
    constexpr const char* const _type_name_FileExtensionVector = "FileExtensionVector";

    static PyObject* _new_FileExtensionVector(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_FileExtensionVector);
        return nullptr;
    }

    static void _dealloc_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FileExtensionVector_Append(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Append(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_Clear(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_First(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_GetAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_GetMany(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::hstring>::size_type>(args, 1);
                winrt::com_array<winrt::hstring> param1 ( param1_count, py::empty_instance<winrt::hstring>::get() );

                auto return_value = self->obj.GetMany(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_GetView(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_IndexOf(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_InsertAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.InsertAt(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_RemoveAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.RemoveAt(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_RemoveAtEnd(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.RemoveAtEnd();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_ReplaceAll(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<winrt::hstring>>(args, 0);

                self->obj.ReplaceAll(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_SetAt(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.SetAt(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileExtensionVector_get_Size(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FileExtensionVector(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FileExtensionVector>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _seq_assign_FileExtensionVector(py::wrapper::Windows::Storage::Pickers::FileExtensionVector* self, Py_ssize_t i, PyObject* value) noexcept
    {
        try
        {
            if (value == nullptr) { self->obj.RemoveAt(static_cast<uint32_t>(i)); }
            else { self->obj.SetAt(static_cast<uint32_t>(i), py::convert_to<winrt::hstring>(value)); }
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_FileExtensionVector[] = {
        { "append", (PyCFunction)FileExtensionVector_Append, METH_VARARGS, nullptr },
        { "clear", (PyCFunction)FileExtensionVector_Clear, METH_VARARGS, nullptr },
        { "first", (PyCFunction)FileExtensionVector_First, METH_VARARGS, nullptr },
        { "get_at", (PyCFunction)FileExtensionVector_GetAt, METH_VARARGS, nullptr },
        { "get_many", (PyCFunction)FileExtensionVector_GetMany, METH_VARARGS, nullptr },
        { "get_view", (PyCFunction)FileExtensionVector_GetView, METH_VARARGS, nullptr },
        { "index_of", (PyCFunction)FileExtensionVector_IndexOf, METH_VARARGS, nullptr },
        { "insert_at", (PyCFunction)FileExtensionVector_InsertAt, METH_VARARGS, nullptr },
        { "remove_at", (PyCFunction)FileExtensionVector_RemoveAt, METH_VARARGS, nullptr },
        { "remove_at_end", (PyCFunction)FileExtensionVector_RemoveAtEnd, METH_VARARGS, nullptr },
        { "replace_all", (PyCFunction)FileExtensionVector_ReplaceAll, METH_VARARGS, nullptr },
        { "set_at", (PyCFunction)FileExtensionVector_SetAt, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_FileExtensionVector, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FileExtensionVector[] = {
        { const_cast<char*>("size"), (getter)FileExtensionVector_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FileExtensionVector[] = 
    {
        { Py_tp_new, _new_FileExtensionVector },
        { Py_tp_dealloc, _dealloc_FileExtensionVector },
        { Py_tp_methods, _methods_FileExtensionVector },
        { Py_tp_getset, _getset_FileExtensionVector },
        { Py_tp_iter, _iterator_FileExtensionVector },
        { Py_sq_length, _seq_length_FileExtensionVector },
        { Py_sq_item, _seq_item_FileExtensionVector },
        { Py_sq_ass_item, _seq_assign_FileExtensionVector },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FileExtensionVector =
    {
        "_winrt_Windows_Storage_Pickers.FileExtensionVector",
        sizeof(py::wrapper::Windows::Storage::Pickers::FileExtensionVector),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileExtensionVector
    };

    // ----- FileOpenPicker class --------------------
    constexpr const char* const _type_name_FileOpenPicker = "FileOpenPicker";

    static PyObject* _new_FileOpenPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Storage::Pickers::FileOpenPicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FileOpenPicker(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FileOpenPicker_CreateForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::Pickers::FileOpenPicker::CreateForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickMultipleFilesAndContinue(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.PickMultipleFilesAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickMultipleFilesAsync(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PickMultipleFilesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickSingleFileAndContinue(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.PickSingleFileAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_PickSingleFileAsync(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PickSingleFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.PickSingleFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_ResumePickSingleFileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Storage::Pickers::FileOpenPicker::ResumePickSingleFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_get_ViewMode(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViewMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_ViewMode(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerViewMode>(arg);

            self->obj.ViewMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuggestedStartLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerLocationId>(arg);

            self->obj.SuggestedStartLocation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SettingsIdentifier(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CommitButtonText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPicker_put_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CommitButtonText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPicker_get_FileTypeFilter(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FileTypeFilter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_get_ContinuationData(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPicker_get_User(py::wrapper::Windows::Storage::Pickers::FileOpenPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FileOpenPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FileOpenPicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileOpenPicker[] = {
        { "create_for_user", (PyCFunction)FileOpenPicker_CreateForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "pick_multiple_files_and_continue", (PyCFunction)FileOpenPicker_PickMultipleFilesAndContinue, METH_VARARGS, nullptr },
        { "pick_multiple_files_async", (PyCFunction)FileOpenPicker_PickMultipleFilesAsync, METH_VARARGS, nullptr },
        { "pick_single_file_and_continue", (PyCFunction)FileOpenPicker_PickSingleFileAndContinue, METH_VARARGS, nullptr },
        { "pick_single_file_async", (PyCFunction)FileOpenPicker_PickSingleFileAsync, METH_VARARGS, nullptr },
        { "resume_pick_single_file_async", (PyCFunction)FileOpenPicker_ResumePickSingleFileAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_FileOpenPicker, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FileOpenPicker[] = {
        { const_cast<char*>("view_mode"), (getter)FileOpenPicker_get_ViewMode, (setter)FileOpenPicker_put_ViewMode, nullptr, nullptr },
        { const_cast<char*>("suggested_start_location"), (getter)FileOpenPicker_get_SuggestedStartLocation, (setter)FileOpenPicker_put_SuggestedStartLocation, nullptr, nullptr },
        { const_cast<char*>("settings_identifier"), (getter)FileOpenPicker_get_SettingsIdentifier, (setter)FileOpenPicker_put_SettingsIdentifier, nullptr, nullptr },
        { const_cast<char*>("commit_button_text"), (getter)FileOpenPicker_get_CommitButtonText, (setter)FileOpenPicker_put_CommitButtonText, nullptr, nullptr },
        { const_cast<char*>("file_type_filter"), (getter)FileOpenPicker_get_FileTypeFilter, nullptr, nullptr, nullptr },
        { const_cast<char*>("continuation_data"), (getter)FileOpenPicker_get_ContinuationData, nullptr, nullptr, nullptr },
        { const_cast<char*>("user"), (getter)FileOpenPicker_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FileOpenPicker[] = 
    {
        { Py_tp_new, _new_FileOpenPicker },
        { Py_tp_dealloc, _dealloc_FileOpenPicker },
        { Py_tp_methods, _methods_FileOpenPicker },
        { Py_tp_getset, _getset_FileOpenPicker },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FileOpenPicker =
    {
        "_winrt_Windows_Storage_Pickers.FileOpenPicker",
        sizeof(py::wrapper::Windows::Storage::Pickers::FileOpenPicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileOpenPicker
    };

    // ----- FilePickerFileTypesOrderedMap class --------------------
    constexpr const char* const _type_name_FilePickerFileTypesOrderedMap = "FilePickerFileTypesOrderedMap";

    static PyObject* _new_FilePickerFileTypesOrderedMap(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_FilePickerFileTypesOrderedMap);
        return nullptr;
    }

    static void _dealloc_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FilePickerFileTypesOrderedMap_Clear(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_First(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_GetView(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_HasKey(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_Insert(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::hstring>>(args, 1);

                return py::convert(self->obj.Insert(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_Lookup(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_Remove(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerFileTypesOrderedMap_get_Size(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FilePickerFileTypesOrderedMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _map_length_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* key) noexcept
    {
        try
        {
            return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_assign_FilePickerFileTypesOrderedMap(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap* self, PyObject* key, PyObject* value) noexcept
    {
        try
        {
            auto _key = py::convert_to<winrt::hstring>(key);
            if (value == nullptr) { self->obj.Remove(_key); }
            else { self->obj.Insert(_key, py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::hstring>>(value)); }
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_FilePickerFileTypesOrderedMap[] = {
        { "clear", (PyCFunction)FilePickerFileTypesOrderedMap_Clear, METH_VARARGS, nullptr },
        { "first", (PyCFunction)FilePickerFileTypesOrderedMap_First, METH_VARARGS, nullptr },
        { "get_view", (PyCFunction)FilePickerFileTypesOrderedMap_GetView, METH_VARARGS, nullptr },
        { "has_key", (PyCFunction)FilePickerFileTypesOrderedMap_HasKey, METH_VARARGS, nullptr },
        { "insert", (PyCFunction)FilePickerFileTypesOrderedMap_Insert, METH_VARARGS, nullptr },
        { "lookup", (PyCFunction)FilePickerFileTypesOrderedMap_Lookup, METH_VARARGS, nullptr },
        { "remove", (PyCFunction)FilePickerFileTypesOrderedMap_Remove, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_FilePickerFileTypesOrderedMap, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FilePickerFileTypesOrderedMap[] = {
        { const_cast<char*>("size"), (getter)FilePickerFileTypesOrderedMap_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FilePickerFileTypesOrderedMap[] = 
    {
        { Py_tp_new, _new_FilePickerFileTypesOrderedMap },
        { Py_tp_dealloc, _dealloc_FilePickerFileTypesOrderedMap },
        { Py_tp_methods, _methods_FilePickerFileTypesOrderedMap },
        { Py_tp_getset, _getset_FilePickerFileTypesOrderedMap },
        { Py_tp_iter, _iterator_FilePickerFileTypesOrderedMap },
        { Py_mp_length, _map_length_FilePickerFileTypesOrderedMap },
        { Py_mp_subscript, _map_subscript_FilePickerFileTypesOrderedMap },
        { Py_mp_ass_subscript, _map_assign_FilePickerFileTypesOrderedMap },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FilePickerFileTypesOrderedMap =
    {
        "_winrt_Windows_Storage_Pickers.FilePickerFileTypesOrderedMap",
        sizeof(py::wrapper::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FilePickerFileTypesOrderedMap
    };

    // ----- FilePickerSelectedFilesArray class --------------------
    constexpr const char* const _type_name_FilePickerSelectedFilesArray = "FilePickerSelectedFilesArray";

    static PyObject* _new_FilePickerSelectedFilesArray(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_FilePickerSelectedFilesArray);
        return nullptr;
    }

    static void _dealloc_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FilePickerSelectedFilesArray_First(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_GetAt(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_GetMany(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::Windows::Storage::StorageFile>::size_type>(args, 1);
                winrt::com_array<winrt::Windows::Storage::StorageFile> param1 ( param1_count, py::empty_instance<winrt::Windows::Storage::StorageFile>::get() );

                auto return_value = self->obj.GetMany(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_IndexOf(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FilePickerSelectedFilesArray_get_Size(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FilePickerSelectedFilesArray(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FilePickerSelectedFilesArray>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_FilePickerSelectedFilesArray(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FilePickerSelectedFilesArray[] = {
        { "first", (PyCFunction)FilePickerSelectedFilesArray_First, METH_VARARGS, nullptr },
        { "get_at", (PyCFunction)FilePickerSelectedFilesArray_GetAt, METH_VARARGS, nullptr },
        { "get_many", (PyCFunction)FilePickerSelectedFilesArray_GetMany, METH_VARARGS, nullptr },
        { "index_of", (PyCFunction)FilePickerSelectedFilesArray_IndexOf, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_FilePickerSelectedFilesArray, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FilePickerSelectedFilesArray[] = {
        { const_cast<char*>("size"), (getter)FilePickerSelectedFilesArray_get_Size, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FilePickerSelectedFilesArray[] = 
    {
        { Py_tp_new, _new_FilePickerSelectedFilesArray },
        { Py_tp_dealloc, _dealloc_FilePickerSelectedFilesArray },
        { Py_tp_methods, _methods_FilePickerSelectedFilesArray },
        { Py_tp_getset, _getset_FilePickerSelectedFilesArray },
        { Py_tp_iter, _iterator_FilePickerSelectedFilesArray },
        { Py_sq_length, _seq_length_FilePickerSelectedFilesArray },
        { Py_sq_item, _seq_item_FilePickerSelectedFilesArray },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FilePickerSelectedFilesArray =
    {
        "_winrt_Windows_Storage_Pickers.FilePickerSelectedFilesArray",
        sizeof(py::wrapper::Windows::Storage::Pickers::FilePickerSelectedFilesArray),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FilePickerSelectedFilesArray
    };

    // ----- FileSavePicker class --------------------
    constexpr const char* const _type_name_FileSavePicker = "FileSavePicker";

    static PyObject* _new_FileSavePicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Storage::Pickers::FileSavePicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FileSavePicker(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FileSavePicker_CreateForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::Pickers::FileSavePicker::CreateForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_PickSaveFileAndContinue(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.PickSaveFileAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_PickSaveFileAsync(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PickSaveFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuggestedStartLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerLocationId>(arg);

            self->obj.SuggestedStartLocation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedSaveFile(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuggestedSaveFile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedSaveFile(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::StorageFile>(arg);

            self->obj.SuggestedSaveFile(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SuggestedFileName(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuggestedFileName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SuggestedFileName(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SuggestedFileName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SettingsIdentifier(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_DefaultFileExtension(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultFileExtension());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_DefaultFileExtension(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DefaultFileExtension(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CommitButtonText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CommitButtonText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_FileTypeChoices(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FileTypeChoices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_get_ContinuationData(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePicker_get_EnterpriseId(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EnterpriseId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePicker_put_EnterpriseId(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.EnterpriseId(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePicker_get_User(py::wrapper::Windows::Storage::Pickers::FileSavePicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FileSavePicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FileSavePicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileSavePicker[] = {
        { "create_for_user", (PyCFunction)FileSavePicker_CreateForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "pick_save_file_and_continue", (PyCFunction)FileSavePicker_PickSaveFileAndContinue, METH_VARARGS, nullptr },
        { "pick_save_file_async", (PyCFunction)FileSavePicker_PickSaveFileAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_FileSavePicker, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FileSavePicker[] = {
        { const_cast<char*>("suggested_start_location"), (getter)FileSavePicker_get_SuggestedStartLocation, (setter)FileSavePicker_put_SuggestedStartLocation, nullptr, nullptr },
        { const_cast<char*>("suggested_save_file"), (getter)FileSavePicker_get_SuggestedSaveFile, (setter)FileSavePicker_put_SuggestedSaveFile, nullptr, nullptr },
        { const_cast<char*>("suggested_file_name"), (getter)FileSavePicker_get_SuggestedFileName, (setter)FileSavePicker_put_SuggestedFileName, nullptr, nullptr },
        { const_cast<char*>("settings_identifier"), (getter)FileSavePicker_get_SettingsIdentifier, (setter)FileSavePicker_put_SettingsIdentifier, nullptr, nullptr },
        { const_cast<char*>("default_file_extension"), (getter)FileSavePicker_get_DefaultFileExtension, (setter)FileSavePicker_put_DefaultFileExtension, nullptr, nullptr },
        { const_cast<char*>("commit_button_text"), (getter)FileSavePicker_get_CommitButtonText, (setter)FileSavePicker_put_CommitButtonText, nullptr, nullptr },
        { const_cast<char*>("file_type_choices"), (getter)FileSavePicker_get_FileTypeChoices, nullptr, nullptr, nullptr },
        { const_cast<char*>("continuation_data"), (getter)FileSavePicker_get_ContinuationData, nullptr, nullptr, nullptr },
        { const_cast<char*>("enterprise_id"), (getter)FileSavePicker_get_EnterpriseId, (setter)FileSavePicker_put_EnterpriseId, nullptr, nullptr },
        { const_cast<char*>("user"), (getter)FileSavePicker_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FileSavePicker[] = 
    {
        { Py_tp_new, _new_FileSavePicker },
        { Py_tp_dealloc, _dealloc_FileSavePicker },
        { Py_tp_methods, _methods_FileSavePicker },
        { Py_tp_getset, _getset_FileSavePicker },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FileSavePicker =
    {
        "_winrt_Windows_Storage_Pickers.FileSavePicker",
        sizeof(py::wrapper::Windows::Storage::Pickers::FileSavePicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileSavePicker
    };

    // ----- FolderPicker class --------------------
    constexpr const char* const _type_name_FolderPicker = "FolderPicker";

    static PyObject* _new_FolderPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Storage::Pickers::FolderPicker instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FolderPicker(py::wrapper::Windows::Storage::Pickers::FolderPicker* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* FolderPicker_CreateForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::Pickers::FolderPicker::CreateForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FolderPicker_PickFolderAndContinue(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.PickFolderAndContinue();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FolderPicker_PickSingleFolderAsync(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.PickSingleFolderAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FolderPicker_get_ViewMode(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViewMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_ViewMode(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerViewMode>(arg);

            self->obj.ViewMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuggestedStartLocation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_SuggestedStartLocation(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Pickers::PickerLocationId>(arg);

            self->obj.SuggestedStartLocation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SettingsIdentifier(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CommitButtonText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FolderPicker_put_CommitButtonText(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CommitButtonText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FolderPicker_get_FileTypeFilter(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FileTypeFilter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FolderPicker_get_ContinuationData(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FolderPicker_get_User(py::wrapper::Windows::Storage::Pickers::FolderPicker* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_FolderPicker(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::FolderPicker>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FolderPicker[] = {
        { "create_for_user", (PyCFunction)FolderPicker_CreateForUser, METH_VARARGS | METH_STATIC, nullptr },
        { "pick_folder_and_continue", (PyCFunction)FolderPicker_PickFolderAndContinue, METH_VARARGS, nullptr },
        { "pick_single_folder_async", (PyCFunction)FolderPicker_PickSingleFolderAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_FolderPicker, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_FolderPicker[] = {
        { const_cast<char*>("view_mode"), (getter)FolderPicker_get_ViewMode, (setter)FolderPicker_put_ViewMode, nullptr, nullptr },
        { const_cast<char*>("suggested_start_location"), (getter)FolderPicker_get_SuggestedStartLocation, (setter)FolderPicker_put_SuggestedStartLocation, nullptr, nullptr },
        { const_cast<char*>("settings_identifier"), (getter)FolderPicker_get_SettingsIdentifier, (setter)FolderPicker_put_SettingsIdentifier, nullptr, nullptr },
        { const_cast<char*>("commit_button_text"), (getter)FolderPicker_get_CommitButtonText, (setter)FolderPicker_put_CommitButtonText, nullptr, nullptr },
        { const_cast<char*>("file_type_filter"), (getter)FolderPicker_get_FileTypeFilter, nullptr, nullptr, nullptr },
        { const_cast<char*>("continuation_data"), (getter)FolderPicker_get_ContinuationData, nullptr, nullptr, nullptr },
        { const_cast<char*>("user"), (getter)FolderPicker_get_User, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_FolderPicker[] = 
    {
        { Py_tp_new, _new_FolderPicker },
        { Py_tp_dealloc, _dealloc_FolderPicker },
        { Py_tp_methods, _methods_FolderPicker },
        { Py_tp_getset, _getset_FolderPicker },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_FolderPicker =
    {
        "_winrt_Windows_Storage_Pickers.FolderPicker",
        sizeof(py::wrapper::Windows::Storage::Pickers::FolderPicker),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FolderPicker
    };

    // ----- Windows.Storage.Pickers Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Storage::Pickers::FileExtensionVector>::python_type = py::register_python_type(module, _type_name_FileExtensionVector, &_type_spec_FileExtensionVector, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::FileOpenPicker>::python_type = py::register_python_type(module, _type_name_FileOpenPicker, &_type_spec_FileOpenPicker, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>::python_type = py::register_python_type(module, _type_name_FilePickerFileTypesOrderedMap, &_type_spec_FilePickerFileTypesOrderedMap, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::FilePickerSelectedFilesArray>::python_type = py::register_python_type(module, _type_name_FilePickerSelectedFilesArray, &_type_spec_FilePickerSelectedFilesArray, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::FileSavePicker>::python_type = py::register_python_type(module, _type_name_FileSavePicker, &_type_spec_FileSavePicker, bases.get());
            py::winrt_type<winrt::Windows::Storage::Pickers::FolderPicker>::python_type = py::register_python_type(module, _type_name_FolderPicker, &_type_spec_FolderPicker, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Storage.Pickers");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Storage_Pickers",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Storage::Pickers

PyMODINIT_FUNC
PyInit__winrt_Windows_Storage_Pickers (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Storage::Pickers::module_def);
}
