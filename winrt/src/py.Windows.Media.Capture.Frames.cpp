// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.Media.Capture.Frames.h"

PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::AudioMediaFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::BufferMediaFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::DepthMediaFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::DepthMediaFrameFormat>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::InfraredMediaFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameArrivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameFormat>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameReader>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameReference>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceController>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceGroup>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameArrivedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::VideoMediaFrame>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Media::Capture::Frames::VideoMediaFrameFormat>::python_type;

namespace py::cpp::Windows::Media::Capture::Frames
{
    // ----- AudioMediaFrame class --------------------
    constexpr const char* const _type_name_AudioMediaFrame = "AudioMediaFrame";

    static PyObject* _new_AudioMediaFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_AudioMediaFrame);
        return nullptr;
    }

    static void _dealloc_AudioMediaFrame(py::wrapper::Windows::Media::Capture::Frames::AudioMediaFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* AudioMediaFrame_GetAudioFrame(py::wrapper::Windows::Media::Capture::Frames::AudioMediaFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetAudioFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AudioMediaFrame_get_AudioEncodingProperties(py::wrapper::Windows::Media::Capture::Frames::AudioMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AudioEncodingProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AudioMediaFrame_get_FrameReference(py::wrapper::Windows::Media::Capture::Frames::AudioMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameReference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_AudioMediaFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::AudioMediaFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AudioMediaFrame[] = {
        { "get_audio_frame", (PyCFunction)AudioMediaFrame_GetAudioFrame, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_AudioMediaFrame, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_AudioMediaFrame[] = {
        { const_cast<char*>("audio_encoding_properties"), (getter)AudioMediaFrame_get_AudioEncodingProperties, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame_reference"), (getter)AudioMediaFrame_get_FrameReference, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_AudioMediaFrame[] = 
    {
        { Py_tp_new, _new_AudioMediaFrame },
        { Py_tp_dealloc, _dealloc_AudioMediaFrame },
        { Py_tp_methods, _methods_AudioMediaFrame },
        { Py_tp_getset, _getset_AudioMediaFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_AudioMediaFrame =
    {
        "_winrt_Windows_Media_Capture_Frames.AudioMediaFrame",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::AudioMediaFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AudioMediaFrame
    };

    // ----- BufferMediaFrame class --------------------
    constexpr const char* const _type_name_BufferMediaFrame = "BufferMediaFrame";

    static PyObject* _new_BufferMediaFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_BufferMediaFrame);
        return nullptr;
    }

    static void _dealloc_BufferMediaFrame(py::wrapper::Windows::Media::Capture::Frames::BufferMediaFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* BufferMediaFrame_get_Buffer(py::wrapper::Windows::Media::Capture::Frames::BufferMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Buffer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BufferMediaFrame_get_FrameReference(py::wrapper::Windows::Media::Capture::Frames::BufferMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameReference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_BufferMediaFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::BufferMediaFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BufferMediaFrame[] = {
        { "_from", (PyCFunction)_from_BufferMediaFrame, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_BufferMediaFrame[] = {
        { const_cast<char*>("buffer"), (getter)BufferMediaFrame_get_Buffer, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame_reference"), (getter)BufferMediaFrame_get_FrameReference, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_BufferMediaFrame[] = 
    {
        { Py_tp_new, _new_BufferMediaFrame },
        { Py_tp_dealloc, _dealloc_BufferMediaFrame },
        { Py_tp_methods, _methods_BufferMediaFrame },
        { Py_tp_getset, _getset_BufferMediaFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_BufferMediaFrame =
    {
        "_winrt_Windows_Media_Capture_Frames.BufferMediaFrame",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::BufferMediaFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BufferMediaFrame
    };

    // ----- DepthMediaFrame class --------------------
    constexpr const char* const _type_name_DepthMediaFrame = "DepthMediaFrame";

    static PyObject* _new_DepthMediaFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DepthMediaFrame);
        return nullptr;
    }

    static void _dealloc_DepthMediaFrame(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DepthMediaFrame_TryCreateCoordinateMapper(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Devices::Core::CameraIntrinsics>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 1);

                return py::convert(self->obj.TryCreateCoordinateMapper(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DepthMediaFrame_get_DepthFormat(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DepthFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DepthMediaFrame_get_FrameReference(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameReference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DepthMediaFrame_get_VideoMediaFrame(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoMediaFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DepthMediaFrame_get_MaxReliableDepth(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxReliableDepth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DepthMediaFrame_get_MinReliableDepth(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinReliableDepth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DepthMediaFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::DepthMediaFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DepthMediaFrame[] = {
        { "try_create_coordinate_mapper", (PyCFunction)DepthMediaFrame_TryCreateCoordinateMapper, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_DepthMediaFrame, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DepthMediaFrame[] = {
        { const_cast<char*>("depth_format"), (getter)DepthMediaFrame_get_DepthFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame_reference"), (getter)DepthMediaFrame_get_FrameReference, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_media_frame"), (getter)DepthMediaFrame_get_VideoMediaFrame, nullptr, nullptr, nullptr },
        { const_cast<char*>("max_reliable_depth"), (getter)DepthMediaFrame_get_MaxReliableDepth, nullptr, nullptr, nullptr },
        { const_cast<char*>("min_reliable_depth"), (getter)DepthMediaFrame_get_MinReliableDepth, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DepthMediaFrame[] = 
    {
        { Py_tp_new, _new_DepthMediaFrame },
        { Py_tp_dealloc, _dealloc_DepthMediaFrame },
        { Py_tp_methods, _methods_DepthMediaFrame },
        { Py_tp_getset, _getset_DepthMediaFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DepthMediaFrame =
    {
        "_winrt_Windows_Media_Capture_Frames.DepthMediaFrame",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DepthMediaFrame
    };

    // ----- DepthMediaFrameFormat class --------------------
    constexpr const char* const _type_name_DepthMediaFrameFormat = "DepthMediaFrameFormat";

    static PyObject* _new_DepthMediaFrameFormat(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_DepthMediaFrameFormat);
        return nullptr;
    }

    static void _dealloc_DepthMediaFrameFormat(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrameFormat* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* DepthMediaFrameFormat_get_DepthScaleInMeters(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DepthScaleInMeters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DepthMediaFrameFormat_get_VideoFormat(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_DepthMediaFrameFormat(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::DepthMediaFrameFormat>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DepthMediaFrameFormat[] = {
        { "_from", (PyCFunction)_from_DepthMediaFrameFormat, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_DepthMediaFrameFormat[] = {
        { const_cast<char*>("depth_scale_in_meters"), (getter)DepthMediaFrameFormat_get_DepthScaleInMeters, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_format"), (getter)DepthMediaFrameFormat_get_VideoFormat, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_DepthMediaFrameFormat[] = 
    {
        { Py_tp_new, _new_DepthMediaFrameFormat },
        { Py_tp_dealloc, _dealloc_DepthMediaFrameFormat },
        { Py_tp_methods, _methods_DepthMediaFrameFormat },
        { Py_tp_getset, _getset_DepthMediaFrameFormat },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_DepthMediaFrameFormat =
    {
        "_winrt_Windows_Media_Capture_Frames.DepthMediaFrameFormat",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::DepthMediaFrameFormat),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DepthMediaFrameFormat
    };

    // ----- InfraredMediaFrame class --------------------
    constexpr const char* const _type_name_InfraredMediaFrame = "InfraredMediaFrame";

    static PyObject* _new_InfraredMediaFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_InfraredMediaFrame);
        return nullptr;
    }

    static void _dealloc_InfraredMediaFrame(py::wrapper::Windows::Media::Capture::Frames::InfraredMediaFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* InfraredMediaFrame_get_FrameReference(py::wrapper::Windows::Media::Capture::Frames::InfraredMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameReference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InfraredMediaFrame_get_IsIlluminated(py::wrapper::Windows::Media::Capture::Frames::InfraredMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsIlluminated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* InfraredMediaFrame_get_VideoMediaFrame(py::wrapper::Windows::Media::Capture::Frames::InfraredMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoMediaFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_InfraredMediaFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::InfraredMediaFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_InfraredMediaFrame[] = {
        { "_from", (PyCFunction)_from_InfraredMediaFrame, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_InfraredMediaFrame[] = {
        { const_cast<char*>("frame_reference"), (getter)InfraredMediaFrame_get_FrameReference, nullptr, nullptr, nullptr },
        { const_cast<char*>("is_illuminated"), (getter)InfraredMediaFrame_get_IsIlluminated, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_media_frame"), (getter)InfraredMediaFrame_get_VideoMediaFrame, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_InfraredMediaFrame[] = 
    {
        { Py_tp_new, _new_InfraredMediaFrame },
        { Py_tp_dealloc, _dealloc_InfraredMediaFrame },
        { Py_tp_methods, _methods_InfraredMediaFrame },
        { Py_tp_getset, _getset_InfraredMediaFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_InfraredMediaFrame =
    {
        "_winrt_Windows_Media_Capture_Frames.InfraredMediaFrame",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::InfraredMediaFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_InfraredMediaFrame
    };

    // ----- MediaFrameArrivedEventArgs class --------------------
    constexpr const char* const _type_name_MediaFrameArrivedEventArgs = "MediaFrameArrivedEventArgs";

    static PyObject* _new_MediaFrameArrivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameArrivedEventArgs);
        return nullptr;
    }

    static void _dealloc_MediaFrameArrivedEventArgs(py::wrapper::Windows::Media::Capture::Frames::MediaFrameArrivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_MediaFrameArrivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameArrivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameArrivedEventArgs[] = {
        { "_from", (PyCFunction)_from_MediaFrameArrivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameArrivedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameArrivedEventArgs[] = 
    {
        { Py_tp_new, _new_MediaFrameArrivedEventArgs },
        { Py_tp_dealloc, _dealloc_MediaFrameArrivedEventArgs },
        { Py_tp_methods, _methods_MediaFrameArrivedEventArgs },
        { Py_tp_getset, _getset_MediaFrameArrivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameArrivedEventArgs =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameArrivedEventArgs",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameArrivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameArrivedEventArgs
    };

    // ----- MediaFrameFormat class --------------------
    constexpr const char* const _type_name_MediaFrameFormat = "MediaFrameFormat";

    static PyObject* _new_MediaFrameFormat(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameFormat);
        return nullptr;
    }

    static void _dealloc_MediaFrameFormat(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameFormat_get_FrameRate(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameRate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameFormat_get_MajorType(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MajorType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameFormat_get_Properties(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameFormat_get_Subtype(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Subtype());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameFormat_get_VideoFormat(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameFormat_get_AudioEncodingProperties(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AudioEncodingProperties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameFormat(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameFormat>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameFormat[] = {
        { "_from", (PyCFunction)_from_MediaFrameFormat, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameFormat[] = {
        { const_cast<char*>("frame_rate"), (getter)MediaFrameFormat_get_FrameRate, nullptr, nullptr, nullptr },
        { const_cast<char*>("major_type"), (getter)MediaFrameFormat_get_MajorType, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)MediaFrameFormat_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("subtype"), (getter)MediaFrameFormat_get_Subtype, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_format"), (getter)MediaFrameFormat_get_VideoFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("audio_encoding_properties"), (getter)MediaFrameFormat_get_AudioEncodingProperties, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameFormat[] = 
    {
        { Py_tp_new, _new_MediaFrameFormat },
        { Py_tp_dealloc, _dealloc_MediaFrameFormat },
        { Py_tp_methods, _methods_MediaFrameFormat },
        { Py_tp_getset, _getset_MediaFrameFormat },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameFormat =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameFormat",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameFormat),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameFormat
    };

    // ----- MediaFrameReader class --------------------
    constexpr const char* const _type_name_MediaFrameReader = "MediaFrameReader";

    static PyObject* _new_MediaFrameReader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameReader);
        return nullptr;
    }

    static void _dealloc_MediaFrameReader(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameReader_Close(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameReader_StartAsync(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StartAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameReader_StopAsync(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StopAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameReader_TryAcquireLatestFrame(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryAcquireLatestFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameReader_get_AcquisitionMode(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AcquisitionMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaFrameReader_put_AcquisitionMode(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Capture::Frames::MediaFrameReaderAcquisitionMode>(arg);

            self->obj.AcquisitionMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaFrameReader_add_FrameArrived(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Capture::Frames::MediaFrameReader, winrt::Windows::Media::Capture::Frames::MediaFrameArrivedEventArgs>>(arg);

            return py::convert(self->obj.FrameArrived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReader_remove_FrameArrived(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameArrived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MediaFrameReader(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MediaFrameReader(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameReader[] = {
        { "close", (PyCFunction)MediaFrameReader_Close, METH_VARARGS, nullptr },
        { "start_async", (PyCFunction)MediaFrameReader_StartAsync, METH_VARARGS, nullptr },
        { "stop_async", (PyCFunction)MediaFrameReader_StopAsync, METH_VARARGS, nullptr },
        { "try_acquire_latest_frame", (PyCFunction)MediaFrameReader_TryAcquireLatestFrame, METH_VARARGS, nullptr },
        { "add_frame_arrived", (PyCFunction)MediaFrameReader_add_FrameArrived, METH_O, nullptr },
        { "remove_frame_arrived", (PyCFunction)MediaFrameReader_remove_FrameArrived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MediaFrameReader, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MediaFrameReader, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MediaFrameReader, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameReader[] = {
        { const_cast<char*>("acquisition_mode"), (getter)MediaFrameReader_get_AcquisitionMode, (setter)MediaFrameReader_put_AcquisitionMode, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameReader[] = 
    {
        { Py_tp_new, _new_MediaFrameReader },
        { Py_tp_dealloc, _dealloc_MediaFrameReader },
        { Py_tp_methods, _methods_MediaFrameReader },
        { Py_tp_getset, _getset_MediaFrameReader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameReader =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameReader",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameReader
    };

    // ----- MediaFrameReference class --------------------
    constexpr const char* const _type_name_MediaFrameReference = "MediaFrameReference";

    static PyObject* _new_MediaFrameReference(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameReference);
        return nullptr;
    }

    static void _dealloc_MediaFrameReference(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameReference_Close(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_BufferMediaFrame(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BufferMediaFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_CoordinateSystem(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_Duration(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_Format(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Format());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_Properties(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_SourceKind(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_SystemRelativeTime(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemRelativeTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_VideoMediaFrame(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoMediaFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameReference_get_AudioMediaFrame(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AudioMediaFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameReference(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameReference>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MediaFrameReference(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MediaFrameReference(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameReference[] = {
        { "close", (PyCFunction)MediaFrameReference_Close, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MediaFrameReference, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MediaFrameReference, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MediaFrameReference, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameReference[] = {
        { const_cast<char*>("buffer_media_frame"), (getter)MediaFrameReference_get_BufferMediaFrame, nullptr, nullptr, nullptr },
        { const_cast<char*>("coordinate_system"), (getter)MediaFrameReference_get_CoordinateSystem, nullptr, nullptr, nullptr },
        { const_cast<char*>("duration"), (getter)MediaFrameReference_get_Duration, nullptr, nullptr, nullptr },
        { const_cast<char*>("format"), (getter)MediaFrameReference_get_Format, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)MediaFrameReference_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("source_kind"), (getter)MediaFrameReference_get_SourceKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("system_relative_time"), (getter)MediaFrameReference_get_SystemRelativeTime, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_media_frame"), (getter)MediaFrameReference_get_VideoMediaFrame, nullptr, nullptr, nullptr },
        { const_cast<char*>("audio_media_frame"), (getter)MediaFrameReference_get_AudioMediaFrame, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameReference[] = 
    {
        { Py_tp_new, _new_MediaFrameReference },
        { Py_tp_dealloc, _dealloc_MediaFrameReference },
        { Py_tp_methods, _methods_MediaFrameReference },
        { Py_tp_getset, _getset_MediaFrameReference },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameReference =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameReference",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameReference),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameReference
    };

    // ----- MediaFrameSource class --------------------
    constexpr const char* const _type_name_MediaFrameSource = "MediaFrameSource";

    static PyObject* _new_MediaFrameSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameSource);
        return nullptr;
    }

    static void _dealloc_MediaFrameSource(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameSource_SetFormatAsync(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Capture::Frames::MediaFrameFormat>(args, 0);

                return py::convert(self->obj.SetFormatAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSource_TryGetCameraIntrinsics(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Capture::Frames::MediaFrameFormat>(args, 0);

                return py::convert(self->obj.TryGetCameraIntrinsics(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSource_get_Controller(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Controller());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSource_get_CurrentFormat(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSource_get_Info(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Info());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSource_get_SupportedFormats(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SupportedFormats());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSource_add_FormatChanged(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Capture::Frames::MediaFrameSource, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.FormatChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSource_remove_FormatChanged(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FormatChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameSource[] = {
        { "set_format_async", (PyCFunction)MediaFrameSource_SetFormatAsync, METH_VARARGS, nullptr },
        { "try_get_camera_intrinsics", (PyCFunction)MediaFrameSource_TryGetCameraIntrinsics, METH_VARARGS, nullptr },
        { "add_format_changed", (PyCFunction)MediaFrameSource_add_FormatChanged, METH_O, nullptr },
        { "remove_format_changed", (PyCFunction)MediaFrameSource_remove_FormatChanged, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MediaFrameSource, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameSource[] = {
        { const_cast<char*>("controller"), (getter)MediaFrameSource_get_Controller, nullptr, nullptr, nullptr },
        { const_cast<char*>("current_format"), (getter)MediaFrameSource_get_CurrentFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("info"), (getter)MediaFrameSource_get_Info, nullptr, nullptr, nullptr },
        { const_cast<char*>("supported_formats"), (getter)MediaFrameSource_get_SupportedFormats, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameSource[] = 
    {
        { Py_tp_new, _new_MediaFrameSource },
        { Py_tp_dealloc, _dealloc_MediaFrameSource },
        { Py_tp_methods, _methods_MediaFrameSource },
        { Py_tp_getset, _getset_MediaFrameSource },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameSource =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameSource",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameSource
    };

    // ----- MediaFrameSourceController class --------------------
    constexpr const char* const _type_name_MediaFrameSourceController = "MediaFrameSourceController";

    static PyObject* _new_MediaFrameSourceController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameSourceController);
        return nullptr;
    }

    static void _dealloc_MediaFrameSourceController(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameSourceController_GetPropertyAsync(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetPropertyAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceController_GetPropertyByExtendedIdAsync(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::IReference<uint32_t>>(args, 1);

                return py::convert(self->obj.GetPropertyByExtendedIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceController_SetPropertyAsync(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::IInspectable>(args, 1);

                return py::convert(self->obj.SetPropertyAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceController_SetPropertyByExtendedIdAsync(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<uint8_t>>(args, 0);
                auto param1 = py::convert_to<winrt::array_view<uint8_t>>(args, 1);

                return py::convert(self->obj.SetPropertyByExtendedIdAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceController_get_VideoDeviceController(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoDeviceController());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceController_get_AudioDeviceController(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AudioDeviceController());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameSourceController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameSourceController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameSourceController[] = {
        { "get_property_async", (PyCFunction)MediaFrameSourceController_GetPropertyAsync, METH_VARARGS, nullptr },
        { "get_property_by_extended_id_async", (PyCFunction)MediaFrameSourceController_GetPropertyByExtendedIdAsync, METH_VARARGS, nullptr },
        { "set_property_async", (PyCFunction)MediaFrameSourceController_SetPropertyAsync, METH_VARARGS, nullptr },
        { "set_property_by_extended_id_async", (PyCFunction)MediaFrameSourceController_SetPropertyByExtendedIdAsync, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MediaFrameSourceController, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameSourceController[] = {
        { const_cast<char*>("video_device_controller"), (getter)MediaFrameSourceController_get_VideoDeviceController, nullptr, nullptr, nullptr },
        { const_cast<char*>("audio_device_controller"), (getter)MediaFrameSourceController_get_AudioDeviceController, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameSourceController[] = 
    {
        { Py_tp_new, _new_MediaFrameSourceController },
        { Py_tp_dealloc, _dealloc_MediaFrameSourceController },
        { Py_tp_methods, _methods_MediaFrameSourceController },
        { Py_tp_getset, _getset_MediaFrameSourceController },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameSourceController =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameSourceController",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameSourceController
    };

    // ----- MediaFrameSourceGetPropertyResult class --------------------
    constexpr const char* const _type_name_MediaFrameSourceGetPropertyResult = "MediaFrameSourceGetPropertyResult";

    static PyObject* _new_MediaFrameSourceGetPropertyResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameSourceGetPropertyResult);
        return nullptr;
    }

    static void _dealloc_MediaFrameSourceGetPropertyResult(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameSourceGetPropertyResult_get_Status(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceGetPropertyResult_get_Value(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameSourceGetPropertyResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameSourceGetPropertyResult[] = {
        { "_from", (PyCFunction)_from_MediaFrameSourceGetPropertyResult, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameSourceGetPropertyResult[] = {
        { const_cast<char*>("status"), (getter)MediaFrameSourceGetPropertyResult_get_Status, nullptr, nullptr, nullptr },
        { const_cast<char*>("value"), (getter)MediaFrameSourceGetPropertyResult_get_Value, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameSourceGetPropertyResult[] = 
    {
        { Py_tp_new, _new_MediaFrameSourceGetPropertyResult },
        { Py_tp_dealloc, _dealloc_MediaFrameSourceGetPropertyResult },
        { Py_tp_methods, _methods_MediaFrameSourceGetPropertyResult },
        { Py_tp_getset, _getset_MediaFrameSourceGetPropertyResult },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameSourceGetPropertyResult =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameSourceGetPropertyResult",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameSourceGetPropertyResult
    };

    // ----- MediaFrameSourceGroup class --------------------
    constexpr const char* const _type_name_MediaFrameSourceGroup = "MediaFrameSourceGroup";

    static PyObject* _new_MediaFrameSourceGroup(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameSourceGroup);
        return nullptr;
    }

    static void _dealloc_MediaFrameSourceGroup(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGroup* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameSourceGroup_FindAllAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Media::Capture::Frames::MediaFrameSourceGroup::FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceGroup_FromIdAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Media::Capture::Frames::MediaFrameSourceGroup::FromIdAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceGroup_GetDeviceSelector(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Media::Capture::Frames::MediaFrameSourceGroup::GetDeviceSelector());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceGroup_get_DisplayName(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceGroup_get_Id(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceGroup_get_SourceInfos(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGroup* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceInfos());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameSourceGroup(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameSourceGroup>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameSourceGroup[] = {
        { "find_all_async", (PyCFunction)MediaFrameSourceGroup_FindAllAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "from_id_async", (PyCFunction)MediaFrameSourceGroup_FromIdAsync, METH_VARARGS | METH_STATIC, nullptr },
        { "get_device_selector", (PyCFunction)MediaFrameSourceGroup_GetDeviceSelector, METH_VARARGS | METH_STATIC, nullptr },
        { "_from", (PyCFunction)_from_MediaFrameSourceGroup, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameSourceGroup[] = {
        { const_cast<char*>("display_name"), (getter)MediaFrameSourceGroup_get_DisplayName, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)MediaFrameSourceGroup_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("source_infos"), (getter)MediaFrameSourceGroup_get_SourceInfos, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameSourceGroup[] = 
    {
        { Py_tp_new, _new_MediaFrameSourceGroup },
        { Py_tp_dealloc, _dealloc_MediaFrameSourceGroup },
        { Py_tp_methods, _methods_MediaFrameSourceGroup },
        { Py_tp_getset, _getset_MediaFrameSourceGroup },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameSourceGroup =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameSourceGroup",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceGroup),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameSourceGroup
    };

    // ----- MediaFrameSourceInfo class --------------------
    constexpr const char* const _type_name_MediaFrameSourceInfo = "MediaFrameSourceInfo";

    static PyObject* _new_MediaFrameSourceInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MediaFrameSourceInfo);
        return nullptr;
    }

    static void _dealloc_MediaFrameSourceInfo(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MediaFrameSourceInfo_GetRelativePanel(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::WindowManagement::DisplayRegion>(args, 0);

                return py::convert(self->obj.GetRelativePanel(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_CoordinateSystem(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CoordinateSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_DeviceInformation(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceInformation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_Id(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_MediaStreamType(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaStreamType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_Properties(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_SourceGroup(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceGroup());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_SourceKind(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SourceKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_ProfileId(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProfileId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MediaFrameSourceInfo_get_VideoProfileMediaDescription(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoProfileMediaDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MediaFrameSourceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MediaFrameSourceInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaFrameSourceInfo[] = {
        { "get_relative_panel", (PyCFunction)MediaFrameSourceInfo_GetRelativePanel, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MediaFrameSourceInfo, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MediaFrameSourceInfo[] = {
        { const_cast<char*>("coordinate_system"), (getter)MediaFrameSourceInfo_get_CoordinateSystem, nullptr, nullptr, nullptr },
        { const_cast<char*>("device_information"), (getter)MediaFrameSourceInfo_get_DeviceInformation, nullptr, nullptr, nullptr },
        { const_cast<char*>("id"), (getter)MediaFrameSourceInfo_get_Id, nullptr, nullptr, nullptr },
        { const_cast<char*>("media_stream_type"), (getter)MediaFrameSourceInfo_get_MediaStreamType, nullptr, nullptr, nullptr },
        { const_cast<char*>("properties"), (getter)MediaFrameSourceInfo_get_Properties, nullptr, nullptr, nullptr },
        { const_cast<char*>("source_group"), (getter)MediaFrameSourceInfo_get_SourceGroup, nullptr, nullptr, nullptr },
        { const_cast<char*>("source_kind"), (getter)MediaFrameSourceInfo_get_SourceKind, nullptr, nullptr, nullptr },
        { const_cast<char*>("profile_id"), (getter)MediaFrameSourceInfo_get_ProfileId, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_profile_media_description"), (getter)MediaFrameSourceInfo_get_VideoProfileMediaDescription, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MediaFrameSourceInfo[] = 
    {
        { Py_tp_new, _new_MediaFrameSourceInfo },
        { Py_tp_dealloc, _dealloc_MediaFrameSourceInfo },
        { Py_tp_methods, _methods_MediaFrameSourceInfo },
        { Py_tp_getset, _getset_MediaFrameSourceInfo },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MediaFrameSourceInfo =
    {
        "_winrt_Windows_Media_Capture_Frames.MediaFrameSourceInfo",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MediaFrameSourceInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaFrameSourceInfo
    };

    // ----- MultiSourceMediaFrameArrivedEventArgs class --------------------
    constexpr const char* const _type_name_MultiSourceMediaFrameArrivedEventArgs = "MultiSourceMediaFrameArrivedEventArgs";

    static PyObject* _new_MultiSourceMediaFrameArrivedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MultiSourceMediaFrameArrivedEventArgs);
        return nullptr;
    }

    static void _dealloc_MultiSourceMediaFrameArrivedEventArgs(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameArrivedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* _from_MultiSourceMediaFrameArrivedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameArrivedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MultiSourceMediaFrameArrivedEventArgs[] = {
        { "_from", (PyCFunction)_from_MultiSourceMediaFrameArrivedEventArgs, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MultiSourceMediaFrameArrivedEventArgs[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_MultiSourceMediaFrameArrivedEventArgs[] = 
    {
        { Py_tp_new, _new_MultiSourceMediaFrameArrivedEventArgs },
        { Py_tp_dealloc, _dealloc_MultiSourceMediaFrameArrivedEventArgs },
        { Py_tp_methods, _methods_MultiSourceMediaFrameArrivedEventArgs },
        { Py_tp_getset, _getset_MultiSourceMediaFrameArrivedEventArgs },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MultiSourceMediaFrameArrivedEventArgs =
    {
        "_winrt_Windows_Media_Capture_Frames.MultiSourceMediaFrameArrivedEventArgs",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameArrivedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MultiSourceMediaFrameArrivedEventArgs
    };

    // ----- MultiSourceMediaFrameReader class --------------------
    constexpr const char* const _type_name_MultiSourceMediaFrameReader = "MultiSourceMediaFrameReader";

    static PyObject* _new_MultiSourceMediaFrameReader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MultiSourceMediaFrameReader);
        return nullptr;
    }

    static void _dealloc_MultiSourceMediaFrameReader(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MultiSourceMediaFrameReader_Close(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MultiSourceMediaFrameReader_StartAsync(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StartAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MultiSourceMediaFrameReader_StopAsync(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.StopAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MultiSourceMediaFrameReader_TryAcquireLatestFrame(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.TryAcquireLatestFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MultiSourceMediaFrameReader_get_AcquisitionMode(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AcquisitionMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MultiSourceMediaFrameReader_put_AcquisitionMode(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Capture::Frames::MediaFrameReaderAcquisitionMode>(arg);

            self->obj.AcquisitionMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MultiSourceMediaFrameReader_add_FrameArrived(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader, winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameArrivedEventArgs>>(arg);

            return py::convert(self->obj.FrameArrived(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MultiSourceMediaFrameReader_remove_FrameArrived(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameArrived(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MultiSourceMediaFrameReader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MultiSourceMediaFrameReader(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MultiSourceMediaFrameReader(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MultiSourceMediaFrameReader[] = {
        { "close", (PyCFunction)MultiSourceMediaFrameReader_Close, METH_VARARGS, nullptr },
        { "start_async", (PyCFunction)MultiSourceMediaFrameReader_StartAsync, METH_VARARGS, nullptr },
        { "stop_async", (PyCFunction)MultiSourceMediaFrameReader_StopAsync, METH_VARARGS, nullptr },
        { "try_acquire_latest_frame", (PyCFunction)MultiSourceMediaFrameReader_TryAcquireLatestFrame, METH_VARARGS, nullptr },
        { "add_frame_arrived", (PyCFunction)MultiSourceMediaFrameReader_add_FrameArrived, METH_O, nullptr },
        { "remove_frame_arrived", (PyCFunction)MultiSourceMediaFrameReader_remove_FrameArrived, METH_O, nullptr },
        { "_from", (PyCFunction)_from_MultiSourceMediaFrameReader, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MultiSourceMediaFrameReader, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MultiSourceMediaFrameReader, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MultiSourceMediaFrameReader[] = {
        { const_cast<char*>("acquisition_mode"), (getter)MultiSourceMediaFrameReader_get_AcquisitionMode, (setter)MultiSourceMediaFrameReader_put_AcquisitionMode, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_MultiSourceMediaFrameReader[] = 
    {
        { Py_tp_new, _new_MultiSourceMediaFrameReader },
        { Py_tp_dealloc, _dealloc_MultiSourceMediaFrameReader },
        { Py_tp_methods, _methods_MultiSourceMediaFrameReader },
        { Py_tp_getset, _getset_MultiSourceMediaFrameReader },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MultiSourceMediaFrameReader =
    {
        "_winrt_Windows_Media_Capture_Frames.MultiSourceMediaFrameReader",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MultiSourceMediaFrameReader
    };

    // ----- MultiSourceMediaFrameReference class --------------------
    constexpr const char* const _type_name_MultiSourceMediaFrameReference = "MultiSourceMediaFrameReference";

    static PyObject* _new_MultiSourceMediaFrameReference(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MultiSourceMediaFrameReference);
        return nullptr;
    }

    static void _dealloc_MultiSourceMediaFrameReference(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MultiSourceMediaFrameReference_Close(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MultiSourceMediaFrameReference_TryGetFrameReferenceBySourceId(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TryGetFrameReferenceBySourceId(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_MultiSourceMediaFrameReference(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_MultiSourceMediaFrameReference(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference* self) noexcept
    {
        Py_INCREF(self);
        return (PyObject*)self;
    }

    static PyObject* _exit_MultiSourceMediaFrameReference(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MultiSourceMediaFrameReference[] = {
        { "close", (PyCFunction)MultiSourceMediaFrameReference_Close, METH_VARARGS, nullptr },
        { "try_get_frame_reference_by_source_id", (PyCFunction)MultiSourceMediaFrameReference_TryGetFrameReferenceBySourceId, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_MultiSourceMediaFrameReference, METH_O | METH_STATIC, nullptr },
        { "__enter__", (PyCFunction)_enter_MultiSourceMediaFrameReference, METH_NOARGS, nullptr },
        { "__exit__",  (PyCFunction)_exit_MultiSourceMediaFrameReference, METH_VARARGS, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_MultiSourceMediaFrameReference[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_MultiSourceMediaFrameReference[] = 
    {
        { Py_tp_new, _new_MultiSourceMediaFrameReference },
        { Py_tp_dealloc, _dealloc_MultiSourceMediaFrameReference },
        { Py_tp_methods, _methods_MultiSourceMediaFrameReference },
        { Py_tp_getset, _getset_MultiSourceMediaFrameReference },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_MultiSourceMediaFrameReference =
    {
        "_winrt_Windows_Media_Capture_Frames.MultiSourceMediaFrameReference",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MultiSourceMediaFrameReference
    };

    // ----- VideoMediaFrame class --------------------
    constexpr const char* const _type_name_VideoMediaFrame = "VideoMediaFrame";

    static PyObject* _new_VideoMediaFrame(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VideoMediaFrame);
        return nullptr;
    }

    static void _dealloc_VideoMediaFrame(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VideoMediaFrame_GetVideoFrame(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetVideoFrame());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrame_get_CameraIntrinsics(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CameraIntrinsics());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrame_get_DepthMediaFrame(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DepthMediaFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrame_get_Direct3DSurface(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Direct3DSurface());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrame_get_FrameReference(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FrameReference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrame_get_InfraredMediaFrame(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InfraredMediaFrame());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrame_get_SoftwareBitmap(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SoftwareBitmap());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrame_get_VideoFormat(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.VideoFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VideoMediaFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::VideoMediaFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VideoMediaFrame[] = {
        { "get_video_frame", (PyCFunction)VideoMediaFrame_GetVideoFrame, METH_VARARGS, nullptr },
        { "_from", (PyCFunction)_from_VideoMediaFrame, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VideoMediaFrame[] = {
        { const_cast<char*>("camera_intrinsics"), (getter)VideoMediaFrame_get_CameraIntrinsics, nullptr, nullptr, nullptr },
        { const_cast<char*>("depth_media_frame"), (getter)VideoMediaFrame_get_DepthMediaFrame, nullptr, nullptr, nullptr },
        { const_cast<char*>("direct3_d_surface"), (getter)VideoMediaFrame_get_Direct3DSurface, nullptr, nullptr, nullptr },
        { const_cast<char*>("frame_reference"), (getter)VideoMediaFrame_get_FrameReference, nullptr, nullptr, nullptr },
        { const_cast<char*>("infrared_media_frame"), (getter)VideoMediaFrame_get_InfraredMediaFrame, nullptr, nullptr, nullptr },
        { const_cast<char*>("software_bitmap"), (getter)VideoMediaFrame_get_SoftwareBitmap, nullptr, nullptr, nullptr },
        { const_cast<char*>("video_format"), (getter)VideoMediaFrame_get_VideoFormat, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VideoMediaFrame[] = 
    {
        { Py_tp_new, _new_VideoMediaFrame },
        { Py_tp_dealloc, _dealloc_VideoMediaFrame },
        { Py_tp_methods, _methods_VideoMediaFrame },
        { Py_tp_getset, _getset_VideoMediaFrame },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VideoMediaFrame =
    {
        "_winrt_Windows_Media_Capture_Frames.VideoMediaFrame",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VideoMediaFrame
    };

    // ----- VideoMediaFrameFormat class --------------------
    constexpr const char* const _type_name_VideoMediaFrameFormat = "VideoMediaFrameFormat";

    static PyObject* _new_VideoMediaFrameFormat(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_VideoMediaFrameFormat);
        return nullptr;
    }

    static void _dealloc_VideoMediaFrameFormat(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrameFormat* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* VideoMediaFrameFormat_get_DepthFormat(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DepthFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrameFormat_get_Height(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Height());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrameFormat_get_MediaFrameFormat(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MediaFrameFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* VideoMediaFrameFormat_get_Width(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrameFormat* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Width());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_VideoMediaFrameFormat(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Capture::Frames::VideoMediaFrameFormat>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_VideoMediaFrameFormat[] = {
        { "_from", (PyCFunction)_from_VideoMediaFrameFormat, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_VideoMediaFrameFormat[] = {
        { const_cast<char*>("depth_format"), (getter)VideoMediaFrameFormat_get_DepthFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("height"), (getter)VideoMediaFrameFormat_get_Height, nullptr, nullptr, nullptr },
        { const_cast<char*>("media_frame_format"), (getter)VideoMediaFrameFormat_get_MediaFrameFormat, nullptr, nullptr, nullptr },
        { const_cast<char*>("width"), (getter)VideoMediaFrameFormat_get_Width, nullptr, nullptr, nullptr },
        { nullptr }
    };

    static PyType_Slot _type_slots_VideoMediaFrameFormat[] = 
    {
        { Py_tp_new, _new_VideoMediaFrameFormat },
        { Py_tp_dealloc, _dealloc_VideoMediaFrameFormat },
        { Py_tp_methods, _methods_VideoMediaFrameFormat },
        { Py_tp_getset, _getset_VideoMediaFrameFormat },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_VideoMediaFrameFormat =
    {
        "_winrt_Windows_Media_Capture_Frames.VideoMediaFrameFormat",
        sizeof(py::wrapper::Windows::Media::Capture::Frames::VideoMediaFrameFormat),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_VideoMediaFrameFormat
    };

    // ----- Windows.Media.Capture.Frames Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::Media::Capture::Frames::AudioMediaFrame>::python_type = py::register_python_type(module, _type_name_AudioMediaFrame, &_type_spec_AudioMediaFrame, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::BufferMediaFrame>::python_type = py::register_python_type(module, _type_name_BufferMediaFrame, &_type_spec_BufferMediaFrame, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::DepthMediaFrame>::python_type = py::register_python_type(module, _type_name_DepthMediaFrame, &_type_spec_DepthMediaFrame, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::DepthMediaFrameFormat>::python_type = py::register_python_type(module, _type_name_DepthMediaFrameFormat, &_type_spec_DepthMediaFrameFormat, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::InfraredMediaFrame>::python_type = py::register_python_type(module, _type_name_InfraredMediaFrame, &_type_spec_InfraredMediaFrame, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameArrivedEventArgs>::python_type = py::register_python_type(module, _type_name_MediaFrameArrivedEventArgs, &_type_spec_MediaFrameArrivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameFormat>::python_type = py::register_python_type(module, _type_name_MediaFrameFormat, &_type_spec_MediaFrameFormat, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameReader>::python_type = py::register_python_type(module, _type_name_MediaFrameReader, &_type_spec_MediaFrameReader, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameReference>::python_type = py::register_python_type(module, _type_name_MediaFrameReference, &_type_spec_MediaFrameReference, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSource>::python_type = py::register_python_type(module, _type_name_MediaFrameSource, &_type_spec_MediaFrameSource, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceController>::python_type = py::register_python_type(module, _type_name_MediaFrameSourceController, &_type_spec_MediaFrameSourceController, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult>::python_type = py::register_python_type(module, _type_name_MediaFrameSourceGetPropertyResult, &_type_spec_MediaFrameSourceGetPropertyResult, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceGroup>::python_type = py::register_python_type(module, _type_name_MediaFrameSourceGroup, &_type_spec_MediaFrameSourceGroup, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MediaFrameSourceInfo>::python_type = py::register_python_type(module, _type_name_MediaFrameSourceInfo, &_type_spec_MediaFrameSourceInfo, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameArrivedEventArgs>::python_type = py::register_python_type(module, _type_name_MultiSourceMediaFrameArrivedEventArgs, &_type_spec_MultiSourceMediaFrameArrivedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameReader>::python_type = py::register_python_type(module, _type_name_MultiSourceMediaFrameReader, &_type_spec_MultiSourceMediaFrameReader, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::MultiSourceMediaFrameReference>::python_type = py::register_python_type(module, _type_name_MultiSourceMediaFrameReference, &_type_spec_MultiSourceMediaFrameReference, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::VideoMediaFrame>::python_type = py::register_python_type(module, _type_name_VideoMediaFrame, &_type_spec_VideoMediaFrame, bases.get());
            py::winrt_type<winrt::Windows::Media::Capture::Frames::VideoMediaFrameFormat>::python_type = py::register_python_type(module, _type_name_VideoMediaFrameFormat, &_type_spec_VideoMediaFrameFormat, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.Media.Capture.Frames");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_Media_Capture_Frames",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::Media::Capture::Frames

PyMODINIT_FUNC
PyInit__winrt_Windows_Media_Capture_Frames (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Media::Capture::Frames::module_def);
}
