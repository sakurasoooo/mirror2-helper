// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

#include "pybase.h"
#include "py.Windows.System.Power.h"

PyTypeObject* py::winrt_type<winrt::Windows::System::Power::BackgroundEnergyManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::System::Power::ForegroundEnergyManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::System::Power::PowerManager>::python_type;

namespace py::cpp::Windows::System::Power
{
    // ----- BackgroundEnergyManager class --------------------
    constexpr const char* const _type_name_BackgroundEnergyManager = "BackgroundEnergyManager";

    static PyObject* _new_BackgroundEnergyManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_BackgroundEnergyManager);
        return nullptr;
    }

    static PyObject* BackgroundEnergyManager_get_ExcessiveUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::ExcessiveUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_get_LowUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::LowUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_get_MaxAcceptableUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::MaxAcceptableUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_get_NearMaxAcceptableUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::NearMaxAcceptableUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_get_NearTerminationUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::NearTerminationUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_get_RecentEnergyUsage(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::RecentEnergyUsage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_get_RecentEnergyUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::RecentEnergyUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_get_TerminationUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::TerminationUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_add_RecentEnergyUsageIncreased(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::RecentEnergyUsageIncreased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_remove_RecentEnergyUsageIncreased(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::BackgroundEnergyManager::RecentEnergyUsageIncreased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_add_RecentEnergyUsageReturnedToLow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::BackgroundEnergyManager::RecentEnergyUsageReturnedToLow(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BackgroundEnergyManager_remove_RecentEnergyUsageReturnedToLow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::BackgroundEnergyManager::RecentEnergyUsageReturnedToLow(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BackgroundEnergyManager[] = {
        { "get_excessive_usage_level", (PyCFunction)BackgroundEnergyManager_get_ExcessiveUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_low_usage_level", (PyCFunction)BackgroundEnergyManager_get_LowUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_max_acceptable_usage_level", (PyCFunction)BackgroundEnergyManager_get_MaxAcceptableUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_near_max_acceptable_usage_level", (PyCFunction)BackgroundEnergyManager_get_NearMaxAcceptableUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_near_termination_usage_level", (PyCFunction)BackgroundEnergyManager_get_NearTerminationUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_recent_energy_usage", (PyCFunction)BackgroundEnergyManager_get_RecentEnergyUsage, METH_NOARGS | METH_STATIC, nullptr },
        { "get_recent_energy_usage_level", (PyCFunction)BackgroundEnergyManager_get_RecentEnergyUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_termination_usage_level", (PyCFunction)BackgroundEnergyManager_get_TerminationUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "add_recent_energy_usage_increased", (PyCFunction)BackgroundEnergyManager_add_RecentEnergyUsageIncreased, METH_O | METH_STATIC, nullptr },
        { "remove_recent_energy_usage_increased", (PyCFunction)BackgroundEnergyManager_remove_RecentEnergyUsageIncreased, METH_O | METH_STATIC, nullptr },
        { "add_recent_energy_usage_returned_to_low", (PyCFunction)BackgroundEnergyManager_add_RecentEnergyUsageReturnedToLow, METH_O | METH_STATIC, nullptr },
        { "remove_recent_energy_usage_returned_to_low", (PyCFunction)BackgroundEnergyManager_remove_RecentEnergyUsageReturnedToLow, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_BackgroundEnergyManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_BackgroundEnergyManager[] = 
    {
        { Py_tp_new, _new_BackgroundEnergyManager },
        { Py_tp_methods, _methods_BackgroundEnergyManager },
        { Py_tp_getset, _getset_BackgroundEnergyManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_BackgroundEnergyManager =
    {
        "_winrt_Windows_System_Power.BackgroundEnergyManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BackgroundEnergyManager
    };

    // ----- ForegroundEnergyManager class --------------------
    constexpr const char* const _type_name_ForegroundEnergyManager = "ForegroundEnergyManager";

    static PyObject* _new_ForegroundEnergyManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ForegroundEnergyManager);
        return nullptr;
    }

    static PyObject* ForegroundEnergyManager_get_ExcessiveUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::ExcessiveUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_get_LowUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::LowUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_get_MaxAcceptableUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::MaxAcceptableUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_get_NearMaxAcceptableUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::NearMaxAcceptableUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_get_RecentEnergyUsage(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::RecentEnergyUsage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_get_RecentEnergyUsageLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::RecentEnergyUsageLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_add_RecentEnergyUsageIncreased(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::RecentEnergyUsageIncreased(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_remove_RecentEnergyUsageIncreased(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::ForegroundEnergyManager::RecentEnergyUsageIncreased(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_add_RecentEnergyUsageReturnedToLow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::ForegroundEnergyManager::RecentEnergyUsageReturnedToLow(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ForegroundEnergyManager_remove_RecentEnergyUsageReturnedToLow(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::ForegroundEnergyManager::RecentEnergyUsageReturnedToLow(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ForegroundEnergyManager[] = {
        { "get_excessive_usage_level", (PyCFunction)ForegroundEnergyManager_get_ExcessiveUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_low_usage_level", (PyCFunction)ForegroundEnergyManager_get_LowUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_max_acceptable_usage_level", (PyCFunction)ForegroundEnergyManager_get_MaxAcceptableUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_near_max_acceptable_usage_level", (PyCFunction)ForegroundEnergyManager_get_NearMaxAcceptableUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "get_recent_energy_usage", (PyCFunction)ForegroundEnergyManager_get_RecentEnergyUsage, METH_NOARGS | METH_STATIC, nullptr },
        { "get_recent_energy_usage_level", (PyCFunction)ForegroundEnergyManager_get_RecentEnergyUsageLevel, METH_NOARGS | METH_STATIC, nullptr },
        { "add_recent_energy_usage_increased", (PyCFunction)ForegroundEnergyManager_add_RecentEnergyUsageIncreased, METH_O | METH_STATIC, nullptr },
        { "remove_recent_energy_usage_increased", (PyCFunction)ForegroundEnergyManager_remove_RecentEnergyUsageIncreased, METH_O | METH_STATIC, nullptr },
        { "add_recent_energy_usage_returned_to_low", (PyCFunction)ForegroundEnergyManager_add_RecentEnergyUsageReturnedToLow, METH_O | METH_STATIC, nullptr },
        { "remove_recent_energy_usage_returned_to_low", (PyCFunction)ForegroundEnergyManager_remove_RecentEnergyUsageReturnedToLow, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_ForegroundEnergyManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_ForegroundEnergyManager[] = 
    {
        { Py_tp_new, _new_ForegroundEnergyManager },
        { Py_tp_methods, _methods_ForegroundEnergyManager },
        { Py_tp_getset, _getset_ForegroundEnergyManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_ForegroundEnergyManager =
    {
        "_winrt_Windows_System_Power.ForegroundEnergyManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ForegroundEnergyManager
    };

    // ----- PowerManager class --------------------
    constexpr const char* const _type_name_PowerManager = "PowerManager";

    static PyObject* _new_PowerManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PowerManager);
        return nullptr;
    }

    static PyObject* PowerManager_get_BatteryStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::PowerManager::BatteryStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_EnergySaverStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::PowerManager::EnergySaverStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_PowerSupplyStatus(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::PowerManager::PowerSupplyStatus());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_RemainingChargePercent(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::PowerManager::RemainingChargePercent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_get_RemainingDischargeTime(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::System::Power::PowerManager::RemainingDischargeTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_BatteryStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::PowerManager::BatteryStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_BatteryStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::PowerManager::BatteryStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_EnergySaverStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::PowerManager::EnergySaverStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_EnergySaverStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::PowerManager::EnergySaverStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_PowerSupplyStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::PowerManager::PowerSupplyStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_PowerSupplyStatusChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::PowerManager::PowerSupplyStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_RemainingChargePercentChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::PowerManager::RemainingChargePercentChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_RemainingChargePercentChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::PowerManager::RemainingChargePercentChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_add_RemainingDischargeTimeChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::System::Power::PowerManager::RemainingDischargeTimeChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PowerManager_remove_RemainingDischargeTimeChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::System::Power::PowerManager::RemainingDischargeTimeChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PowerManager[] = {
        { "get_battery_status", (PyCFunction)PowerManager_get_BatteryStatus, METH_NOARGS | METH_STATIC, nullptr },
        { "get_energy_saver_status", (PyCFunction)PowerManager_get_EnergySaverStatus, METH_NOARGS | METH_STATIC, nullptr },
        { "get_power_supply_status", (PyCFunction)PowerManager_get_PowerSupplyStatus, METH_NOARGS | METH_STATIC, nullptr },
        { "get_remaining_charge_percent", (PyCFunction)PowerManager_get_RemainingChargePercent, METH_NOARGS | METH_STATIC, nullptr },
        { "get_remaining_discharge_time", (PyCFunction)PowerManager_get_RemainingDischargeTime, METH_NOARGS | METH_STATIC, nullptr },
        { "add_battery_status_changed", (PyCFunction)PowerManager_add_BatteryStatusChanged, METH_O | METH_STATIC, nullptr },
        { "remove_battery_status_changed", (PyCFunction)PowerManager_remove_BatteryStatusChanged, METH_O | METH_STATIC, nullptr },
        { "add_energy_saver_status_changed", (PyCFunction)PowerManager_add_EnergySaverStatusChanged, METH_O | METH_STATIC, nullptr },
        { "remove_energy_saver_status_changed", (PyCFunction)PowerManager_remove_EnergySaverStatusChanged, METH_O | METH_STATIC, nullptr },
        { "add_power_supply_status_changed", (PyCFunction)PowerManager_add_PowerSupplyStatusChanged, METH_O | METH_STATIC, nullptr },
        { "remove_power_supply_status_changed", (PyCFunction)PowerManager_remove_PowerSupplyStatusChanged, METH_O | METH_STATIC, nullptr },
        { "add_remaining_charge_percent_changed", (PyCFunction)PowerManager_add_RemainingChargePercentChanged, METH_O | METH_STATIC, nullptr },
        { "remove_remaining_charge_percent_changed", (PyCFunction)PowerManager_remove_RemainingChargePercentChanged, METH_O | METH_STATIC, nullptr },
        { "add_remaining_discharge_time_changed", (PyCFunction)PowerManager_add_RemainingDischargeTimeChanged, METH_O | METH_STATIC, nullptr },
        { "remove_remaining_discharge_time_changed", (PyCFunction)PowerManager_remove_RemainingDischargeTimeChanged, METH_O | METH_STATIC, nullptr },
        { nullptr }
    };

    static PyGetSetDef _getset_PowerManager[] = {
        { nullptr }
    };

    static PyType_Slot _type_slots_PowerManager[] = 
    {
        { Py_tp_new, _new_PowerManager },
        { Py_tp_methods, _methods_PowerManager },
        { Py_tp_getset, _getset_PowerManager },
        { 0, nullptr },
    };

    static PyType_Spec _type_spec_PowerManager =
    {
        "_winrt_Windows_System_Power.PowerManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PowerManager
    };

    // ----- Windows.System.Power Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };

            py::winrt_type<winrt::Windows::System::Power::BackgroundEnergyManager>::python_type = py::register_python_type(module, _type_name_BackgroundEnergyManager, &_type_spec_BackgroundEnergyManager, nullptr);
            py::winrt_type<winrt::Windows::System::Power::ForegroundEnergyManager>::python_type = py::register_python_type(module, _type_name_ForegroundEnergyManager, &_type_spec_ForegroundEnergyManager, nullptr);
            py::winrt_type<winrt::Windows::System::Power::PowerManager>::python_type = py::register_python_type(module, _type_name_PowerManager, &_type_spec_PowerManager, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {
        {Py_mod_exec, module_exec},
        {0, nullptr}
    };

    PyDoc_STRVAR(module_doc, "Windows.System.Power");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_Windows_System_Power",
        module_doc,
        0,
        nullptr,
        module_slots,
        nullptr,
        nullptr,
        nullptr
    };
} // py::cpp::Windows::System::Power

PyMODINIT_FUNC
PyInit__winrt_Windows_System_Power (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::System::Power::module_def);
}
