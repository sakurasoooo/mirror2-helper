# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.security.credentials
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class FindAllWebAccountsStatus(enum.IntEnum):
    SUCCESS = 0
    NOT_ALLOWED_BY_PROVIDER = 1
    NOT_SUPPORTED_BY_PROVIDER = 2
    PROVIDER_ERROR = 3

class WebTokenRequestPromptType(enum.IntEnum):
    DEFAULT = 0
    FORCE_AUTHENTICATION = 1

class WebTokenRequestStatus(enum.IntEnum):
    SUCCESS = 0
    USER_CANCEL = 1
    ACCOUNT_SWITCH = 2
    USER_INTERACTION_REQUIRED = 3
    ACCOUNT_PROVIDER_NOT_AVAILABLE = 4
    PROVIDER_ERROR = 5

class FindAllAccountsResult(_winrt.winrt_base):
    ...
    accounts: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.credentials.WebAccount]
    provider_error: WebProviderError
    status: FindAllWebAccountsStatus

class WebAccountEventArgs(_winrt.winrt_base):
    ...
    account: winrt.windows.security.credentials.WebAccount

class WebAccountMonitor(_winrt.winrt_base):
    ...
    def add_default_sign_in_account_changed(handler: winrt.windows.foundation.TypedEventHandler[WebAccountMonitor, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_default_sign_in_account_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[WebAccountMonitor, WebAccountEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winrt.windows.foundation.TypedEventHandler[WebAccountMonitor, WebAccountEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_account_picture_updated(handler: winrt.windows.foundation.TypedEventHandler[WebAccountMonitor, WebAccountEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_account_picture_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class WebAuthenticationCoreManager(_winrt.winrt_base):
    ...
    def create_web_account_monitor(web_accounts: typing.Iterable[winrt.windows.security.credentials.WebAccount]) -> WebAccountMonitor:
        ...
    def find_account_async(provider: winrt.windows.security.credentials.WebAccountProvider, web_account_id: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.credentials.WebAccount]:
        ...
    def find_account_provider_async(web_account_provider_id: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.credentials.WebAccountProvider]:
        ...
    def find_account_provider_async(web_account_provider_id: str, authority: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.credentials.WebAccountProvider]:
        ...
    def find_account_provider_async(web_account_provider_id: str, authority: str, user: winrt.windows.system.User) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.credentials.WebAccountProvider]:
        ...
    def find_all_accounts_async(provider: winrt.windows.security.credentials.WebAccountProvider) -> winrt.windows.foundation.IAsyncOperation[FindAllAccountsResult]:
        ...
    def find_all_accounts_async(provider: winrt.windows.security.credentials.WebAccountProvider, client_id: str) -> winrt.windows.foundation.IAsyncOperation[FindAllAccountsResult]:
        ...
    def find_system_account_provider_async(web_account_provider_id: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.credentials.WebAccountProvider]:
        ...
    def find_system_account_provider_async(web_account_provider_id: str, authority: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.credentials.WebAccountProvider]:
        ...
    def find_system_account_provider_async(web_account_provider_id: str, authority: str, user: winrt.windows.system.User) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.credentials.WebAccountProvider]:
        ...
    def get_token_silently_async(request: WebTokenRequest) -> winrt.windows.foundation.IAsyncOperation[WebTokenRequestResult]:
        ...
    def get_token_silently_async(request: WebTokenRequest, web_account: winrt.windows.security.credentials.WebAccount) -> winrt.windows.foundation.IAsyncOperation[WebTokenRequestResult]:
        ...
    def request_token_async(request: WebTokenRequest) -> winrt.windows.foundation.IAsyncOperation[WebTokenRequestResult]:
        ...
    def request_token_async(request: WebTokenRequest, web_account: winrt.windows.security.credentials.WebAccount) -> winrt.windows.foundation.IAsyncOperation[WebTokenRequestResult]:
        ...

class WebProviderError(_winrt.winrt_base):
    ...
    error_code: int
    error_message: str
    properties: winrt.windows.foundation.collections.IMap[str, str]

class WebTokenRequest(_winrt.winrt_base):
    ...
    client_id: str
    prompt_type: WebTokenRequestPromptType
    properties: winrt.windows.foundation.collections.IMap[str, str]
    scope: str
    web_account_provider: winrt.windows.security.credentials.WebAccountProvider
    app_properties: winrt.windows.foundation.collections.IMap[str, str]
    correlation_id: str

class WebTokenRequestResult(_winrt.winrt_base):
    ...
    response_data: winrt.windows.foundation.collections.IVectorView[WebTokenResponse]
    response_error: WebProviderError
    response_status: WebTokenRequestStatus
    def invalidate_cache_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class WebTokenResponse(_winrt.winrt_base):
    ...
    properties: winrt.windows.foundation.collections.IMap[str, str]
    provider_error: WebProviderError
    token: str
    web_account: winrt.windows.security.credentials.WebAccount

