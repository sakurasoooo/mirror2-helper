# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class MicrosoftAccountMultiFactorAuthenticationType(enum.IntEnum):
    USER = 0
    DEVICE = 1

class MicrosoftAccountMultiFactorServiceResponse(enum.IntEnum):
    SUCCESS = 0
    ERROR = 1
    NO_NETWORK_CONNECTION = 2
    SERVICE_UNAVAILABLE = 3
    TOTP_SETUP_DENIED = 4
    NGC_NOT_SETUP = 5
    SESSION_ALREADY_DENIED = 6
    SESSION_ALREADY_APPROVED = 7
    SESSION_EXPIRED = 8
    NGC_NONCE_EXPIRED = 9
    INVALID_SESSION_ID = 10
    INVALID_SESSION_TYPE = 11
    INVALID_OPERATION = 12
    INVALID_STATE_TRANSITION = 13
    DEVICE_NOT_FOUND = 14
    FLOW_DISABLED = 15
    SESSION_NOT_APPROVED = 16
    OPERATION_CANCELED_BY_USER = 17
    NGC_DISABLED_BY_SERVER = 18
    NGC_KEY_NOT_FOUND_ON_SERVER = 19
    U_I_REQUIRED = 20
    DEVICE_ID_CHANGED = 21

class MicrosoftAccountMultiFactorSessionApprovalStatus(enum.IntEnum):
    PENDING = 0
    APPROVED = 1
    DENIED = 2

class MicrosoftAccountMultiFactorSessionAuthenticationStatus(enum.IntEnum):
    AUTHENTICATED = 0
    UNAUTHENTICATED = 1

class MicrosoftAccountMultiFactorAuthenticationManager(_winrt.winrt_base):
    ...
    current: MicrosoftAccountMultiFactorAuthenticationManager
    def add_device_async(user_account_id: str, authentication_token: str, wns_channel_id: str) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorServiceResponse]:
        ...
    def approve_session_async(session_authentiction_status: MicrosoftAccountMultiFactorSessionAuthenticationStatus, authentication_session_info: MicrosoftAccountMultiFactorSessionInfo) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorServiceResponse]:
        ...
    def approve_session_async(session_authentiction_status: MicrosoftAccountMultiFactorSessionAuthenticationStatus, user_account_id: str, session_id: str, session_authentication_type: MicrosoftAccountMultiFactorAuthenticationType) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorServiceResponse]:
        ...
    def deny_session_async(authentication_session_info: MicrosoftAccountMultiFactorSessionInfo) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorServiceResponse]:
        ...
    def deny_session_async(user_account_id: str, session_id: str, session_authentication_type: MicrosoftAccountMultiFactorAuthenticationType) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorServiceResponse]:
        ...
    def get_one_time_pass_code_async(user_account_id: str, code_length: int) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorOneTimeCodedInfo]:
        ...
    def get_sessions_and_unregistered_accounts_async(user_account_id_list: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo]:
        ...
    def get_sessions_async(user_account_id_list: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorGetSessionsResult]:
        ...
    def remove_device_async(user_account_id: str) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorServiceResponse]:
        ...
    def update_wns_channel_async(user_account_id: str, channel_uri: str) -> winrt.windows.foundation.IAsyncOperation[MicrosoftAccountMultiFactorServiceResponse]:
        ...

class MicrosoftAccountMultiFactorGetSessionsResult(_winrt.winrt_base):
    ...
    service_response: MicrosoftAccountMultiFactorServiceResponse
    sessions: winrt.windows.foundation.collections.IVectorView[MicrosoftAccountMultiFactorSessionInfo]

class MicrosoftAccountMultiFactorOneTimeCodedInfo(_winrt.winrt_base):
    ...
    code: str
    service_response: MicrosoftAccountMultiFactorServiceResponse
    time_interval: winrt.windows.foundation.TimeSpan
    time_to_live: winrt.windows.foundation.TimeSpan

class MicrosoftAccountMultiFactorSessionInfo(_winrt.winrt_base):
    ...
    approval_status: MicrosoftAccountMultiFactorSessionApprovalStatus
    authentication_type: MicrosoftAccountMultiFactorAuthenticationType
    display_session_id: str
    expiration_time: winrt.windows.foundation.DateTime
    request_time: winrt.windows.foundation.DateTime
    session_id: str
    user_account_id: str

class MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo(_winrt.winrt_base):
    ...
    service_response: MicrosoftAccountMultiFactorServiceResponse
    sessions: winrt.windows.foundation.collections.IVectorView[MicrosoftAccountMultiFactorSessionInfo]
    unregistered_accounts: winrt.windows.foundation.collections.IVectorView[str]

