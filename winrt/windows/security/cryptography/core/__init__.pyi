# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.security.cryptography.certificates
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class Capi1KdfTargetAlgorithm(enum.IntEnum):
    NOT_AES = 0
    AES = 1

class CryptographicPadding(enum.IntEnum):
    NONE = 0
    RSA_OAEP = 1
    RSA_PKCS1_V15 = 2
    RSA_PSS = 3

class CryptographicPrivateKeyBlobType(enum.IntEnum):
    PKCS8_RAW_PRIVATE_KEY_INFO = 0
    PKCS1_RSA_PRIVATE_KEY = 1
    B_CRYPT_PRIVATE_KEY = 2
    CAPI1_PRIVATE_KEY = 3
    B_CRYPT_ECC_FULL_PRIVATE_KEY = 4

class CryptographicPublicKeyBlobType(enum.IntEnum):
    X509_SUBJECT_PUBLIC_KEY_INFO = 0
    PKCS1_RSA_PUBLIC_KEY = 1
    B_CRYPT_PUBLIC_KEY = 2
    CAPI1_PUBLIC_KEY = 3
    B_CRYPT_ECC_FULL_PUBLIC_KEY = 4

class AsymmetricAlgorithmNames(_winrt.winrt_base):
    ...
    ecdsa_p521_sha512: str
    dsa_sha1: str
    dsa_sha256: str
    ecdsa_p256_sha256: str
    ecdsa_p384_sha384: str
    rsa_sign_pkcs1_sha256: str
    rsa_oaep_sha1: str
    rsa_oaep_sha256: str
    rsa_oaep_sha384: str
    rsa_oaep_sha512: str
    rsa_pkcs1: str
    rsa_sign_pkcs1_sha1: str
    rsa_sign_pkcs1_sha384: str
    rsa_sign_pkcs1_sha512: str
    rsa_sign_pss_sha1: str
    rsa_sign_pss_sha256: str
    rsa_sign_pss_sha384: str
    rsa_sign_pss_sha512: str
    ecdsa_sha384: str
    ecdsa_sha512: str
    ecdsa_sha256: str

class AsymmetricKeyAlgorithmProvider(_winrt.winrt_base):
    ...
    algorithm_name: str
    def create_key_pair(key_size: int) -> CryptographicKey:
        ...
    def create_key_pair_with_curve_name(curve_name: str) -> CryptographicKey:
        ...
    def create_key_pair_with_curve_parameters(parameters: typing.Sequence[int]) -> CryptographicKey:
        ...
    def import_key_pair(key_blob: winrt.windows.storage.streams.IBuffer) -> CryptographicKey:
        ...
    def import_key_pair(key_blob: winrt.windows.storage.streams.IBuffer, blob_type: CryptographicPrivateKeyBlobType) -> CryptographicKey:
        ...
    def import_public_key(key_blob: winrt.windows.storage.streams.IBuffer) -> CryptographicKey:
        ...
    def import_public_key(key_blob: winrt.windows.storage.streams.IBuffer, blob_type: CryptographicPublicKeyBlobType) -> CryptographicKey:
        ...
    def open_algorithm(algorithm: str) -> AsymmetricKeyAlgorithmProvider:
        ...

class CryptographicEngine(_winrt.winrt_base):
    ...
    def decrypt(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer, iv: winrt.windows.storage.streams.IBuffer) -> winrt.windows.storage.streams.IBuffer:
        ...
    def decrypt_and_authenticate(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer, nonce: winrt.windows.storage.streams.IBuffer, authentication_tag: winrt.windows.storage.streams.IBuffer, authenticated_data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.storage.streams.IBuffer:
        ...
    def decrypt_async(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer, iv: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def derive_key_material(key: CryptographicKey, parameters: KeyDerivationParameters, desired_key_size: int) -> winrt.windows.storage.streams.IBuffer:
        ...
    def encrypt(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer, iv: winrt.windows.storage.streams.IBuffer) -> winrt.windows.storage.streams.IBuffer:
        ...
    def encrypt_and_authenticate(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer, nonce: winrt.windows.storage.streams.IBuffer, authenticated_data: winrt.windows.storage.streams.IBuffer) -> EncryptedAndAuthenticatedData:
        ...
    def sign(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.storage.streams.IBuffer:
        ...
    def sign_async(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def sign_hashed_data(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.storage.streams.IBuffer:
        ...
    def sign_hashed_data_async(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def verify_signature(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer, signature: winrt.windows.storage.streams.IBuffer) -> bool:
        ...
    def verify_signature_with_hash_input(key: CryptographicKey, data: winrt.windows.storage.streams.IBuffer, signature: winrt.windows.storage.streams.IBuffer) -> bool:
        ...

class CryptographicHash(_winrt.winrt_base):
    ...
    def append(data: winrt.windows.storage.streams.IBuffer) -> None:
        ...
    def get_value_and_reset() -> winrt.windows.storage.streams.IBuffer:
        ...

class CryptographicKey(_winrt.winrt_base):
    ...
    key_size: int
    def export() -> winrt.windows.storage.streams.IBuffer:
        ...
    def export(blob_type: CryptographicPrivateKeyBlobType) -> winrt.windows.storage.streams.IBuffer:
        ...
    def export_public_key() -> winrt.windows.storage.streams.IBuffer:
        ...
    def export_public_key(blob_type: CryptographicPublicKeyBlobType) -> winrt.windows.storage.streams.IBuffer:
        ...

class EccCurveNames(_winrt.winrt_base):
    ...
    all_ecc_curve_names: winrt.windows.foundation.collections.IVectorView[str]
    brainpool_p160r1: str
    brainpool_p160t1: str
    brainpool_p192r1: str
    brainpool_p192t1: str
    brainpool_p224r1: str
    brainpool_p224t1: str
    brainpool_p256r1: str
    brainpool_p256t1: str
    brainpool_p320r1: str
    brainpool_p320t1: str
    brainpool_p384r1: str
    brainpool_p384t1: str
    brainpool_p512r1: str
    brainpool_p512t1: str
    curve25519: str
    ec192wapi: str
    nist_p192: str
    nist_p224: str
    nist_p256: str
    nist_p384: str
    nist_p521: str
    nums_p256t1: str
    nums_p384t1: str
    nums_p512t1: str
    sec_p160k1: str
    sec_p160r1: str
    sec_p160r2: str
    sec_p192k1: str
    sec_p192r1: str
    sec_p224k1: str
    sec_p224r1: str
    sec_p256k1: str
    sec_p256r1: str
    sec_p384r1: str
    sec_p521r1: str
    wtls12: str
    wtls7: str
    wtls9: str
    x962_p192v1: str
    x962_p192v2: str
    x962_p192v3: str
    x962_p239v1: str
    x962_p239v2: str
    x962_p239v3: str
    x962_p256v1: str

class EncryptedAndAuthenticatedData(_winrt.winrt_base):
    ...
    authentication_tag: winrt.windows.storage.streams.IBuffer
    encrypted_data: winrt.windows.storage.streams.IBuffer

class HashAlgorithmNames(_winrt.winrt_base):
    ...
    md5: str
    sha1: str
    sha256: str
    sha384: str
    sha512: str

class HashAlgorithmProvider(_winrt.winrt_base):
    ...
    algorithm_name: str
    hash_length: int
    def create_hash() -> CryptographicHash:
        ...
    def hash_data(data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.storage.streams.IBuffer:
        ...
    def open_algorithm(algorithm: str) -> HashAlgorithmProvider:
        ...

class KeyDerivationAlgorithmNames(_winrt.winrt_base):
    ...
    pbkdf2_sha256: str
    pbkdf2_md5: str
    pbkdf2_sha1: str
    sp800108_ctr_hmac_sha512: str
    pbkdf2_sha384: str
    pbkdf2_sha512: str
    sp800108_ctr_hmac_md5: str
    sp800108_ctr_hmac_sha1: str
    sp800108_ctr_hmac_sha256: str
    sp800108_ctr_hmac_sha384: str
    sp80056a_concat_md5: str
    sp80056a_concat_sha1: str
    sp80056a_concat_sha256: str
    sp80056a_concat_sha384: str
    sp80056a_concat_sha512: str
    capi_kdf_sha1: str
    capi_kdf_sha256: str
    capi_kdf_sha384: str
    capi_kdf_sha512: str
    capi_kdf_md5: str

class KeyDerivationAlgorithmProvider(_winrt.winrt_base):
    ...
    algorithm_name: str
    def create_key(key_material: winrt.windows.storage.streams.IBuffer) -> CryptographicKey:
        ...
    def open_algorithm(algorithm: str) -> KeyDerivationAlgorithmProvider:
        ...

class KeyDerivationParameters(_winrt.winrt_base):
    ...
    kdf_generic_binary: winrt.windows.storage.streams.IBuffer
    iteration_count: int
    capi1_kdf_target_algorithm: Capi1KdfTargetAlgorithm
    def build_for_capi1_kdf(capi1_kdf_target_algorithm: Capi1KdfTargetAlgorithm) -> KeyDerivationParameters:
        ...
    def build_for_pbkdf2(pbkdf2_salt: winrt.windows.storage.streams.IBuffer, iteration_count: int) -> KeyDerivationParameters:
        ...
    def build_for_s_p800108(label: winrt.windows.storage.streams.IBuffer, context: winrt.windows.storage.streams.IBuffer) -> KeyDerivationParameters:
        ...
    def build_for_s_p80056a(algorithm_id: winrt.windows.storage.streams.IBuffer, party_u_info: winrt.windows.storage.streams.IBuffer, party_v_info: winrt.windows.storage.streams.IBuffer, supp_pub_info: winrt.windows.storage.streams.IBuffer, supp_priv_info: winrt.windows.storage.streams.IBuffer) -> KeyDerivationParameters:
        ...

class MacAlgorithmNames(_winrt.winrt_base):
    ...
    aes_cmac: str
    hmac_md5: str
    hmac_sha1: str
    hmac_sha256: str
    hmac_sha384: str
    hmac_sha512: str

class MacAlgorithmProvider(_winrt.winrt_base):
    ...
    algorithm_name: str
    mac_length: int
    def create_hash(key_material: winrt.windows.storage.streams.IBuffer) -> CryptographicHash:
        ...
    def create_key(key_material: winrt.windows.storage.streams.IBuffer) -> CryptographicKey:
        ...
    def open_algorithm(algorithm: str) -> MacAlgorithmProvider:
        ...

class PersistedKeyProvider(_winrt.winrt_base):
    ...
    def open_key_pair_from_certificate_async(certificate: winrt.windows.security.cryptography.certificates.Certificate, hash_algorithm_name: str, padding: CryptographicPadding) -> winrt.windows.foundation.IAsyncOperation[CryptographicKey]:
        ...
    def open_public_key_from_certificate(certificate: winrt.windows.security.cryptography.certificates.Certificate, hash_algorithm_name: str, padding: CryptographicPadding) -> CryptographicKey:
        ...

class SymmetricAlgorithmNames(_winrt.winrt_base):
    ...
    aes_cbc: str
    aes_cbc_pkcs7: str
    aes_ccm: str
    aes_ecb: str
    aes_ecb_pkcs7: str
    aes_gcm: str
    des_cbc: str
    des_cbc_pkcs7: str
    des_ecb: str
    des_ecb_pkcs7: str
    rc2_cbc: str
    rc2_cbc_pkcs7: str
    rc2_ecb: str
    rc2_ecb_pkcs7: str
    rc4: str
    triple_des_cbc: str
    triple_des_cbc_pkcs7: str
    triple_des_ecb: str
    triple_des_ecb_pkcs7: str

class SymmetricKeyAlgorithmProvider(_winrt.winrt_base):
    ...
    algorithm_name: str
    block_length: int
    def create_symmetric_key(key_material: winrt.windows.storage.streams.IBuffer) -> CryptographicKey:
        ...
    def open_algorithm(algorithm: str) -> SymmetricKeyAlgorithmProvider:
        ...

