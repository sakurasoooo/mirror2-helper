# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

try:
    import winrt.windows.ui
except Exception:
    pass

try:
    import winrt.windows.ui.composition
except Exception:
    pass

class AppWindowClosedReason(enum.IntEnum):
    OTHER = 0
    APP_INITIATED = 1
    USER_INITIATED = 2

class AppWindowFrameStyle(enum.IntEnum):
    DEFAULT = 0
    NO_FRAME = 1

class AppWindowPresentationKind(enum.IntEnum):
    DEFAULT = 0
    COMPACT_OVERLAY = 1
    FULL_SCREEN = 2

class AppWindowTitleBarVisibility(enum.IntEnum):
    DEFAULT = 0
    ALWAYS_HIDDEN = 1

class WindowingEnvironmentKind(enum.IntEnum):
    UNKNOWN = 0
    OVERLAPPED = 1
    TILED = 2

class AppWindow(_winrt.winrt_base):
    ...
    title: str
    persisted_state_id: str
    content: winrt.windows.ui.UIContentRoot
    dispatcher_queue: winrt.windows.system.DispatcherQueue
    frame: AppWindowFrame
    is_visible: bool
    presenter: AppWindowPresenter
    title_bar: AppWindowTitleBar
    u_i_context: winrt.windows.ui.UIContext
    windowing_environment: WindowingEnvironment
    def clear_all_persisted_state() -> None:
        ...
    def clear_persisted_state(key: str) -> None:
        ...
    def close_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_display_regions() -> winrt.windows.foundation.collections.IVectorView[DisplayRegion]:
        ...
    def get_placement() -> AppWindowPlacement:
        ...
    def request_move_adjacent_to_current_view() -> None:
        ...
    def request_move_adjacent_to_window(anchor_window: AppWindow) -> None:
        ...
    def request_move_relative_to_current_view_content(content_offset: winrt.windows.foundation.Point) -> None:
        ...
    def request_move_relative_to_display_region(display_region: DisplayRegion, display_region_offset: winrt.windows.foundation.Point) -> None:
        ...
    def request_move_relative_to_window_content(anchor_window: AppWindow, content_offset: winrt.windows.foundation.Point) -> None:
        ...
    def request_move_to_display_region(display_region: DisplayRegion) -> None:
        ...
    def request_size(frame_size: winrt.windows.foundation.Size) -> None:
        ...
    def try_create_async() -> winrt.windows.foundation.IAsyncOperation[AppWindow]:
        ...
    def try_show_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_changed(handler: winrt.windows.foundation.TypedEventHandler[AppWindow, AppWindowChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_close_requested(handler: winrt.windows.foundation.TypedEventHandler[AppWindow, AppWindowCloseRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_close_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[AppWindow, AppWindowClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class AppWindowChangedEventArgs(_winrt.winrt_base):
    ...
    did_available_window_presentations_change: bool
    did_display_regions_change: bool
    did_frame_change: bool
    did_size_change: bool
    did_title_bar_change: bool
    did_visibility_change: bool
    did_window_presentation_change: bool
    did_windowing_environment_change: bool

class AppWindowCloseRequestedEventArgs(_winrt.winrt_base):
    ...
    cancel: bool
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class AppWindowClosedEventArgs(_winrt.winrt_base):
    ...
    reason: AppWindowClosedReason

class AppWindowFrame(_winrt.winrt_base):
    ...
    drag_region_visuals: winrt.windows.foundation.collections.IVector[winrt.windows.ui.composition.IVisualElement]
    def get_frame_style() -> AppWindowFrameStyle:
        ...
    def set_frame_style(frame_style: AppWindowFrameStyle) -> None:
        ...

class AppWindowPlacement(_winrt.winrt_base):
    ...
    display_region: DisplayRegion
    offset: winrt.windows.foundation.Point
    size: winrt.windows.foundation.Size

class AppWindowPresentationConfiguration(_winrt.winrt_base):
    ...
    kind: AppWindowPresentationKind

class AppWindowPresenter(_winrt.winrt_base):
    ...
    def get_configuration() -> AppWindowPresentationConfiguration:
        ...
    def is_presentation_supported(presentation_kind: AppWindowPresentationKind) -> bool:
        ...
    def request_presentation(presentation_kind: AppWindowPresentationKind) -> bool:
        ...

class AppWindowTitleBar(_winrt.winrt_base):
    ...
    inactive_foreground_color: typing.Optional[winrt.windows.ui.Color]
    inactive_background_color: typing.Optional[winrt.windows.ui.Color]
    foreground_color: typing.Optional[winrt.windows.ui.Color]
    extends_content_into_title_bar: bool
    button_pressed_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_pressed_background_color: typing.Optional[winrt.windows.ui.Color]
    button_inactive_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_inactive_background_color: typing.Optional[winrt.windows.ui.Color]
    button_hover_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_hover_background_color: typing.Optional[winrt.windows.ui.Color]
    button_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_background_color: typing.Optional[winrt.windows.ui.Color]
    background_color: typing.Optional[winrt.windows.ui.Color]
    is_visible: bool
    def get_preferred_visibility() -> AppWindowTitleBarVisibility:
        ...
    def get_title_bar_occlusions() -> winrt.windows.foundation.collections.IVectorView[AppWindowTitleBarOcclusion]:
        ...
    def set_preferred_visibility(visibility_mode: AppWindowTitleBarVisibility) -> None:
        ...

class AppWindowTitleBarOcclusion(_winrt.winrt_base):
    ...
    occluding_rect: winrt.windows.foundation.Rect

class CompactOverlayPresentationConfiguration(_winrt.winrt_base):
    ...

class DefaultPresentationConfiguration(_winrt.winrt_base):
    ...

class DisplayRegion(_winrt.winrt_base):
    ...
    display_monitor_device_id: str
    is_visible: bool
    windowing_environment: WindowingEnvironment
    work_area_offset: winrt.windows.foundation.Point
    work_area_size: winrt.windows.foundation.Size
    def add_changed(handler: winrt.windows.foundation.TypedEventHandler[DisplayRegion, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class FullScreenPresentationConfiguration(_winrt.winrt_base):
    ...
    is_exclusive: bool

class WindowServices(_winrt.winrt_base):
    ...
    def find_all_top_level_window_ids() -> winrt.windows.foundation.collections.IVectorView[winrt.windows.ui.WindowId]:
        ...

class WindowingEnvironment(_winrt.winrt_base):
    ...
    is_enabled: bool
    kind: WindowingEnvironmentKind
    def find_all() -> winrt.windows.foundation.collections.IVectorView[WindowingEnvironment]:
        ...
    def find_all(kind: WindowingEnvironmentKind) -> winrt.windows.foundation.collections.IVectorView[WindowingEnvironment]:
        ...
    def get_display_regions() -> winrt.windows.foundation.collections.IVectorView[DisplayRegion]:
        ...
    def add_changed(handler: winrt.windows.foundation.TypedEventHandler[WindowingEnvironment, WindowingEnvironmentChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class WindowingEnvironmentAddedEventArgs(_winrt.winrt_base):
    ...
    windowing_environment: WindowingEnvironment

class WindowingEnvironmentChangedEventArgs(_winrt.winrt_base):
    ...

class WindowingEnvironmentRemovedEventArgs(_winrt.winrt_base):
    ...
    windowing_environment: WindowingEnvironment

