# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.enumeration
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.ui
except Exception:
    pass

try:
    import winrt.windows.ui.core
except Exception:
    pass

try:
    import winrt.windows.ui.popups
except Exception:
    pass

try:
    import winrt.windows.ui.windowmanagement
except Exception:
    pass

class ApplicationViewBoundsMode(enum.IntEnum):
    USE_VISIBLE = 0
    USE_CORE_WINDOW = 1

class ApplicationViewMode(enum.IntEnum):
    DEFAULT = 0
    COMPACT_OVERLAY = 1

class ApplicationViewOrientation(enum.IntEnum):
    LANDSCAPE = 0
    PORTRAIT = 1

class ApplicationViewState(enum.IntEnum):
    FULL_SCREEN_LANDSCAPE = 0
    FILLED = 1
    SNAPPED = 2
    FULL_SCREEN_PORTRAIT = 3

class ApplicationViewSwitchingOptions(enum.IntFlag):
    DEFAULT = 0
    SKIP_ANIMATION = 0x1
    CONSOLIDATE_VIEWS = 0x2

class ApplicationViewWindowingMode(enum.IntEnum):
    AUTO = 0
    PREFERRED_LAUNCH_VIEW_SIZE = 1
    FULL_SCREEN = 2
    COMPACT_OVERLAY = 3
    MAXIMIZED = 4

class FullScreenSystemOverlayMode(enum.IntEnum):
    STANDARD = 0
    MINIMAL = 1

class HandPreference(enum.IntEnum):
    LEFT_HANDED = 0
    RIGHT_HANDED = 1

class UIColorType(enum.IntEnum):
    BACKGROUND = 0
    FOREGROUND = 1
    ACCENT_DARK3 = 2
    ACCENT_DARK2 = 3
    ACCENT_DARK1 = 4
    ACCENT = 5
    ACCENT_LIGHT1 = 6
    ACCENT_LIGHT2 = 7
    ACCENT_LIGHT3 = 8
    COMPLEMENT = 9

class UIElementType(enum.IntEnum):
    ACTIVE_CAPTION = 0
    BACKGROUND = 1
    BUTTON_FACE = 2
    BUTTON_TEXT = 3
    CAPTION_TEXT = 4
    GRAY_TEXT = 5
    HIGHLIGHT = 6
    HIGHLIGHT_TEXT = 7
    HOTLIGHT = 8
    INACTIVE_CAPTION = 9
    INACTIVE_CAPTION_TEXT = 10
    WINDOW = 11
    WINDOW_TEXT = 12
    ACCENT_COLOR = 1000
    TEXT_HIGH = 1001
    TEXT_MEDIUM = 1002
    TEXT_LOW = 1003
    TEXT_CONTRAST_WITH_HIGH = 1004
    NON_TEXT_HIGH = 1005
    NON_TEXT_MEDIUM_HIGH = 1006
    NON_TEXT_MEDIUM = 1007
    NON_TEXT_MEDIUM_LOW = 1008
    NON_TEXT_LOW = 1009
    PAGE_BACKGROUND = 1010
    POPUP_BACKGROUND = 1011
    OVERLAY_OUTSIDE_POPUP = 1012

class UserInteractionMode(enum.IntEnum):
    MOUSE = 0
    TOUCH = 1

class ViewSizePreference(enum.IntEnum):
    DEFAULT = 0
    USE_LESS = 1
    USE_HALF = 2
    USE_MORE = 3
    USE_MINIMUM = 4
    USE_NONE = 5
    CUSTOM = 6

class AccessibilitySettings(_winrt.winrt_base):
    ...
    high_contrast: bool
    high_contrast_scheme: str
    def add_high_contrast_changed(handler: winrt.windows.foundation.TypedEventHandler[AccessibilitySettings, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_high_contrast_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ActivationViewSwitcher(_winrt.winrt_base):
    ...
    def is_view_presented_on_activation_virtual_desktop(view_id: int) -> bool:
        ...
    def show_as_standalone_async(view_id: int) -> winrt.windows.foundation.IAsyncAction:
        ...
    def show_as_standalone_async(view_id: int, size_preference: ViewSizePreference) -> winrt.windows.foundation.IAsyncAction:
        ...

class ApplicationView(_winrt.winrt_base):
    ...
    title: str
    is_screen_capture_enabled: bool
    adjacent_to_left_display_edge: bool
    adjacent_to_right_display_edge: bool
    id: int
    is_full_screen: bool
    is_on_lock_screen: bool
    orientation: ApplicationViewOrientation
    suppress_system_overlays: bool
    visible_bounds: winrt.windows.foundation.Rect
    desired_bounds_mode: ApplicationViewBoundsMode
    full_screen_system_overlay_mode: FullScreenSystemOverlayMode
    is_full_screen_mode: bool
    title_bar: ApplicationViewTitleBar
    view_mode: ApplicationViewMode
    persisted_state_id: str
    windowing_environment: winrt.windows.ui.windowmanagement.WindowingEnvironment
    u_i_context: winrt.windows.ui.UIContext
    value: ApplicationViewState
    terminate_app_on_final_view_close: bool
    preferred_launch_windowing_mode: ApplicationViewWindowingMode
    preferred_launch_view_size: winrt.windows.foundation.Size
    def clear_all_persisted_state() -> None:
        ...
    def clear_persisted_state(key: str) -> None:
        ...
    def exit_full_screen_mode() -> None:
        ...
    def get_application_view_id_for_window(window: winrt.windows.ui.core.ICoreWindow) -> int:
        ...
    def get_display_regions() -> winrt.windows.foundation.collections.IVectorView[winrt.windows.ui.windowmanagement.DisplayRegion]:
        ...
    def get_for_current_view() -> ApplicationView:
        ...
    def is_view_mode_supported(view_mode: ApplicationViewMode) -> bool:
        ...
    def set_desired_bounds_mode(bounds_mode: ApplicationViewBoundsMode) -> bool:
        ...
    def set_preferred_min_size(min_size: winrt.windows.foundation.Size) -> None:
        ...
    def show_standard_system_overlays() -> None:
        ...
    def try_consolidate_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_enter_full_screen_mode() -> bool:
        ...
    def try_enter_view_mode_async(view_mode: ApplicationViewMode) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_enter_view_mode_async(view_mode: ApplicationViewMode, view_mode_preferences: ViewModePreferences) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_resize_view(value: winrt.windows.foundation.Size) -> bool:
        ...
    def try_unsnap() -> bool:
        ...
    def try_unsnap_to_fullscreen() -> bool:
        ...
    def add_consolidated(handler: winrt.windows.foundation.TypedEventHandler[ApplicationView, ApplicationViewConsolidatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_consolidated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_visible_bounds_changed(handler: winrt.windows.foundation.TypedEventHandler[ApplicationView, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_visible_bounds_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ApplicationViewConsolidatedEventArgs(_winrt.winrt_base):
    ...
    is_user_initiated: bool
    is_app_initiated: bool

class ApplicationViewScaling(_winrt.winrt_base):
    ...
    disable_layout_scaling: bool
    def try_set_disable_layout_scaling(disable_layout_scaling: bool) -> bool:
        ...

class ApplicationViewSwitcher(_winrt.winrt_base):
    ...
    def disable_showing_main_view_on_activation() -> None:
        ...
    def disable_system_view_activation_policy() -> None:
        ...
    def prepare_for_custom_animated_switch_async(to_view_id: int, from_view_id: int, options: ApplicationViewSwitchingOptions) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def switch_async(view_id: int) -> winrt.windows.foundation.IAsyncAction:
        ...
    def switch_async(to_view_id: int, from_view_id: int) -> winrt.windows.foundation.IAsyncAction:
        ...
    def switch_async(to_view_id: int, from_view_id: int, options: ApplicationViewSwitchingOptions) -> winrt.windows.foundation.IAsyncAction:
        ...
    def try_show_as_standalone_async(view_id: int) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_show_as_standalone_async(view_id: int, size_preference: ViewSizePreference) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_show_as_standalone_async(view_id: int, size_preference: ViewSizePreference, anchor_view_id: int, anchor_size_preference: ViewSizePreference) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_show_as_view_mode_async(view_id: int, view_mode: ApplicationViewMode) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_show_as_view_mode_async(view_id: int, view_mode: ApplicationViewMode, view_mode_preferences: ViewModePreferences) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class ApplicationViewTitleBar(_winrt.winrt_base):
    ...
    inactive_foreground_color: typing.Optional[winrt.windows.ui.Color]
    inactive_background_color: typing.Optional[winrt.windows.ui.Color]
    foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_pressed_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_pressed_background_color: typing.Optional[winrt.windows.ui.Color]
    button_inactive_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_inactive_background_color: typing.Optional[winrt.windows.ui.Color]
    button_hover_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_hover_background_color: typing.Optional[winrt.windows.ui.Color]
    button_foreground_color: typing.Optional[winrt.windows.ui.Color]
    button_background_color: typing.Optional[winrt.windows.ui.Color]
    background_color: typing.Optional[winrt.windows.ui.Color]

class ApplicationViewTransferContext(_winrt.winrt_base):
    ...
    view_id: int
    data_package_format_id: str

class InputPane(_winrt.winrt_base):
    ...
    occluded_rect: winrt.windows.foundation.Rect
    visible: bool
    def get_for_current_view() -> InputPane:
        ...
    def get_for_u_i_context(context: winrt.windows.ui.UIContext) -> InputPane:
        ...
    def try_hide() -> bool:
        ...
    def try_show() -> bool:
        ...
    def add_hiding(handler: winrt.windows.foundation.TypedEventHandler[InputPane, InputPaneVisibilityEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_hiding(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_showing(handler: winrt.windows.foundation.TypedEventHandler[InputPane, InputPaneVisibilityEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_showing(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class InputPaneVisibilityEventArgs(_winrt.winrt_base):
    ...
    ensured_focused_element_in_view: bool
    occluded_rect: winrt.windows.foundation.Rect

class ProjectionManager(_winrt.winrt_base):
    ...
    projection_display_available: bool
    def get_device_selector() -> str:
        ...
    def request_start_projecting_async(projection_view_id: int, anchor_view_id: int, selection: winrt.windows.foundation.Rect) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def request_start_projecting_async(projection_view_id: int, anchor_view_id: int, selection: winrt.windows.foundation.Rect, preffered_placement: winrt.windows.ui.popups.Placement) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def start_projecting_async(projection_view_id: int, anchor_view_id: int) -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_projecting_async(projection_view_id: int, anchor_view_id: int, display_device_info: winrt.windows.devices.enumeration.DeviceInformation) -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_projecting_async(projection_view_id: int, anchor_view_id: int) -> winrt.windows.foundation.IAsyncAction:
        ...
    def swap_displays_for_views_async(projection_view_id: int, anchor_view_id: int) -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_projection_display_available_changed(handler: winrt.windows.foundation.EventHandler[_winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_projection_display_available_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class UISettings(_winrt.winrt_base):
    ...
    animations_enabled: bool
    caret_blink_rate: int
    caret_browsing_enabled: bool
    caret_width: int
    cursor_size: winrt.windows.foundation.Size
    double_click_time: int
    hand_preference: HandPreference
    message_duration: int
    mouse_hover_time: int
    scroll_bar_arrow_size: winrt.windows.foundation.Size
    scroll_bar_size: winrt.windows.foundation.Size
    scroll_bar_thumb_box_size: winrt.windows.foundation.Size
    text_scale_factor: float
    advanced_effects_enabled: bool
    auto_hide_scroll_bars: bool
    def get_color_value(desired_color: UIColorType) -> winrt.windows.ui.Color:
        ...
    def u_i_element_color(desired_element: UIElementType) -> winrt.windows.ui.Color:
        ...
    def add_text_scale_factor_changed(handler: winrt.windows.foundation.TypedEventHandler[UISettings, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_text_scale_factor_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_color_values_changed(handler: winrt.windows.foundation.TypedEventHandler[UISettings, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_color_values_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_advanced_effects_enabled_changed(handler: winrt.windows.foundation.TypedEventHandler[UISettings, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_advanced_effects_enabled_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_auto_hide_scroll_bars_changed(handler: winrt.windows.foundation.TypedEventHandler[UISettings, UISettingsAutoHideScrollBarsChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_auto_hide_scroll_bars_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_animations_enabled_changed(handler: winrt.windows.foundation.TypedEventHandler[UISettings, UISettingsAnimationsEnabledChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_animations_enabled_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_message_duration_changed(handler: winrt.windows.foundation.TypedEventHandler[UISettings, UISettingsMessageDurationChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_message_duration_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class UISettingsAnimationsEnabledChangedEventArgs(_winrt.winrt_base):
    ...

class UISettingsAutoHideScrollBarsChangedEventArgs(_winrt.winrt_base):
    ...

class UISettingsMessageDurationChangedEventArgs(_winrt.winrt_base):
    ...

class UIViewSettings(_winrt.winrt_base):
    ...
    user_interaction_mode: UserInteractionMode
    def get_for_current_view() -> UIViewSettings:
        ...

class ViewModePreferences(_winrt.winrt_base):
    ...
    view_size_preference: ViewSizePreference
    custom_size: winrt.windows.foundation.Size
    def create_default(mode: ApplicationViewMode) -> ViewModePreferences:
        ...

