# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.haptics
except Exception:
    pass

try:
    import winrt.windows.devices.input
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

try:
    import winrt.windows.ui.core
except Exception:
    pass

class CrossSlidingState(enum.IntEnum):
    STARTED = 0
    DRAGGING = 1
    SELECTING = 2
    SELECT_SPEED_BUMPING = 3
    SPEED_BUMPING = 4
    REARRANGING = 5
    COMPLETED = 6

class DraggingState(enum.IntEnum):
    STARTED = 0
    CONTINUING = 1
    COMPLETED = 2

class EdgeGestureKind(enum.IntEnum):
    TOUCH = 0
    KEYBOARD = 1
    MOUSE = 2

class GazeInputAccessStatus(enum.IntEnum):
    UNSPECIFIED = 0
    ALLOWED = 1
    DENIED_BY_USER = 2
    DENIED_BY_SYSTEM = 3

class GestureSettings(enum.IntFlag):
    NONE = 0
    TAP = 0x1
    DOUBLE_TAP = 0x2
    HOLD = 0x4
    HOLD_WITH_MOUSE = 0x8
    RIGHT_TAP = 0x10
    DRAG = 0x20
    MANIPULATION_TRANSLATE_X = 0x40
    MANIPULATION_TRANSLATE_Y = 0x80
    MANIPULATION_TRANSLATE_RAILS_X = 0x100
    MANIPULATION_TRANSLATE_RAILS_Y = 0x200
    MANIPULATION_ROTATE = 0x400
    MANIPULATION_SCALE = 0x800
    MANIPULATION_TRANSLATE_INERTIA = 0x1000
    MANIPULATION_ROTATE_INERTIA = 0x2000
    MANIPULATION_SCALE_INERTIA = 0x4000
    CROSS_SLIDE = 0x8000
    MANIPULATION_MULTIPLE_FINGER_PANNING = 0x10000

class HoldingState(enum.IntEnum):
    STARTED = 0
    COMPLETED = 1
    CANCELED = 2

class InputActivationState(enum.IntEnum):
    NONE = 0
    DEACTIVATED = 1
    ACTIVATED_NOT_FOREGROUND = 2
    ACTIVATED_IN_FOREGROUND = 3

class PointerUpdateKind(enum.IntEnum):
    OTHER = 0
    LEFT_BUTTON_PRESSED = 1
    LEFT_BUTTON_RELEASED = 2
    RIGHT_BUTTON_PRESSED = 3
    RIGHT_BUTTON_RELEASED = 4
    MIDDLE_BUTTON_PRESSED = 5
    MIDDLE_BUTTON_RELEASED = 6
    X_BUTTON1_PRESSED = 7
    X_BUTTON1_RELEASED = 8
    X_BUTTON2_PRESSED = 9
    X_BUTTON2_RELEASED = 10

class RadialControllerMenuKnownIcon(enum.IntEnum):
    SCROLL = 0
    ZOOM = 1
    UNDO_REDO = 2
    VOLUME = 3
    NEXT_PREVIOUS_TRACK = 4
    RULER = 5
    INK_COLOR = 6
    INK_THICKNESS = 7
    PEN_TYPE = 8

class RadialControllerSystemMenuItemKind(enum.IntEnum):
    SCROLL = 0
    ZOOM = 1
    UNDO_REDO = 2
    VOLUME = 3
    NEXT_PREVIOUS_TRACK = 4

class CrossSlideThresholds(_winrt.winrt_base):
    ...

class ManipulationDelta(_winrt.winrt_base):
    ...

class ManipulationVelocities(_winrt.winrt_base):
    ...

class AttachableInputObject(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    def close() -> None:
        ...

class CrossSlidingEventArgs(_winrt.winrt_base):
    ...
    cross_sliding_state: CrossSlidingState
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    contact_count: int

class DraggingEventArgs(_winrt.winrt_base):
    ...
    dragging_state: DraggingState
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    contact_count: int

class EdgeGesture(_winrt.winrt_base):
    ...
    def get_for_current_view() -> EdgeGesture:
        ...
    def add_canceled(handler: winrt.windows.foundation.TypedEventHandler[EdgeGesture, EdgeGestureEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_canceled(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_completed(handler: winrt.windows.foundation.TypedEventHandler[EdgeGesture, EdgeGestureEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_starting(handler: winrt.windows.foundation.TypedEventHandler[EdgeGesture, EdgeGestureEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_starting(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class EdgeGestureEventArgs(_winrt.winrt_base):
    ...
    kind: EdgeGestureKind

class GestureRecognizer(_winrt.winrt_base):
    ...
    show_gesture_feedback: bool
    pivot_radius: float
    pivot_center: winrt.windows.foundation.Point
    manipulation_exact: bool
    inertia_translation_displacement: float
    inertia_translation_deceleration: float
    inertia_rotation_deceleration: float
    inertia_rotation_angle: float
    inertia_expansion_deceleration: float
    inertia_expansion: float
    gesture_settings: GestureSettings
    cross_slide_thresholds: CrossSlideThresholds
    cross_slide_horizontally: bool
    cross_slide_exact: bool
    auto_process_inertia: bool
    is_active: bool
    is_inertial: bool
    mouse_wheel_parameters: MouseWheelParameters
    translation_min_contact_count: int
    translation_max_contact_count: int
    tap_min_contact_count: int
    tap_max_contact_count: int
    hold_start_delay: winrt.windows.foundation.TimeSpan
    hold_radius: float
    hold_min_contact_count: int
    hold_max_contact_count: int
    def can_be_double_tap(value: PointerPoint) -> bool:
        ...
    def complete_gesture() -> None:
        ...
    def process_down_event(value: PointerPoint) -> None:
        ...
    def process_inertia() -> None:
        ...
    def process_mouse_wheel_event(value: PointerPoint, is_shift_key_down: bool, is_control_key_down: bool) -> None:
        ...
    def process_move_events(value: winrt.windows.foundation.collections.IVector[PointerPoint]) -> None:
        ...
    def process_up_event(value: PointerPoint) -> None:
        ...
    def add_cross_sliding(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, CrossSlidingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_cross_sliding(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_dragging(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, DraggingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_dragging(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_holding(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, HoldingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_holding(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_manipulation_completed(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, ManipulationCompletedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_manipulation_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_manipulation_inertia_starting(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, ManipulationInertiaStartingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_manipulation_inertia_starting(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_manipulation_started(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, ManipulationStartedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_manipulation_started(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_manipulation_updated(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, ManipulationUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_manipulation_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_right_tapped(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, RightTappedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_right_tapped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_tapped(handler: winrt.windows.foundation.TypedEventHandler[GestureRecognizer, TappedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_tapped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class HoldingEventArgs(_winrt.winrt_base):
    ...
    holding_state: HoldingState
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    contact_count: int
    current_contact_count: int

class InputActivationListener(_winrt.winrt_base):
    ...
    state: InputActivationState
    def add_input_activation_changed(handler: winrt.windows.foundation.TypedEventHandler[InputActivationListener, InputActivationListenerActivationChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_input_activation_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class InputActivationListenerActivationChangedEventArgs(_winrt.winrt_base):
    ...
    state: InputActivationState

class KeyboardDeliveryInterceptor(_winrt.winrt_base):
    ...
    is_interception_enabled_when_in_foreground: bool
    def get_for_current_view() -> KeyboardDeliveryInterceptor:
        ...
    def add_key_down(handler: winrt.windows.foundation.TypedEventHandler[KeyboardDeliveryInterceptor, winrt.windows.ui.core.KeyEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_key_down(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_key_up(handler: winrt.windows.foundation.TypedEventHandler[KeyboardDeliveryInterceptor, winrt.windows.ui.core.KeyEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_key_up(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ManipulationCompletedEventArgs(_winrt.winrt_base):
    ...
    cumulative: ManipulationDelta
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    velocities: ManipulationVelocities
    contact_count: int
    current_contact_count: int

class ManipulationInertiaStartingEventArgs(_winrt.winrt_base):
    ...
    cumulative: ManipulationDelta
    delta: ManipulationDelta
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    velocities: ManipulationVelocities
    contact_count: int

class ManipulationStartedEventArgs(_winrt.winrt_base):
    ...
    cumulative: ManipulationDelta
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    contact_count: int

class ManipulationUpdatedEventArgs(_winrt.winrt_base):
    ...
    cumulative: ManipulationDelta
    delta: ManipulationDelta
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    velocities: ManipulationVelocities
    contact_count: int
    current_contact_count: int

class MouseWheelParameters(_winrt.winrt_base):
    ...
    page_translation: winrt.windows.foundation.Point
    delta_scale: float
    delta_rotation_angle: float
    char_translation: winrt.windows.foundation.Point

class PointerPoint(_winrt.winrt_base):
    ...
    frame_id: int
    is_in_contact: bool
    pointer_device: winrt.windows.devices.input.PointerDevice
    pointer_id: int
    position: winrt.windows.foundation.Point
    properties: PointerPointProperties
    raw_position: winrt.windows.foundation.Point
    timestamp: int
    def get_current_point(pointer_id: int) -> PointerPoint:
        ...
    def get_current_point(pointer_id: int, transform: IPointerPointTransform) -> PointerPoint:
        ...
    def get_intermediate_points(pointer_id: int) -> winrt.windows.foundation.collections.IVector[PointerPoint]:
        ...
    def get_intermediate_points(pointer_id: int, transform: IPointerPointTransform) -> winrt.windows.foundation.collections.IVector[PointerPoint]:
        ...

class PointerPointProperties(_winrt.winrt_base):
    ...
    contact_rect: winrt.windows.foundation.Rect
    contact_rect_raw: winrt.windows.foundation.Rect
    is_barrel_button_pressed: bool
    is_canceled: bool
    is_eraser: bool
    is_horizontal_mouse_wheel: bool
    is_in_range: bool
    is_inverted: bool
    is_left_button_pressed: bool
    is_middle_button_pressed: bool
    is_primary: bool
    is_right_button_pressed: bool
    is_x_button1_pressed: bool
    is_x_button2_pressed: bool
    mouse_wheel_delta: int
    orientation: float
    pointer_update_kind: PointerUpdateKind
    pressure: float
    touch_confidence: bool
    twist: float
    x_tilt: float
    y_tilt: float
    z_distance: typing.Optional[float]
    def get_usage_value(usage_page: int, usage_id: int) -> int:
        ...
    def has_usage(usage_page: int, usage_id: int) -> bool:
        ...

class PointerVisualizationSettings(_winrt.winrt_base):
    ...
    is_contact_feedback_enabled: bool
    is_barrel_button_feedback_enabled: bool
    def get_for_current_view() -> PointerVisualizationSettings:
        ...

class RadialController(_winrt.winrt_base):
    ...
    use_automatic_haptic_feedback: bool
    rotation_resolution_in_degrees: float
    menu: RadialControllerMenu
    def create_for_current_view() -> RadialController:
        ...
    def is_supported() -> bool:
        ...
    def add_button_clicked(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerButtonClickedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_button_clicked(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_control_acquired(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerControlAcquiredEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_control_acquired(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_control_lost(handler: winrt.windows.foundation.TypedEventHandler[RadialController, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_control_lost(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_rotation_changed(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerRotationChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_rotation_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_screen_contact_continued(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerScreenContactContinuedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_screen_contact_continued(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_screen_contact_ended(handler: winrt.windows.foundation.TypedEventHandler[RadialController, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_screen_contact_ended(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_screen_contact_started(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerScreenContactStartedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_screen_contact_started(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_button_holding(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerButtonHoldingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_button_holding(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_button_pressed(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerButtonPressedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_button_pressed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_button_released(handler: winrt.windows.foundation.TypedEventHandler[RadialController, RadialControllerButtonReleasedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_button_released(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RadialControllerButtonClickedEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerButtonHoldingEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerButtonPressedEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerButtonReleasedEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerConfiguration(_winrt.winrt_base):
    ...
    is_menu_suppressed: bool
    active_controller_when_menu_is_suppressed: RadialController
    is_app_controller_enabled: bool
    app_controller: RadialController
    def get_for_current_view() -> RadialControllerConfiguration:
        ...
    def reset_to_default_menu_items() -> None:
        ...
    def set_default_menu_items(buttons: typing.Iterable[RadialControllerSystemMenuItemKind]) -> None:
        ...
    def try_select_default_menu_item(type: RadialControllerSystemMenuItemKind) -> bool:
        ...

class RadialControllerControlAcquiredEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    is_button_pressed: bool
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerMenu(_winrt.winrt_base):
    ...
    is_enabled: bool
    items: winrt.windows.foundation.collections.IVector[RadialControllerMenuItem]
    def get_selected_menu_item() -> RadialControllerMenuItem:
        ...
    def select_menu_item(menu_item: RadialControllerMenuItem) -> None:
        ...
    def try_select_previously_selected_menu_item() -> bool:
        ...

class RadialControllerMenuItem(_winrt.winrt_base):
    ...
    tag: _winrt.winrt_base
    display_text: str
    def create_from_font_glyph(display_text: str, glyph: str, font_family: str) -> RadialControllerMenuItem:
        ...
    def create_from_font_glyph(display_text: str, glyph: str, font_family: str, font_uri: winrt.windows.foundation.Uri) -> RadialControllerMenuItem:
        ...
    def create_from_icon(display_text: str, icon: winrt.windows.storage.streams.RandomAccessStreamReference) -> RadialControllerMenuItem:
        ...
    def create_from_known_icon(display_text: str, value: RadialControllerMenuKnownIcon) -> RadialControllerMenuItem:
        ...
    def add_invoked(handler: winrt.windows.foundation.TypedEventHandler[RadialControllerMenuItem, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_invoked(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RadialControllerRotationChangedEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    rotation_delta_in_degrees: float
    is_button_pressed: bool
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerScreenContact(_winrt.winrt_base):
    ...
    bounds: winrt.windows.foundation.Rect
    position: winrt.windows.foundation.Point

class RadialControllerScreenContactContinuedEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    is_button_pressed: bool
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerScreenContactEndedEventArgs(_winrt.winrt_base):
    ...
    is_button_pressed: bool
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RadialControllerScreenContactStartedEventArgs(_winrt.winrt_base):
    ...
    contact: RadialControllerScreenContact
    is_button_pressed: bool
    simple_haptics_controller: winrt.windows.devices.haptics.SimpleHapticsController

class RightTappedEventArgs(_winrt.winrt_base):
    ...
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    contact_count: int

class SystemButtonEventController(_winrt.winrt_base):
    ...
    def create_for_dispatcher_queue(queue: winrt.windows.system.DispatcherQueue) -> SystemButtonEventController:
        ...
    def add_system_function_button_pressed(handler: winrt.windows.foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionButtonEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_system_function_button_pressed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_system_function_button_released(handler: winrt.windows.foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionButtonEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_system_function_button_released(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_system_function_lock_changed(handler: winrt.windows.foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionLockChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_system_function_lock_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_system_function_lock_indicator_changed(handler: winrt.windows.foundation.TypedEventHandler[SystemButtonEventController, SystemFunctionLockIndicatorChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_system_function_lock_indicator_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SystemFunctionButtonEventArgs(_winrt.winrt_base):
    ...
    handled: bool
    timestamp: int

class SystemFunctionLockChangedEventArgs(_winrt.winrt_base):
    ...
    handled: bool
    is_locked: bool
    timestamp: int

class SystemFunctionLockIndicatorChangedEventArgs(_winrt.winrt_base):
    ...
    handled: bool
    is_indicator_on: bool
    timestamp: int

class TappedEventArgs(_winrt.winrt_base):
    ...
    pointer_device_type: winrt.windows.devices.input.PointerDeviceType
    position: winrt.windows.foundation.Point
    tap_count: int
    contact_count: int

class IPointerPointTransform(_winrt.winrt_base):
    ...
    inverse: IPointerPointTransform
    def transform_bounds(rect: winrt.windows.foundation.Rect) -> winrt.windows.foundation.Rect:
        ...
    def try_transform(in_point: winrt.windows.foundation.Point) -> typing.Tuple[bool, winrt.windows.foundation.Point]:
        ...

