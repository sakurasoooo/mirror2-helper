# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.ui.uiautomation
except Exception:
    pass

class AutomationRemoteOperationStatus(enum.IntEnum):
    SUCCESS = 0
    MALFORMED_BYTECODE = 1
    INSTRUCTION_LIMIT_EXCEEDED = 2
    UNHANDLED_EXCEPTION = 3
    EXECUTION_FAILURE = 4

class AutomationAnnotationTypeRegistration(_winrt.winrt_base):
    ...

class AutomationRemoteOperationOperandId(_winrt.winrt_base):
    ...

class AutomationRemoteOperationResult(_winrt.winrt_base):
    ...
    error_location: int
    extended_error: winrt.windows.foundation.HResult
    status: AutomationRemoteOperationStatus
    def get_operand(operand_id: AutomationRemoteOperationOperandId) -> _winrt.winrt_base:
        ...
    def has_operand(operand_id: AutomationRemoteOperationOperandId) -> bool:
        ...

class CoreAutomationRegistrar(_winrt.winrt_base):
    ...
    def register_annotation_type(guid: uuid.UUID) -> AutomationAnnotationTypeRegistration:
        ...
    def unregister_annotation_type(registration: AutomationAnnotationTypeRegistration) -> None:
        ...

class CoreAutomationRemoteOperation(_winrt.winrt_base):
    ...
    def add_to_results(operand_id: AutomationRemoteOperationOperandId) -> None:
        ...
    def execute(bytecode_buffer: typing.Sequence[int]) -> AutomationRemoteOperationResult:
        ...
    def import_connection_bound_object(operand_id: AutomationRemoteOperationOperandId, connection_bound_object: winrt.windows.ui.uiautomation.AutomationConnectionBoundObject) -> None:
        ...
    def import_element(operand_id: AutomationRemoteOperationOperandId, element: winrt.windows.ui.uiautomation.AutomationElement) -> None:
        ...
    def import_text_range(operand_id: AutomationRemoteOperationOperandId, text_range: winrt.windows.ui.uiautomation.AutomationTextRange) -> None:
        ...
    def is_opcode_supported(opcode: int) -> bool:
        ...

class CoreAutomationRemoteOperationContext(_winrt.winrt_base):
    ...
    def get_operand(id: AutomationRemoteOperationOperandId) -> _winrt.winrt_base:
        ...
    def set_operand(id: AutomationRemoteOperationOperandId, operand: _winrt.winrt_base) -> None:
        ...
    def set_operand(id: AutomationRemoteOperationOperandId, operand: _winrt.winrt_base, operand_interface_id: uuid.UUID) -> None:
        ...

class RemoteAutomationClientSession(_winrt.winrt_base):
    ...
    session_id: uuid.UUID
    def create_window_async(remote_window_id: int, remote_process_id: int, parent_automation_element: _winrt.winrt_base) -> winrt.windows.foundation.IAsyncOperation[RemoteAutomationWindow]:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_connection_requested(handler: winrt.windows.foundation.TypedEventHandler[RemoteAutomationClientSession, RemoteAutomationConnectionRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_connection_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_disconnected(handler: winrt.windows.foundation.TypedEventHandler[RemoteAutomationClientSession, RemoteAutomationDisconnectedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_disconnected(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteAutomationConnectionRequestedEventArgs(_winrt.winrt_base):
    ...
    local_pipe_name: str
    remote_process_id: int

class RemoteAutomationDisconnectedEventArgs(_winrt.winrt_base):
    ...
    local_pipe_name: str

class RemoteAutomationServer(_winrt.winrt_base):
    ...
    def report_session(session_id: uuid.UUID) -> None:
        ...

class RemoteAutomationWindow(_winrt.winrt_base):
    ...
    automation_provider: _winrt.winrt_base
    def unregister_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class ICoreAutomationConnectionBoundObjectProvider(_winrt.winrt_base):
    ...
    is_com_threading_required: bool

class ICoreAutomationRemoteOperationExtensionProvider(_winrt.winrt_base):
    ...
    def call_extension(extension_id: uuid.UUID, context: CoreAutomationRemoteOperationContext, operand_ids: typing.Sequence[AutomationRemoteOperationOperandId]) -> None:
        ...
    def is_extension_supported(extension_id: uuid.UUID) -> bool:
        ...

