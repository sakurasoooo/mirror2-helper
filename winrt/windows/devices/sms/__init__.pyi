# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class CellularClass(enum.IntEnum):
    NONE = 0
    GSM = 1
    CDMA = 2

class SmsBroadcastType(enum.IntEnum):
    OTHER = 0
    CMAS_PRESIDENTIAL = 1
    CMAS_EXTREME = 2
    CMAS_SEVERE = 3
    CMAS_AMBER = 4
    CMAS_TEST = 5
    E_U_ALERT1 = 6
    E_U_ALERT2 = 7
    E_U_ALERT3 = 8
    E_U_ALERT_AMBER = 9
    E_U_ALERT_INFO = 10
    ETWS_EARTHQUAKE = 11
    ETWS_TSUNAMI = 12
    ETWS_TSUNAMI_AND_EARTHQUAKE = 13
    LAT_ALERT_LOCAL = 14

class SmsDataFormat(enum.IntEnum):
    UNKNOWN = 0
    CDMA_SUBMIT = 1
    GSM_SUBMIT = 2
    CDMA_DELIVER = 3
    GSM_DELIVER = 4

class SmsDeviceStatus(enum.IntEnum):
    OFF = 0
    READY = 1
    SIM_NOT_INSERTED = 2
    BAD_SIM = 3
    DEVICE_FAILURE = 4
    SUBSCRIPTION_NOT_ACTIVATED = 5
    DEVICE_LOCKED = 6
    DEVICE_BLOCKED = 7

class SmsEncoding(enum.IntEnum):
    UNKNOWN = 0
    OPTIMAL = 1
    SEVEN_BIT_ASCII = 2
    UNICODE = 3
    GSM_SEVEN_BIT = 4
    EIGHT_BIT = 5
    LATIN = 6
    KOREAN = 7
    I_A5 = 8
    SHIFT_JIS = 9
    LATIN_HEBREW = 10

class SmsFilterActionType(enum.IntEnum):
    ACCEPT_IMMEDIATELY = 0
    DROP = 1
    PEEK = 2
    ACCEPT = 3

class SmsGeographicalScope(enum.IntEnum):
    NONE = 0
    CELL_WITH_IMMEDIATE_DISPLAY = 1
    LOCATION_AREA = 2
    PLMN = 3
    CELL = 4

class SmsMessageClass(enum.IntEnum):
    NONE = 0
    CLASS0 = 1
    CLASS1 = 2
    CLASS2 = 3
    CLASS3 = 4

class SmsMessageType(enum.IntEnum):
    BINARY = 0
    TEXT = 1
    WAP = 2
    APP = 3
    BROADCAST = 4
    VOICEMAIL = 5
    STATUS = 6

class SmsModemErrorCode(enum.IntEnum):
    OTHER = 0
    MESSAGING_NETWORK_ERROR = 1
    SMS_OPERATION_NOT_SUPPORTED_BY_DEVICE = 2
    SMS_SERVICE_NOT_SUPPORTED_BY_NETWORK = 3
    DEVICE_FAILURE = 4
    MESSAGE_NOT_ENCODED_PROPERLY = 5
    MESSAGE_TOO_LARGE = 6
    DEVICE_NOT_READY = 7
    NETWORK_NOT_READY = 8
    INVALID_SMSC_ADDRESS = 9
    NETWORK_FAILURE = 10
    FIXED_DIALING_NUMBER_RESTRICTED = 11

class SmsEncodedLength(_winrt.winrt_base):
    ...

class SmsAppMessage(ISmsMessageBase, _winrt.winrt_base):
    ...
    protocol_id: int
    port_number: int
    is_delivery_notification_enabled: bool
    retry_attempt_count: int
    encoding: SmsEncoding
    body: str
    callback_number: str
    binary_body: winrt.windows.storage.streams.IBuffer
    to: str
    teleservice_id: int
    from: str
    timestamp: winrt.windows.foundation.DateTime
    cellular_class: CellularClass
    device_id: str
    message_class: SmsMessageClass
    message_type: SmsMessageType
    sim_icc_id: str

class SmsBroadcastMessage(ISmsMessageBase, _winrt.winrt_base):
    ...
    body: str
    broadcast_type: SmsBroadcastType
    channel: int
    geographical_scope: SmsGeographicalScope
    is_emergency_alert: bool
    is_user_popup_requested: bool
    message_code: int
    timestamp: winrt.windows.foundation.DateTime
    to: str
    update_number: int
    cellular_class: CellularClass
    device_id: str
    message_class: SmsMessageClass
    message_type: SmsMessageType
    sim_icc_id: str

class SmsDevice2(_winrt.winrt_base):
    ...
    smsc_address: str
    account_phone_number: str
    cellular_class: CellularClass
    device_id: str
    device_status: SmsDeviceStatus
    parent_device_id: str
    def calculate_length(message: ISmsMessageBase) -> SmsEncodedLength:
        ...
    def from_id(device_id: str) -> SmsDevice2:
        ...
    def from_parent_id(parent_device_id: str) -> SmsDevice2:
        ...
    def get_default() -> SmsDevice2:
        ...
    def get_device_selector() -> str:
        ...
    def send_message_and_get_result_async(message: ISmsMessageBase) -> winrt.windows.foundation.IAsyncOperation[SmsSendMessageResult]:
        ...
    def add_device_status_changed(event_handler: winrt.windows.foundation.TypedEventHandler[SmsDevice2, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_device_status_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SmsFilterRule(_winrt.winrt_base):
    ...
    cellular_class: CellularClass
    broadcast_channels: winrt.windows.foundation.collections.IVector[int]
    broadcast_types: winrt.windows.foundation.collections.IVector[SmsBroadcastType]
    device_ids: winrt.windows.foundation.collections.IVector[str]
    imsi_prefixes: winrt.windows.foundation.collections.IVector[str]
    message_type: SmsMessageType
    port_numbers: winrt.windows.foundation.collections.IVector[int]
    protocol_ids: winrt.windows.foundation.collections.IVector[int]
    sender_numbers: winrt.windows.foundation.collections.IVector[str]
    teleservice_ids: winrt.windows.foundation.collections.IVector[int]
    text_message_prefixes: winrt.windows.foundation.collections.IVector[str]
    wap_application_ids: winrt.windows.foundation.collections.IVector[str]
    wap_content_types: winrt.windows.foundation.collections.IVector[str]

class SmsFilterRules(_winrt.winrt_base):
    ...
    action_type: SmsFilterActionType
    rules: winrt.windows.foundation.collections.IVector[SmsFilterRule]

class SmsMessageReceivedTriggerDetails(_winrt.winrt_base):
    ...
    app_message: SmsAppMessage
    broadcast_message: SmsBroadcastMessage
    message_type: SmsMessageType
    status_message: SmsStatusMessage
    text_message: SmsTextMessage2
    voicemail_message: SmsVoicemailMessage
    wap_message: SmsWapMessage
    def accept() -> None:
        ...
    def drop() -> None:
        ...

class SmsMessageRegistration(_winrt.winrt_base):
    ...
    id: str
    all_registrations: winrt.windows.foundation.collections.IVectorView[SmsMessageRegistration]
    def register(id: str, filter_rules: SmsFilterRules) -> SmsMessageRegistration:
        ...
    def unregister() -> None:
        ...
    def add_message_received(event_handler: winrt.windows.foundation.TypedEventHandler[SmsMessageRegistration, SmsMessageReceivedTriggerDetails]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_message_received(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SmsSendMessageResult(_winrt.winrt_base):
    ...
    cellular_class: CellularClass
    is_error_transient: bool
    is_successful: bool
    message_reference_numbers: winrt.windows.foundation.collections.IVectorView[int]
    modem_error_code: SmsModemErrorCode
    network_cause_code: int
    transport_failure_cause: int

class SmsStatusMessage(ISmsMessageBase, _winrt.winrt_base):
    ...
    cellular_class: CellularClass
    device_id: str
    message_class: SmsMessageClass
    message_type: SmsMessageType
    sim_icc_id: str
    status: int
    body: str
    discharge_time: winrt.windows.foundation.DateTime
    from: str
    message_reference_number: int
    service_center_timestamp: winrt.windows.foundation.DateTime
    to: str

class SmsTextMessage2(ISmsMessageBase, _winrt.winrt_base):
    ...
    message_type: SmsMessageType
    device_id: str
    cellular_class: CellularClass
    message_class: SmsMessageClass
    sim_icc_id: str
    retry_attempt_count: int
    to: str
    is_delivery_notification_enabled: bool
    encoding: SmsEncoding
    callback_number: str
    body: str
    protocol_id: int
    from: str
    timestamp: winrt.windows.foundation.DateTime
    teleservice_id: int

class SmsVoicemailMessage(ISmsMessageBase, _winrt.winrt_base):
    ...
    cellular_class: CellularClass
    device_id: str
    message_class: SmsMessageClass
    message_type: SmsMessageType
    sim_icc_id: str
    body: str
    message_count: typing.Optional[int]
    timestamp: winrt.windows.foundation.DateTime
    to: str

class SmsWapMessage(ISmsMessageBase, _winrt.winrt_base):
    ...
    cellular_class: CellularClass
    device_id: str
    message_class: SmsMessageClass
    message_type: SmsMessageType
    sim_icc_id: str
    timestamp: winrt.windows.foundation.DateTime
    application_id: str
    binary_body: winrt.windows.storage.streams.IBuffer
    content_type: str
    from: str
    headers: winrt.windows.foundation.collections.IMap[str, str]
    to: str

class ISmsMessageBase(_winrt.winrt_base):
    ...
    cellular_class: CellularClass
    device_id: str
    message_class: SmsMessageClass
    message_type: SmsMessageType
    sim_icc_id: str

