# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.graphics.imaging
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class BarcodeScannerStatus(enum.IntEnum):
    ONLINE = 0
    OFF = 1
    OFFLINE = 2
    OFF_OR_OFFLINE = 3
    EXTENDED = 4

class BarcodeSymbologyDecodeLengthKind(enum.IntEnum):
    ANY_LENGTH = 0
    DISCRETE = 1
    RANGE = 2

class CashDrawerStatusKind(enum.IntEnum):
    ONLINE = 0
    OFF = 1
    OFFLINE = 2
    OFF_OR_OFFLINE = 3
    EXTENDED = 4

class LineDisplayCursorType(enum.IntEnum):
    NONE = 0
    BLOCK = 1
    HALF_BLOCK = 2
    UNDERLINE = 3
    REVERSE = 4
    OTHER = 5

class LineDisplayDescriptorState(enum.IntEnum):
    OFF = 0
    ON = 1
    BLINK = 2

class LineDisplayHorizontalAlignment(enum.IntEnum):
    LEFT = 0
    CENTER = 1
    RIGHT = 2

class LineDisplayMarqueeFormat(enum.IntEnum):
    NONE = 0
    WALK = 1
    PLACE = 2

class LineDisplayPowerStatus(enum.IntEnum):
    UNKNOWN = 0
    ONLINE = 1
    OFF = 2
    OFFLINE = 3
    OFF_OR_OFFLINE = 4

class LineDisplayScrollDirection(enum.IntEnum):
    UP = 0
    DOWN = 1
    LEFT = 2
    RIGHT = 3

class LineDisplayTextAttribute(enum.IntEnum):
    NORMAL = 0
    BLINK = 1
    REVERSE = 2
    REVERSE_BLINK = 3

class LineDisplayTextAttributeGranularity(enum.IntEnum):
    NOT_SUPPORTED = 0
    ENTIRE_DISPLAY = 1
    PER_CHARACTER = 2

class LineDisplayVerticalAlignment(enum.IntEnum):
    TOP = 0
    CENTER = 1
    BOTTOM = 2

class MagneticStripeReaderAuthenticationLevel(enum.IntEnum):
    NOT_SUPPORTED = 0
    OPTIONAL = 1
    REQUIRED = 2

class MagneticStripeReaderAuthenticationProtocol(enum.IntEnum):
    NONE = 0
    CHALLENGE_RESPONSE = 1

class MagneticStripeReaderErrorReportingType(enum.IntEnum):
    CARD_LEVEL = 0
    TRACK_LEVEL = 1

class MagneticStripeReaderStatus(enum.IntEnum):
    UNAUTHENTICATED = 0
    AUTHENTICATED = 1
    EXTENDED = 2

class MagneticStripeReaderTrackErrorType(enum.IntEnum):
    NONE = 0
    START_SENTINEL_ERROR = 1
    END_SENTINEL_ERROR = 2
    PARITY_ERROR = 3
    LRC_ERROR = 4
    UNKNOWN = -1

class MagneticStripeReaderTrackIds(enum.IntEnum):
    NONE = 0
    TRACK1 = 1
    TRACK2 = 2
    TRACK3 = 4
    TRACK4 = 8

class PosConnectionTypes(enum.IntFlag):
    LOCAL = 0x1
    I_P = 0x2
    BLUETOOTH = 0x4
    ALL = 0xffffffff

class PosPrinterAlignment(enum.IntEnum):
    LEFT = 0
    CENTER = 1
    RIGHT = 2

class PosPrinterBarcodeTextPosition(enum.IntEnum):
    NONE = 0
    ABOVE = 1
    BELOW = 2

class PosPrinterCartridgeSensors(enum.IntFlag):
    NONE = 0
    REMOVED = 0x1
    EMPTY = 0x2
    HEAD_CLEANING = 0x4
    NEAR_END = 0x8

class PosPrinterColorCapabilities(enum.IntFlag):
    NONE = 0
    PRIMARY = 0x1
    CUSTOM1 = 0x2
    CUSTOM2 = 0x4
    CUSTOM3 = 0x8
    CUSTOM4 = 0x10
    CUSTOM5 = 0x20
    CUSTOM6 = 0x40
    CYAN = 0x80
    MAGENTA = 0x100
    YELLOW = 0x200
    FULL = 0x400

class PosPrinterColorCartridge(enum.IntEnum):
    UNKNOWN = 0
    PRIMARY = 1
    CUSTOM1 = 2
    CUSTOM2 = 3
    CUSTOM3 = 4
    CUSTOM4 = 5
    CUSTOM5 = 6
    CUSTOM6 = 7
    CYAN = 8
    MAGENTA = 9
    YELLOW = 10

class PosPrinterLineDirection(enum.IntEnum):
    HORIZONTAL = 0
    VERTICAL = 1

class PosPrinterLineStyle(enum.IntEnum):
    SINGLE_SOLID = 0
    DOUBLE_SOLID = 1
    BROKEN = 2
    CHAIN = 3

class PosPrinterMapMode(enum.IntEnum):
    DOTS = 0
    TWIPS = 1
    ENGLISH = 2
    METRIC = 3

class PosPrinterMarkFeedCapabilities(enum.IntFlag):
    NONE = 0
    TO_TAKE_UP = 0x1
    TO_CUTTER = 0x2
    TO_CURRENT_TOP_OF_FORM = 0x4
    TO_NEXT_TOP_OF_FORM = 0x8

class PosPrinterMarkFeedKind(enum.IntEnum):
    TO_TAKE_UP = 0
    TO_CUTTER = 1
    TO_CURRENT_TOP_OF_FORM = 2
    TO_NEXT_TOP_OF_FORM = 3

class PosPrinterPrintSide(enum.IntEnum):
    UNKNOWN = 0
    SIDE1 = 1
    SIDE2 = 2

class PosPrinterRotation(enum.IntEnum):
    NORMAL = 0
    RIGHT90 = 1
    LEFT90 = 2
    ROTATE180 = 3

class PosPrinterRuledLineCapabilities(enum.IntFlag):
    NONE = 0
    HORIZONTAL = 0x1
    VERTICAL = 0x2

class PosPrinterStatusKind(enum.IntEnum):
    ONLINE = 0
    OFF = 1
    OFFLINE = 2
    OFF_OR_OFFLINE = 3
    EXTENDED = 4

class UnifiedPosErrorReason(enum.IntEnum):
    UNKNOWN_ERROR_REASON = 0
    NO_SERVICE = 1
    DISABLED = 2
    ILLEGAL = 3
    NO_HARDWARE = 4
    CLOSED = 5
    OFFLINE = 6
    FAILURE = 7
    TIMEOUT = 8
    BUSY = 9
    EXTENDED = 10

class UnifiedPosErrorSeverity(enum.IntEnum):
    UNKNOWN_ERROR_SEVERITY = 0
    WARNING = 1
    RECOVERABLE = 2
    UNRECOVERABLE = 3
    ASSISTANCE_REQUIRED = 4
    FATAL = 5

class UnifiedPosHealthCheckLevel(enum.IntEnum):
    UNKNOWN_HEALTH_CHECK_LEVEL = 0
    P_O_S_INTERNAL = 1
    EXTERNAL = 2
    INTERACTIVE = 3

class UnifiedPosPowerReportingType(enum.IntEnum):
    UNKNOWN_POWER_REPORTING_TYPE = 0
    STANDARD = 1
    ADVANCED = 2

class SizeUInt32(_winrt.winrt_base):
    ...

class BarcodeScanner(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    capabilities: BarcodeScannerCapabilities
    device_id: str
    video_device_id: str
    def check_health_async(level: UnifiedPosHealthCheckLevel) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def claim_scanner_async() -> winrt.windows.foundation.IAsyncOperation[ClaimedBarcodeScanner]:
        ...
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[BarcodeScanner]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[BarcodeScanner]:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(connection_types: PosConnectionTypes) -> str:
        ...
    def get_supported_profiles() -> winrt.windows.foundation.collections.IVectorView[str]:
        ...
    def get_supported_symbologies_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[int]]:
        ...
    def is_profile_supported(profile: str) -> bool:
        ...
    def is_symbology_supported_async(barcode_symbology: int) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def retrieve_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def add_status_updated(handler: winrt.windows.foundation.TypedEventHandler[BarcodeScanner, BarcodeScannerStatusUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_status_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class BarcodeScannerCapabilities(_winrt.winrt_base):
    ...
    is_image_preview_supported: bool
    is_statistics_reporting_supported: bool
    is_statistics_updating_supported: bool
    power_reporting_type: UnifiedPosPowerReportingType
    is_software_trigger_supported: bool
    is_video_preview_supported: bool

class BarcodeScannerDataReceivedEventArgs(_winrt.winrt_base):
    ...
    report: BarcodeScannerReport

class BarcodeScannerErrorOccurredEventArgs(_winrt.winrt_base):
    ...
    error_data: UnifiedPosErrorData
    is_retriable: bool
    partial_input_data: BarcodeScannerReport

class BarcodeScannerImagePreviewReceivedEventArgs(_winrt.winrt_base):
    ...
    preview: winrt.windows.storage.streams.IRandomAccessStreamWithContentType

class BarcodeScannerReport(_winrt.winrt_base):
    ...
    scan_data: winrt.windows.storage.streams.IBuffer
    scan_data_label: winrt.windows.storage.streams.IBuffer
    scan_data_type: int

class BarcodeScannerStatusUpdatedEventArgs(_winrt.winrt_base):
    ...
    extended_status: int
    status: BarcodeScannerStatus

class BarcodeSymbologies(_winrt.winrt_base):
    ...
    code11: int
    aus_post: int
    aztec: int
    can_post: int
    ccab: int
    ccc: int
    china_post: int
    codabar: int
    codablock128: int
    codablock_a: int
    codablock_f: int
    dutch_kix: int
    code128: int
    code16k: int
    code32: int
    code39: int
    code39_ex: int
    code49: int
    code93: int
    code93_ex: int
    data_code: int
    data_matrix: int
    us_post_net: int
    ean13: int
    ean13_add2: int
    ean13_add5: int
    ean8: int
    ean8_add2: int
    ean8_add5: int
    ean99: int
    ean99_add2: int
    ean99_add5: int
    eanv: int
    eanv_add2: int
    eanv_add5: int
    extended_base: int
    gs1128: int
    gs1128_coupon: int
    gs1_databar_type1: int
    gs1_databar_type2: int
    gs1_databar_type3: int
    han_xin: int
    info_mail: int
    isbn: int
    isbn_add5: int
    isbt: int
    ismn: int
    ismn_add2: int
    ismn_add5: int
    issn: int
    issn_add2: int
    issn_add5: int
    italian_post25: int
    italian_post39: int
    japan_post: int
    korean_post: int
    maxicode: int
    micr: int
    micro_pdf417: int
    micro_qr: int
    ms_tag: int
    msi: int
    ocr_a: int
    ocr_b: int
    pdf417: int
    plessey: int
    pzn: int
    qr: int
    sisac: int
    sweden_post: int
    telepen: int
    tf_dis: int
    tf_iata: int
    tf_ind: int
    tf_int: int
    tf_mat: int
    tf_std: int
    tlc39: int
    trioptic39: int
    ucc_ean128: int
    uk_post: int
    unknown: int
    upc_coupon: int
    upca: int
    upca_add2: int
    upca_add5: int
    upce: int
    upce_add2: int
    upce_add5: int
    us4_state_fics: int
    us_intelligent: int
    us_intelligent_pkg: int
    us_planet: int
    gs1_d_w_code: int
    def get_name(scan_data_type: int) -> str:
        ...

class BarcodeSymbologyAttributes(_winrt.winrt_base):
    ...
    is_check_digit_validation_enabled: bool
    is_check_digit_transmission_enabled: bool
    decode_length_kind: BarcodeSymbologyDecodeLengthKind
    decode_length2: int
    decode_length1: int
    is_check_digit_transmission_supported: bool
    is_check_digit_validation_supported: bool
    is_decode_length_supported: bool

class CashDrawer(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    capabilities: CashDrawerCapabilities
    device_id: str
    drawer_event_source: CashDrawerEventSource
    is_drawer_open: bool
    status: CashDrawerStatus
    def check_health_async(level: UnifiedPosHealthCheckLevel) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def claim_drawer_async() -> winrt.windows.foundation.IAsyncOperation[ClaimedCashDrawer]:
        ...
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[CashDrawer]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[CashDrawer]:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(connection_types: PosConnectionTypes) -> str:
        ...
    def get_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def add_status_updated(handler: winrt.windows.foundation.TypedEventHandler[CashDrawer, CashDrawerStatusUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_status_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CashDrawerCapabilities(_winrt.winrt_base):
    ...
    is_drawer_open_sensor_available: bool
    is_statistics_reporting_supported: bool
    is_statistics_updating_supported: bool
    is_status_multi_drawer_detect_supported: bool
    is_status_reporting_supported: bool
    power_reporting_type: UnifiedPosPowerReportingType

class CashDrawerCloseAlarm(_winrt.winrt_base):
    ...
    beep_frequency: int
    beep_duration: winrt.windows.foundation.TimeSpan
    beep_delay: winrt.windows.foundation.TimeSpan
    alarm_timeout: winrt.windows.foundation.TimeSpan
    def start_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_alarm_timeout_expired(handler: winrt.windows.foundation.TypedEventHandler[CashDrawerCloseAlarm, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_alarm_timeout_expired(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CashDrawerClosedEventArgs(ICashDrawerEventSourceEventArgs, _winrt.winrt_base):
    ...
    cash_drawer: CashDrawer

class CashDrawerEventSource(_winrt.winrt_base):
    ...
    def add_drawer_closed(handler: winrt.windows.foundation.TypedEventHandler[CashDrawerEventSource, CashDrawerClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_drawer_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_drawer_opened(handler: winrt.windows.foundation.TypedEventHandler[CashDrawerEventSource, CashDrawerOpenedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_drawer_opened(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CashDrawerOpenedEventArgs(ICashDrawerEventSourceEventArgs, _winrt.winrt_base):
    ...
    cash_drawer: CashDrawer

class CashDrawerStatus(_winrt.winrt_base):
    ...
    extended_status: int
    status_kind: CashDrawerStatusKind

class CashDrawerStatusUpdatedEventArgs(_winrt.winrt_base):
    ...
    status: CashDrawerStatus

class ClaimedBarcodeScanner(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    is_disabled_on_data_received: bool
    is_decode_data_enabled: bool
    device_id: str
    is_enabled: bool
    is_video_preview_shown_on_enable: bool
    def close() -> None:
        ...
    def disable_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def enable_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_symbology_attributes_async(barcode_symbology: int) -> winrt.windows.foundation.IAsyncOperation[BarcodeSymbologyAttributes]:
        ...
    def hide_video_preview() -> None:
        ...
    def reset_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def retain_device() -> None:
        ...
    def set_active_profile_async(profile: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_active_symbologies_async(symbologies: typing.Iterable[int]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_symbology_attributes_async(barcode_symbology: int, attributes: BarcodeSymbologyAttributes) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def show_video_preview_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def start_software_trigger_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_software_trigger_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def update_statistics_async(statistics: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, str]]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_data_received(handler: winrt.windows.foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_data_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_error_occurred(handler: winrt.windows.foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_error_occurred(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_image_preview_received(handler: winrt.windows.foundation.TypedEventHandler[ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_image_preview_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_release_device_requested(handler: winrt.windows.foundation.EventHandler[ClaimedBarcodeScanner]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_release_device_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_trigger_pressed(handler: winrt.windows.foundation.EventHandler[ClaimedBarcodeScanner]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_trigger_pressed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_trigger_released(handler: winrt.windows.foundation.EventHandler[ClaimedBarcodeScanner]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_trigger_released(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[ClaimedBarcodeScanner, ClaimedBarcodeScannerClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ClaimedBarcodeScannerClosedEventArgs(_winrt.winrt_base):
    ...

class ClaimedCashDrawer(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    close_alarm: CashDrawerCloseAlarm
    device_id: str
    is_drawer_open: bool
    is_enabled: bool
    def close() -> None:
        ...
    def disable_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def enable_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def open_drawer_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def reset_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def retain_device_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def update_statistics_async(statistics: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, str]]) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_release_device_requested(handler: winrt.windows.foundation.TypedEventHandler[ClaimedCashDrawer, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_release_device_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[ClaimedCashDrawer, ClaimedCashDrawerClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ClaimedCashDrawerClosedEventArgs(_winrt.winrt_base):
    ...

class ClaimedJournalPrinter(ICommonClaimedPosPrinterStation, _winrt.winrt_base):
    ...
    line_spacing: int
    line_height: int
    is_letter_quality: bool
    color_cartridge: PosPrinterColorCartridge
    characters_per_line: int
    is_cartridge_empty: bool
    is_cartridge_removed: bool
    is_cover_open: bool
    is_head_cleaning: bool
    is_paper_empty: bool
    is_paper_near_end: bool
    is_ready_to_print: bool
    line_width: int
    def create_job() -> JournalPrintJob:
        ...
    def validate_data(data: str) -> bool:
        ...

class ClaimedLineDisplay(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    capabilities: LineDisplayCapabilities
    default_window: LineDisplayWindow
    device_control_description: str
    device_control_version: str
    device_id: str
    device_service_version: str
    physical_device_description: str
    physical_device_name: str
    custom_glyphs: LineDisplayCustomGlyphs
    max_bitmap_size_in_pixels: winrt.windows.foundation.Size
    supported_character_sets: winrt.windows.foundation.collections.IVectorView[int]
    supported_screen_sizes_in_characters: winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.Size]
    def check_health_async(level: UnifiedPosHealthCheckLevel) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def check_power_status_async() -> winrt.windows.foundation.IAsyncOperation[LineDisplayPowerStatus]:
        ...
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[ClaimedLineDisplay]:
        ...
    def get_attributes() -> LineDisplayAttributes:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(connection_types: PosConnectionTypes) -> str:
        ...
    def get_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def retain_device() -> None:
        ...
    def try_clear_descriptors_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_create_window_async(viewport: winrt.windows.foundation.Rect, window_size: winrt.windows.foundation.Size) -> winrt.windows.foundation.IAsyncOperation[LineDisplayWindow]:
        ...
    def try_set_descriptor_async(descriptor: int, descriptor_state: LineDisplayDescriptorState) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_store_storage_file_bitmap_async(bitmap: winrt.windows.storage.StorageFile) -> winrt.windows.foundation.IAsyncOperation[LineDisplayStoredBitmap]:
        ...
    def try_store_storage_file_bitmap_async(bitmap: winrt.windows.storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment) -> winrt.windows.foundation.IAsyncOperation[LineDisplayStoredBitmap]:
        ...
    def try_store_storage_file_bitmap_async(bitmap: winrt.windows.storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, width_in_pixels: int) -> winrt.windows.foundation.IAsyncOperation[LineDisplayStoredBitmap]:
        ...
    def try_update_attributes_async(attributes: LineDisplayAttributes) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_release_device_requested(handler: winrt.windows.foundation.TypedEventHandler[ClaimedLineDisplay, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_release_device_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_status_updated(handler: winrt.windows.foundation.TypedEventHandler[ClaimedLineDisplay, LineDisplayStatusUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_status_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[ClaimedLineDisplay, ClaimedLineDisplayClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ClaimedLineDisplayClosedEventArgs(_winrt.winrt_base):
    ...

class ClaimedMagneticStripeReader(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    tracks_to_read: MagneticStripeReaderTrackIds
    is_transmit_sentinels_enabled: bool
    is_disabled_on_data_received: bool
    is_decode_data_enabled: bool
    data_encryption_algorithm: int
    device_id: str
    is_device_authenticated: bool
    is_enabled: bool
    def authenticate_device_async(response_token: typing.Sequence[int]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def de_authenticate_device_async(response_token: typing.Sequence[int]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def disable_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def enable_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def reset_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def retain_device() -> None:
        ...
    def retrieve_device_authentication_data_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def set_error_reporting_type(value: MagneticStripeReaderErrorReportingType) -> None:
        ...
    def update_key_async(key: str, key_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def update_statistics_async(statistics: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, str]]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_aamva_card_data_received(handler: winrt.windows.foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderAamvaCardDataReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_aamva_card_data_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_bank_card_data_received(handler: winrt.windows.foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderBankCardDataReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_bank_card_data_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_error_occurred(handler: winrt.windows.foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderErrorOccurredEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_error_occurred(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_release_device_requested(handler: winrt.windows.foundation.EventHandler[ClaimedMagneticStripeReader]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_release_device_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_vendor_specific_data_received(handler: winrt.windows.foundation.TypedEventHandler[ClaimedMagneticStripeReader, MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_vendor_specific_data_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[ClaimedMagneticStripeReader, ClaimedMagneticStripeReaderClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ClaimedMagneticStripeReaderClosedEventArgs(_winrt.winrt_base):
    ...

class ClaimedPosPrinter(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    map_mode: PosPrinterMapMode
    is_character_set_mapping_enabled: bool
    character_set: int
    device_id: str
    is_cover_open: bool
    is_enabled: bool
    journal: ClaimedJournalPrinter
    receipt: ClaimedReceiptPrinter
    slip: ClaimedSlipPrinter
    def close() -> None:
        ...
    def disable_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def enable_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def reset_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def retain_device_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def update_statistics_async(statistics: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, str]]) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_release_device_requested(handler: winrt.windows.foundation.TypedEventHandler[ClaimedPosPrinter, PosPrinterReleaseDeviceRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_release_device_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[ClaimedPosPrinter, ClaimedPosPrinterClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ClaimedPosPrinterClosedEventArgs(_winrt.winrt_base):
    ...

class ClaimedReceiptPrinter(ICommonClaimedPosPrinterStation, _winrt.winrt_base):
    ...
    lines_to_paper_cut: int
    page_size: winrt.windows.foundation.Size
    print_area: winrt.windows.foundation.Rect
    sideways_max_chars: int
    sideways_max_lines: int
    line_spacing: int
    line_height: int
    is_letter_quality: bool
    color_cartridge: PosPrinterColorCartridge
    characters_per_line: int
    is_cartridge_empty: bool
    is_cartridge_removed: bool
    is_cover_open: bool
    is_head_cleaning: bool
    is_paper_empty: bool
    is_paper_near_end: bool
    is_ready_to_print: bool
    line_width: int
    def create_job() -> ReceiptPrintJob:
        ...
    def validate_data(data: str) -> bool:
        ...

class ClaimedSlipPrinter(ICommonClaimedPosPrinterStation, _winrt.winrt_base):
    ...
    lines_near_end_to_end: int
    max_lines: int
    page_size: winrt.windows.foundation.Size
    print_area: winrt.windows.foundation.Rect
    print_side: PosPrinterPrintSide
    sideways_max_chars: int
    sideways_max_lines: int
    line_spacing: int
    line_height: int
    is_letter_quality: bool
    color_cartridge: PosPrinterColorCartridge
    characters_per_line: int
    is_cartridge_empty: bool
    is_cartridge_removed: bool
    is_cover_open: bool
    is_head_cleaning: bool
    is_paper_empty: bool
    is_paper_near_end: bool
    is_ready_to_print: bool
    line_width: int
    def change_print_side(print_side: PosPrinterPrintSide) -> None:
        ...
    def close_jaws() -> None:
        ...
    def create_job() -> SlipPrintJob:
        ...
    def insert_slip_async(timeout: winrt.windows.foundation.TimeSpan) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def open_jaws() -> None:
        ...
    def remove_slip_async(timeout: winrt.windows.foundation.TimeSpan) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def validate_data(data: str) -> bool:
        ...

class JournalPrintJob(IPosPrinterJob, _winrt.winrt_base):
    ...
    def execute_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def feed_paper_by_line(line_count: int) -> None:
        ...
    def feed_paper_by_map_mode_unit(distance: int) -> None:
        ...
    def print(data: str) -> None:
        ...
    def print(data: str, print_options: PosPrinterPrintOptions) -> None:
        ...
    def print_line() -> None:
        ...
    def print_line(data: str) -> None:
        ...

class JournalPrinterCapabilities(ICommonPosPrintStationCapabilities, _winrt.winrt_base):
    ...
    cartridge_sensors: PosPrinterCartridgeSensors
    color_cartridge_capabilities: PosPrinterColorCapabilities
    is_bold_supported: bool
    is_double_high_double_wide_print_supported: bool
    is_double_high_print_supported: bool
    is_double_wide_print_supported: bool
    is_dual_color_supported: bool
    is_italic_supported: bool
    is_paper_empty_sensor_supported: bool
    is_paper_near_end_sensor_supported: bool
    is_printer_present: bool
    is_underline_supported: bool
    supported_characters_per_line: winrt.windows.foundation.collections.IVectorView[int]
    is_reverse_paper_feed_by_line_supported: bool
    is_reverse_paper_feed_by_map_mode_unit_supported: bool
    is_reverse_video_supported: bool
    is_strikethrough_supported: bool
    is_subscript_supported: bool
    is_superscript_supported: bool

class LineDisplay(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    capabilities: LineDisplayCapabilities
    device_control_description: str
    device_control_version: str
    device_id: str
    device_service_version: str
    physical_device_description: str
    physical_device_name: str
    statistics_category_selector: LineDisplayStatisticsCategorySelector
    def check_power_status_async() -> winrt.windows.foundation.IAsyncOperation[LineDisplayPowerStatus]:
        ...
    def claim_async() -> winrt.windows.foundation.IAsyncOperation[ClaimedLineDisplay]:
        ...
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[LineDisplay]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[LineDisplay]:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(connection_types: PosConnectionTypes) -> str:
        ...

class LineDisplayAttributes(_winrt.winrt_base):
    ...
    screen_size_in_characters: winrt.windows.foundation.Size
    is_power_notify_enabled: bool
    is_character_set_mapping_enabled: bool
    current_window: LineDisplayWindow
    character_set: int
    brightness: int
    blink_rate: winrt.windows.foundation.TimeSpan

class LineDisplayCapabilities(_winrt.winrt_base):
    ...
    can_blink: LineDisplayTextAttributeGranularity
    can_change_blink_rate: bool
    can_change_screen_size: bool
    can_display_bitmaps: bool
    can_display_custom_glyphs: bool
    can_map_character_sets: bool
    can_read_character_at_cursor: bool
    can_reverse: LineDisplayTextAttributeGranularity
    is_brightness_supported: bool
    is_cursor_supported: bool
    is_horizontal_marquee_supported: bool
    is_inter_character_wait_supported: bool
    is_statistics_reporting_supported: bool
    is_statistics_updating_supported: bool
    is_vertical_marquee_supported: bool
    power_reporting_type: UnifiedPosPowerReportingType
    supported_descriptors: int
    supported_windows: int

class LineDisplayCursor(_winrt.winrt_base):
    ...
    can_customize: bool
    is_blink_supported: bool
    is_block_supported: bool
    is_half_block_supported: bool
    is_other_supported: bool
    is_reverse_supported: bool
    is_underline_supported: bool
    def get_attributes() -> LineDisplayCursorAttributes:
        ...
    def try_update_attributes_async(attributes: LineDisplayCursorAttributes) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class LineDisplayCursorAttributes(_winrt.winrt_base):
    ...
    position: winrt.windows.foundation.Point
    is_blink_enabled: bool
    is_auto_advance_enabled: bool
    cursor_type: LineDisplayCursorType

class LineDisplayCustomGlyphs(_winrt.winrt_base):
    ...
    size_in_pixels: winrt.windows.foundation.Size
    supported_glyph_codes: winrt.windows.foundation.collections.IVectorView[int]
    def try_redefine_async(glyph_code: int, glyph_data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class LineDisplayMarquee(_winrt.winrt_base):
    ...
    scroll_wait_interval: winrt.windows.foundation.TimeSpan
    repeat_wait_interval: winrt.windows.foundation.TimeSpan
    format: LineDisplayMarqueeFormat
    def try_start_scrolling_async(direction: LineDisplayScrollDirection) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_stop_scrolling_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class LineDisplayStatisticsCategorySelector(_winrt.winrt_base):
    ...
    all_statistics: str
    manufacturer_statistics: str
    unified_pos_statistics: str

class LineDisplayStatusUpdatedEventArgs(_winrt.winrt_base):
    ...
    status: LineDisplayPowerStatus

class LineDisplayStoredBitmap(_winrt.winrt_base):
    ...
    escape_sequence: str
    def try_delete_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class LineDisplayWindow(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    inter_character_wait_interval: winrt.windows.foundation.TimeSpan
    size_in_characters: winrt.windows.foundation.Size
    cursor: LineDisplayCursor
    marquee: LineDisplayMarquee
    def close() -> None:
        ...
    def read_character_at_cursor_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def try_clear_text_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_storage_file_bitmap_at_cursor_async(bitmap: winrt.windows.storage.StorageFile) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_storage_file_bitmap_at_cursor_async(bitmap: winrt.windows.storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_storage_file_bitmap_at_cursor_async(bitmap: winrt.windows.storage.StorageFile, horizontal_alignment: LineDisplayHorizontalAlignment, vertical_alignment: LineDisplayVerticalAlignment, width_in_pixels: int) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_storage_file_bitmap_at_point_async(bitmap: winrt.windows.storage.StorageFile, offset_in_pixels: winrt.windows.foundation.Point) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_storage_file_bitmap_at_point_async(bitmap: winrt.windows.storage.StorageFile, offset_in_pixels: winrt.windows.foundation.Point, width_in_pixels: int) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_stored_bitmap_at_cursor_async(bitmap: LineDisplayStoredBitmap) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_text_async(text: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_text_async(text: str, display_attribute: LineDisplayTextAttribute) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_display_text_async(text: str, display_attribute: LineDisplayTextAttribute, start_position: winrt.windows.foundation.Point) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_refresh_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_scroll_text_async(direction: LineDisplayScrollDirection, number_of_columns_or_rows: int) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class MagneticStripeReader(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    capabilities: MagneticStripeReaderCapabilities
    device_authentication_protocol: MagneticStripeReaderAuthenticationProtocol
    device_id: str
    supported_card_types: int
    def check_health_async(level: UnifiedPosHealthCheckLevel) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def claim_reader_async() -> winrt.windows.foundation.IAsyncOperation[ClaimedMagneticStripeReader]:
        ...
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[MagneticStripeReader]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[MagneticStripeReader]:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(connection_types: PosConnectionTypes) -> str:
        ...
    def get_error_reporting_type() -> MagneticStripeReaderErrorReportingType:
        ...
    def retrieve_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def add_status_updated(handler: winrt.windows.foundation.TypedEventHandler[MagneticStripeReader, MagneticStripeReaderStatusUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_status_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MagneticStripeReaderAamvaCardDataReceivedEventArgs(_winrt.winrt_base):
    ...
    address: str
    birth_date: str
    city: str
    class: str
    endorsements: str
    expiration_date: str
    eye_color: str
    first_name: str
    gender: str
    hair_color: str
    height: str
    license_number: str
    postal_code: str
    report: MagneticStripeReaderReport
    restrictions: str
    state: str
    suffix: str
    surname: str
    weight: str

class MagneticStripeReaderBankCardDataReceivedEventArgs(_winrt.winrt_base):
    ...
    account_number: str
    expiration_date: str
    first_name: str
    middle_initial: str
    report: MagneticStripeReaderReport
    service_code: str
    suffix: str
    surname: str
    title: str

class MagneticStripeReaderCapabilities(_winrt.winrt_base):
    ...
    authentication_level: MagneticStripeReaderAuthenticationLevel
    card_authentication: str
    is_iso_supported: bool
    is_jis_one_supported: bool
    is_jis_two_supported: bool
    is_statistics_reporting_supported: bool
    is_statistics_updating_supported: bool
    is_track_data_masking_supported: bool
    is_transmit_sentinels_supported: bool
    power_reporting_type: UnifiedPosPowerReportingType
    supported_encryption_algorithms: int

class MagneticStripeReaderCardTypes(_winrt.winrt_base):
    ...
    aamva: int
    bank: int
    extended_base: int
    unknown: int

class MagneticStripeReaderEncryptionAlgorithms(_winrt.winrt_base):
    ...
    extended_base: int
    none: int
    triple_des_dukpt: int

class MagneticStripeReaderErrorOccurredEventArgs(_winrt.winrt_base):
    ...
    error_data: UnifiedPosErrorData
    partial_input_data: MagneticStripeReaderReport
    track1_status: MagneticStripeReaderTrackErrorType
    track2_status: MagneticStripeReaderTrackErrorType
    track3_status: MagneticStripeReaderTrackErrorType
    track4_status: MagneticStripeReaderTrackErrorType

class MagneticStripeReaderReport(_winrt.winrt_base):
    ...
    additional_security_information: winrt.windows.storage.streams.IBuffer
    card_authentication_data: winrt.windows.storage.streams.IBuffer
    card_authentication_data_length: int
    card_type: int
    properties: winrt.windows.foundation.collections.IMapView[str, str]
    track1: MagneticStripeReaderTrackData
    track2: MagneticStripeReaderTrackData
    track3: MagneticStripeReaderTrackData
    track4: MagneticStripeReaderTrackData

class MagneticStripeReaderStatusUpdatedEventArgs(_winrt.winrt_base):
    ...
    extended_status: int
    status: MagneticStripeReaderStatus

class MagneticStripeReaderTrackData(_winrt.winrt_base):
    ...
    data: winrt.windows.storage.streams.IBuffer
    discretionary_data: winrt.windows.storage.streams.IBuffer
    encrypted_data: winrt.windows.storage.streams.IBuffer

class MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs(_winrt.winrt_base):
    ...
    report: MagneticStripeReaderReport

class PosPrinter(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    capabilities: PosPrinterCapabilities
    device_id: str
    status: PosPrinterStatus
    supported_character_sets: winrt.windows.foundation.collections.IVectorView[int]
    supported_type_faces: winrt.windows.foundation.collections.IVectorView[str]
    supported_barcode_symbologies: winrt.windows.foundation.collections.IVectorView[int]
    def check_health_async(level: UnifiedPosHealthCheckLevel) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def claim_printer_async() -> winrt.windows.foundation.IAsyncOperation[ClaimedPosPrinter]:
        ...
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[PosPrinter]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[PosPrinter]:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(connection_types: PosConnectionTypes) -> str:
        ...
    def get_font_property(typeface: str) -> PosPrinterFontProperty:
        ...
    def get_statistics_async(statistics_categories: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def add_status_updated(handler: winrt.windows.foundation.TypedEventHandler[PosPrinter, PosPrinterStatusUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_status_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PosPrinterCapabilities(_winrt.winrt_base):
    ...
    can_map_character_set: bool
    default_character_set: int
    has_cover_sensor: bool
    is_statistics_reporting_supported: bool
    is_statistics_updating_supported: bool
    is_transaction_supported: bool
    journal: JournalPrinterCapabilities
    power_reporting_type: UnifiedPosPowerReportingType
    receipt: ReceiptPrinterCapabilities
    slip: SlipPrinterCapabilities

class PosPrinterCharacterSetIds(_winrt.winrt_base):
    ...
    ansi: int
    ascii: int
    utf16_l_e: int

class PosPrinterFontProperty(_winrt.winrt_base):
    ...
    character_sizes: winrt.windows.foundation.collections.IVectorView[SizeUInt32]
    is_scalable_to_any_size: bool
    type_face: str

class PosPrinterPrintOptions(_winrt.winrt_base):
    ...
    underline: bool
    type_face: str
    superscript: bool
    subscript: bool
    strikethrough: bool
    reverse_video: bool
    italic: bool
    double_wide: bool
    double_high: bool
    character_set: int
    character_height: int
    bold: bool
    alignment: PosPrinterAlignment

class PosPrinterReleaseDeviceRequestedEventArgs(_winrt.winrt_base):
    ...

class PosPrinterStatus(_winrt.winrt_base):
    ...
    extended_status: int
    status_kind: PosPrinterStatusKind

class PosPrinterStatusUpdatedEventArgs(_winrt.winrt_base):
    ...
    status: PosPrinterStatus

class ReceiptPrintJob(IReceiptOrSlipJob, IPosPrinterJob, _winrt.winrt_base):
    ...
    def cut_paper() -> None:
        ...
    def cut_paper(percentage: float) -> None:
        ...
    def draw_ruled_line(position_list: str, line_direction: PosPrinterLineDirection, line_width: int, line_style: PosPrinterLineStyle, line_color: int) -> None:
        ...
    def execute_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def feed_paper_by_line(line_count: int) -> None:
        ...
    def feed_paper_by_map_mode_unit(distance: int) -> None:
        ...
    def mark_feed(kind: PosPrinterMarkFeedKind) -> None:
        ...
    def print(data: str) -> None:
        ...
    def print(data: str, print_options: PosPrinterPrintOptions) -> None:
        ...
    def print_barcode(data: str, symbology: int, height: int, width: int, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment) -> None:
        ...
    def print_barcode_custom_align(data: str, symbology: int, height: int, width: int, text_position: PosPrinterBarcodeTextPosition, alignment_distance: int) -> None:
        ...
    def print_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment) -> None:
        ...
    def print_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment, width: int) -> None:
        ...
    def print_custom_aligned_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int) -> None:
        ...
    def print_custom_aligned_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int, width: int) -> None:
        ...
    def print_line() -> None:
        ...
    def print_line(data: str) -> None:
        ...
    def print_saved_bitmap(bitmap_number: int) -> None:
        ...
    def set_barcode_rotation(value: PosPrinterRotation) -> None:
        ...
    def set_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment) -> None:
        ...
    def set_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment, width: int) -> None:
        ...
    def set_custom_aligned_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int) -> None:
        ...
    def set_custom_aligned_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int, width: int) -> None:
        ...
    def set_print_area(value: winrt.windows.foundation.Rect) -> None:
        ...
    def set_print_rotation(value: PosPrinterRotation, include_bitmaps: bool) -> None:
        ...
    def stamp_paper() -> None:
        ...

class ReceiptPrinterCapabilities(ICommonReceiptSlipCapabilities, ICommonPosPrintStationCapabilities, _winrt.winrt_base):
    ...
    cartridge_sensors: PosPrinterCartridgeSensors
    color_cartridge_capabilities: PosPrinterColorCapabilities
    is_bold_supported: bool
    is_double_high_double_wide_print_supported: bool
    is_double_high_print_supported: bool
    is_double_wide_print_supported: bool
    is_dual_color_supported: bool
    is_italic_supported: bool
    is_paper_empty_sensor_supported: bool
    is_paper_near_end_sensor_supported: bool
    is_printer_present: bool
    is_underline_supported: bool
    supported_characters_per_line: winrt.windows.foundation.collections.IVectorView[int]
    is180_rotation_supported: bool
    is_barcode_supported: bool
    is_bitmap_supported: bool
    is_left90_rotation_supported: bool
    is_print_area_supported: bool
    is_right90_rotation_supported: bool
    ruled_line_capabilities: PosPrinterRuledLineCapabilities
    supported_barcode_rotations: winrt.windows.foundation.collections.IVectorView[PosPrinterRotation]
    supported_bitmap_rotations: winrt.windows.foundation.collections.IVectorView[PosPrinterRotation]
    can_cut_paper: bool
    is_stamp_supported: bool
    mark_feed_capabilities: PosPrinterMarkFeedCapabilities
    is_reverse_paper_feed_by_line_supported: bool
    is_reverse_paper_feed_by_map_mode_unit_supported: bool
    is_reverse_video_supported: bool
    is_strikethrough_supported: bool
    is_subscript_supported: bool
    is_superscript_supported: bool

class SlipPrintJob(IReceiptOrSlipJob, IPosPrinterJob, _winrt.winrt_base):
    ...
    def draw_ruled_line(position_list: str, line_direction: PosPrinterLineDirection, line_width: int, line_style: PosPrinterLineStyle, line_color: int) -> None:
        ...
    def execute_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def feed_paper_by_line(line_count: int) -> None:
        ...
    def feed_paper_by_map_mode_unit(distance: int) -> None:
        ...
    def print(data: str) -> None:
        ...
    def print(data: str, print_options: PosPrinterPrintOptions) -> None:
        ...
    def print_barcode(data: str, symbology: int, height: int, width: int, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment) -> None:
        ...
    def print_barcode_custom_align(data: str, symbology: int, height: int, width: int, text_position: PosPrinterBarcodeTextPosition, alignment_distance: int) -> None:
        ...
    def print_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment) -> None:
        ...
    def print_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment, width: int) -> None:
        ...
    def print_custom_aligned_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int) -> None:
        ...
    def print_custom_aligned_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int, width: int) -> None:
        ...
    def print_line() -> None:
        ...
    def print_line(data: str) -> None:
        ...
    def print_saved_bitmap(bitmap_number: int) -> None:
        ...
    def set_barcode_rotation(value: PosPrinterRotation) -> None:
        ...
    def set_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment) -> None:
        ...
    def set_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment, width: int) -> None:
        ...
    def set_custom_aligned_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int) -> None:
        ...
    def set_custom_aligned_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int, width: int) -> None:
        ...
    def set_print_area(value: winrt.windows.foundation.Rect) -> None:
        ...
    def set_print_rotation(value: PosPrinterRotation, include_bitmaps: bool) -> None:
        ...

class SlipPrinterCapabilities(ICommonReceiptSlipCapabilities, ICommonPosPrintStationCapabilities, _winrt.winrt_base):
    ...
    cartridge_sensors: PosPrinterCartridgeSensors
    color_cartridge_capabilities: PosPrinterColorCapabilities
    is_bold_supported: bool
    is_double_high_double_wide_print_supported: bool
    is_double_high_print_supported: bool
    is_double_wide_print_supported: bool
    is_dual_color_supported: bool
    is_italic_supported: bool
    is_paper_empty_sensor_supported: bool
    is_paper_near_end_sensor_supported: bool
    is_printer_present: bool
    is_underline_supported: bool
    supported_characters_per_line: winrt.windows.foundation.collections.IVectorView[int]
    is180_rotation_supported: bool
    is_barcode_supported: bool
    is_bitmap_supported: bool
    is_left90_rotation_supported: bool
    is_print_area_supported: bool
    is_right90_rotation_supported: bool
    ruled_line_capabilities: PosPrinterRuledLineCapabilities
    supported_barcode_rotations: winrt.windows.foundation.collections.IVectorView[PosPrinterRotation]
    supported_bitmap_rotations: winrt.windows.foundation.collections.IVectorView[PosPrinterRotation]
    is_both_sides_printing_supported: bool
    is_full_length_supported: bool
    is_reverse_paper_feed_by_line_supported: bool
    is_reverse_paper_feed_by_map_mode_unit_supported: bool
    is_reverse_video_supported: bool
    is_strikethrough_supported: bool
    is_subscript_supported: bool
    is_superscript_supported: bool

class UnifiedPosErrorData(_winrt.winrt_base):
    ...
    extended_reason: int
    message: str
    reason: UnifiedPosErrorReason
    severity: UnifiedPosErrorSeverity

class ICashDrawerEventSourceEventArgs(_winrt.winrt_base):
    ...
    cash_drawer: CashDrawer

class ICommonClaimedPosPrinterStation(_winrt.winrt_base):
    ...
    characters_per_line: int
    color_cartridge: PosPrinterColorCartridge
    is_cartridge_empty: bool
    is_cartridge_removed: bool
    is_cover_open: bool
    is_head_cleaning: bool
    is_letter_quality: bool
    is_paper_empty: bool
    is_paper_near_end: bool
    is_ready_to_print: bool
    line_height: int
    line_spacing: int
    line_width: int
    def validate_data(data: str) -> bool:
        ...

class ICommonPosPrintStationCapabilities(_winrt.winrt_base):
    ...
    cartridge_sensors: PosPrinterCartridgeSensors
    color_cartridge_capabilities: PosPrinterColorCapabilities
    is_bold_supported: bool
    is_double_high_double_wide_print_supported: bool
    is_double_high_print_supported: bool
    is_double_wide_print_supported: bool
    is_dual_color_supported: bool
    is_italic_supported: bool
    is_paper_empty_sensor_supported: bool
    is_paper_near_end_sensor_supported: bool
    is_printer_present: bool
    is_underline_supported: bool
    supported_characters_per_line: winrt.windows.foundation.collections.IVectorView[int]

class ICommonReceiptSlipCapabilities(ICommonPosPrintStationCapabilities, _winrt.winrt_base):
    ...
    is180_rotation_supported: bool
    is_barcode_supported: bool
    is_bitmap_supported: bool
    is_left90_rotation_supported: bool
    is_print_area_supported: bool
    is_right90_rotation_supported: bool
    ruled_line_capabilities: PosPrinterRuledLineCapabilities
    supported_barcode_rotations: winrt.windows.foundation.collections.IVectorView[PosPrinterRotation]
    supported_bitmap_rotations: winrt.windows.foundation.collections.IVectorView[PosPrinterRotation]
    cartridge_sensors: PosPrinterCartridgeSensors
    color_cartridge_capabilities: PosPrinterColorCapabilities
    is_bold_supported: bool
    is_double_high_double_wide_print_supported: bool
    is_double_high_print_supported: bool
    is_double_wide_print_supported: bool
    is_dual_color_supported: bool
    is_italic_supported: bool
    is_paper_empty_sensor_supported: bool
    is_paper_near_end_sensor_supported: bool
    is_printer_present: bool
    is_underline_supported: bool
    supported_characters_per_line: winrt.windows.foundation.collections.IVectorView[int]

class IPosPrinterJob(_winrt.winrt_base):
    ...
    def execute_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def print(data: str) -> None:
        ...
    def print_line() -> None:
        ...
    def print_line(data: str) -> None:
        ...

class IReceiptOrSlipJob(IPosPrinterJob, _winrt.winrt_base):
    ...
    def draw_ruled_line(position_list: str, line_direction: PosPrinterLineDirection, line_width: int, line_style: PosPrinterLineStyle, line_color: int) -> None:
        ...
    def print_barcode(data: str, symbology: int, height: int, width: int, text_position: PosPrinterBarcodeTextPosition, alignment: PosPrinterAlignment) -> None:
        ...
    def print_barcode_custom_align(data: str, symbology: int, height: int, width: int, text_position: PosPrinterBarcodeTextPosition, alignment_distance: int) -> None:
        ...
    def print_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment) -> None:
        ...
    def print_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment, width: int) -> None:
        ...
    def print_custom_aligned_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int) -> None:
        ...
    def print_custom_aligned_bitmap(bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int, width: int) -> None:
        ...
    def print_saved_bitmap(bitmap_number: int) -> None:
        ...
    def set_barcode_rotation(value: PosPrinterRotation) -> None:
        ...
    def set_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment) -> None:
        ...
    def set_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment: PosPrinterAlignment, width: int) -> None:
        ...
    def set_custom_aligned_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int) -> None:
        ...
    def set_custom_aligned_bitmap(bitmap_number: int, bitmap: winrt.windows.graphics.imaging.BitmapFrame, alignment_distance: int, width: int) -> None:
        ...
    def set_print_area(value: winrt.windows.foundation.Rect) -> None:
        ...
    def set_print_rotation(value: PosPrinterRotation, include_bitmaps: bool) -> None:
        ...
    def execute_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def print(data: str) -> None:
        ...
    def print_line() -> None:
        ...
    def print_line(data: str) -> None:
        ...

