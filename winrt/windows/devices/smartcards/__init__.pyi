# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.security.cryptography.core
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class SmartCardActivationPolicyChangeResult(enum.IntEnum):
    DENIED = 0
    ALLOWED = 1

class SmartCardAppletIdGroupActivationPolicy(enum.IntEnum):
    DISABLED = 0
    FOREGROUND_OVERRIDE = 1
    ENABLED = 2

class SmartCardAutomaticResponseStatus(enum.IntEnum):
    NONE = 0
    SUCCESS = 1
    UNKNOWN_ERROR = 2

class SmartCardCryptogramAlgorithm(enum.IntEnum):
    NONE = 0
    CBC_MAC = 1
    CVC3_UMD = 2
    DECIMALIZED_MSD = 3
    CVC3_M_D = 4
    SHA1 = 5
    SIGNED_DYNAMIC_APPLICATION_DATA = 6
    RSA_PKCS1 = 7
    SHA256_HMAC = 8

class SmartCardCryptogramGeneratorOperationStatus(enum.IntEnum):
    SUCCESS = 0
    AUTHORIZATION_FAILED = 1
    AUTHORIZATION_CANCELED = 2
    AUTHORIZATION_REQUIRED = 3
    CRYPTOGRAM_MATERIAL_PACKAGE_STORAGE_KEY_EXISTS = 4
    NO_CRYPTOGRAM_MATERIAL_PACKAGE_STORAGE_KEY = 5
    NO_CRYPTOGRAM_MATERIAL_PACKAGE = 6
    UNSUPPORTED_CRYPTOGRAM_MATERIAL_PACKAGE = 7
    UNKNOWN_CRYPTOGRAM_MATERIAL_NAME = 8
    INVALID_CRYPTOGRAM_MATERIAL_USAGE = 9
    APDU_RESPONSE_NOT_SENT = 10
    OTHER_ERROR = 11
    VALIDATION_FAILED = 12
    NOT_SUPPORTED = 13

class SmartCardCryptogramMaterialPackageConfirmationResponseFormat(enum.IntEnum):
    NONE = 0
    VISA_HMAC = 1

class SmartCardCryptogramMaterialPackageFormat(enum.IntEnum):
    NONE = 0
    JWE_RSA_PKI = 1

class SmartCardCryptogramMaterialProtectionMethod(enum.IntEnum):
    NONE = 0
    WHITE_BOXING = 1

class SmartCardCryptogramMaterialType(enum.IntEnum):
    NONE = 0
    STATIC_DATA_AUTHENTICATION = 1
    TRIPLE_DES112 = 2
    AES = 3
    RSA_PKCS1 = 4

class SmartCardCryptogramPlacementOptions(enum.IntFlag):
    NONE = 0
    UNITS_ARE_IN_NIBBLES = 0x1
    CHAIN_OUTPUT = 0x2

class SmartCardCryptogramStorageKeyAlgorithm(enum.IntEnum):
    NONE = 0
    RSA2048 = 1

class SmartCardCryptogramStorageKeyCapabilities(enum.IntFlag):
    NONE = 0
    HARDWARE_PROTECTION = 0x1
    UNLOCK_PROMPT = 0x2

class SmartCardCryptographicKeyAttestationStatus(enum.IntEnum):
    NO_ATTESTATION = 0
    SOFTWARE_KEY_WITHOUT_TPM = 1
    SOFTWARE_KEY_WITH_TPM = 2
    TPM_KEY_UNKNOWN_ATTESTATION_STATUS = 3
    TPM_KEY_WITHOUT_ATTESTATION_CAPABILITY = 4
    TPM_KEY_WITH_TEMPORARY_ATTESTATION_FAILURE = 5
    TPM_KEY_WITH_LONG_TERM_ATTESTATION_FAILURE = 6
    TPM_KEY_WITH_ATTESTATION = 7

class SmartCardEmulationCategory(enum.IntEnum):
    OTHER = 0
    PAYMENT = 1

class SmartCardEmulationType(enum.IntEnum):
    HOST = 0
    UICC = 1
    EMBEDDED_S_E = 2

class SmartCardEmulatorConnectionDeactivatedReason(enum.IntEnum):
    CONNECTION_LOST = 0
    CONNECTION_REDIRECTED = 1

class SmartCardEmulatorConnectionSource(enum.IntEnum):
    UNKNOWN = 0
    NFC_READER = 1

class SmartCardEmulatorEnablementPolicy(enum.IntEnum):
    NEVER = 0
    ALWAYS = 1
    SCREEN_ON = 2
    SCREEN_UNLOCKED = 3

class SmartCardLaunchBehavior(enum.IntEnum):
    DEFAULT = 0
    ABOVE_LOCK = 1

class SmartCardPinCharacterPolicyOption(enum.IntEnum):
    ALLOW = 0
    REQUIRE_AT_LEAST_ONE = 1
    DISALLOW = 2

class SmartCardReaderKind(enum.IntEnum):
    ANY = 0
    GENERIC = 1
    TPM = 2
    NFC = 3
    UICC = 4
    EMBEDDED_S_E = 5

class SmartCardReaderStatus(enum.IntEnum):
    DISCONNECTED = 0
    READY = 1
    EXCLUSIVE = 2

class SmartCardStatus(enum.IntEnum):
    DISCONNECTED = 0
    READY = 1
    SHARED = 2
    EXCLUSIVE = 3
    UNRESPONSIVE = 4

class SmartCardTriggerType(enum.IntEnum):
    EMULATOR_TRANSACTION = 0
    EMULATOR_NEAR_FIELD_ENTRY = 1
    EMULATOR_NEAR_FIELD_EXIT = 2
    EMULATOR_HOST_APPLICATION_ACTIVATED = 3
    EMULATOR_APPLET_ID_GROUP_REGISTRATION_CHANGED = 4
    READER_CARD_ADDED = 5

class SmartCardUnlockPromptingBehavior(enum.IntEnum):
    ALLOW_UNLOCK_PROMPT = 0
    REQUIRE_UNLOCK_PROMPT = 1
    PREVENT_UNLOCK_PROMPT = 2

class CardAddedEventArgs(_winrt.winrt_base):
    ...
    smart_card: SmartCard

class CardRemovedEventArgs(_winrt.winrt_base):
    ...
    smart_card: SmartCard

class KnownSmartCardAppletIds(_winrt.winrt_base):
    ...
    payment_system_environment: winrt.windows.storage.streams.IBuffer
    proximity_payment_system_environment: winrt.windows.storage.streams.IBuffer

class SmartCard(_winrt.winrt_base):
    ...
    reader: SmartCardReader
    def connect_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardConnection]:
        ...
    def get_answer_to_reset_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def get_status_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardStatus]:
        ...

class SmartCardAppletIdGroup(_winrt.winrt_base):
    ...
    smart_card_emulation_type: SmartCardEmulationType
    smart_card_emulation_category: SmartCardEmulationCategory
    display_name: str
    automatic_enablement: bool
    applet_ids: winrt.windows.foundation.collections.IVector[winrt.windows.storage.streams.IBuffer]
    secure_user_authentication_required: bool
    logo: winrt.windows.storage.streams.IRandomAccessStreamReference
    description: str
    properties: winrt.windows.foundation.collections.ValueSet
    max_applet_ids: int

class SmartCardAppletIdGroupRegistration(_winrt.winrt_base):
    ...
    activation_policy: SmartCardAppletIdGroupActivationPolicy
    applet_id_group: SmartCardAppletIdGroup
    id: uuid.UUID
    smart_card_reader_id: str
    def request_activation_policy_change_async(policy: SmartCardAppletIdGroupActivationPolicy) -> winrt.windows.foundation.IAsyncOperation[SmartCardActivationPolicyChangeResult]:
        ...
    def set_automatic_response_apdus_async(apdus: typing.Iterable[SmartCardAutomaticResponseApdu]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_properties_async(props: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncAction:
        ...

class SmartCardAutomaticResponseApdu(_winrt.winrt_base):
    ...
    should_match_length: bool
    response_apdu: winrt.windows.storage.streams.IBuffer
    command_apdu_bit_mask: winrt.windows.storage.streams.IBuffer
    command_apdu: winrt.windows.storage.streams.IBuffer
    applet_id: winrt.windows.storage.streams.IBuffer
    output_state: typing.Optional[int]
    input_state: typing.Optional[int]
    allow_when_cryptogram_generator_not_prepared: bool

class SmartCardChallengeContext(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    challenge: winrt.windows.storage.streams.IBuffer
    def change_administrative_key_async(response: winrt.windows.storage.streams.IBuffer, new_administrative_key: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def provision_async(response: winrt.windows.storage.streams.IBuffer, format_card: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def provision_async(response: winrt.windows.storage.streams.IBuffer, format_card: bool, new_card_id: uuid.UUID) -> winrt.windows.foundation.IAsyncAction:
        ...
    def verify_response_async(response: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class SmartCardConnection(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    def close() -> None:
        ...
    def transmit_async(command: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...

class SmartCardCryptogramGenerator(_winrt.winrt_base):
    ...
    supported_cryptogram_algorithms: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramAlgorithm]
    supported_cryptogram_material_package_confirmation_response_formats: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageConfirmationResponseFormat]
    supported_cryptogram_material_package_formats: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageFormat]
    supported_cryptogram_material_types: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialType]
    supported_smart_card_cryptogram_storage_key_capabilities: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramStorageKeyCapabilities]
    def create_cryptogram_material_storage_key_async(prompting_behavior: SmartCardUnlockPromptingBehavior, storage_key_name: str, algorithm: SmartCardCryptogramStorageKeyAlgorithm, capabilities: SmartCardCryptogramStorageKeyCapabilities) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...
    def delete_cryptogram_material_package_async(material_package_name: str) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...
    def delete_cryptogram_material_storage_key_async(storage_key_name: str) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...
    def get_all_cryptogram_material_characteristics_async(prompting_behavior: SmartCardUnlockPromptingBehavior, material_package_name: str) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult]:
        ...
    def get_all_cryptogram_material_package_characteristics_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult]:
        ...
    def get_all_cryptogram_material_package_characteristics_async(storage_key_name: str) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult]:
        ...
    def get_all_cryptogram_storage_key_characteristics_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult]:
        ...
    def get_smart_card_cryptogram_generator_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGenerator]:
        ...
    def import_cryptogram_material_package_async(format: SmartCardCryptogramMaterialPackageFormat, storage_key_name: str, material_package_name: str, cryptogram_material_package: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...
    def is_supported() -> bool:
        ...
    def request_cryptogram_material_storage_key_info_async(prompting_behavior: SmartCardUnlockPromptingBehavior, storage_key_name: str, format: winrt.windows.security.cryptography.core.CryptographicPublicKeyBlobType) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramStorageKeyInfo]:
        ...
    def request_unlock_cryptogram_material_for_use_async(prompting_behavior: SmartCardUnlockPromptingBehavior) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...
    def try_prove_possession_of_cryptogram_material_package_async(prompting_behavior: SmartCardUnlockPromptingBehavior, response_format: SmartCardCryptogramMaterialPackageConfirmationResponseFormat, material_package_name: str, material_name: str, challenge: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramMaterialPossessionProof]:
        ...
    def validate_request_apdu_async(prompting_behavior: SmartCardUnlockPromptingBehavior, apdu_to_validate: winrt.windows.storage.streams.IBuffer, cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep]) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...

class SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult(_winrt.winrt_base):
    ...
    characteristics: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialCharacteristics]
    operation_status: SmartCardCryptogramGeneratorOperationStatus

class SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult(_winrt.winrt_base):
    ...
    characteristics: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageCharacteristics]
    operation_status: SmartCardCryptogramGeneratorOperationStatus

class SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult(_winrt.winrt_base):
    ...
    characteristics: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramStorageKeyCharacteristics]
    operation_status: SmartCardCryptogramGeneratorOperationStatus

class SmartCardCryptogramMaterialCharacteristics(_winrt.winrt_base):
    ...
    allowed_algorithms: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramAlgorithm]
    allowed_proof_of_possession_algorithms: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageConfirmationResponseFormat]
    allowed_validations: winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramAlgorithm]
    material_length: int
    material_name: str
    material_type: SmartCardCryptogramMaterialType
    protection_method: SmartCardCryptogramMaterialProtectionMethod
    protection_version: int

class SmartCardCryptogramMaterialPackageCharacteristics(_winrt.winrt_base):
    ...
    date_imported: winrt.windows.foundation.DateTime
    package_format: SmartCardCryptogramMaterialPackageFormat
    package_name: str
    storage_key_name: str

class SmartCardCryptogramMaterialPossessionProof(_winrt.winrt_base):
    ...
    operation_status: SmartCardCryptogramGeneratorOperationStatus
    proof: winrt.windows.storage.streams.IBuffer

class SmartCardCryptogramPlacementStep(_winrt.winrt_base):
    ...
    template_offset: int
    source_data: winrt.windows.storage.streams.IBuffer
    cryptogram_placement_options: SmartCardCryptogramPlacementOptions
    cryptogram_offset: int
    cryptogram_material_package_name: str
    cryptogram_material_name: str
    cryptogram_length: int
    chained_output_step: SmartCardCryptogramPlacementStep
    algorithm: SmartCardCryptogramAlgorithm

class SmartCardCryptogramStorageKeyCharacteristics(_winrt.winrt_base):
    ...
    algorithm: SmartCardCryptogramStorageKeyAlgorithm
    capabilities: SmartCardCryptogramStorageKeyCapabilities
    date_created: winrt.windows.foundation.DateTime
    storage_key_name: str

class SmartCardCryptogramStorageKeyInfo(_winrt.winrt_base):
    ...
    attestation: winrt.windows.storage.streams.IBuffer
    attestation_certificate_chain: winrt.windows.storage.streams.IBuffer
    attestation_status: SmartCardCryptographicKeyAttestationStatus
    capabilities: SmartCardCryptogramStorageKeyCapabilities
    operation_status: SmartCardCryptogramGeneratorOperationStatus
    public_key: winrt.windows.storage.streams.IBuffer
    public_key_blob_type: winrt.windows.security.cryptography.core.CryptographicPublicKeyBlobType
    operational_requirements: str

class SmartCardEmulator(_winrt.winrt_base):
    ...
    enablement_policy: SmartCardEmulatorEnablementPolicy
    max_applet_id_group_registrations: int
    def get_applet_id_group_registrations_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[SmartCardAppletIdGroupRegistration]]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardEmulator]:
        ...
    def is_host_card_emulation_supported() -> bool:
        ...
    def is_supported() -> bool:
        ...
    def register_applet_id_group_async(applet_id_group: SmartCardAppletIdGroup) -> winrt.windows.foundation.IAsyncOperation[SmartCardAppletIdGroupRegistration]:
        ...
    def start() -> None:
        ...
    def unregister_applet_id_group_async(registration: SmartCardAppletIdGroupRegistration) -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_apdu_received(value: winrt.windows.foundation.TypedEventHandler[SmartCardEmulator, SmartCardEmulatorApduReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_apdu_received(value: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_connection_deactivated(value: winrt.windows.foundation.TypedEventHandler[SmartCardEmulator, SmartCardEmulatorConnectionDeactivatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_connection_deactivated(value: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SmartCardEmulatorApduReceivedEventArgs(_winrt.winrt_base):
    ...
    automatic_response_status: SmartCardAutomaticResponseStatus
    command_apdu: winrt.windows.storage.streams.IBuffer
    connection_properties: SmartCardEmulatorConnectionProperties
    state: int
    def try_respond_async(response_apdu: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_respond_async(response_apdu: winrt.windows.storage.streams.IBuffer, next_state: typing.Optional[int]) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_respond_with_cryptograms_async(response_template: winrt.windows.storage.streams.IBuffer, cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep]) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...
    def try_respond_with_cryptograms_async(response_template: winrt.windows.storage.streams.IBuffer, cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep], next_state: typing.Optional[int]) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]:
        ...

class SmartCardEmulatorConnectionDeactivatedEventArgs(_winrt.winrt_base):
    ...
    connection_properties: SmartCardEmulatorConnectionProperties
    reason: SmartCardEmulatorConnectionDeactivatedReason

class SmartCardEmulatorConnectionProperties(_winrt.winrt_base):
    ...
    id: uuid.UUID
    source: SmartCardEmulatorConnectionSource

class SmartCardPinPolicy(_winrt.winrt_base):
    ...
    uppercase_letters: SmartCardPinCharacterPolicyOption
    special_characters: SmartCardPinCharacterPolicyOption
    min_length: int
    max_length: int
    lowercase_letters: SmartCardPinCharacterPolicyOption
    digits: SmartCardPinCharacterPolicyOption

class SmartCardPinResetDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class SmartCardPinResetRequest(_winrt.winrt_base):
    ...
    challenge: winrt.windows.storage.streams.IBuffer
    deadline: winrt.windows.foundation.DateTime
    def get_deferral() -> SmartCardPinResetDeferral:
        ...
    def set_response(response: winrt.windows.storage.streams.IBuffer) -> None:
        ...

class SmartCardProvisioning(_winrt.winrt_base):
    ...
    smart_card: SmartCard
    def from_smart_card_async(card: SmartCard) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]:
        ...
    def get_authority_key_container_name_async() -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def get_challenge_context_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardChallengeContext]:
        ...
    def get_id_async() -> winrt.windows.foundation.IAsyncOperation[uuid.UUID]:
        ...
    def get_name_async() -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def request_attested_virtual_smart_card_creation_async(friendly_name: str, administrative_key: winrt.windows.storage.streams.IBuffer, pin_policy: SmartCardPinPolicy) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]:
        ...
    def request_attested_virtual_smart_card_creation_async(friendly_name: str, administrative_key: winrt.windows.storage.streams.IBuffer, pin_policy: SmartCardPinPolicy, card_id: uuid.UUID) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]:
        ...
    def request_pin_change_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def request_pin_reset_async(handler: SmartCardPinResetHandler) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def request_virtual_smart_card_creation_async(friendly_name: str, administrative_key: winrt.windows.storage.streams.IBuffer, pin_policy: SmartCardPinPolicy) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]:
        ...
    def request_virtual_smart_card_creation_async(friendly_name: str, administrative_key: winrt.windows.storage.streams.IBuffer, pin_policy: SmartCardPinPolicy, card_id: uuid.UUID) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]:
        ...
    def request_virtual_smart_card_deletion_async(card: SmartCard) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class SmartCardReader(_winrt.winrt_base):
    ...
    device_id: str
    kind: SmartCardReaderKind
    name: str
    def find_all_cards_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[SmartCard]]:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[SmartCardReader]:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(kind: SmartCardReaderKind) -> str:
        ...
    def get_status_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardReaderStatus]:
        ...
    def add_card_added(handler: winrt.windows.foundation.TypedEventHandler[SmartCardReader, CardAddedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_card_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_card_removed(handler: winrt.windows.foundation.TypedEventHandler[SmartCardReader, CardRemovedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_card_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SmartCardTriggerDetails(_winrt.winrt_base):
    ...
    source_applet_id: winrt.windows.storage.streams.IBuffer
    trigger_data: winrt.windows.storage.streams.IBuffer
    trigger_type: SmartCardTriggerType
    emulator: SmartCardEmulator
    smart_card: SmartCard
    def try_launch_current_app_async(arguments: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_launch_current_app_async(arguments: str, behavior: SmartCardLaunchBehavior) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

SmartCardPinResetHandler = typing.Callable[[SmartCardProvisioning, SmartCardPinResetRequest], None]

