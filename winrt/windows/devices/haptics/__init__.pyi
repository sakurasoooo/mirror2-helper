# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class VibrationAccessStatus(enum.IntEnum):
    ALLOWED = 0
    DENIED_BY_USER = 1
    DENIED_BY_SYSTEM = 2
    DENIED_BY_ENERGY_SAVER = 3

class KnownSimpleHapticsControllerWaveforms(_winrt.winrt_base):
    ...
    buzz_continuous: int
    click: int
    press: int
    release: int
    rumble_continuous: int
    brush_continuous: int
    chisel_marker_continuous: int
    eraser_continuous: int
    error: int
    galaxy_pen_continuous: int
    hover: int
    ink_continuous: int
    marker_continuous: int
    pencil_continuous: int
    success: int

class SimpleHapticsController(_winrt.winrt_base):
    ...
    id: str
    is_intensity_supported: bool
    is_play_count_supported: bool
    is_play_duration_supported: bool
    is_replay_pause_interval_supported: bool
    supported_feedback: winrt.windows.foundation.collections.IVectorView[SimpleHapticsControllerFeedback]
    def send_haptic_feedback(feedback: SimpleHapticsControllerFeedback) -> None:
        ...
    def send_haptic_feedback(feedback: SimpleHapticsControllerFeedback, intensity: float) -> None:
        ...
    def send_haptic_feedback_for_duration(feedback: SimpleHapticsControllerFeedback, intensity: float, play_duration: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def send_haptic_feedback_for_play_count(feedback: SimpleHapticsControllerFeedback, intensity: float, play_count: int, replay_pause_interval: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def stop_feedback() -> None:
        ...

class SimpleHapticsControllerFeedback(_winrt.winrt_base):
    ...
    duration: winrt.windows.foundation.TimeSpan
    waveform: int

class VibrationDevice(_winrt.winrt_base):
    ...
    id: str
    simple_haptics_controller: SimpleHapticsController
    def find_all_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[VibrationDevice]]:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[VibrationDevice]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[VibrationDevice]:
        ...
    def get_device_selector() -> str:
        ...
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[VibrationAccessStatus]:
        ...

