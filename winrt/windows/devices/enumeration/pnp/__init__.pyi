# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.enumeration
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class PnpObjectType(enum.IntEnum):
    UNKNOWN = 0
    DEVICE_INTERFACE = 1
    DEVICE_CONTAINER = 2
    DEVICE = 3
    DEVICE_INTERFACE_CLASS = 4
    ASSOCIATION_ENDPOINT = 5
    ASSOCIATION_ENDPOINT_CONTAINER = 6
    ASSOCIATION_ENDPOINT_SERVICE = 7
    DEVICE_PANEL = 8

class PnpObject(_winrt.winrt_base):
    ...
    id: str
    properties: winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]
    type: PnpObjectType
    def create_from_id_async(type: PnpObjectType, id: str, requested_properties: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[PnpObject]:
        ...
    def create_watcher(type: PnpObjectType, requested_properties: typing.Iterable[str]) -> PnpObjectWatcher:
        ...
    def create_watcher(type: PnpObjectType, requested_properties: typing.Iterable[str], aqs_filter: str) -> PnpObjectWatcher:
        ...
    def find_all_async(type: PnpObjectType, requested_properties: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[PnpObjectCollection]:
        ...
    def find_all_async(type: PnpObjectType, requested_properties: typing.Iterable[str], aqs_filter: str) -> winrt.windows.foundation.IAsyncOperation[PnpObjectCollection]:
        ...
    def update(update_info: PnpObjectUpdate) -> None:
        ...

class PnpObjectCollection(winrt.windows.foundation.collections.IVectorView[PnpObject], winrt.windows.foundation.collections.IIterable[PnpObject], _winrt.winrt_base):
    ...
    size: int
    def first() -> winrt.windows.foundation.collections.IIterator[PnpObject]:
        ...
    def get_at(index: int) -> PnpObject:
        ...
    def get_many(start_index: int, items_size: int) -> typing.Tuple[int, typing.List[PnpObject]]:
        ...
    def index_of(value: PnpObject) -> typing.Tuple[bool, int]:
        ...

class PnpObjectUpdate(_winrt.winrt_base):
    ...
    id: str
    properties: winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]
    type: PnpObjectType

class PnpObjectWatcher(_winrt.winrt_base):
    ...
    status: winrt.windows.devices.enumeration.DeviceWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[PnpObjectWatcher, PnpObject]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[PnpObjectWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[PnpObjectWatcher, PnpObjectUpdate]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winrt.windows.foundation.TypedEventHandler[PnpObjectWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winrt.windows.foundation.TypedEventHandler[PnpObjectWatcher, PnpObjectUpdate]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

