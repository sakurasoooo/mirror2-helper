# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class UsbControlRecipient(enum.IntEnum):
    DEVICE = 0
    SPECIFIED_INTERFACE = 1
    ENDPOINT = 2
    OTHER = 3
    DEFAULT_INTERFACE = 4

class UsbControlTransferType(enum.IntEnum):
    STANDARD = 0
    CLASS = 1
    VENDOR = 2

class UsbEndpointType(enum.IntEnum):
    CONTROL = 0
    ISOCHRONOUS = 1
    BULK = 2
    INTERRUPT = 3

class UsbReadOptions(enum.IntFlag):
    NONE = 0
    AUTO_CLEAR_STALL = 0x1
    OVERRIDE_AUTOMATIC_BUFFER_MANAGEMENT = 0x2
    IGNORE_SHORT_PACKET = 0x4
    ALLOW_PARTIAL_READS = 0x8

class UsbTransferDirection(enum.IntEnum):
    OUT = 0
    IN = 1

class UsbWriteOptions(enum.IntFlag):
    NONE = 0
    AUTO_CLEAR_STALL = 0x1
    SHORT_PACKET_TERMINATE = 0x2

class UsbBulkInEndpointDescriptor(_winrt.winrt_base):
    ...
    endpoint_number: int
    max_packet_size: int
    pipe: UsbBulkInPipe

class UsbBulkInPipe(_winrt.winrt_base):
    ...
    read_options: UsbReadOptions
    endpoint_descriptor: UsbBulkInEndpointDescriptor
    input_stream: winrt.windows.storage.streams.IInputStream
    max_transfer_size_bytes: int
    def clear_stall_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def flush_buffer() -> None:
        ...

class UsbBulkOutEndpointDescriptor(_winrt.winrt_base):
    ...
    endpoint_number: int
    max_packet_size: int
    pipe: UsbBulkOutPipe

class UsbBulkOutPipe(_winrt.winrt_base):
    ...
    write_options: UsbWriteOptions
    endpoint_descriptor: UsbBulkOutEndpointDescriptor
    output_stream: winrt.windows.storage.streams.IOutputStream
    def clear_stall_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class UsbConfiguration(_winrt.winrt_base):
    ...
    configuration_descriptor: UsbConfigurationDescriptor
    descriptors: winrt.windows.foundation.collections.IVectorView[UsbDescriptor]
    usb_interfaces: winrt.windows.foundation.collections.IVectorView[UsbInterface]

class UsbConfigurationDescriptor(_winrt.winrt_base):
    ...
    configuration_value: int
    max_power_milliamps: int
    remote_wakeup: bool
    self_powered: bool
    def parse(descriptor: UsbDescriptor) -> UsbConfigurationDescriptor:
        ...
    def try_parse(descriptor: UsbDescriptor) -> typing.Tuple[bool, UsbConfigurationDescriptor]:
        ...

class UsbControlRequestType(_winrt.winrt_base):
    ...
    recipient: UsbControlRecipient
    direction: UsbTransferDirection
    control_transfer_type: UsbControlTransferType
    as_byte: int

class UsbDescriptor(_winrt.winrt_base):
    ...
    descriptor_type: int
    length: int
    def read_descriptor_buffer(buffer: winrt.windows.storage.streams.IBuffer) -> None:
        ...

class UsbDevice(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    configuration: UsbConfiguration
    default_interface: UsbInterface
    device_descriptor: UsbDeviceDescriptor
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[UsbDevice]:
        ...
    def get_device_class_selector(usb_class: UsbDeviceClass) -> str:
        ...
    def get_device_selector(win_usb_interface_class: uuid.UUID) -> str:
        ...
    def get_device_selector(vendor_id: int, product_id: int) -> str:
        ...
    def get_device_selector(vendor_id: int, product_id: int, win_usb_interface_class: uuid.UUID) -> str:
        ...
    def send_control_in_transfer_async(setup_packet: UsbSetupPacket) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def send_control_in_transfer_async(setup_packet: UsbSetupPacket, buffer: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def send_control_out_transfer_async(setup_packet: UsbSetupPacket) -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def send_control_out_transfer_async(setup_packet: UsbSetupPacket, buffer: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[int]:
        ...

class UsbDeviceClass(_winrt.winrt_base):
    ...
    subclass_code: typing.Optional[int]
    protocol_code: typing.Optional[int]
    class_code: int

class UsbDeviceClasses(_winrt.winrt_base):
    ...
    active_sync: UsbDeviceClass
    cdc_control: UsbDeviceClass
    device_firmware_update: UsbDeviceClass
    irda: UsbDeviceClass
    measurement: UsbDeviceClass
    palm_sync: UsbDeviceClass
    personal_healthcare: UsbDeviceClass
    physical: UsbDeviceClass
    vendor_specific: UsbDeviceClass

class UsbDeviceDescriptor(_winrt.winrt_base):
    ...
    bcd_device_revision: int
    bcd_usb: int
    max_packet_size0: int
    number_of_configurations: int
    product_id: int
    vendor_id: int

class UsbEndpointDescriptor(_winrt.winrt_base):
    ...
    as_bulk_in_endpoint_descriptor: UsbBulkInEndpointDescriptor
    as_bulk_out_endpoint_descriptor: UsbBulkOutEndpointDescriptor
    as_interrupt_in_endpoint_descriptor: UsbInterruptInEndpointDescriptor
    as_interrupt_out_endpoint_descriptor: UsbInterruptOutEndpointDescriptor
    direction: UsbTransferDirection
    endpoint_number: int
    endpoint_type: UsbEndpointType
    def parse(descriptor: UsbDescriptor) -> UsbEndpointDescriptor:
        ...
    def try_parse(descriptor: UsbDescriptor) -> typing.Tuple[bool, UsbEndpointDescriptor]:
        ...

class UsbInterface(_winrt.winrt_base):
    ...
    bulk_in_pipes: winrt.windows.foundation.collections.IVectorView[UsbBulkInPipe]
    bulk_out_pipes: winrt.windows.foundation.collections.IVectorView[UsbBulkOutPipe]
    descriptors: winrt.windows.foundation.collections.IVectorView[UsbDescriptor]
    interface_number: int
    interface_settings: winrt.windows.foundation.collections.IVectorView[UsbInterfaceSetting]
    interrupt_in_pipes: winrt.windows.foundation.collections.IVectorView[UsbInterruptInPipe]
    interrupt_out_pipes: winrt.windows.foundation.collections.IVectorView[UsbInterruptOutPipe]

class UsbInterfaceDescriptor(_winrt.winrt_base):
    ...
    alternate_setting_number: int
    class_code: int
    interface_number: int
    protocol_code: int
    subclass_code: int
    def parse(descriptor: UsbDescriptor) -> UsbInterfaceDescriptor:
        ...
    def try_parse(descriptor: UsbDescriptor) -> typing.Tuple[bool, UsbInterfaceDescriptor]:
        ...

class UsbInterfaceSetting(_winrt.winrt_base):
    ...
    bulk_in_endpoints: winrt.windows.foundation.collections.IVectorView[UsbBulkInEndpointDescriptor]
    bulk_out_endpoints: winrt.windows.foundation.collections.IVectorView[UsbBulkOutEndpointDescriptor]
    descriptors: winrt.windows.foundation.collections.IVectorView[UsbDescriptor]
    interface_descriptor: UsbInterfaceDescriptor
    interrupt_in_endpoints: winrt.windows.foundation.collections.IVectorView[UsbInterruptInEndpointDescriptor]
    interrupt_out_endpoints: winrt.windows.foundation.collections.IVectorView[UsbInterruptOutEndpointDescriptor]
    selected: bool
    def select_setting_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class UsbInterruptInEndpointDescriptor(_winrt.winrt_base):
    ...
    endpoint_number: int
    interval: winrt.windows.foundation.TimeSpan
    max_packet_size: int
    pipe: UsbInterruptInPipe

class UsbInterruptInEventArgs(_winrt.winrt_base):
    ...
    interrupt_data: winrt.windows.storage.streams.IBuffer

class UsbInterruptInPipe(_winrt.winrt_base):
    ...
    endpoint_descriptor: UsbInterruptInEndpointDescriptor
    def clear_stall_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_data_received(handler: winrt.windows.foundation.TypedEventHandler[UsbInterruptInPipe, UsbInterruptInEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_data_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class UsbInterruptOutEndpointDescriptor(_winrt.winrt_base):
    ...
    endpoint_number: int
    interval: winrt.windows.foundation.TimeSpan
    max_packet_size: int
    pipe: UsbInterruptOutPipe

class UsbInterruptOutPipe(_winrt.winrt_base):
    ...
    write_options: UsbWriteOptions
    endpoint_descriptor: UsbInterruptOutEndpointDescriptor
    output_stream: winrt.windows.storage.streams.IOutputStream
    def clear_stall_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class UsbSetupPacket(_winrt.winrt_base):
    ...
    value: int
    request_type: UsbControlRequestType
    request: int
    length: int
    index: int

