# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.pwm.provider
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class PwmPulsePolarity(enum.IntEnum):
    ACTIVE_HIGH = 0
    ACTIVE_LOW = 1

class PwmController(_winrt.winrt_base):
    ...
    actual_frequency: float
    max_frequency: float
    min_frequency: float
    pin_count: int
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[PwmController]:
        ...
    def get_controllers_async(provider: winrt.windows.devices.pwm.provider.IPwmProvider) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[PwmController]]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[PwmController]:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(friendly_name: str) -> str:
        ...
    def open_pin(pin_number: int) -> PwmPin:
        ...
    def set_desired_frequency(desired_frequency: float) -> float:
        ...

class PwmPin(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    polarity: PwmPulsePolarity
    controller: PwmController
    is_started: bool
    def close() -> None:
        ...
    def get_active_duty_cycle_percentage() -> float:
        ...
    def set_active_duty_cycle_percentage(duty_cycle_percentage: float) -> None:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...

