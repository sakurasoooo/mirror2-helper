# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.bluetooth
except Exception:
    pass

try:
    import winrt.windows.devices.enumeration
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.networking
except Exception:
    pass

try:
    import winrt.windows.networking.sockets
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class RfcommDeviceService(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    connection_host_name: winrt.windows.networking.HostName
    connection_service_name: str
    max_protection_level: winrt.windows.networking.sockets.SocketProtectionLevel
    protection_level: winrt.windows.networking.sockets.SocketProtectionLevel
    service_id: RfcommServiceId
    device: winrt.windows.devices.bluetooth.BluetoothDevice
    device_access_information: winrt.windows.devices.enumeration.DeviceAccessInformation
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[RfcommDeviceService]:
        ...
    def get_device_selector(service_id: RfcommServiceId) -> str:
        ...
    def get_device_selector_for_bluetooth_device(bluetooth_device: winrt.windows.devices.bluetooth.BluetoothDevice) -> str:
        ...
    def get_device_selector_for_bluetooth_device(bluetooth_device: winrt.windows.devices.bluetooth.BluetoothDevice, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode) -> str:
        ...
    def get_device_selector_for_bluetooth_device_and_service_id(bluetooth_device: winrt.windows.devices.bluetooth.BluetoothDevice, service_id: RfcommServiceId) -> str:
        ...
    def get_device_selector_for_bluetooth_device_and_service_id(bluetooth_device: winrt.windows.devices.bluetooth.BluetoothDevice, service_id: RfcommServiceId, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode) -> str:
        ...
    def get_sdp_raw_attributes_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMapView[int, winrt.windows.storage.streams.IBuffer]]:
        ...
    def get_sdp_raw_attributes_async(cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMapView[int, winrt.windows.storage.streams.IBuffer]]:
        ...
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.devices.enumeration.DeviceAccessStatus]:
        ...

class RfcommDeviceServicesResult(_winrt.winrt_base):
    ...
    error: winrt.windows.devices.bluetooth.BluetoothError
    services: winrt.windows.foundation.collections.IVectorView[RfcommDeviceService]

class RfcommServiceId(_winrt.winrt_base):
    ...
    uuid: uuid.UUID
    generic_file_transfer: RfcommServiceId
    obex_file_transfer: RfcommServiceId
    obex_object_push: RfcommServiceId
    phone_book_access_pce: RfcommServiceId
    phone_book_access_pse: RfcommServiceId
    serial_port: RfcommServiceId
    def as_short_id() -> int:
        ...
    def as_string() -> str:
        ...
    def from_short_id(short_id: int) -> RfcommServiceId:
        ...
    def from_uuid(uuid: uuid.UUID) -> RfcommServiceId:
        ...

class RfcommServiceProvider(_winrt.winrt_base):
    ...
    sdp_raw_attributes: winrt.windows.foundation.collections.IMap[int, winrt.windows.storage.streams.IBuffer]
    service_id: RfcommServiceId
    def create_async(service_id: RfcommServiceId) -> winrt.windows.foundation.IAsyncOperation[RfcommServiceProvider]:
        ...
    def start_advertising(listener: winrt.windows.networking.sockets.StreamSocketListener) -> None:
        ...
    def start_advertising(listener: winrt.windows.networking.sockets.StreamSocketListener, radio_discoverable: bool) -> None:
        ...
    def stop_advertising() -> None:
        ...

