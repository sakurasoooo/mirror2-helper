# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class ProviderI2cBusSpeed(enum.IntEnum):
    STANDARD_MODE = 0
    FAST_MODE = 1

class ProviderI2cSharingMode(enum.IntEnum):
    EXCLUSIVE = 0
    SHARED = 1

class ProviderI2cTransferStatus(enum.IntEnum):
    FULL_TRANSFER = 0
    PARTIAL_TRANSFER = 1
    SLAVE_ADDRESS_NOT_ACKNOWLEDGED = 2

class ProviderI2cTransferResult(_winrt.winrt_base):
    ...

class ProviderI2cConnectionSettings(_winrt.winrt_base):
    ...
    slave_address: int
    sharing_mode: ProviderI2cSharingMode
    bus_speed: ProviderI2cBusSpeed

class II2cControllerProvider(_winrt.winrt_base):
    ...
    def get_device_provider(settings: ProviderI2cConnectionSettings) -> II2cDeviceProvider:
        ...

class II2cDeviceProvider(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    device_id: str
    def read(buffer_size: int) -> typing.List[int]:
        ...
    def read_partial(buffer_size: int) -> typing.Tuple[ProviderI2cTransferResult, typing.List[int]]:
        ...
    def write(buffer: typing.Sequence[int]) -> None:
        ...
    def write_partial(buffer: typing.Sequence[int]) -> ProviderI2cTransferResult:
        ...
    def write_read(write_buffer: typing.Sequence[int], read_buffer_size: int) -> typing.List[int]:
        ...
    def write_read_partial(write_buffer: typing.Sequence[int], read_buffer_size: int) -> typing.Tuple[ProviderI2cTransferResult, typing.List[int]]:
        ...
    def close() -> None:
        ...

class II2cProvider(_winrt.winrt_base):
    ...
    def get_controllers_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[II2cControllerProvider]]:
        ...

