# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.numerics
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

try:
    import winrt.windows.ui
except Exception:
    pass

class LampArrayKind(enum.IntEnum):
    UNDEFINED = 0
    KEYBOARD = 1
    MOUSE = 2
    GAME_CONTROLLER = 3
    PERIPHERAL = 4
    SCENE = 5
    NOTIFICATION = 6
    CHASSIS = 7
    WEARABLE = 8
    FURNITURE = 9
    ART = 10

class LampPurposes(enum.IntFlag):
    UNDEFINED = 0
    CONTROL = 0x1
    ACCENT = 0x2
    BRANDING = 0x4
    STATUS = 0x8
    ILLUMINATION = 0x10
    PRESENTATION = 0x20

class Lamp(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    is_enabled: bool
    color: winrt.windows.ui.Color
    brightness_level: float
    device_id: str
    is_color_settable: bool
    def close() -> None:
        ...
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[Lamp]:
        ...
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[Lamp]:
        ...
    def get_device_selector() -> str:
        ...
    def add_availability_changed(handler: winrt.windows.foundation.TypedEventHandler[Lamp, LampAvailabilityChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_availability_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class LampArray(_winrt.winrt_base):
    ...
    is_enabled: bool
    brightness_level: float
    bounding_box: winrt.windows.foundation.numerics.Vector3
    device_id: str
    hardware_product_id: int
    hardware_vendor_id: int
    hardware_version: int
    is_connected: bool
    lamp_array_kind: LampArrayKind
    lamp_count: int
    min_update_interval: winrt.windows.foundation.TimeSpan
    supports_virtual_keys: bool
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[LampArray]:
        ...
    def get_device_selector() -> str:
        ...
    def get_indices_for_key(key: winrt.windows.system.VirtualKey) -> int:
        ...
    def get_indices_for_purposes(purposes: LampPurposes) -> int:
        ...
    def get_lamp_info(lamp_index: int) -> LampInfo:
        ...
    def request_message_async(message_id: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def send_message_async(message_id: int, message: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_color(desired_color: winrt.windows.ui.Color) -> None:
        ...
    def set_color_for_index(lamp_index: int, desired_color: winrt.windows.ui.Color) -> None:
        ...
    def set_colors_for_indices(desired_colors: typing.Sequence[winrt.windows.ui.Color], lamp_indexes: typing.Sequence[int]) -> None:
        ...
    def set_colors_for_key(desired_color: winrt.windows.ui.Color, key: winrt.windows.system.VirtualKey) -> None:
        ...
    def set_colors_for_keys(desired_colors: typing.Sequence[winrt.windows.ui.Color], keys: typing.Sequence[winrt.windows.system.VirtualKey]) -> None:
        ...
    def set_colors_for_purposes(desired_color: winrt.windows.ui.Color, purposes: LampPurposes) -> None:
        ...
    def set_single_color_for_indices(desired_color: winrt.windows.ui.Color, lamp_indexes: typing.Sequence[int]) -> None:
        ...

class LampAvailabilityChangedEventArgs(_winrt.winrt_base):
    ...
    is_available: bool

class LampInfo(_winrt.winrt_base):
    ...
    blue_level_count: int
    fixed_color: typing.Optional[winrt.windows.ui.Color]
    gain_level_count: int
    green_level_count: int
    index: int
    position: winrt.windows.foundation.numerics.Vector3
    purposes: LampPurposes
    red_level_count: int
    update_latency: winrt.windows.foundation.TimeSpan
    def get_nearest_supported_color(desired_color: winrt.windows.ui.Color) -> winrt.windows.ui.Color:
        ...

