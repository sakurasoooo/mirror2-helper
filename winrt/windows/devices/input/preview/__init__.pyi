# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.humaninterfacedevice
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class GazeDeviceConfigurationStatePreview(enum.IntEnum):
    UNKNOWN = 0
    READY = 1
    CONFIGURING = 2
    SCREEN_SETUP_NEEDED = 3
    USER_CALIBRATION_NEEDED = 4

class GazeDevicePreview(_winrt.winrt_base):
    ...
    can_track_eyes: bool
    can_track_head: bool
    configuration_state: GazeDeviceConfigurationStatePreview
    id: int
    def get_boolean_control_descriptions(usage_page: int, usage_id: int) -> winrt.windows.foundation.collections.IVectorView[winrt.windows.devices.humaninterfacedevice.HidBooleanControlDescription]:
        ...
    def get_numeric_control_descriptions(usage_page: int, usage_id: int) -> winrt.windows.foundation.collections.IVectorView[winrt.windows.devices.humaninterfacedevice.HidNumericControlDescription]:
        ...
    def request_calibration_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class GazeDeviceWatcherAddedPreviewEventArgs(_winrt.winrt_base):
    ...
    device: GazeDevicePreview

class GazeDeviceWatcherPreview(_winrt.winrt_base):
    ...
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, GazeDeviceWatcherAddedPreviewEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, GazeDeviceWatcherRemovedPreviewEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, GazeDeviceWatcherUpdatedPreviewEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class GazeDeviceWatcherRemovedPreviewEventArgs(_winrt.winrt_base):
    ...
    device: GazeDevicePreview

class GazeDeviceWatcherUpdatedPreviewEventArgs(_winrt.winrt_base):
    ...
    device: GazeDevicePreview

class GazeEnteredPreviewEventArgs(_winrt.winrt_base):
    ...
    handled: bool
    current_point: GazePointPreview

class GazeExitedPreviewEventArgs(_winrt.winrt_base):
    ...
    handled: bool
    current_point: GazePointPreview

class GazeInputSourcePreview(_winrt.winrt_base):
    ...
    def create_watcher() -> GazeDeviceWatcherPreview:
        ...
    def get_for_current_view() -> GazeInputSourcePreview:
        ...
    def add_gaze_entered(handler: winrt.windows.foundation.TypedEventHandler[GazeInputSourcePreview, GazeEnteredPreviewEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_gaze_entered(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_gaze_exited(handler: winrt.windows.foundation.TypedEventHandler[GazeInputSourcePreview, GazeExitedPreviewEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_gaze_exited(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_gaze_moved(handler: winrt.windows.foundation.TypedEventHandler[GazeInputSourcePreview, GazeMovedPreviewEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_gaze_moved(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class GazeMovedPreviewEventArgs(_winrt.winrt_base):
    ...
    handled: bool
    current_point: GazePointPreview
    def get_intermediate_points() -> winrt.windows.foundation.collections.IVector[GazePointPreview]:
        ...

class GazePointPreview(_winrt.winrt_base):
    ...
    eye_gaze_position: typing.Optional[winrt.windows.foundation.Point]
    head_gaze_position: typing.Optional[winrt.windows.foundation.Point]
    hid_input_report: winrt.windows.devices.humaninterfacedevice.HidInputReport
    source_device: GazeDevicePreview
    timestamp: int

