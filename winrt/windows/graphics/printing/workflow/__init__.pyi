# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.activation
except Exception:
    pass

try:
    import winrt.windows.devices.printers
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.graphics.printing.printticket
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class PrintWorkflowJobAbortReason(enum.IntEnum):
    JOB_FAILED = 0
    USER_CANCELED = 1

class PrintWorkflowPdlConversionType(enum.IntEnum):
    XPS_TO_PDF = 0
    XPS_TO_PWGR = 1
    XPS_TO_PCLM = 2

class PrintWorkflowPrinterJobStatus(enum.IntEnum):
    ERROR = 0
    ABORTED = 1
    IN_PROGRESS = 2
    COMPLETED = 3

class PrintWorkflowSessionStatus(enum.IntEnum):
    STARTED = 0
    COMPLETED = 1
    ABORTED = 2
    CLOSED = 3
    PDL_DATA_AVAILABLE_FOR_MODIFICATION = 4

class PrintWorkflowSubmittedStatus(enum.IntEnum):
    SUCCEEDED = 0
    CANCELED = 1
    FAILED = 2

class PrintWorkflowUICompletionStatus(enum.IntEnum):
    COMPLETED = 0
    LAUNCH_FAILED = 1
    JOB_FAILED = 2
    USER_CANCELED = 3

class PrintWorkflowBackgroundSession(_winrt.winrt_base):
    ...
    status: PrintWorkflowSessionStatus
    def start() -> None:
        ...
    def add_setup_requested(setup_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowBackgroundSession, PrintWorkflowBackgroundSetupRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_setup_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_submitted(submitted_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowBackgroundSession, PrintWorkflowSubmittedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_submitted(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PrintWorkflowBackgroundSetupRequestedEventArgs(_winrt.winrt_base):
    ...
    configuration: PrintWorkflowConfiguration
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...
    def get_user_print_ticket_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket]:
        ...
    def set_requires_u_i() -> None:
        ...

class PrintWorkflowConfiguration(_winrt.winrt_base):
    ...
    job_title: str
    session_id: str
    source_app_display_name: str
    def abort_print_flow(reason: PrintWorkflowJobAbortReason) -> None:
        ...

class PrintWorkflowForegroundSession(_winrt.winrt_base):
    ...
    status: PrintWorkflowSessionStatus
    def start() -> None:
        ...
    def add_setup_requested(setup_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowForegroundSession, PrintWorkflowForegroundSetupRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_setup_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_xps_data_available(xps_data_available_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowForegroundSession, PrintWorkflowXpsDataAvailableEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_xps_data_available(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PrintWorkflowForegroundSetupRequestedEventArgs(_winrt.winrt_base):
    ...
    configuration: PrintWorkflowConfiguration
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...
    def get_user_print_ticket_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket]:
        ...

class PrintWorkflowJobActivatedEventArgs(winrt.windows.applicationmodel.activation.IActivatedEventArgs, winrt.windows.applicationmodel.activation.IActivatedEventArgsWithUser, _winrt.winrt_base):
    ...
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: winrt.windows.applicationmodel.activation.SplashScreen
    user: winrt.windows.system.User
    session: PrintWorkflowJobUISession

class PrintWorkflowJobBackgroundSession(_winrt.winrt_base):
    ...
    status: PrintWorkflowSessionStatus
    def start() -> None:
        ...
    def add_job_starting(handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobBackgroundSession, PrintWorkflowJobStartingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_job_starting(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_pdl_modification_requested(handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobBackgroundSession, PrintWorkflowPdlModificationRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_pdl_modification_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PrintWorkflowJobNotificationEventArgs(_winrt.winrt_base):
    ...
    configuration: PrintWorkflowConfiguration
    printer_job: PrintWorkflowPrinterJob
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class PrintWorkflowJobStartingEventArgs(_winrt.winrt_base):
    ...
    configuration: PrintWorkflowConfiguration
    printer: winrt.windows.devices.printers.IppPrintDevice
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...
    def set_skip_system_rendering() -> None:
        ...

class PrintWorkflowJobTriggerDetails(_winrt.winrt_base):
    ...
    print_workflow_job_session: PrintWorkflowJobBackgroundSession

class PrintWorkflowJobUISession(_winrt.winrt_base):
    ...
    status: PrintWorkflowSessionStatus
    def start() -> None:
        ...
    def add_job_notification(handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobUISession, PrintWorkflowJobNotificationEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_job_notification(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_pdl_data_available(handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobUISession, PrintWorkflowPdlDataAvailableEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_pdl_data_available(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PrintWorkflowObjectModelSourceFileContent(_winrt.winrt_base):
    ...

class PrintWorkflowObjectModelTargetPackage(_winrt.winrt_base):
    ...

class PrintWorkflowPdlConverter(_winrt.winrt_base):
    ...
    def convert_pdl_async(print_ticket: winrt.windows.graphics.printing.printticket.WorkflowPrintTicket, input_stream: winrt.windows.storage.streams.IInputStream, output_stream: winrt.windows.storage.streams.IOutputStream) -> winrt.windows.foundation.IAsyncAction:
        ...

class PrintWorkflowPdlDataAvailableEventArgs(_winrt.winrt_base):
    ...
    configuration: PrintWorkflowConfiguration
    printer_job: PrintWorkflowPrinterJob
    source_content: PrintWorkflowPdlSourceContent
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class PrintWorkflowPdlModificationRequestedEventArgs(_winrt.winrt_base):
    ...
    configuration: PrintWorkflowConfiguration
    printer_job: PrintWorkflowPrinterJob
    source_content: PrintWorkflowPdlSourceContent
    u_i_launcher: PrintWorkflowUILauncher
    def create_job_on_printer(target_content_type: str) -> PrintWorkflowPdlTargetStream:
        ...
    def create_job_on_printer_with_attributes(job_attributes: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.windows.devices.printers.IppAttributeValue]], target_content_type: str) -> PrintWorkflowPdlTargetStream:
        ...
    def create_job_on_printer_with_attributes_buffer(job_attributes_buffer: winrt.windows.storage.streams.IBuffer, target_content_type: str) -> PrintWorkflowPdlTargetStream:
        ...
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...
    def get_pdl_converter(conversion_type: PrintWorkflowPdlConversionType) -> PrintWorkflowPdlConverter:
        ...

class PrintWorkflowPdlSourceContent(_winrt.winrt_base):
    ...
    content_type: str
    def get_content_file_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]:
        ...
    def get_input_stream() -> winrt.windows.storage.streams.IInputStream:
        ...

class PrintWorkflowPdlTargetStream(_winrt.winrt_base):
    ...
    def complete_stream_submission(status: PrintWorkflowSubmittedStatus) -> None:
        ...
    def get_output_stream() -> winrt.windows.storage.streams.IOutputStream:
        ...

class PrintWorkflowPrinterJob(_winrt.winrt_base):
    ...
    job_id: int
    printer: winrt.windows.devices.printers.IppPrintDevice
    def get_job_attributes(attribute_names: typing.Iterable[str]) -> winrt.windows.foundation.collections.IMap[str, winrt.windows.devices.printers.IppAttributeValue]:
        ...
    def get_job_attributes_as_buffer(attribute_names: typing.Iterable[str]) -> winrt.windows.storage.streams.IBuffer:
        ...
    def get_job_print_ticket() -> winrt.windows.graphics.printing.printticket.WorkflowPrintTicket:
        ...
    def get_job_status() -> PrintWorkflowPrinterJobStatus:
        ...
    def set_job_attributes(job_attributes: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.windows.devices.printers.IppAttributeValue]]) -> winrt.windows.devices.printers.IppSetAttributesResult:
        ...
    def set_job_attributes_from_buffer(job_attributes_buffer: winrt.windows.storage.streams.IBuffer) -> winrt.windows.devices.printers.IppSetAttributesResult:
        ...

class PrintWorkflowSourceContent(_winrt.winrt_base):
    ...
    def get_job_print_ticket_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket]:
        ...
    def get_source_spool_data_as_stream_content() -> PrintWorkflowSpoolStreamContent:
        ...
    def get_source_spool_data_as_xps_object_model() -> PrintWorkflowObjectModelSourceFileContent:
        ...

class PrintWorkflowSpoolStreamContent(_winrt.winrt_base):
    ...
    def get_input_stream() -> winrt.windows.storage.streams.IInputStream:
        ...

class PrintWorkflowStreamTarget(_winrt.winrt_base):
    ...
    def get_output_stream() -> winrt.windows.storage.streams.IOutputStream:
        ...

class PrintWorkflowSubmittedEventArgs(_winrt.winrt_base):
    ...
    operation: PrintWorkflowSubmittedOperation
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...
    def get_target(job_print_ticket: winrt.windows.graphics.printing.printticket.WorkflowPrintTicket) -> PrintWorkflowTarget:
        ...

class PrintWorkflowSubmittedOperation(_winrt.winrt_base):
    ...
    configuration: PrintWorkflowConfiguration
    xps_content: PrintWorkflowSourceContent
    def complete(status: PrintWorkflowSubmittedStatus) -> None:
        ...

class PrintWorkflowTarget(_winrt.winrt_base):
    ...
    target_as_stream: PrintWorkflowStreamTarget
    target_as_xps_object_model_package: PrintWorkflowObjectModelTargetPackage

class PrintWorkflowTriggerDetails(_winrt.winrt_base):
    ...
    print_workflow_session: PrintWorkflowBackgroundSession

class PrintWorkflowUIActivatedEventArgs(winrt.windows.applicationmodel.activation.IActivatedEventArgsWithUser, winrt.windows.applicationmodel.activation.IActivatedEventArgs, _winrt.winrt_base):
    ...
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: winrt.windows.applicationmodel.activation.SplashScreen
    user: winrt.windows.system.User
    print_workflow_session: PrintWorkflowForegroundSession

class PrintWorkflowUILauncher(_winrt.winrt_base):
    ...
    def is_u_i_launch_enabled() -> bool:
        ...
    def launch_and_complete_u_i_async() -> winrt.windows.foundation.IAsyncOperation[PrintWorkflowUICompletionStatus]:
        ...

class PrintWorkflowXpsDataAvailableEventArgs(_winrt.winrt_base):
    ...
    operation: PrintWorkflowSubmittedOperation
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

