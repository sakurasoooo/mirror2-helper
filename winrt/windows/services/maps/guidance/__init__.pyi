# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.geolocation
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.services.maps
except Exception:
    pass

try:
    import winrt.windows.ui
except Exception:
    pass

class GuidanceAudioMeasurementSystem(enum.IntEnum):
    METERS = 0
    MILES_AND_YARDS = 1
    MILES_AND_FEET = 2

class GuidanceAudioNotificationKind(enum.IntEnum):
    MANEUVER = 0
    ROUTE = 1
    GPS = 2
    SPEED_LIMIT = 3
    TRAFFIC = 4
    TRAFFIC_CAMERA = 5

class GuidanceAudioNotifications(enum.IntFlag):
    NONE = 0
    MANEUVER = 0x1
    ROUTE = 0x2
    GPS = 0x4
    SPEED_LIMIT = 0x8
    TRAFFIC = 0x10
    TRAFFIC_CAMERA = 0x20

class GuidanceLaneMarkers(enum.IntFlag):
    NONE = 0
    LIGHT_RIGHT = 0x1
    RIGHT = 0x2
    HARD_RIGHT = 0x4
    STRAIGHT = 0x8
    U_TURN_LEFT = 0x10
    HARD_LEFT = 0x20
    LEFT = 0x40
    LIGHT_LEFT = 0x80
    U_TURN_RIGHT = 0x100
    UNKNOWN = 0xffffffff

class GuidanceManeuverKind(enum.IntEnum):
    NONE = 0
    GO_STRAIGHT = 1
    U_TURN_RIGHT = 2
    U_TURN_LEFT = 3
    TURN_KEEP_RIGHT = 4
    TURN_LIGHT_RIGHT = 5
    TURN_RIGHT = 6
    TURN_HARD_RIGHT = 7
    KEEP_MIDDLE = 8
    TURN_KEEP_LEFT = 9
    TURN_LIGHT_LEFT = 10
    TURN_LEFT = 11
    TURN_HARD_LEFT = 12
    FREEWAY_ENTER_RIGHT = 13
    FREEWAY_ENTER_LEFT = 14
    FREEWAY_LEAVE_RIGHT = 15
    FREEWAY_LEAVE_LEFT = 16
    FREEWAY_KEEP_RIGHT = 17
    FREEWAY_KEEP_LEFT = 18
    TRAFFIC_CIRCLE_RIGHT1 = 19
    TRAFFIC_CIRCLE_RIGHT2 = 20
    TRAFFIC_CIRCLE_RIGHT3 = 21
    TRAFFIC_CIRCLE_RIGHT4 = 22
    TRAFFIC_CIRCLE_RIGHT5 = 23
    TRAFFIC_CIRCLE_RIGHT6 = 24
    TRAFFIC_CIRCLE_RIGHT7 = 25
    TRAFFIC_CIRCLE_RIGHT8 = 26
    TRAFFIC_CIRCLE_RIGHT9 = 27
    TRAFFIC_CIRCLE_RIGHT10 = 28
    TRAFFIC_CIRCLE_RIGHT11 = 29
    TRAFFIC_CIRCLE_RIGHT12 = 30
    TRAFFIC_CIRCLE_LEFT1 = 31
    TRAFFIC_CIRCLE_LEFT2 = 32
    TRAFFIC_CIRCLE_LEFT3 = 33
    TRAFFIC_CIRCLE_LEFT4 = 34
    TRAFFIC_CIRCLE_LEFT5 = 35
    TRAFFIC_CIRCLE_LEFT6 = 36
    TRAFFIC_CIRCLE_LEFT7 = 37
    TRAFFIC_CIRCLE_LEFT8 = 38
    TRAFFIC_CIRCLE_LEFT9 = 39
    TRAFFIC_CIRCLE_LEFT10 = 40
    TRAFFIC_CIRCLE_LEFT11 = 41
    TRAFFIC_CIRCLE_LEFT12 = 42
    START = 43
    END = 44
    TAKE_FERRY = 45
    PASS_TRANSIT_STATION = 46
    LEAVE_TRANSIT_STATION = 47

class GuidanceMode(enum.IntEnum):
    NONE = 0
    SIMULATION = 1
    NAVIGATION = 2
    TRACKING = 3

class GuidanceAudioNotificationRequestedEventArgs(_winrt.winrt_base):
    ...
    audio_file_paths: winrt.windows.foundation.collections.IVectorView[str]
    audio_notification: GuidanceAudioNotificationKind
    audio_text: str

class GuidanceLaneInfo(_winrt.winrt_base):
    ...
    is_on_route: bool
    lane_markers: GuidanceLaneMarkers

class GuidanceManeuver(_winrt.winrt_base):
    ...
    departure_road_name: str
    departure_short_road_name: str
    distance_from_previous_maneuver: int
    distance_from_route_start: int
    end_angle: int
    instruction_text: str
    kind: GuidanceManeuverKind
    next_road_name: str
    next_short_road_name: str
    road_signpost: GuidanceRoadSignpost
    start_angle: int
    start_location: winrt.windows.devices.geolocation.Geopoint

class GuidanceMapMatchedCoordinate(_winrt.winrt_base):
    ...
    current_heading: float
    current_speed: float
    is_on_street: bool
    location: winrt.windows.devices.geolocation.Geopoint
    road: GuidanceRoadSegment

class GuidanceNavigator(_winrt.winrt_base):
    ...
    audio_notifications: GuidanceAudioNotifications
    audio_measurement_system: GuidanceAudioMeasurementSystem
    is_guidance_audio_muted: bool
    use_app_provided_voice: bool
    def get_current() -> GuidanceNavigator:
        ...
    def pause() -> None:
        ...
    def repeat_last_audio_notification() -> None:
        ...
    def resume() -> None:
        ...
    def set_guidance_voice(voice_id: int, voice_folder: str) -> None:
        ...
    def start_navigating(route: GuidanceRoute) -> None:
        ...
    def start_simulating(route: GuidanceRoute, speed_in_meters_per_second: int) -> None:
        ...
    def start_tracking() -> None:
        ...
    def stop() -> None:
        ...
    def update_user_location(user_location: winrt.windows.devices.geolocation.Geocoordinate) -> None:
        ...
    def update_user_location(user_location: winrt.windows.devices.geolocation.Geocoordinate, position_override: winrt.windows.devices.geolocation.BasicGeoposition) -> None:
        ...
    def add_destination_reached(handler: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_destination_reached(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_guidance_updated(handler: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, GuidanceUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_guidance_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_reroute_failed(handler: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_reroute_failed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_rerouted(handler: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, GuidanceReroutedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_rerouted(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_rerouting(handler: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_rerouting(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_user_location_lost(handler: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_user_location_lost(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_user_location_restored(handler: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_user_location_restored(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_audio_notification_requested(value: winrt.windows.foundation.TypedEventHandler[GuidanceNavigator, GuidanceAudioNotificationRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_audio_notification_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class GuidanceReroutedEventArgs(_winrt.winrt_base):
    ...
    route: GuidanceRoute

class GuidanceRoadSegment(_winrt.winrt_base):
    ...
    id: str
    is_highway: bool
    is_toll_road: bool
    is_tunnel: bool
    path: winrt.windows.devices.geolocation.Geopath
    road_name: str
    short_road_name: str
    speed_limit: float
    travel_time: winrt.windows.foundation.TimeSpan
    is_scenic: bool

class GuidanceRoadSignpost(_winrt.winrt_base):
    ...
    background_color: winrt.windows.ui.Color
    exit: str
    exit_directions: winrt.windows.foundation.collections.IVectorView[str]
    exit_number: str
    foreground_color: winrt.windows.ui.Color

class GuidanceRoute(_winrt.winrt_base):
    ...
    bounding_box: winrt.windows.devices.geolocation.GeoboundingBox
    distance: int
    duration: winrt.windows.foundation.TimeSpan
    maneuvers: winrt.windows.foundation.collections.IVectorView[GuidanceManeuver]
    path: winrt.windows.devices.geolocation.Geopath
    road_segments: winrt.windows.foundation.collections.IVectorView[GuidanceRoadSegment]
    def can_create_from_map_route(map_route: winrt.windows.services.maps.MapRoute) -> bool:
        ...
    def convert_to_map_route() -> winrt.windows.services.maps.MapRoute:
        ...
    def try_create_from_map_route(map_route: winrt.windows.services.maps.MapRoute) -> GuidanceRoute:
        ...

class GuidanceTelemetryCollector(_winrt.winrt_base):
    ...
    upload_frequency: int
    speed_trigger: float
    enabled: bool
    def clear_local_data() -> None:
        ...
    def get_current() -> GuidanceTelemetryCollector:
        ...

class GuidanceUpdatedEventArgs(_winrt.winrt_base):
    ...
    after_next_maneuver: GuidanceManeuver
    after_next_maneuver_distance: int
    current_location: GuidanceMapMatchedCoordinate
    distance_to_destination: int
    elapsed_distance: int
    elapsed_time: winrt.windows.foundation.TimeSpan
    is_new_maneuver: bool
    lane_info: winrt.windows.foundation.collections.IVectorView[GuidanceLaneInfo]
    mode: GuidanceMode
    next_maneuver: GuidanceManeuver
    next_maneuver_distance: int
    road_name: str
    route: GuidanceRoute
    time_to_destination: winrt.windows.foundation.TimeSpan

