# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.numerics
except Exception:
    pass

class ConditionForceEffectKind(enum.IntEnum):
    SPRING = 0
    DAMPER = 1
    INERTIA = 2
    FRICTION = 3

class ForceFeedbackEffectAxes(enum.IntFlag):
    NONE = 0
    X = 0x1
    Y = 0x2
    Z = 0x4

class ForceFeedbackEffectState(enum.IntEnum):
    STOPPED = 0
    RUNNING = 1
    PAUSED = 2
    FAULTED = 3

class ForceFeedbackLoadEffectResult(enum.IntEnum):
    SUCCEEDED = 0
    EFFECT_STORAGE_FULL = 1
    EFFECT_NOT_SUPPORTED = 2

class PeriodicForceEffectKind(enum.IntEnum):
    SQUARE_WAVE = 0
    SINE_WAVE = 1
    TRIANGLE_WAVE = 2
    SAWTOOTH_WAVE_UP = 3
    SAWTOOTH_WAVE_DOWN = 4

class ConditionForceEffect(IForceFeedbackEffect, _winrt.winrt_base):
    ...
    kind: ConditionForceEffectKind
    gain: float
    state: ForceFeedbackEffectState
    def set_parameters(direction: winrt.windows.foundation.numerics.Vector3, positive_coefficient: float, negative_coefficient: float, max_positive_magnitude: float, max_negative_magnitude: float, dead_zone: float, bias: float) -> None:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...

class ConstantForceEffect(IForceFeedbackEffect, _winrt.winrt_base):
    ...
    gain: float
    state: ForceFeedbackEffectState
    def set_parameters(vector: winrt.windows.foundation.numerics.Vector3, duration: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def set_parameters_with_envelope(vector: winrt.windows.foundation.numerics.Vector3, attack_gain: float, sustain_gain: float, release_gain: float, start_delay: winrt.windows.foundation.TimeSpan, attack_duration: winrt.windows.foundation.TimeSpan, sustain_duration: winrt.windows.foundation.TimeSpan, release_duration: winrt.windows.foundation.TimeSpan, repeat_count: int) -> None:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...

class ForceFeedbackMotor(_winrt.winrt_base):
    ...
    master_gain: float
    are_effects_paused: bool
    is_enabled: bool
    supported_axes: ForceFeedbackEffectAxes
    def load_effect_async(effect: IForceFeedbackEffect) -> winrt.windows.foundation.IAsyncOperation[ForceFeedbackLoadEffectResult]:
        ...
    def pause_all_effects() -> None:
        ...
    def resume_all_effects() -> None:
        ...
    def stop_all_effects() -> None:
        ...
    def try_disable_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_enable_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_reset_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_unload_effect_async(effect: IForceFeedbackEffect) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class PeriodicForceEffect(IForceFeedbackEffect, _winrt.winrt_base):
    ...
    gain: float
    state: ForceFeedbackEffectState
    kind: PeriodicForceEffectKind
    def set_parameters(vector: winrt.windows.foundation.numerics.Vector3, frequency: float, phase: float, bias: float, duration: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def set_parameters_with_envelope(vector: winrt.windows.foundation.numerics.Vector3, frequency: float, phase: float, bias: float, attack_gain: float, sustain_gain: float, release_gain: float, start_delay: winrt.windows.foundation.TimeSpan, attack_duration: winrt.windows.foundation.TimeSpan, sustain_duration: winrt.windows.foundation.TimeSpan, release_duration: winrt.windows.foundation.TimeSpan, repeat_count: int) -> None:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...

class RampForceEffect(IForceFeedbackEffect, _winrt.winrt_base):
    ...
    gain: float
    state: ForceFeedbackEffectState
    def set_parameters(start_vector: winrt.windows.foundation.numerics.Vector3, end_vector: winrt.windows.foundation.numerics.Vector3, duration: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def set_parameters_with_envelope(start_vector: winrt.windows.foundation.numerics.Vector3, end_vector: winrt.windows.foundation.numerics.Vector3, attack_gain: float, sustain_gain: float, release_gain: float, start_delay: winrt.windows.foundation.TimeSpan, attack_duration: winrt.windows.foundation.TimeSpan, sustain_duration: winrt.windows.foundation.TimeSpan, release_duration: winrt.windows.foundation.TimeSpan, repeat_count: int) -> None:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...

class IForceFeedbackEffect(_winrt.winrt_base):
    ...
    gain: float
    state: ForceFeedbackEffectState
    def start() -> None:
        ...
    def stop() -> None:
        ...

