# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.gaming.input
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class GipFirmwareUpdateStatus(enum.IntEnum):
    COMPLETED = 0
    UP_TO_DATE = 1
    FAILED = 2

class GipMessageClass(enum.IntEnum):
    COMMAND = 0
    LOW_LATENCY = 1
    STANDARD_LATENCY = 2

class XusbDeviceSubtype(enum.IntEnum):
    UNKNOWN = 0
    GAMEPAD = 1
    ARCADE_PAD = 2
    ARCADE_STICK = 3
    FLIGHT_STICK = 4
    WHEEL = 5
    GUITAR = 6
    GUITAR_ALTERNATE = 7
    GUITAR_BASS = 8
    DRUM_KIT = 9
    DANCE_PAD = 10

class XusbDeviceType(enum.IntEnum):
    UNKNOWN = 0
    GAMEPAD = 1

class GameControllerVersionInfo(_winrt.winrt_base):
    ...

class GipFirmwareUpdateProgress(_winrt.winrt_base):
    ...

class GameControllerFactoryManager(_winrt.winrt_base):
    ...
    def register_custom_factory_for_gip_interface(factory: ICustomGameControllerFactory, interface_id: uuid.UUID) -> None:
        ...
    def register_custom_factory_for_hardware_id(factory: ICustomGameControllerFactory, hardware_vendor_id: int, hardware_product_id: int) -> None:
        ...
    def register_custom_factory_for_xusb_type(factory: ICustomGameControllerFactory, xusb_type: XusbDeviceType, xusb_subtype: XusbDeviceSubtype) -> None:
        ...
    def try_get_factory_controller_from_game_controller(factory: ICustomGameControllerFactory, game_controller: winrt.windows.gaming.input.IGameController) -> winrt.windows.gaming.input.IGameController:
        ...

class GipFirmwareUpdateResult(_winrt.winrt_base):
    ...
    extended_error_code: int
    final_component_id: int
    status: GipFirmwareUpdateStatus

class GipGameControllerProvider(IGameControllerProvider, _winrt.winrt_base):
    ...
    firmware_version_info: GameControllerVersionInfo
    hardware_product_id: int
    hardware_vendor_id: int
    hardware_version_info: GameControllerVersionInfo
    is_connected: bool
    def send_message(message_class: GipMessageClass, message_id: int, message_buffer: typing.Sequence[int]) -> None:
        ...
    def send_receive_message(message_class: GipMessageClass, message_id: int, request_message_buffer: typing.Sequence[int], response_message_buffer_size: int) -> typing.List[int]:
        ...
    def update_firmware_async(firmware_image: winrt.windows.storage.streams.IInputStream) -> winrt.windows.foundation.IAsyncOperationWithProgress[GipFirmwareUpdateResult, GipFirmwareUpdateProgress]:
        ...

class HidGameControllerProvider(IGameControllerProvider, _winrt.winrt_base):
    ...
    firmware_version_info: GameControllerVersionInfo
    hardware_product_id: int
    hardware_vendor_id: int
    hardware_version_info: GameControllerVersionInfo
    is_connected: bool
    usage_id: int
    usage_page: int
    def get_feature_report(report_id: int, report_buffer_size: int) -> typing.List[int]:
        ...
    def send_feature_report(report_id: int, report_buffer: typing.Sequence[int]) -> None:
        ...
    def send_output_report(report_id: int, report_buffer: typing.Sequence[int]) -> None:
        ...

class XusbGameControllerProvider(IGameControllerProvider, _winrt.winrt_base):
    ...
    firmware_version_info: GameControllerVersionInfo
    hardware_product_id: int
    hardware_vendor_id: int
    hardware_version_info: GameControllerVersionInfo
    is_connected: bool
    def set_vibration(low_frequency_motor_speed: float, high_frequency_motor_speed: float) -> None:
        ...

class ICustomGameControllerFactory(_winrt.winrt_base):
    ...
    def create_game_controller(provider: IGameControllerProvider) -> _winrt.winrt_base:
        ...
    def on_game_controller_added(value: winrt.windows.gaming.input.IGameController) -> None:
        ...
    def on_game_controller_removed(value: winrt.windows.gaming.input.IGameController) -> None:
        ...

class IGameControllerInputSink(_winrt.winrt_base):
    ...
    def on_input_resumed(timestamp: int) -> None:
        ...
    def on_input_suspended(timestamp: int) -> None:
        ...

class IGameControllerProvider(_winrt.winrt_base):
    ...
    firmware_version_info: GameControllerVersionInfo
    hardware_product_id: int
    hardware_vendor_id: int
    hardware_version_info: GameControllerVersionInfo
    is_connected: bool

class IGipGameControllerInputSink(IGameControllerInputSink, _winrt.winrt_base):
    ...
    def on_key_received(timestamp: int, key_code: int, is_pressed: bool) -> None:
        ...
    def on_message_received(timestamp: int, message_class: GipMessageClass, message_id: int, sequence_id: int, message_buffer: typing.Sequence[int]) -> None:
        ...
    def on_input_resumed(timestamp: int) -> None:
        ...
    def on_input_suspended(timestamp: int) -> None:
        ...

class IHidGameControllerInputSink(IGameControllerInputSink, _winrt.winrt_base):
    ...
    def on_input_report_received(timestamp: int, report_id: int, report_buffer: typing.Sequence[int]) -> None:
        ...
    def on_input_resumed(timestamp: int) -> None:
        ...
    def on_input_suspended(timestamp: int) -> None:
        ...

class IXusbGameControllerInputSink(IGameControllerInputSink, _winrt.winrt_base):
    ...
    def on_input_received(timestamp: int, report_id: int, input_buffer: typing.Sequence[int]) -> None:
        ...
    def on_input_resumed(timestamp: int) -> None:
        ...
    def on_input_suspended(timestamp: int) -> None:
        ...

