# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.background
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.security.credentials
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.ui.notifications
except Exception:
    pass

try:
    import winrt.windows.web
except Exception:
    pass

class BackgroundTransferBehavior(enum.IntEnum):
    PARALLEL = 0
    SERIALIZED = 1

class BackgroundTransferCostPolicy(enum.IntEnum):
    DEFAULT = 0
    UNRESTRICTED_ONLY = 1
    ALWAYS = 2

class BackgroundTransferPriority(enum.IntEnum):
    DEFAULT = 0
    HIGH = 1
    LOW = 2

class BackgroundTransferStatus(enum.IntEnum):
    IDLE = 0
    RUNNING = 1
    PAUSED_BY_APPLICATION = 2
    PAUSED_COSTED_NETWORK = 3
    PAUSED_NO_NETWORK = 4
    COMPLETED = 5
    CANCELED = 6
    ERROR = 7
    PAUSED_RECOVERABLE_WEB_ERROR_STATUS = 8
    PAUSED_SYSTEM_POLICY = 32

class BackgroundDownloadProgress(_winrt.winrt_base):
    ...

class BackgroundTransferFileRange(_winrt.winrt_base):
    ...

class BackgroundUploadProgress(_winrt.winrt_base):
    ...

class BackgroundDownloader(IBackgroundTransferBase, _winrt.winrt_base):
    ...
    failure_toast_notification: winrt.windows.ui.notifications.ToastNotification
    success_tile_notification: winrt.windows.ui.notifications.TileNotification
    success_toast_notification: winrt.windows.ui.notifications.ToastNotification
    transfer_group: BackgroundTransferGroup
    failure_tile_notification: winrt.windows.ui.notifications.TileNotification
    completion_group: BackgroundTransferCompletionGroup
    cost_policy: BackgroundTransferCostPolicy
    group: str
    method: str
    proxy_credential: winrt.windows.security.credentials.PasswordCredential
    server_credential: winrt.windows.security.credentials.PasswordCredential
    def create_download(uri: winrt.windows.foundation.Uri, result_file: winrt.windows.storage.IStorageFile) -> DownloadOperation:
        ...
    def create_download(uri: winrt.windows.foundation.Uri, result_file: winrt.windows.storage.IStorageFile, request_body_file: winrt.windows.storage.IStorageFile) -> DownloadOperation:
        ...
    def create_download_async(uri: winrt.windows.foundation.Uri, result_file: winrt.windows.storage.IStorageFile, request_body_stream: winrt.windows.storage.streams.IInputStream) -> winrt.windows.foundation.IAsyncOperation[DownloadOperation]:
        ...
    def get_current_downloads_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]:
        ...
    def get_current_downloads_async(group: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]:
        ...
    def get_current_downloads_for_transfer_group_async(group: BackgroundTransferGroup) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]:
        ...
    def request_unconstrained_downloads_async(operations: typing.Iterable[DownloadOperation]) -> winrt.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]:
        ...
    def set_request_header(header_name: str, header_value: str) -> None:
        ...

class BackgroundTransferCompletionGroup(_winrt.winrt_base):
    ...
    is_enabled: bool
    trigger: winrt.windows.applicationmodel.background.IBackgroundTrigger
    def enable() -> None:
        ...

class BackgroundTransferCompletionGroupTriggerDetails(_winrt.winrt_base):
    ...
    downloads: winrt.windows.foundation.collections.IVectorView[DownloadOperation]
    uploads: winrt.windows.foundation.collections.IVectorView[UploadOperation]

class BackgroundTransferContentPart(_winrt.winrt_base):
    ...
    def set_file(value: winrt.windows.storage.IStorageFile) -> None:
        ...
    def set_header(header_name: str, header_value: str) -> None:
        ...
    def set_text(value: str) -> None:
        ...

class BackgroundTransferError(_winrt.winrt_base):
    ...
    def get_status(hresult: int) -> winrt.windows.web.WebErrorStatus:
        ...

class BackgroundTransferGroup(_winrt.winrt_base):
    ...
    transfer_behavior: BackgroundTransferBehavior
    name: str
    def create_group(name: str) -> BackgroundTransferGroup:
        ...

class BackgroundTransferRangesDownloadedEventArgs(_winrt.winrt_base):
    ...
    added_ranges: winrt.windows.foundation.collections.IVector[BackgroundTransferFileRange]
    was_download_restarted: bool
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class BackgroundUploader(IBackgroundTransferBase, _winrt.winrt_base):
    ...
    server_credential: winrt.windows.security.credentials.PasswordCredential
    proxy_credential: winrt.windows.security.credentials.PasswordCredential
    method: str
    group: str
    cost_policy: BackgroundTransferCostPolicy
    failure_tile_notification: winrt.windows.ui.notifications.TileNotification
    transfer_group: BackgroundTransferGroup
    success_toast_notification: winrt.windows.ui.notifications.ToastNotification
    success_tile_notification: winrt.windows.ui.notifications.TileNotification
    failure_toast_notification: winrt.windows.ui.notifications.ToastNotification
    completion_group: BackgroundTransferCompletionGroup
    def create_upload(uri: winrt.windows.foundation.Uri, source_file: winrt.windows.storage.IStorageFile) -> UploadOperation:
        ...
    def create_upload_async(uri: winrt.windows.foundation.Uri, parts: typing.Iterable[BackgroundTransferContentPart]) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]:
        ...
    def create_upload_async(uri: winrt.windows.foundation.Uri, parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]:
        ...
    def create_upload_async(uri: winrt.windows.foundation.Uri, parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str, boundary: str) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]:
        ...
    def create_upload_from_stream_async(uri: winrt.windows.foundation.Uri, source_stream: winrt.windows.storage.streams.IInputStream) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]:
        ...
    def get_current_uploads_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]:
        ...
    def get_current_uploads_async(group: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]:
        ...
    def get_current_uploads_for_transfer_group_async(group: BackgroundTransferGroup) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]:
        ...
    def request_unconstrained_uploads_async(operations: typing.Iterable[UploadOperation]) -> winrt.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]:
        ...
    def set_request_header(header_name: str, header_value: str) -> None:
        ...

class ContentPrefetcher(_winrt.winrt_base):
    ...
    indirect_content_uri: winrt.windows.foundation.Uri
    content_uris: winrt.windows.foundation.collections.IVector[winrt.windows.foundation.Uri]
    last_successful_prefetch_time: typing.Optional[winrt.windows.foundation.DateTime]

class DownloadOperation(IBackgroundTransferOperation, IBackgroundTransferOperationPriority, _winrt.winrt_base):
    ...
    cost_policy: BackgroundTransferCostPolicy
    requested_uri: winrt.windows.foundation.Uri
    method: str
    group: str
    guid: uuid.UUID
    priority: BackgroundTransferPriority
    progress: BackgroundDownloadProgress
    result_file: winrt.windows.storage.IStorageFile
    transfer_group: BackgroundTransferGroup
    is_random_access_required: bool
    current_web_error_status: typing.Optional[winrt.windows.web.WebErrorStatus]
    recoverable_web_error_statuses: winrt.windows.foundation.collections.IVector[winrt.windows.web.WebErrorStatus]
    def attach_async() -> winrt.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]:
        ...
    def get_downloaded_ranges() -> winrt.windows.foundation.collections.IVector[BackgroundTransferFileRange]:
        ...
    def get_response_information() -> ResponseInformation:
        ...
    def get_result_random_access_stream_reference() -> winrt.windows.storage.streams.IRandomAccessStreamReference:
        ...
    def get_result_stream_at(position: int) -> winrt.windows.storage.streams.IInputStream:
        ...
    def make_current_in_transfer_group() -> None:
        ...
    def pause() -> None:
        ...
    def remove_request_header(header_name: str) -> None:
        ...
    def resume() -> None:
        ...
    def set_request_header(header_name: str, header_value: str) -> None:
        ...
    def start_async() -> winrt.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]:
        ...
    def add_ranges_downloaded(event_handler: winrt.windows.foundation.TypedEventHandler[DownloadOperation, BackgroundTransferRangesDownloadedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_ranges_downloaded(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ResponseInformation(_winrt.winrt_base):
    ...
    actual_uri: winrt.windows.foundation.Uri
    headers: winrt.windows.foundation.collections.IMapView[str, str]
    is_resumable: bool
    status_code: int

class UnconstrainedTransferRequestResult(_winrt.winrt_base):
    ...
    is_unconstrained: bool

class UploadOperation(IBackgroundTransferOperation, IBackgroundTransferOperationPriority, _winrt.winrt_base):
    ...
    cost_policy: BackgroundTransferCostPolicy
    group: str
    guid: uuid.UUID
    method: str
    requested_uri: winrt.windows.foundation.Uri
    priority: BackgroundTransferPriority
    progress: BackgroundUploadProgress
    source_file: winrt.windows.storage.IStorageFile
    transfer_group: BackgroundTransferGroup
    def attach_async() -> winrt.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]:
        ...
    def get_response_information() -> ResponseInformation:
        ...
    def get_result_stream_at(position: int) -> winrt.windows.storage.streams.IInputStream:
        ...
    def make_current_in_transfer_group() -> None:
        ...
    def remove_request_header(header_name: str) -> None:
        ...
    def set_request_header(header_name: str, header_value: str) -> None:
        ...
    def start_async() -> winrt.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]:
        ...

class IBackgroundTransferBase(_winrt.winrt_base):
    ...
    cost_policy: BackgroundTransferCostPolicy
    group: str
    method: str
    proxy_credential: winrt.windows.security.credentials.PasswordCredential
    server_credential: winrt.windows.security.credentials.PasswordCredential
    def set_request_header(header_name: str, header_value: str) -> None:
        ...

class IBackgroundTransferContentPartFactory(_winrt.winrt_base):
    ...
    def create_with_name(name: str) -> BackgroundTransferContentPart:
        ...
    def create_with_name_and_file_name(name: str, file_name: str) -> BackgroundTransferContentPart:
        ...

class IBackgroundTransferOperation(_winrt.winrt_base):
    ...
    cost_policy: BackgroundTransferCostPolicy
    group: str
    guid: uuid.UUID
    method: str
    requested_uri: winrt.windows.foundation.Uri
    def get_response_information() -> ResponseInformation:
        ...
    def get_result_stream_at(position: int) -> winrt.windows.storage.streams.IInputStream:
        ...

class IBackgroundTransferOperationPriority(_winrt.winrt_base):
    ...
    priority: BackgroundTransferPriority

