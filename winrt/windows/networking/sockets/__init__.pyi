# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.background
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.networking
except Exception:
    pass

try:
    import winrt.windows.networking.connectivity
except Exception:
    pass

try:
    import winrt.windows.security.credentials
except Exception:
    pass

try:
    import winrt.windows.security.cryptography.certificates
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.web
except Exception:
    pass

class ControlChannelTriggerResetReason(enum.IntEnum):
    FAST_USER_SWITCHED = 0
    LOW_POWER_EXIT = 1
    QUIET_HOURS_EXIT = 2
    APPLICATION_RESTART = 3

class ControlChannelTriggerResourceType(enum.IntEnum):
    REQUEST_SOFTWARE_SLOT = 0
    REQUEST_HARDWARE_SLOT = 1

class ControlChannelTriggerStatus(enum.IntEnum):
    HARDWARE_SLOT_REQUESTED = 0
    SOFTWARE_SLOT_ALLOCATED = 1
    HARDWARE_SLOT_ALLOCATED = 2
    POLICY_ERROR = 3
    SYSTEM_ERROR = 4
    TRANSPORT_DISCONNECTED = 5
    SERVICE_UNAVAILABLE = 6

class MessageWebSocketReceiveMode(enum.IntEnum):
    FULL_MESSAGE = 0
    PARTIAL_MESSAGE = 1

class SocketActivityConnectedStandbyAction(enum.IntEnum):
    DO_NOT_WAKE = 0
    WAKE = 1

class SocketActivityKind(enum.IntEnum):
    NONE = 0
    STREAM_SOCKET_LISTENER = 1
    DATAGRAM_SOCKET = 2
    STREAM_SOCKET = 3

class SocketActivityTriggerReason(enum.IntEnum):
    NONE = 0
    SOCKET_ACTIVITY = 1
    CONNECTION_ACCEPTED = 2
    KEEP_ALIVE_TIMER_EXPIRED = 3
    SOCKET_CLOSED = 4

class SocketErrorStatus(enum.IntEnum):
    UNKNOWN = 0
    OPERATION_ABORTED = 1
    HTTP_INVALID_SERVER_RESPONSE = 2
    CONNECTION_TIMED_OUT = 3
    ADDRESS_FAMILY_NOT_SUPPORTED = 4
    SOCKET_TYPE_NOT_SUPPORTED = 5
    HOST_NOT_FOUND = 6
    NO_DATA_RECORD_OF_REQUESTED_TYPE = 7
    NON_AUTHORITATIVE_HOST_NOT_FOUND = 8
    CLASS_TYPE_NOT_FOUND = 9
    ADDRESS_ALREADY_IN_USE = 10
    CANNOT_ASSIGN_REQUESTED_ADDRESS = 11
    CONNECTION_REFUSED = 12
    NETWORK_IS_UNREACHABLE = 13
    UNREACHABLE_HOST = 14
    NETWORK_IS_DOWN = 15
    NETWORK_DROPPED_CONNECTION_ON_RESET = 16
    SOFTWARE_CAUSED_CONNECTION_ABORT = 17
    CONNECTION_RESET_BY_PEER = 18
    HOST_IS_DOWN = 19
    NO_ADDRESSES_FOUND = 20
    TOO_MANY_OPEN_FILES = 21
    MESSAGE_TOO_LONG = 22
    CERTIFICATE_EXPIRED = 23
    CERTIFICATE_UNTRUSTED_ROOT = 24
    CERTIFICATE_COMMON_NAME_IS_INCORRECT = 25
    CERTIFICATE_WRONG_USAGE = 26
    CERTIFICATE_REVOKED = 27
    CERTIFICATE_NO_REVOCATION_CHECK = 28
    CERTIFICATE_REVOCATION_SERVER_OFFLINE = 29
    CERTIFICATE_IS_INVALID = 30

class SocketMessageType(enum.IntEnum):
    BINARY = 0
    UTF8 = 1

class SocketProtectionLevel(enum.IntEnum):
    PLAIN_SOCKET = 0
    SSL = 1
    SSL_ALLOW_NULL_ENCRYPTION = 2
    BLUETOOTH_ENCRYPTION_ALLOW_NULL_AUTHENTICATION = 3
    BLUETOOTH_ENCRYPTION_WITH_AUTHENTICATION = 4
    SSL3_ALLOW_WEAK_ENCRYPTION = 5
    TLS10 = 6
    TLS11 = 7
    TLS12 = 8
    UNSPECIFIED = 9

class SocketQualityOfService(enum.IntEnum):
    NORMAL = 0
    LOW_LATENCY = 1

class SocketSslErrorSeverity(enum.IntEnum):
    NONE = 0
    IGNORABLE = 1
    FATAL = 2

class BandwidthStatistics(_winrt.winrt_base):
    ...

class RoundTripTimeStatistics(_winrt.winrt_base):
    ...

class ControlChannelTrigger(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    server_keep_alive_interval_in_minutes: int
    control_channel_trigger_id: str
    current_keep_alive_interval_in_minutes: int
    keep_alive_trigger: winrt.windows.applicationmodel.background.IBackgroundTrigger
    push_notification_trigger: winrt.windows.applicationmodel.background.IBackgroundTrigger
    transport_object: _winrt.winrt_base
    is_wake_from_low_power_supported: bool
    def close() -> None:
        ...
    def decrease_network_keep_alive_interval() -> None:
        ...
    def flush_transport() -> None:
        ...
    def using_transport(transport: _winrt.winrt_base) -> None:
        ...
    def wait_for_push_enabled() -> ControlChannelTriggerStatus:
        ...

class DatagramSocket(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    control: DatagramSocketControl
    information: DatagramSocketInformation
    output_stream: winrt.windows.storage.streams.IOutputStream
    def bind_endpoint_async(local_host_name: winrt.windows.networking.HostName, local_service_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def bind_service_name_async(local_service_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def bind_service_name_async(local_service_name: str, adapter: winrt.windows.networking.connectivity.NetworkAdapter) -> winrt.windows.foundation.IAsyncAction:
        ...
    def cancel_i_o_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def connect_async(endpoint_pair: winrt.windows.networking.EndpointPair) -> winrt.windows.foundation.IAsyncAction:
        ...
    def connect_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def enable_transfer_ownership(task_id: uuid.UUID) -> None:
        ...
    def enable_transfer_ownership(task_id: uuid.UUID, connected_standby_action: SocketActivityConnectedStandbyAction) -> None:
        ...
    def get_endpoint_pairs_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.EndpointPair]]:
        ...
    def get_endpoint_pairs_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str, sort_options: winrt.windows.networking.HostNameSortOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.EndpointPair]]:
        ...
    def get_output_stream_async(endpoint_pair: winrt.windows.networking.EndpointPair) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IOutputStream]:
        ...
    def get_output_stream_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IOutputStream]:
        ...
    def join_multicast_group(host: winrt.windows.networking.HostName) -> None:
        ...
    def transfer_ownership(socket_id: str) -> None:
        ...
    def transfer_ownership(socket_id: str, data: SocketActivityContext) -> None:
        ...
    def transfer_ownership(socket_id: str, data: SocketActivityContext, keep_alive_time: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def add_message_received(event_handler: winrt.windows.foundation.TypedEventHandler[DatagramSocket, DatagramSocketMessageReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_message_received(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class DatagramSocketControl(_winrt.winrt_base):
    ...
    quality_of_service: SocketQualityOfService
    outbound_unicast_hop_limit: int
    inbound_buffer_size_in_bytes: int
    dont_fragment: bool
    multicast_only: bool

class DatagramSocketInformation(_winrt.winrt_base):
    ...
    local_address: winrt.windows.networking.HostName
    local_port: str
    remote_address: winrt.windows.networking.HostName
    remote_port: str

class DatagramSocketMessageReceivedEventArgs(_winrt.winrt_base):
    ...
    local_address: winrt.windows.networking.HostName
    remote_address: winrt.windows.networking.HostName
    remote_port: str
    def get_data_reader() -> winrt.windows.storage.streams.DataReader:
        ...
    def get_data_stream() -> winrt.windows.storage.streams.IInputStream:
        ...

class MessageWebSocket(IWebSocket, winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    control: MessageWebSocketControl
    information: MessageWebSocketInformation
    output_stream: winrt.windows.storage.streams.IOutputStream
    def close() -> None:
        ...
    def close(code: int, reason: str) -> None:
        ...
    def connect_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncAction:
        ...
    def send_final_frame_async(data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperationWithProgress[int, int]:
        ...
    def send_nonfinal_frame_async(data: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperationWithProgress[int, int]:
        ...
    def set_request_header(header_name: str, header_value: str) -> None:
        ...
    def add_message_received(event_handler: winrt.windows.foundation.TypedEventHandler[MessageWebSocket, MessageWebSocketMessageReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_message_received(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_closed(event_handler: winrt.windows.foundation.TypedEventHandler[IWebSocket, WebSocketClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_server_custom_validation_requested(event_handler: winrt.windows.foundation.TypedEventHandler[MessageWebSocket, WebSocketServerCustomValidationRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_server_custom_validation_requested(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MessageWebSocketControl(IWebSocketControl, IWebSocketControl2, _winrt.winrt_base):
    ...
    message_type: SocketMessageType
    max_message_size: int
    receive_mode: MessageWebSocketReceiveMode
    desired_unsolicited_pong_interval: winrt.windows.foundation.TimeSpan
    client_certificate: winrt.windows.security.cryptography.certificates.Certificate
    actual_unsolicited_pong_interval: winrt.windows.foundation.TimeSpan
    server_credential: winrt.windows.security.credentials.PasswordCredential
    proxy_credential: winrt.windows.security.credentials.PasswordCredential
    outbound_buffer_size_in_bytes: int
    supported_protocols: winrt.windows.foundation.collections.IVector[str]
    ignorable_server_certificate_errors: winrt.windows.foundation.collections.IVector[winrt.windows.security.cryptography.certificates.ChainValidationResult]

class MessageWebSocketInformation(IWebSocketInformation, IWebSocketInformation2, _winrt.winrt_base):
    ...
    bandwidth_statistics: BandwidthStatistics
    local_address: winrt.windows.networking.HostName
    protocol: str
    server_certificate: winrt.windows.security.cryptography.certificates.Certificate
    server_certificate_error_severity: SocketSslErrorSeverity
    server_certificate_errors: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]
    server_intermediate_certificates: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]

class MessageWebSocketMessageReceivedEventArgs(_winrt.winrt_base):
    ...
    message_type: SocketMessageType
    is_message_complete: bool
    def get_data_reader() -> winrt.windows.storage.streams.DataReader:
        ...
    def get_data_stream() -> winrt.windows.storage.streams.IInputStream:
        ...

class ServerMessageWebSocket(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    control: ServerMessageWebSocketControl
    information: ServerMessageWebSocketInformation
    output_stream: winrt.windows.storage.streams.IOutputStream
    def close() -> None:
        ...
    def close(code: int, reason: str) -> None:
        ...
    def add_closed(value: winrt.windows.foundation.TypedEventHandler[ServerMessageWebSocket, WebSocketClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_message_received(value: winrt.windows.foundation.TypedEventHandler[ServerMessageWebSocket, MessageWebSocketMessageReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_message_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ServerMessageWebSocketControl(_winrt.winrt_base):
    ...
    message_type: SocketMessageType

class ServerMessageWebSocketInformation(_winrt.winrt_base):
    ...
    bandwidth_statistics: BandwidthStatistics
    local_address: winrt.windows.networking.HostName
    protocol: str

class ServerStreamWebSocket(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    information: ServerStreamWebSocketInformation
    input_stream: winrt.windows.storage.streams.IInputStream
    output_stream: winrt.windows.storage.streams.IOutputStream
    def close() -> None:
        ...
    def close(code: int, reason: str) -> None:
        ...
    def add_closed(value: winrt.windows.foundation.TypedEventHandler[ServerStreamWebSocket, WebSocketClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ServerStreamWebSocketInformation(_winrt.winrt_base):
    ...
    bandwidth_statistics: BandwidthStatistics
    local_address: winrt.windows.networking.HostName
    protocol: str

class SocketActivityContext(_winrt.winrt_base):
    ...
    data: winrt.windows.storage.streams.IBuffer

class SocketActivityInformation(_winrt.winrt_base):
    ...
    context: SocketActivityContext
    datagram_socket: DatagramSocket
    id: str
    socket_kind: SocketActivityKind
    stream_socket: StreamSocket
    stream_socket_listener: StreamSocketListener
    task_id: uuid.UUID
    all_sockets: winrt.windows.foundation.collections.IMapView[str, SocketActivityInformation]

class SocketActivityTriggerDetails(_winrt.winrt_base):
    ...
    reason: SocketActivityTriggerReason
    socket_information: SocketActivityInformation

class SocketError(_winrt.winrt_base):
    ...
    def get_status(hresult: int) -> SocketErrorStatus:
        ...

class StreamSocket(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    control: StreamSocketControl
    information: StreamSocketInformation
    input_stream: winrt.windows.storage.streams.IInputStream
    output_stream: winrt.windows.storage.streams.IOutputStream
    def cancel_i_o_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def connect_async(endpoint_pair: winrt.windows.networking.EndpointPair) -> winrt.windows.foundation.IAsyncAction:
        ...
    def connect_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def connect_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str, protection_level: SocketProtectionLevel) -> winrt.windows.foundation.IAsyncAction:
        ...
    def connect_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str, protection_level: SocketProtectionLevel, adapter: winrt.windows.networking.connectivity.NetworkAdapter) -> winrt.windows.foundation.IAsyncAction:
        ...
    def enable_transfer_ownership(task_id: uuid.UUID) -> None:
        ...
    def enable_transfer_ownership(task_id: uuid.UUID, connected_standby_action: SocketActivityConnectedStandbyAction) -> None:
        ...
    def get_endpoint_pairs_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.EndpointPair]]:
        ...
    def get_endpoint_pairs_async(remote_host_name: winrt.windows.networking.HostName, remote_service_name: str, sort_options: winrt.windows.networking.HostNameSortOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.EndpointPair]]:
        ...
    def transfer_ownership(socket_id: str) -> None:
        ...
    def transfer_ownership(socket_id: str, data: SocketActivityContext) -> None:
        ...
    def transfer_ownership(socket_id: str, data: SocketActivityContext, keep_alive_time: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def upgrade_to_ssl_async(protection_level: SocketProtectionLevel, validation_host_name: winrt.windows.networking.HostName) -> winrt.windows.foundation.IAsyncAction:
        ...

class StreamSocketControl(_winrt.winrt_base):
    ...
    quality_of_service: SocketQualityOfService
    outbound_unicast_hop_limit: int
    outbound_buffer_size_in_bytes: int
    no_delay: bool
    keep_alive: bool
    ignorable_server_certificate_errors: winrt.windows.foundation.collections.IVector[winrt.windows.security.cryptography.certificates.ChainValidationResult]
    serialize_connection_attempts: bool
    client_certificate: winrt.windows.security.cryptography.certificates.Certificate
    min_protection_level: SocketProtectionLevel

class StreamSocketInformation(_winrt.winrt_base):
    ...
    bandwidth_statistics: BandwidthStatistics
    local_address: winrt.windows.networking.HostName
    local_port: str
    protection_level: SocketProtectionLevel
    remote_address: winrt.windows.networking.HostName
    remote_host_name: winrt.windows.networking.HostName
    remote_port: str
    remote_service_name: str
    round_trip_time_statistics: RoundTripTimeStatistics
    session_key: winrt.windows.storage.streams.IBuffer
    server_certificate: winrt.windows.security.cryptography.certificates.Certificate
    server_certificate_error_severity: SocketSslErrorSeverity
    server_certificate_errors: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]
    server_intermediate_certificates: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]

class StreamSocketListener(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    control: StreamSocketListenerControl
    information: StreamSocketListenerInformation
    def bind_endpoint_async(local_host_name: winrt.windows.networking.HostName, local_service_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def bind_service_name_async(local_service_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def bind_service_name_async(local_service_name: str, protection_level: SocketProtectionLevel) -> winrt.windows.foundation.IAsyncAction:
        ...
    def bind_service_name_async(local_service_name: str, protection_level: SocketProtectionLevel, adapter: winrt.windows.networking.connectivity.NetworkAdapter) -> winrt.windows.foundation.IAsyncAction:
        ...
    def cancel_i_o_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def enable_transfer_ownership(task_id: uuid.UUID) -> None:
        ...
    def enable_transfer_ownership(task_id: uuid.UUID, connected_standby_action: SocketActivityConnectedStandbyAction) -> None:
        ...
    def transfer_ownership(socket_id: str) -> None:
        ...
    def transfer_ownership(socket_id: str, data: SocketActivityContext) -> None:
        ...
    def add_connection_received(event_handler: winrt.windows.foundation.TypedEventHandler[StreamSocketListener, StreamSocketListenerConnectionReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_connection_received(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class StreamSocketListenerConnectionReceivedEventArgs(_winrt.winrt_base):
    ...
    socket: StreamSocket

class StreamSocketListenerControl(_winrt.winrt_base):
    ...
    quality_of_service: SocketQualityOfService
    outbound_unicast_hop_limit: int
    outbound_buffer_size_in_bytes: int
    no_delay: bool
    keep_alive: bool

class StreamSocketListenerInformation(_winrt.winrt_base):
    ...
    local_port: str

class StreamWebSocket(IWebSocket, winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    control: StreamWebSocketControl
    information: StreamWebSocketInformation
    input_stream: winrt.windows.storage.streams.IInputStream
    output_stream: winrt.windows.storage.streams.IOutputStream
    def close() -> None:
        ...
    def close(code: int, reason: str) -> None:
        ...
    def connect_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_request_header(header_name: str, header_value: str) -> None:
        ...
    def add_closed(event_handler: winrt.windows.foundation.TypedEventHandler[IWebSocket, WebSocketClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_server_custom_validation_requested(event_handler: winrt.windows.foundation.TypedEventHandler[StreamWebSocket, WebSocketServerCustomValidationRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_server_custom_validation_requested(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class StreamWebSocketControl(IWebSocketControl, IWebSocketControl2, _winrt.winrt_base):
    ...
    no_delay: bool
    desired_unsolicited_pong_interval: winrt.windows.foundation.TimeSpan
    client_certificate: winrt.windows.security.cryptography.certificates.Certificate
    actual_unsolicited_pong_interval: winrt.windows.foundation.TimeSpan
    server_credential: winrt.windows.security.credentials.PasswordCredential
    proxy_credential: winrt.windows.security.credentials.PasswordCredential
    outbound_buffer_size_in_bytes: int
    supported_protocols: winrt.windows.foundation.collections.IVector[str]
    ignorable_server_certificate_errors: winrt.windows.foundation.collections.IVector[winrt.windows.security.cryptography.certificates.ChainValidationResult]

class StreamWebSocketInformation(IWebSocketInformation, IWebSocketInformation2, _winrt.winrt_base):
    ...
    bandwidth_statistics: BandwidthStatistics
    local_address: winrt.windows.networking.HostName
    protocol: str
    server_certificate: winrt.windows.security.cryptography.certificates.Certificate
    server_certificate_error_severity: SocketSslErrorSeverity
    server_certificate_errors: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]
    server_intermediate_certificates: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]

class WebSocketClosedEventArgs(_winrt.winrt_base):
    ...
    code: int
    reason: str

class WebSocketError(_winrt.winrt_base):
    ...
    def get_status(hresult: int) -> winrt.windows.web.WebErrorStatus:
        ...

class WebSocketKeepAlive(winrt.windows.applicationmodel.background.IBackgroundTask, _winrt.winrt_base):
    ...
    def run(task_instance: winrt.windows.applicationmodel.background.IBackgroundTaskInstance) -> None:
        ...

class WebSocketServerCustomValidationRequestedEventArgs(_winrt.winrt_base):
    ...
    server_certificate: winrt.windows.security.cryptography.certificates.Certificate
    server_certificate_error_severity: SocketSslErrorSeverity
    server_certificate_errors: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]
    server_intermediate_certificates: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...
    def reject() -> None:
        ...

class IControlChannelTriggerEventDetails(_winrt.winrt_base):
    ...
    control_channel_trigger: ControlChannelTrigger

class IControlChannelTriggerResetEventDetails(_winrt.winrt_base):
    ...
    hardware_slot_reset: bool
    reset_reason: ControlChannelTriggerResetReason
    software_slot_reset: bool

class IWebSocket(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    output_stream: winrt.windows.storage.streams.IOutputStream
    def close(code: int, reason: str) -> None:
        ...
    def connect_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_request_header(header_name: str, header_value: str) -> None:
        ...
    def close() -> None:
        ...
    def add_closed(event_handler: winrt.windows.foundation.TypedEventHandler[IWebSocket, WebSocketClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IWebSocketControl(_winrt.winrt_base):
    ...
    outbound_buffer_size_in_bytes: int
    proxy_credential: winrt.windows.security.credentials.PasswordCredential
    server_credential: winrt.windows.security.credentials.PasswordCredential
    supported_protocols: winrt.windows.foundation.collections.IVector[str]

class IWebSocketControl2(IWebSocketControl, _winrt.winrt_base):
    ...
    ignorable_server_certificate_errors: winrt.windows.foundation.collections.IVector[winrt.windows.security.cryptography.certificates.ChainValidationResult]
    outbound_buffer_size_in_bytes: int
    proxy_credential: winrt.windows.security.credentials.PasswordCredential
    server_credential: winrt.windows.security.credentials.PasswordCredential
    supported_protocols: winrt.windows.foundation.collections.IVector[str]

class IWebSocketInformation(_winrt.winrt_base):
    ...
    bandwidth_statistics: BandwidthStatistics
    local_address: winrt.windows.networking.HostName
    protocol: str

class IWebSocketInformation2(IWebSocketInformation, _winrt.winrt_base):
    ...
    server_certificate: winrt.windows.security.cryptography.certificates.Certificate
    server_certificate_error_severity: SocketSslErrorSeverity
    server_certificate_errors: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]
    server_intermediate_certificates: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]
    bandwidth_statistics: BandwidthStatistics
    local_address: winrt.windows.networking.HostName
    protocol: str

