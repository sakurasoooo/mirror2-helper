# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.networking
except Exception:
    pass

try:
    import winrt.windows.networking.sockets
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class PeerDiscoveryTypes(enum.IntFlag):
    NONE = 0
    BROWSE = 0x1
    TRIGGERED = 0x2

class PeerRole(enum.IntEnum):
    PEER = 0
    HOST = 1
    CLIENT = 2

class PeerWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class TriggeredConnectState(enum.IntEnum):
    PEER_FOUND = 0
    LISTENING = 1
    CONNECTING = 2
    COMPLETED = 3
    CANCELED = 4
    FAILED = 5

class ConnectionRequestedEventArgs(_winrt.winrt_base):
    ...
    peer_information: PeerInformation

class PeerFinder(_winrt.winrt_base):
    ...
    display_name: str
    allow_wi_fi_direct: bool
    allow_infrastructure: bool
    allow_bluetooth: bool
    alternate_identities: winrt.windows.foundation.collections.IMap[str, str]
    supported_discovery_types: PeerDiscoveryTypes
    role: PeerRole
    discovery_data: winrt.windows.storage.streams.IBuffer
    def connect_async(peer_information: PeerInformation) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.networking.sockets.StreamSocket]:
        ...
    def create_watcher() -> PeerWatcher:
        ...
    def find_all_peers_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[PeerInformation]]:
        ...
    def start() -> None:
        ...
    def start(peer_message: str) -> None:
        ...
    def stop() -> None:
        ...
    def add_connection_requested(handler: winrt.windows.foundation.TypedEventHandler[_winrt.winrt_base, ConnectionRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_connection_requested(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_triggered_connection_state_changed(handler: winrt.windows.foundation.TypedEventHandler[_winrt.winrt_base, TriggeredConnectionStateChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_triggered_connection_state_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PeerInformation(_winrt.winrt_base):
    ...
    display_name: str
    discovery_data: winrt.windows.storage.streams.IBuffer
    id: str
    host_name: winrt.windows.networking.HostName
    service_name: str

class PeerWatcher(_winrt.winrt_base):
    ...
    status: PeerWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, PeerInformation]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, PeerInformation]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, PeerInformation]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ProximityDevice(_winrt.winrt_base):
    ...
    bits_per_second: int
    device_id: str
    max_message_bytes: int
    def from_id(device_id: str) -> ProximityDevice:
        ...
    def get_default() -> ProximityDevice:
        ...
    def get_device_selector() -> str:
        ...
    def publish_binary_message(message_type: str, message: winrt.windows.storage.streams.IBuffer) -> int:
        ...
    def publish_binary_message(message_type: str, message: winrt.windows.storage.streams.IBuffer, message_transmitted_handler: MessageTransmittedHandler) -> int:
        ...
    def publish_message(message_type: str, message: str) -> int:
        ...
    def publish_message(message_type: str, message: str, message_transmitted_handler: MessageTransmittedHandler) -> int:
        ...
    def publish_uri_message(message: winrt.windows.foundation.Uri) -> int:
        ...
    def publish_uri_message(message: winrt.windows.foundation.Uri, message_transmitted_handler: MessageTransmittedHandler) -> int:
        ...
    def stop_publishing_message(message_id: int) -> None:
        ...
    def stop_subscribing_for_message(subscription_id: int) -> None:
        ...
    def subscribe_for_message(message_type: str, message_received_handler: MessageReceivedHandler) -> int:
        ...
    def add_device_arrived(arrived_handler: DeviceArrivedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_device_arrived(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_device_departed(departed_handler: DeviceDepartedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_device_departed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ProximityMessage(_winrt.winrt_base):
    ...
    data: winrt.windows.storage.streams.IBuffer
    data_as_string: str
    message_type: str
    subscription_id: int

class TriggeredConnectionStateChangedEventArgs(_winrt.winrt_base):
    ...
    id: int
    socket: winrt.windows.networking.sockets.StreamSocket
    state: TriggeredConnectState

DeviceArrivedEventHandler = typing.Callable[[ProximityDevice], None]

DeviceDepartedEventHandler = typing.Callable[[ProximityDevice], None]

MessageReceivedHandler = typing.Callable[[ProximityDevice, ProximityMessage], None]

MessageTransmittedHandler = typing.Callable[[ProximityDevice, int], None]

