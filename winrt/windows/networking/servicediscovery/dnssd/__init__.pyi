# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.networking
except Exception:
    pass

try:
    import winrt.windows.networking.connectivity
except Exception:
    pass

try:
    import winrt.windows.networking.sockets
except Exception:
    pass

class DnssdRegistrationStatus(enum.IntEnum):
    SUCCESS = 0
    INVALID_SERVICE_NAME = 1
    SERVER_ERROR = 2
    SECURITY_ERROR = 3

class DnssdServiceWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class DnssdRegistrationResult(winrt.windows.foundation.IStringable, _winrt.winrt_base):
    ...
    has_instance_name_changed: bool
    ip_address: winrt.windows.networking.HostName
    status: DnssdRegistrationStatus
    def to_string() -> str:
        ...

class DnssdServiceInstance(winrt.windows.foundation.IStringable, _winrt.winrt_base):
    ...
    weight: int
    priority: int
    port: int
    host_name: winrt.windows.networking.HostName
    dnssd_service_instance_name: str
    text_attributes: winrt.windows.foundation.collections.IMap[str, str]
    def register_datagram_socket_async(socket: winrt.windows.networking.sockets.DatagramSocket) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]:
        ...
    def register_datagram_socket_async(socket: winrt.windows.networking.sockets.DatagramSocket, adapter: winrt.windows.networking.connectivity.NetworkAdapter) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]:
        ...
    def register_stream_socket_listener_async(socket: winrt.windows.networking.sockets.StreamSocketListener) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]:
        ...
    def register_stream_socket_listener_async(socket: winrt.windows.networking.sockets.StreamSocketListener, adapter: winrt.windows.networking.connectivity.NetworkAdapter) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]:
        ...
    def to_string() -> str:
        ...

class DnssdServiceInstanceCollection(winrt.windows.foundation.collections.IVectorView[DnssdServiceInstance], winrt.windows.foundation.collections.IIterable[DnssdServiceInstance], _winrt.winrt_base):
    ...
    size: int
    def first() -> winrt.windows.foundation.collections.IIterator[DnssdServiceInstance]:
        ...
    def get_at(index: int) -> DnssdServiceInstance:
        ...
    def get_many(start_index: int, items_size: int) -> typing.Tuple[int, typing.List[DnssdServiceInstance]]:
        ...
    def index_of(value: DnssdServiceInstance) -> typing.Tuple[bool, int]:
        ...

class DnssdServiceWatcher(_winrt.winrt_base):
    ...
    status: DnssdServiceWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[DnssdServiceWatcher, DnssdServiceInstance]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[DnssdServiceWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winrt.windows.foundation.TypedEventHandler[DnssdServiceWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

