# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.networking
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class CellularApnAuthenticationType(enum.IntEnum):
    NONE = 0
    PAP = 1
    CHAP = 2
    MSCHAPV2 = 3

class ConnectionProfileDeleteStatus(enum.IntEnum):
    SUCCESS = 0
    DENIED_BY_USER = 1
    DENIED_BY_SYSTEM = 2
    UNKNOWN_ERROR = 3

class DataUsageGranularity(enum.IntEnum):
    PER_MINUTE = 0
    PER_HOUR = 1
    PER_DAY = 2
    TOTAL = 3

class DomainConnectivityLevel(enum.IntEnum):
    NONE = 0
    UNAUTHENTICATED = 1
    AUTHENTICATED = 2

class NetworkAuthenticationType(enum.IntEnum):
    NONE = 0
    UNKNOWN = 1
    OPEN80211 = 2
    SHARED_KEY80211 = 3
    WPA = 4
    WPA_PSK = 5
    WPA_NONE = 6
    RSNA = 7
    RSNA_PSK = 8
    IHV = 9
    WPA3 = 10
    WPA3_ENTERPRISE192_BITS = 10
    WPA3_SAE = 11
    OWE = 12
    WPA3_ENTERPRISE = 13

class NetworkConnectivityLevel(enum.IntEnum):
    NONE = 0
    LOCAL_ACCESS = 1
    CONSTRAINED_INTERNET_ACCESS = 2
    INTERNET_ACCESS = 3

class NetworkCostType(enum.IntEnum):
    UNKNOWN = 0
    UNRESTRICTED = 1
    FIXED = 2
    VARIABLE = 3

class NetworkEncryptionType(enum.IntEnum):
    NONE = 0
    UNKNOWN = 1
    WEP = 2
    WEP40 = 3
    WEP104 = 4
    TKIP = 5
    CCMP = 6
    WPA_USE_GROUP = 7
    RSN_USE_GROUP = 8
    IHV = 9
    GCMP = 10
    GCMP256 = 11

class NetworkTypes(enum.IntFlag):
    NONE = 0
    INTERNET = 0x1
    PRIVATE_NETWORK = 0x2

class RoamingStates(enum.IntFlag):
    NONE = 0
    NOT_ROAMING = 0x1
    ROAMING = 0x2

class TriStates(enum.IntEnum):
    DO_NOT_CARE = 0
    NO = 1
    YES = 2

class WwanDataClass(enum.IntFlag):
    NONE = 0
    GPRS = 0x1
    EDGE = 0x2
    UMTS = 0x4
    HSDPA = 0x8
    HSUPA = 0x10
    LTE_ADVANCED = 0x20
    CDMA1X_RTT = 0x10000
    CDMA1X_EVDO = 0x20000
    CDMA1X_EVDO_REV_A = 0x40000
    CDMA1X_EVDV = 0x80000
    CDMA3X_RTT = 0x100000
    CDMA1X_EVDO_REV_B = 0x200000
    CDMA_UMB = 0x400000
    CUSTOM = 0x80000000

class WwanNetworkIPKind(enum.IntEnum):
    NONE = 0
    IPV4 = 1
    IPV6 = 2
    IPV4V6 = 3
    IPV4V6V4_XLAT = 4

class WwanNetworkRegistrationState(enum.IntEnum):
    NONE = 0
    DEREGISTERED = 1
    SEARCHING = 2
    HOME = 3
    ROAMING = 4
    PARTNER = 5
    DENIED = 6

class NetworkUsageStates(_winrt.winrt_base):
    ...

class AttributedNetworkUsage(_winrt.winrt_base):
    ...
    attribution_id: str
    attribution_name: str
    attribution_thumbnail: winrt.windows.storage.streams.IRandomAccessStreamReference
    bytes_received: int
    bytes_sent: int

class CellularApnContext(_winrt.winrt_base):
    ...
    user_name: str
    provider_id: str
    password: str
    is_compression_enabled: bool
    authentication_type: CellularApnAuthenticationType
    access_point_name: str
    profile_name: str

class ConnectionCost(_winrt.winrt_base):
    ...
    approaching_data_limit: bool
    network_cost_type: NetworkCostType
    over_data_limit: bool
    roaming: bool
    background_data_usage_restricted: bool

class ConnectionProfile(_winrt.winrt_base):
    ...
    network_adapter: NetworkAdapter
    network_security_settings: NetworkSecuritySettings
    profile_name: str
    is_wlan_connection_profile: bool
    is_wwan_connection_profile: bool
    service_provider_guid: typing.Optional[uuid.UUID]
    wlan_connection_profile_details: WlanConnectionProfileDetails
    wwan_connection_profile_details: WwanConnectionProfileDetails
    can_delete: bool
    def get_attributed_network_usage_async(start_time: winrt.windows.foundation.DateTime, end_time: winrt.windows.foundation.DateTime, states: NetworkUsageStates) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AttributedNetworkUsage]]:
        ...
    def get_connection_cost() -> ConnectionCost:
        ...
    def get_connectivity_intervals_async(start_time: winrt.windows.foundation.DateTime, end_time: winrt.windows.foundation.DateTime, states: NetworkUsageStates) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ConnectivityInterval]]:
        ...
    def get_data_plan_status() -> DataPlanStatus:
        ...
    def get_domain_connectivity_level() -> DomainConnectivityLevel:
        ...
    def get_local_usage(start_time: winrt.windows.foundation.DateTime, end_time: winrt.windows.foundation.DateTime) -> DataUsage:
        ...
    def get_local_usage(start_time: winrt.windows.foundation.DateTime, end_time: winrt.windows.foundation.DateTime, states: RoamingStates) -> DataUsage:
        ...
    def get_network_connectivity_level() -> NetworkConnectivityLevel:
        ...
    def get_network_names() -> winrt.windows.foundation.collections.IVectorView[str]:
        ...
    def get_network_usage_async(start_time: winrt.windows.foundation.DateTime, end_time: winrt.windows.foundation.DateTime, granularity: DataUsageGranularity, states: NetworkUsageStates) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[NetworkUsage]]:
        ...
    def get_provider_network_usage_async(start_time: winrt.windows.foundation.DateTime, end_time: winrt.windows.foundation.DateTime, states: NetworkUsageStates) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ProviderNetworkUsage]]:
        ...
    def get_signal_bars() -> typing.Optional[int]:
        ...
    def try_delete_async() -> winrt.windows.foundation.IAsyncOperation[ConnectionProfileDeleteStatus]:
        ...

class ConnectionProfileFilter(_winrt.winrt_base):
    ...
    service_provider_guid: typing.Optional[uuid.UUID]
    network_cost_type: NetworkCostType
    is_wwan_connection_profile: bool
    is_wlan_connection_profile: bool
    is_connected: bool
    is_roaming: typing.Optional[bool]
    is_over_data_limit: typing.Optional[bool]
    is_background_data_usage_restricted: typing.Optional[bool]
    raw_data: winrt.windows.storage.streams.IBuffer
    purpose_guid: typing.Optional[uuid.UUID]

class ConnectionSession(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    connection_profile: ConnectionProfile
    def close() -> None:
        ...

class ConnectivityInterval(_winrt.winrt_base):
    ...
    connection_duration: winrt.windows.foundation.TimeSpan
    start_time: winrt.windows.foundation.DateTime

class ConnectivityManager(_winrt.winrt_base):
    ...
    def acquire_connection_async(cellular_apn_context: CellularApnContext) -> winrt.windows.foundation.IAsyncOperation[ConnectionSession]:
        ...
    def add_http_route_policy(route_policy: RoutePolicy) -> None:
        ...
    def remove_http_route_policy(route_policy: RoutePolicy) -> None:
        ...

class DataPlanStatus(_winrt.winrt_base):
    ...
    data_limit_in_megabytes: typing.Optional[int]
    data_plan_usage: DataPlanUsage
    inbound_bits_per_second: typing.Optional[int]
    max_transfer_size_in_megabytes: typing.Optional[int]
    next_billing_cycle: typing.Optional[winrt.windows.foundation.DateTime]
    outbound_bits_per_second: typing.Optional[int]

class DataPlanUsage(_winrt.winrt_base):
    ...
    last_sync_time: winrt.windows.foundation.DateTime
    megabytes_used: int

class DataUsage(_winrt.winrt_base):
    ...
    bytes_received: int
    bytes_sent: int

class IPInformation(_winrt.winrt_base):
    ...
    network_adapter: NetworkAdapter
    prefix_length: typing.Optional[int]

class LanIdentifier(_winrt.winrt_base):
    ...
    infrastructure_id: LanIdentifierData
    network_adapter_id: uuid.UUID
    port_id: LanIdentifierData

class LanIdentifierData(_winrt.winrt_base):
    ...
    type: int
    value: winrt.windows.foundation.collections.IVectorView[int]

class NetworkAdapter(_winrt.winrt_base):
    ...
    iana_interface_type: int
    inbound_max_bits_per_second: int
    network_adapter_id: uuid.UUID
    network_item: NetworkItem
    outbound_max_bits_per_second: int
    def get_connected_profile_async() -> winrt.windows.foundation.IAsyncOperation[ConnectionProfile]:
        ...

class NetworkInformation(_winrt.winrt_base):
    ...
    def find_connection_profiles_async(p_profile_filter: ConnectionProfileFilter) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ConnectionProfile]]:
        ...
    def get_connection_profiles() -> winrt.windows.foundation.collections.IVectorView[ConnectionProfile]:
        ...
    def get_host_names() -> winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.HostName]:
        ...
    def get_internet_connection_profile() -> ConnectionProfile:
        ...
    def get_lan_identifiers() -> winrt.windows.foundation.collections.IVectorView[LanIdentifier]:
        ...
    def get_proxy_configuration_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncOperation[ProxyConfiguration]:
        ...
    def get_sorted_endpoint_pairs(destination_list: typing.Iterable[winrt.windows.networking.EndpointPair], sort_options: winrt.windows.networking.HostNameSortOptions) -> winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.EndpointPair]:
        ...
    def add_network_status_changed(network_status_handler: NetworkStatusChangedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_network_status_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class NetworkItem(_winrt.winrt_base):
    ...
    network_id: uuid.UUID
    def get_network_types() -> NetworkTypes:
        ...

class NetworkSecuritySettings(_winrt.winrt_base):
    ...
    network_authentication_type: NetworkAuthenticationType
    network_encryption_type: NetworkEncryptionType

class NetworkStateChangeEventDetails(_winrt.winrt_base):
    ...
    has_new_connection_cost: bool
    has_new_domain_connectivity_level: bool
    has_new_host_name_list: bool
    has_new_internet_connection_profile: bool
    has_new_network_connectivity_level: bool
    has_new_wwan_registration_state: bool
    has_new_tethering_client_count: bool
    has_new_tethering_operational_state: bool

class NetworkUsage(_winrt.winrt_base):
    ...
    bytes_received: int
    bytes_sent: int
    connection_duration: winrt.windows.foundation.TimeSpan

class ProviderNetworkUsage(_winrt.winrt_base):
    ...
    bytes_received: int
    bytes_sent: int
    provider_id: str

class ProxyConfiguration(_winrt.winrt_base):
    ...
    can_connect_directly: bool
    proxy_uris: winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.Uri]

class RoutePolicy(_winrt.winrt_base):
    ...
    connection_profile: ConnectionProfile
    host_name: winrt.windows.networking.HostName
    host_name_type: winrt.windows.networking.DomainNameType

class WlanConnectionProfileDetails(_winrt.winrt_base):
    ...
    def get_connected_ssid() -> str:
        ...

class WwanConnectionProfileDetails(_winrt.winrt_base):
    ...
    access_point_name: str
    home_provider_id: str
    i_p_kind: WwanNetworkIPKind
    purpose_guids: winrt.windows.foundation.collections.IVectorView[uuid.UUID]
    def get_current_data_class() -> WwanDataClass:
        ...
    def get_network_registration_state() -> WwanNetworkRegistrationState:
        ...

NetworkStatusChangedEventHandler = typing.Callable[[_winrt.winrt_base], None]

