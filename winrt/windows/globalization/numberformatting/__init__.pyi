# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class CurrencyFormatterMode(enum.IntEnum):
    USE_SYMBOL = 0
    USE_CURRENCY_CODE = 1

class RoundingAlgorithm(enum.IntEnum):
    NONE = 0
    ROUND_DOWN = 1
    ROUND_UP = 2
    ROUND_TOWARDS_ZERO = 3
    ROUND_AWAY_FROM_ZERO = 4
    ROUND_HALF_DOWN = 5
    ROUND_HALF_UP = 6
    ROUND_HALF_TOWARDS_ZERO = 7
    ROUND_HALF_AWAY_FROM_ZERO = 8
    ROUND_HALF_TO_EVEN = 9
    ROUND_HALF_TO_ODD = 10

class CurrencyFormatter(INumberParser, INumberFormatter2, INumberFormatter, INumberFormatterOptions, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.winrt_base):
    ...
    currency: str
    mode: CurrencyFormatterMode
    numeral_system: str
    is_grouped: bool
    is_decimal_point_always_displayed: bool
    integer_digits: int
    fraction_digits: int
    geographic_region: str
    resolved_geographic_region: str
    resolved_language: str
    languages: winrt.windows.foundation.collections.IVectorView[str]
    number_rounder: INumberRounder
    is_zero_signed: bool
    significant_digits: int
    def apply_rounding_for_currency(rounding_algorithm: RoundingAlgorithm) -> None:
        ...
    def format(value: float) -> str:
        ...
    def format_double(value: float) -> str:
        ...
    def format_int(value: int) -> str:
        ...
    def format_uint(value: int) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[float]:
        ...
    def parse_int(text: str) -> typing.Optional[int]:
        ...
    def parse_uint(text: str) -> typing.Optional[int]:
        ...

class DecimalFormatter(INumberFormatterOptions, INumberFormatter, INumberFormatter2, INumberParser, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.winrt_base):
    ...
    is_decimal_point_always_displayed: bool
    integer_digits: int
    is_grouped: bool
    numeral_system: str
    fraction_digits: int
    geographic_region: str
    languages: winrt.windows.foundation.collections.IVectorView[str]
    resolved_geographic_region: str
    resolved_language: str
    number_rounder: INumberRounder
    is_zero_signed: bool
    significant_digits: int
    def format(value: float) -> str:
        ...
    def format_double(value: float) -> str:
        ...
    def format_int(value: int) -> str:
        ...
    def format_uint(value: int) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[float]:
        ...
    def parse_int(text: str) -> typing.Optional[int]:
        ...
    def parse_uint(text: str) -> typing.Optional[int]:
        ...

class IncrementNumberRounder(INumberRounder, _winrt.winrt_base):
    ...
    rounding_algorithm: RoundingAlgorithm
    increment: float
    def round_double(value: float) -> float:
        ...
    def round_int32(value: int) -> int:
        ...
    def round_int64(value: int) -> int:
        ...
    def round_single(value: float) -> float:
        ...
    def round_uint32(value: int) -> int:
        ...
    def round_uint64(value: int) -> int:
        ...

class NumeralSystemTranslator(_winrt.winrt_base):
    ...
    numeral_system: str
    languages: winrt.windows.foundation.collections.IVectorView[str]
    resolved_language: str
    def translate_numerals(value: str) -> str:
        ...

class PercentFormatter(INumberFormatterOptions, INumberFormatter, INumberFormatter2, INumberParser, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.winrt_base):
    ...
    is_decimal_point_always_displayed: bool
    integer_digits: int
    is_grouped: bool
    numeral_system: str
    fraction_digits: int
    geographic_region: str
    languages: winrt.windows.foundation.collections.IVectorView[str]
    resolved_geographic_region: str
    resolved_language: str
    number_rounder: INumberRounder
    is_zero_signed: bool
    significant_digits: int
    def format(value: float) -> str:
        ...
    def format_double(value: float) -> str:
        ...
    def format_int(value: int) -> str:
        ...
    def format_uint(value: int) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[float]:
        ...
    def parse_int(text: str) -> typing.Optional[int]:
        ...
    def parse_uint(text: str) -> typing.Optional[int]:
        ...

class PermilleFormatter(INumberFormatterOptions, INumberFormatter, INumberFormatter2, INumberParser, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.winrt_base):
    ...
    is_decimal_point_always_displayed: bool
    integer_digits: int
    is_grouped: bool
    numeral_system: str
    fraction_digits: int
    geographic_region: str
    languages: winrt.windows.foundation.collections.IVectorView[str]
    resolved_geographic_region: str
    resolved_language: str
    number_rounder: INumberRounder
    is_zero_signed: bool
    significant_digits: int
    def format(value: float) -> str:
        ...
    def format_double(value: float) -> str:
        ...
    def format_int(value: int) -> str:
        ...
    def format_uint(value: int) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[float]:
        ...
    def parse_int(text: str) -> typing.Optional[int]:
        ...
    def parse_uint(text: str) -> typing.Optional[int]:
        ...

class SignificantDigitsNumberRounder(INumberRounder, _winrt.winrt_base):
    ...
    significant_digits: int
    rounding_algorithm: RoundingAlgorithm
    def round_double(value: float) -> float:
        ...
    def round_int32(value: int) -> int:
        ...
    def round_int64(value: int) -> int:
        ...
    def round_single(value: float) -> float:
        ...
    def round_uint32(value: int) -> int:
        ...
    def round_uint64(value: int) -> int:
        ...

class INumberFormatter(_winrt.winrt_base):
    ...
    def format(value: float) -> str:
        ...

class INumberFormatter2(_winrt.winrt_base):
    ...
    def format_double(value: float) -> str:
        ...
    def format_int(value: int) -> str:
        ...
    def format_uint(value: int) -> str:
        ...

class INumberFormatterOptions(_winrt.winrt_base):
    ...
    fraction_digits: int
    geographic_region: str
    integer_digits: int
    is_decimal_point_always_displayed: bool
    is_grouped: bool
    languages: winrt.windows.foundation.collections.IVectorView[str]
    numeral_system: str
    resolved_geographic_region: str
    resolved_language: str

class INumberParser(_winrt.winrt_base):
    ...
    def parse_double(text: str) -> typing.Optional[float]:
        ...
    def parse_int(text: str) -> typing.Optional[int]:
        ...
    def parse_uint(text: str) -> typing.Optional[int]:
        ...

class INumberRounder(_winrt.winrt_base):
    ...
    def round_double(value: float) -> float:
        ...
    def round_int32(value: int) -> int:
        ...
    def round_int64(value: int) -> int:
        ...
    def round_single(value: float) -> float:
        ...
    def round_uint32(value: int) -> int:
        ...
    def round_uint64(value: int) -> int:
        ...

class INumberRounderOption(_winrt.winrt_base):
    ...
    number_rounder: INumberRounder

class ISignedZeroOption(_winrt.winrt_base):
    ...
    is_zero_signed: bool

class ISignificantDigitsOption(_winrt.winrt_base):
    ...
    significant_digits: int

