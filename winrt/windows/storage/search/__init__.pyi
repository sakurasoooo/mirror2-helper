# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.data.text
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.fileproperties
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class CommonFileQuery(enum.IntEnum):
    DEFAULT_QUERY = 0
    ORDER_BY_NAME = 1
    ORDER_BY_TITLE = 2
    ORDER_BY_MUSIC_PROPERTIES = 3
    ORDER_BY_SEARCH_RANK = 4
    ORDER_BY_DATE = 5

class CommonFolderQuery(enum.IntEnum):
    DEFAULT_QUERY = 0
    GROUP_BY_YEAR = 100
    GROUP_BY_MONTH = 101
    GROUP_BY_ARTIST = 102
    GROUP_BY_ALBUM = 103
    GROUP_BY_ALBUM_ARTIST = 104
    GROUP_BY_COMPOSER = 105
    GROUP_BY_GENRE = 106
    GROUP_BY_PUBLISHED_YEAR = 107
    GROUP_BY_RATING = 108
    GROUP_BY_TAG = 109
    GROUP_BY_AUTHOR = 110
    GROUP_BY_TYPE = 111

class DateStackOption(enum.IntEnum):
    NONE = 0
    YEAR = 1
    MONTH = 2

class FolderDepth(enum.IntEnum):
    SHALLOW = 0
    DEEP = 1

class IndexedState(enum.IntEnum):
    UNKNOWN = 0
    NOT_INDEXED = 1
    PARTIALLY_INDEXED = 2
    FULLY_INDEXED = 3

class IndexerOption(enum.IntEnum):
    USE_INDEXER_WHEN_AVAILABLE = 0
    ONLY_USE_INDEXER = 1
    DO_NOT_USE_INDEXER = 2
    ONLY_USE_INDEXER_AND_OPTIMIZE_FOR_INDEXED_PROPERTIES = 3

class SortEntry(_winrt.winrt_base):
    ...

class ContentIndexer(_winrt.winrt_base):
    ...
    revision: int
    def add_async(indexable_content: IIndexableContent) -> winrt.windows.foundation.IAsyncAction:
        ...
    def create_query(search_filter: str, properties_to_retrieve: typing.Iterable[str]) -> ContentIndexerQuery:
        ...
    def create_query(search_filter: str, properties_to_retrieve: typing.Iterable[str], sort_order: typing.Iterable[SortEntry]) -> ContentIndexerQuery:
        ...
    def create_query(search_filter: str, properties_to_retrieve: typing.Iterable[str], sort_order: typing.Iterable[SortEntry], search_filter_language: str) -> ContentIndexerQuery:
        ...
    def delete_all_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_async(content_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_multiple_async(content_ids: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_indexer() -> ContentIndexer:
        ...
    def get_indexer(index_name: str) -> ContentIndexer:
        ...
    def retrieve_properties_async(content_id: str, properties_to_retrieve: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]]:
        ...
    def update_async(indexable_content: IIndexableContent) -> winrt.windows.foundation.IAsyncAction:
        ...

class ContentIndexerQuery(_winrt.winrt_base):
    ...
    query_folder: winrt.windows.storage.StorageFolder
    def get_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[IIndexableContent]]:
        ...
    def get_async(start_index: int, max_items: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[IIndexableContent]]:
        ...
    def get_count_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_properties_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]]]:
        ...
    def get_properties_async(start_index: int, max_items: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]]]:
        ...

class IndexableContent(IIndexableContent, _winrt.winrt_base):
    ...
    stream_content_type: str
    stream: winrt.windows.storage.streams.IRandomAccessStream
    id: str
    properties: winrt.windows.foundation.collections.IMap[str, _winrt.winrt_base]

class QueryOptions(_winrt.winrt_base):
    ...
    user_search_filter: str
    language: str
    indexer_option: IndexerOption
    folder_depth: FolderDepth
    application_search_filter: str
    date_stack_option: DateStackOption
    file_type_filter: winrt.windows.foundation.collections.IVector[str]
    group_property_name: str
    sort_order: winrt.windows.foundation.collections.IVector[SortEntry]
    storage_provider_id_filter: winrt.windows.foundation.collections.IVector[str]
    def load_from_string(value: str) -> None:
        ...
    def save_to_string() -> str:
        ...
    def set_property_prefetch(options: winrt.windows.storage.fileproperties.PropertyPrefetchOptions, properties_to_retrieve: typing.Iterable[str]) -> None:
        ...
    def set_thumbnail_prefetch(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> None:
        ...

class SortEntryVector(winrt.windows.foundation.collections.IVector[SortEntry], winrt.windows.foundation.collections.IIterable[SortEntry], _winrt.winrt_base):
    ...
    size: int
    def append(value: SortEntry) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winrt.windows.foundation.collections.IIterator[SortEntry]:
        ...
    def get_at(index: int) -> SortEntry:
        ...
    def get_many(start_index: int, items_size: int) -> typing.Tuple[int, typing.List[SortEntry]]:
        ...
    def get_view() -> winrt.windows.foundation.collections.IVectorView[SortEntry]:
        ...
    def index_of(value: SortEntry) -> typing.Tuple[bool, int]:
        ...
    def insert_at(index: int, value: SortEntry) -> None:
        ...
    def remove_at(index: int) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[SortEntry]) -> None:
        ...
    def set_at(index: int, value: SortEntry) -> None:
        ...

class StorageFileQueryResult(IStorageQueryResultBase, _winrt.winrt_base):
    ...
    folder: winrt.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.winrt_base) -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_files_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]:
        ...
    def get_files_async(start_index: int, max_number_of_items: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]:
        ...
    def get_item_count_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_matching_properties_with_ranges(file: winrt.windows.storage.StorageFile) -> winrt.windows.foundation.collections.IMap[str, winrt.windows.foundation.collections.IVectorView[winrt.windows.data.text.TextSegment]]:
        ...
    def add_contents_changed(handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class StorageFolderQueryResult(IStorageQueryResultBase, _winrt.winrt_base):
    ...
    folder: winrt.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.winrt_base) -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_folders_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFolder]]:
        ...
    def get_folders_async(start_index: int, max_number_of_items: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFolder]]:
        ...
    def get_item_count_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def add_contents_changed(handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class StorageItemQueryResult(IStorageQueryResultBase, _winrt.winrt_base):
    ...
    folder: winrt.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.winrt_base) -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_item_count_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_items_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]:
        ...
    def get_items_async(start_index: int, max_number_of_items: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]:
        ...
    def add_contents_changed(handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class StorageLibraryChangeTrackerTriggerDetails(_winrt.winrt_base):
    ...
    change_tracker: winrt.windows.storage.StorageLibraryChangeTracker
    folder: winrt.windows.storage.StorageFolder

class StorageLibraryContentChangedTriggerDetails(_winrt.winrt_base):
    ...
    folder: winrt.windows.storage.StorageFolder
    def create_modified_since_query(last_query_time: winrt.windows.foundation.DateTime) -> StorageItemQueryResult:
        ...

class ValueAndLanguage(_winrt.winrt_base):
    ...
    value: _winrt.winrt_base
    language: str

class IIndexableContent(_winrt.winrt_base):
    ...
    id: str
    properties: winrt.windows.foundation.collections.IMap[str, _winrt.winrt_base]
    stream: winrt.windows.storage.streams.IRandomAccessStream
    stream_content_type: str

class IStorageFolderQueryOperations(_winrt.winrt_base):
    ...
    def are_query_options_supported(query_options: QueryOptions) -> bool:
        ...
    def create_file_query() -> StorageFileQueryResult:
        ...
    def create_file_query(query: CommonFileQuery) -> StorageFileQueryResult:
        ...
    def create_file_query_with_options(query_options: QueryOptions) -> StorageFileQueryResult:
        ...
    def create_folder_query() -> StorageFolderQueryResult:
        ...
    def create_folder_query(query: CommonFolderQuery) -> StorageFolderQueryResult:
        ...
    def create_folder_query_with_options(query_options: QueryOptions) -> StorageFolderQueryResult:
        ...
    def create_item_query() -> StorageItemQueryResult:
        ...
    def create_item_query_with_options(query_options: QueryOptions) -> StorageItemQueryResult:
        ...
    def get_files_async(query: CommonFileQuery) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]:
        ...
    def get_files_async(query: CommonFileQuery, start_index: int, max_items_to_retrieve: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]:
        ...
    def get_folders_async(query: CommonFolderQuery) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFolder]]:
        ...
    def get_folders_async(query: CommonFolderQuery, start_index: int, max_items_to_retrieve: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFolder]]:
        ...
    def get_indexed_state_async() -> winrt.windows.foundation.IAsyncOperation[IndexedState]:
        ...
    def get_items_async(start_index: int, max_items_to_retrieve: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]:
        ...
    def is_common_file_query_supported(query: CommonFileQuery) -> bool:
        ...
    def is_common_folder_query_supported(query: CommonFolderQuery) -> bool:
        ...

class IStorageQueryResultBase(_winrt.winrt_base):
    ...
    folder: winrt.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.winrt_base) -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_item_count_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def add_contents_changed(handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winrt.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

