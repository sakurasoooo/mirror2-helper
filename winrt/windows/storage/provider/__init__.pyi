# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class CachedFileOptions(enum.IntFlag):
    NONE = 0
    REQUIRE_UPDATE_ON_ACCESS = 0x1
    USE_CACHED_FILE_WHEN_OFFLINE = 0x2
    DENY_ACCESS_WHEN_OFFLINE = 0x4

class CachedFileTarget(enum.IntEnum):
    LOCAL = 0
    REMOTE = 1

class FileUpdateStatus(enum.IntEnum):
    INCOMPLETE = 0
    COMPLETE = 1
    USER_INPUT_NEEDED = 2
    CURRENTLY_UNAVAILABLE = 3
    FAILED = 4
    COMPLETE_AND_RENAMED = 5

class ReadActivationMode(enum.IntEnum):
    NOT_NEEDED = 0
    BEFORE_ACCESS = 1

class StorageProviderHardlinkPolicy(enum.IntFlag):
    NONE = 0
    ALLOWED = 0x1

class StorageProviderHydrationPolicy(enum.IntEnum):
    PARTIAL = 0
    PROGRESSIVE = 1
    FULL = 2
    ALWAYS_FULL = 3

class StorageProviderHydrationPolicyModifier(enum.IntFlag):
    NONE = 0
    VALIDATION_REQUIRED = 0x1
    STREAMING_ALLOWED = 0x2
    AUTO_DEHYDRATION_ALLOWED = 0x4
    ALLOW_FULL_RESTART_HYDRATION = 0x8

class StorageProviderInSyncPolicy(enum.IntFlag):
    DEFAULT = 0
    FILE_CREATION_TIME = 0x1
    FILE_READ_ONLY_ATTRIBUTE = 0x2
    FILE_HIDDEN_ATTRIBUTE = 0x4
    FILE_SYSTEM_ATTRIBUTE = 0x8
    DIRECTORY_CREATION_TIME = 0x10
    DIRECTORY_READ_ONLY_ATTRIBUTE = 0x20
    DIRECTORY_HIDDEN_ATTRIBUTE = 0x40
    DIRECTORY_SYSTEM_ATTRIBUTE = 0x80
    FILE_LAST_WRITE_TIME = 0x100
    DIRECTORY_LAST_WRITE_TIME = 0x200
    PRESERVE_INSYNC_FOR_SYNC_ENGINE = 0x80000000

class StorageProviderPopulationPolicy(enum.IntEnum):
    FULL = 1
    ALWAYS_FULL = 2

class StorageProviderProtectionMode(enum.IntEnum):
    UNKNOWN = 0
    PERSONAL = 1

class StorageProviderState(enum.IntEnum):
    IN_SYNC = 0
    SYNCING = 1
    PAUSED = 2
    ERROR = 3
    WARNING = 4
    OFFLINE = 5

class StorageProviderUriSourceStatus(enum.IntEnum):
    SUCCESS = 0
    NO_SYNC_ROOT = 1
    FILE_NOT_FOUND = 2

class UIStatus(enum.IntEnum):
    UNAVAILABLE = 0
    HIDDEN = 1
    VISIBLE = 2
    COMPLETE = 3

class WriteActivationMode(enum.IntEnum):
    READ_ONLY = 0
    NOT_NEEDED = 1
    AFTER_WRITE = 2

class CachedFileUpdater(_winrt.winrt_base):
    ...
    def set_update_information(file: winrt.windows.storage.IStorageFile, content_id: str, read_mode: ReadActivationMode, write_mode: WriteActivationMode, options: CachedFileOptions) -> None:
        ...

class CachedFileUpdaterUI(_winrt.winrt_base):
    ...
    title: str
    u_i_status: UIStatus
    update_target: CachedFileTarget
    update_request: FileUpdateRequest
    def get_deferral() -> FileUpdateRequestDeferral:
        ...
    def add_file_update_requested(handler: winrt.windows.foundation.TypedEventHandler[CachedFileUpdaterUI, FileUpdateRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_file_update_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_u_i_requested(handler: winrt.windows.foundation.TypedEventHandler[CachedFileUpdaterUI, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_u_i_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class FileUpdateRequest(_winrt.winrt_base):
    ...
    status: FileUpdateStatus
    content_id: str
    file: winrt.windows.storage.StorageFile
    user_input_needed_message: str
    def get_deferral() -> FileUpdateRequestDeferral:
        ...
    def update_local_file(value: winrt.windows.storage.IStorageFile) -> None:
        ...

class FileUpdateRequestDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class FileUpdateRequestedEventArgs(_winrt.winrt_base):
    ...
    request: FileUpdateRequest

class StorageProviderError(_winrt.winrt_base):
    ...
    secondary_action: StorageProviderErrorCommand
    primary_action: StorageProviderErrorCommand
    informational_link: StorageProviderErrorCommand
    file_path: str
    id: str
    message: str
    title: str

class StorageProviderErrorCommand(_winrt.winrt_base):
    ...
    action_uri: winrt.windows.foundation.Uri
    label: str

class StorageProviderFileTypeInfo(_winrt.winrt_base):
    ...
    file_extension: str
    icon_resource: str

class StorageProviderGetContentInfoForPathResult(_winrt.winrt_base):
    ...
    status: StorageProviderUriSourceStatus
    content_uri: str
    content_id: str

class StorageProviderGetPathForContentUriResult(_winrt.winrt_base):
    ...
    status: StorageProviderUriSourceStatus
    path: str

class StorageProviderItemProperties(_winrt.winrt_base):
    ...
    def set_async(item: winrt.windows.storage.IStorageItem, item_properties: typing.Iterable[StorageProviderItemProperty]) -> winrt.windows.foundation.IAsyncAction:
        ...

class StorageProviderItemProperty(_winrt.winrt_base):
    ...
    value: str
    id: int
    icon_resource: str

class StorageProviderItemPropertyDefinition(_winrt.winrt_base):
    ...
    id: int
    display_name_resource: str

class StorageProviderStatus(_winrt.winrt_base):
    ...
    error_messages: winrt.windows.foundation.collections.IVectorView[StorageProviderError]
    message: str
    state: StorageProviderState

class StorageProviderSyncRootInfo(_winrt.winrt_base):
    ...
    version: str
    show_siblings_as_group: bool
    recycle_bin_uri: winrt.windows.foundation.Uri
    protection_mode: StorageProviderProtectionMode
    population_policy: StorageProviderPopulationPolicy
    path: winrt.windows.storage.IStorageFolder
    in_sync_policy: StorageProviderInSyncPolicy
    id: str
    icon_resource: str
    hydration_policy_modifier: StorageProviderHydrationPolicyModifier
    hydration_policy: StorageProviderHydrationPolicy
    hardlink_policy: StorageProviderHardlinkPolicy
    display_name_resource: str
    context: winrt.windows.storage.streams.IBuffer
    allow_pinning: bool
    storage_provider_item_property_definitions: winrt.windows.foundation.collections.IVector[StorageProviderItemPropertyDefinition]
    provider_id: uuid.UUID
    fallback_file_type_info: winrt.windows.foundation.collections.IVector[StorageProviderFileTypeInfo]

class StorageProviderSyncRootManager(_winrt.winrt_base):
    ...
    def get_current_sync_roots() -> winrt.windows.foundation.collections.IVectorView[StorageProviderSyncRootInfo]:
        ...
    def get_sync_root_information_for_folder(folder: winrt.windows.storage.IStorageFolder) -> StorageProviderSyncRootInfo:
        ...
    def get_sync_root_information_for_id(id: str) -> StorageProviderSyncRootInfo:
        ...
    def is_supported() -> bool:
        ...
    def register(sync_root_information: StorageProviderSyncRootInfo) -> None:
        ...
    def unregister(id: str) -> None:
        ...

class IStorageProviderHandlerFactory(_winrt.winrt_base):
    ...
    def get_status_source(sync_root_id: str) -> IStorageProviderStatusSource:
        ...

class IStorageProviderItemPropertySource(_winrt.winrt_base):
    ...
    def get_item_properties(item_path: str) -> winrt.windows.foundation.collections.IIterable[StorageProviderItemProperty]:
        ...

class IStorageProviderPropertyCapabilities(_winrt.winrt_base):
    ...
    def is_property_supported(property_canonical_name: str) -> bool:
        ...

class IStorageProviderStatusSource(_winrt.winrt_base):
    ...
    def get_status() -> StorageProviderStatus:
        ...
    def add_changed(handler: winrt.windows.foundation.TypedEventHandler[IStorageProviderStatusSource, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IStorageProviderUriSource(_winrt.winrt_base):
    ...
    def get_content_info_for_path(path: str, result: StorageProviderGetContentInfoForPathResult) -> None:
        ...
    def get_path_for_content_uri(content_uri: str, result: StorageProviderGetPathForContentUriResult) -> None:
        ...

