# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage.fileproperties
except Exception:
    pass

try:
    import winrt.windows.storage.provider
except Exception:
    pass

try:
    import winrt.windows.storage.search
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class ApplicationDataCreateDisposition(enum.IntEnum):
    ALWAYS = 0
    EXISTING = 1

class ApplicationDataLocality(enum.IntEnum):
    LOCAL = 0
    ROAMING = 1
    TEMPORARY = 2
    LOCAL_CACHE = 3
    SHARED_LOCAL = 4

class CreationCollisionOption(enum.IntEnum):
    GENERATE_UNIQUE_NAME = 0
    REPLACE_EXISTING = 1
    FAIL_IF_EXISTS = 2
    OPEN_IF_EXISTS = 3

class FileAccessMode(enum.IntEnum):
    READ = 0
    READ_WRITE = 1

class FileAttributes(enum.IntFlag):
    NORMAL = 0
    READ_ONLY = 0x1
    DIRECTORY = 0x10
    ARCHIVE = 0x20
    TEMPORARY = 0x100
    LOCALLY_INCOMPLETE = 0x200

class KnownFolderId(enum.IntEnum):
    APP_CAPTURES = 0
    CAMERA_ROLL = 1
    DOCUMENTS_LIBRARY = 2
    HOME_GROUP = 3
    MEDIA_SERVER_DEVICES = 4
    MUSIC_LIBRARY = 5
    OBJECTS3_D = 6
    PICTURES_LIBRARY = 7
    PLAYLISTS = 8
    RECORDED_CALLS = 9
    REMOVABLE_DEVICES = 10
    SAVED_PICTURES = 11
    SCREENSHOTS = 12
    VIDEOS_LIBRARY = 13
    ALL_APP_MODS = 14
    CURRENT_APP_MODS = 15
    DOWNLOADS_FOLDER = 16

class KnownFoldersAccessStatus(enum.IntEnum):
    DENIED_BY_SYSTEM = 0
    NOT_DECLARED_BY_APP = 1
    DENIED_BY_USER = 2
    USER_PROMPT_REQUIRED = 3
    ALLOWED = 4
    ALLOWED_PER_APP_FOLDER = 5

class KnownLibraryId(enum.IntEnum):
    MUSIC = 0
    PICTURES = 1
    VIDEOS = 2
    DOCUMENTS = 3

class NameCollisionOption(enum.IntEnum):
    GENERATE_UNIQUE_NAME = 0
    REPLACE_EXISTING = 1
    FAIL_IF_EXISTS = 2

class StorageDeleteOption(enum.IntEnum):
    DEFAULT = 0
    PERMANENT_DELETE = 1

class StorageItemTypes(enum.IntFlag):
    NONE = 0
    FILE = 0x1
    FOLDER = 0x2

class StorageLibraryChangeType(enum.IntEnum):
    CREATED = 0
    DELETED = 1
    MOVED_OR_RENAMED = 2
    CONTENTS_CHANGED = 3
    MOVED_OUT_OF_LIBRARY = 4
    MOVED_INTO_LIBRARY = 5
    CONTENTS_REPLACED = 6
    INDEXING_STATUS_CHANGED = 7
    ENCRYPTION_CHANGED = 8
    CHANGE_TRACKING_LOST = 9

class StorageOpenOptions(enum.IntFlag):
    NONE = 0
    ALLOW_ONLY_READERS = 0x1
    ALLOW_READERS_AND_WRITERS = 0x2

class StreamedFileFailureMode(enum.IntEnum):
    FAILED = 0
    CURRENTLY_UNAVAILABLE = 1
    INCOMPLETE = 2

class AppDataPaths(_winrt.winrt_base):
    ...
    cookies: str
    desktop: str
    documents: str
    favorites: str
    history: str
    internet_cache: str
    local_app_data: str
    program_data: str
    roaming_app_data: str
    def get_default() -> AppDataPaths:
        ...
    def get_for_user(user: winrt.windows.system.User) -> AppDataPaths:
        ...

class ApplicationData(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    local_folder: StorageFolder
    local_settings: ApplicationDataContainer
    roaming_folder: StorageFolder
    roaming_settings: ApplicationDataContainer
    roaming_storage_quota: int
    temporary_folder: StorageFolder
    version: int
    local_cache_folder: StorageFolder
    shared_local_folder: StorageFolder
    current: ApplicationData
    def clear_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def clear_async(locality: ApplicationDataLocality) -> winrt.windows.foundation.IAsyncAction:
        ...
    def clear_publisher_cache_folder_async(folder_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def get_for_user_async(user: winrt.windows.system.User) -> winrt.windows.foundation.IAsyncOperation[ApplicationData]:
        ...
    def get_publisher_cache_folder(folder_name: str) -> StorageFolder:
        ...
    def set_version_async(desired_version: int, handler: ApplicationDataSetVersionHandler) -> winrt.windows.foundation.IAsyncAction:
        ...
    def signal_data_changed() -> None:
        ...
    def add_data_changed(handler: winrt.windows.foundation.TypedEventHandler[ApplicationData, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_data_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ApplicationDataCompositeValue(winrt.windows.foundation.collections.IPropertySet, winrt.windows.foundation.collections.IObservableMap[str, _winrt.winrt_base], winrt.windows.foundation.collections.IMap[str, _winrt.winrt_base], winrt.windows.foundation.collections.IIterable[winrt.windows.foundation.collections.IKeyValuePair[str, _winrt.winrt_base]], _winrt.winrt_base):
    ...
    size: int
    def clear() -> None:
        ...
    def first() -> winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, _winrt.winrt_base]]:
        ...
    def get_view() -> winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]:
        ...
    def has_key(key: str) -> bool:
        ...
    def insert(key: str, value: _winrt.winrt_base) -> bool:
        ...
    def lookup(key: str) -> _winrt.winrt_base:
        ...
    def remove(key: str) -> None:
        ...
    def add_map_changed(vhnd: winrt.windows.foundation.collections.MapChangedEventHandler[str, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_map_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ApplicationDataContainer(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    containers: winrt.windows.foundation.collections.IMapView[str, ApplicationDataContainer]
    locality: ApplicationDataLocality
    name: str
    values: winrt.windows.foundation.collections.IPropertySet
    def close() -> None:
        ...
    def create_container(name: str, disposition: ApplicationDataCreateDisposition) -> ApplicationDataContainer:
        ...
    def delete_container(name: str) -> None:
        ...

class ApplicationDataContainerSettings(winrt.windows.foundation.collections.IPropertySet, winrt.windows.foundation.collections.IObservableMap[str, _winrt.winrt_base], winrt.windows.foundation.collections.IMap[str, _winrt.winrt_base], winrt.windows.foundation.collections.IIterable[winrt.windows.foundation.collections.IKeyValuePair[str, _winrt.winrt_base]], _winrt.winrt_base):
    ...
    size: int
    def clear() -> None:
        ...
    def first() -> winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, _winrt.winrt_base]]:
        ...
    def get_view() -> winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]:
        ...
    def has_key(key: str) -> bool:
        ...
    def insert(key: str, value: _winrt.winrt_base) -> bool:
        ...
    def lookup(key: str) -> _winrt.winrt_base:
        ...
    def remove(key: str) -> None:
        ...
    def add_map_changed(vhnd: winrt.windows.foundation.collections.MapChangedEventHandler[str, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_map_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CachedFileManager(_winrt.winrt_base):
    ...
    def complete_updates_async(file: IStorageFile) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.provider.FileUpdateStatus]:
        ...
    def defer_updates(file: IStorageFile) -> None:
        ...

class DownloadsFolder(_winrt.winrt_base):
    ...
    def create_file_async(desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_file_async(desired_name: str, option: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_file_for_user_async(user: winrt.windows.system.User, desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_file_for_user_async(user: winrt.windows.system.User, desired_name: str, option: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_folder_async(desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def create_folder_async(desired_name: str, option: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def create_folder_for_user_async(user: winrt.windows.system.User, desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def create_folder_for_user_async(user: winrt.windows.system.User, desired_name: str, option: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...

class FileIO(_winrt.winrt_base):
    ...
    def append_lines_async(file: IStorageFile, lines: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def append_lines_async(file: IStorageFile, lines: typing.Iterable[str], encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...
    def append_text_async(file: IStorageFile, contents: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def append_text_async(file: IStorageFile, contents: str, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...
    def read_buffer_async(file: IStorageFile) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def read_lines_async(file: IStorageFile) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[str]]:
        ...
    def read_lines_async(file: IStorageFile, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[str]]:
        ...
    def read_text_async(file: IStorageFile) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def read_text_async(file: IStorageFile, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def write_buffer_async(file: IStorageFile, buffer: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_bytes_async(file: IStorageFile, buffer: typing.Sequence[int]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_lines_async(file: IStorageFile, lines: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_lines_async(file: IStorageFile, lines: typing.Iterable[str], encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_text_async(file: IStorageFile, contents: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_text_async(file: IStorageFile, contents: str, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...

class KnownFolders(_winrt.winrt_base):
    ...
    camera_roll: StorageFolder
    playlists: StorageFolder
    saved_pictures: StorageFolder
    documents_library: StorageFolder
    home_group: StorageFolder
    media_server_devices: StorageFolder
    music_library: StorageFolder
    pictures_library: StorageFolder
    removable_devices: StorageFolder
    videos_library: StorageFolder
    app_captures: StorageFolder
    objects3_d: StorageFolder
    recorded_calls: StorageFolder
    def get_folder_async(folder_id: KnownFolderId) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_folder_for_user_async(user: winrt.windows.system.User, folder_id: KnownFolderId) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def request_access_async(folder_id: KnownFolderId) -> winrt.windows.foundation.IAsyncOperation[KnownFoldersAccessStatus]:
        ...
    def request_access_for_user_async(user: winrt.windows.system.User, folder_id: KnownFolderId) -> winrt.windows.foundation.IAsyncOperation[KnownFoldersAccessStatus]:
        ...

class PathIO(_winrt.winrt_base):
    ...
    def append_lines_async(absolute_path: str, lines: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def append_lines_async(absolute_path: str, lines: typing.Iterable[str], encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...
    def append_text_async(absolute_path: str, contents: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def append_text_async(absolute_path: str, contents: str, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...
    def read_buffer_async(absolute_path: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]:
        ...
    def read_lines_async(absolute_path: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[str]]:
        ...
    def read_lines_async(absolute_path: str, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[str]]:
        ...
    def read_text_async(absolute_path: str) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def read_text_async(absolute_path: str, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def write_buffer_async(absolute_path: str, buffer: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_bytes_async(absolute_path: str, buffer: typing.Sequence[int]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_lines_async(absolute_path: str, lines: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_lines_async(absolute_path: str, lines: typing.Iterable[str], encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_text_async(absolute_path: str, contents: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def write_text_async(absolute_path: str, contents: str, encoding: winrt.windows.storage.streams.UnicodeEncoding) -> winrt.windows.foundation.IAsyncAction:
        ...

class SetVersionDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class SetVersionRequest(_winrt.winrt_base):
    ...
    current_version: int
    desired_version: int
    def get_deferral() -> SetVersionDeferral:
        ...

class StorageFile(IStorageFile, winrt.windows.storage.streams.IInputStreamReference, winrt.windows.storage.streams.IRandomAccessStreamReference, IStorageItem, IStorageItemProperties, IStorageItemProperties2, IStorageItem2, IStorageItemPropertiesWithProvider, IStorageFilePropertiesWithAvailability, IStorageFile2, _winrt.winrt_base):
    ...
    content_type: str
    file_type: str
    is_available: bool
    attributes: FileAttributes
    date_created: winrt.windows.foundation.DateTime
    name: str
    path: str
    display_name: str
    display_type: str
    folder_relative_id: str
    properties: winrt.windows.storage.fileproperties.StorageItemContentProperties
    provider: StorageProvider
    def copy_and_replace_async(file_to_replace: IStorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...
    def copy_async(destination_folder: IStorageFolder) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def copy_async(destination_folder: IStorageFolder, desired_new_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def copy_async(destination_folder: IStorageFolder, desired_new_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_streamed_file_async(display_name_with_extension: str, data_requested: StreamedFileDataRequestedHandler, thumbnail: winrt.windows.storage.streams.IRandomAccessStreamReference) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_streamed_file_from_uri_async(display_name_with_extension: str, uri: winrt.windows.foundation.Uri, thumbnail: winrt.windows.storage.streams.IRandomAccessStreamReference) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_async(option: StorageDeleteOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_basic_properties_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.BasicProperties]:
        ...
    def get_file_from_application_uri_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def get_file_from_path_async(path: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def get_file_from_path_for_user_async(user: winrt.windows.system.User, path: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def get_parent_async() -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def is_equal(item: IStorageItem) -> bool:
        ...
    def is_of_type(type: StorageItemTypes) -> bool:
        ...
    def move_and_replace_async(file_to_replace: IStorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...
    def move_async(destination_folder: IStorageFolder) -> winrt.windows.foundation.IAsyncAction:
        ...
    def move_async(destination_folder: IStorageFolder, desired_new_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def move_async(destination_folder: IStorageFolder, desired_new_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def open_async(access_mode: FileAccessMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]:
        ...
    def open_async(access_mode: FileAccessMode, options: StorageOpenOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]:
        ...
    def open_read_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]:
        ...
    def open_sequential_read_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IInputStream]:
        ...
    def open_transacted_write_async() -> winrt.windows.foundation.IAsyncOperation[StorageStreamTransaction]:
        ...
    def open_transacted_write_async(options: StorageOpenOptions) -> winrt.windows.foundation.IAsyncOperation[StorageStreamTransaction]:
        ...
    def rename_async(desired_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def rename_async(desired_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def replace_with_streamed_file_async(file_to_replace: IStorageFile, data_requested: StreamedFileDataRequestedHandler, thumbnail: winrt.windows.storage.streams.IRandomAccessStreamReference) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def replace_with_streamed_file_from_uri_async(file_to_replace: IStorageFile, uri: winrt.windows.foundation.Uri, thumbnail: winrt.windows.storage.streams.IRandomAccessStreamReference) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...

class StorageFolder(IStorageFolder, IStorageItem, winrt.windows.storage.search.IStorageFolderQueryOperations, IStorageItemProperties, IStorageItemProperties2, IStorageItem2, IStorageFolder2, IStorageItemPropertiesWithProvider, _winrt.winrt_base):
    ...
    attributes: FileAttributes
    date_created: winrt.windows.foundation.DateTime
    name: str
    path: str
    display_name: str
    display_type: str
    folder_relative_id: str
    properties: winrt.windows.storage.fileproperties.StorageItemContentProperties
    provider: StorageProvider
    def are_query_options_supported(query_options: winrt.windows.storage.search.QueryOptions) -> bool:
        ...
    def create_file_async(desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_file_async(desired_name: str, options: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_file_query() -> winrt.windows.storage.search.StorageFileQueryResult:
        ...
    def create_file_query(query: winrt.windows.storage.search.CommonFileQuery) -> winrt.windows.storage.search.StorageFileQueryResult:
        ...
    def create_file_query_with_options(query_options: winrt.windows.storage.search.QueryOptions) -> winrt.windows.storage.search.StorageFileQueryResult:
        ...
    def create_folder_async(desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def create_folder_async(desired_name: str, options: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def create_folder_query() -> winrt.windows.storage.search.StorageFolderQueryResult:
        ...
    def create_folder_query(query: winrt.windows.storage.search.CommonFolderQuery) -> winrt.windows.storage.search.StorageFolderQueryResult:
        ...
    def create_folder_query_with_options(query_options: winrt.windows.storage.search.QueryOptions) -> winrt.windows.storage.search.StorageFolderQueryResult:
        ...
    def create_item_query() -> winrt.windows.storage.search.StorageItemQueryResult:
        ...
    def create_item_query_with_options(query_options: winrt.windows.storage.search.QueryOptions) -> winrt.windows.storage.search.StorageItemQueryResult:
        ...
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_async(option: StorageDeleteOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_basic_properties_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.BasicProperties]:
        ...
    def get_file_async(name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def get_files_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFile]]:
        ...
    def get_files_async(query: winrt.windows.storage.search.CommonFileQuery) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFile]]:
        ...
    def get_files_async(query: winrt.windows.storage.search.CommonFileQuery, start_index: int, max_items_to_retrieve: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFile]]:
        ...
    def get_folder_async(name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_folder_from_path_async(path: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_folder_from_path_for_user_async(user: winrt.windows.system.User, path: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_folders_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFolder]]:
        ...
    def get_folders_async(query: winrt.windows.storage.search.CommonFolderQuery) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFolder]]:
        ...
    def get_folders_async(query: winrt.windows.storage.search.CommonFolderQuery, start_index: int, max_items_to_retrieve: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFolder]]:
        ...
    def get_indexed_state_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.search.IndexedState]:
        ...
    def get_item_async(name: str) -> winrt.windows.foundation.IAsyncOperation[IStorageItem]:
        ...
    def get_items_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[IStorageItem]]:
        ...
    def get_items_async(start_index: int, max_items_to_retrieve: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[IStorageItem]]:
        ...
    def get_parent_async() -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def is_common_file_query_supported(query: winrt.windows.storage.search.CommonFileQuery) -> bool:
        ...
    def is_common_folder_query_supported(query: winrt.windows.storage.search.CommonFolderQuery) -> bool:
        ...
    def is_equal(item: IStorageItem) -> bool:
        ...
    def is_of_type(type: StorageItemTypes) -> bool:
        ...
    def rename_async(desired_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def rename_async(desired_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def try_get_change_tracker() -> StorageLibraryChangeTracker:
        ...
    def try_get_item_async(name: str) -> winrt.windows.foundation.IAsyncOperation[IStorageItem]:
        ...

class StorageLibrary(_winrt.winrt_base):
    ...
    folders: winrt.windows.foundation.collections.IObservableVector[StorageFolder]
    save_folder: StorageFolder
    change_tracker: StorageLibraryChangeTracker
    def are_folder_suggestions_available_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_library_async(library_id: KnownLibraryId) -> winrt.windows.foundation.IAsyncOperation[StorageLibrary]:
        ...
    def get_library_for_user_async(user: winrt.windows.system.User, library_id: KnownLibraryId) -> winrt.windows.foundation.IAsyncOperation[StorageLibrary]:
        ...
    def request_add_folder_async() -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def request_remove_folder_async(folder: StorageFolder) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_definition_changed(handler: winrt.windows.foundation.TypedEventHandler[StorageLibrary, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_definition_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class StorageLibraryChange(_winrt.winrt_base):
    ...
    change_type: StorageLibraryChangeType
    path: str
    previous_path: str
    def get_storage_item_async() -> winrt.windows.foundation.IAsyncOperation[IStorageItem]:
        ...
    def is_of_type(type: StorageItemTypes) -> bool:
        ...

class StorageLibraryChangeReader(_winrt.winrt_base):
    ...
    def accept_changes_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_last_change_id() -> int:
        ...
    def read_batch_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageLibraryChange]]:
        ...

class StorageLibraryChangeTracker(_winrt.winrt_base):
    ...
    def disable() -> None:
        ...
    def enable() -> None:
        ...
    def enable(options: StorageLibraryChangeTrackerOptions) -> None:
        ...
    def get_change_reader() -> StorageLibraryChangeReader:
        ...
    def reset() -> None:
        ...

class StorageLibraryChangeTrackerOptions(_winrt.winrt_base):
    ...
    track_change_details: bool

class StorageLibraryLastChangeId(_winrt.winrt_base):
    ...
    unknown: int

class StorageProvider(_winrt.winrt_base):
    ...
    display_name: str
    id: str
    def is_property_supported_for_partial_file_async(property_canonical_name: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class StorageStreamTransaction(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    stream: winrt.windows.storage.streams.IRandomAccessStream
    def close() -> None:
        ...
    def commit_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class StreamedFileDataRequest(winrt.windows.storage.streams.IOutputStream, winrt.windows.foundation.IClosable, IStreamedFileDataRequest, _winrt.winrt_base):
    ...
    def close() -> None:
        ...
    def fail_and_close(failure_mode: StreamedFileFailureMode) -> None:
        ...
    def flush_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def write_async(buffer: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperationWithProgress[int, int]:
        ...

class SystemAudioProperties(_winrt.winrt_base):
    ...
    encoding_bitrate: str

class SystemDataPaths(_winrt.winrt_base):
    ...
    fonts: str
    program_data: str
    public: str
    public_desktop: str
    public_documents: str
    public_downloads: str
    public_music: str
    public_pictures: str
    public_videos: str
    system: str
    system_arm: str
    system_host: str
    system_x64: str
    system_x86: str
    user_profiles: str
    windows: str
    def get_default() -> SystemDataPaths:
        ...

class SystemGPSProperties(_winrt.winrt_base):
    ...
    latitude_decimal: str
    longitude_decimal: str

class SystemImageProperties(_winrt.winrt_base):
    ...
    horizontal_size: str
    vertical_size: str

class SystemMediaProperties(_winrt.winrt_base):
    ...
    duration: str
    producer: str
    publisher: str
    sub_title: str
    writer: str
    year: str

class SystemMusicProperties(_winrt.winrt_base):
    ...
    album_artist: str
    album_title: str
    artist: str
    composer: str
    conductor: str
    display_artist: str
    genre: str
    track_number: str

class SystemPhotoProperties(_winrt.winrt_base):
    ...
    camera_manufacturer: str
    camera_model: str
    date_taken: str
    orientation: str
    people_names: str

class SystemProperties(_winrt.winrt_base):
    ...
    audio: SystemAudioProperties
    author: str
    comment: str
    g_p_s: SystemGPSProperties
    image: SystemImageProperties
    item_name_display: str
    keywords: str
    media: SystemMediaProperties
    music: SystemMusicProperties
    photo: SystemPhotoProperties
    rating: str
    title: str
    video: SystemVideoProperties

class SystemVideoProperties(_winrt.winrt_base):
    ...
    director: str
    frame_height: str
    frame_width: str
    orientation: str
    total_bitrate: str

class UserDataPaths(_winrt.winrt_base):
    ...
    camera_roll: str
    cookies: str
    desktop: str
    documents: str
    downloads: str
    favorites: str
    history: str
    internet_cache: str
    local_app_data: str
    local_app_data_low: str
    music: str
    pictures: str
    profile: str
    recent: str
    roaming_app_data: str
    saved_pictures: str
    screenshots: str
    templates: str
    videos: str
    def get_default() -> UserDataPaths:
        ...
    def get_for_user(user: winrt.windows.system.User) -> UserDataPaths:
        ...

class IStorageFile(IStorageItem, winrt.windows.storage.streams.IRandomAccessStreamReference, winrt.windows.storage.streams.IInputStreamReference, _winrt.winrt_base):
    ...
    content_type: str
    file_type: str
    attributes: FileAttributes
    date_created: winrt.windows.foundation.DateTime
    name: str
    path: str
    def copy_and_replace_async(file_to_replace: IStorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...
    def copy_async(destination_folder: IStorageFolder) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def copy_async(destination_folder: IStorageFolder, desired_new_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def copy_async(destination_folder: IStorageFolder, desired_new_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def move_and_replace_async(file_to_replace: IStorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...
    def move_async(destination_folder: IStorageFolder) -> winrt.windows.foundation.IAsyncAction:
        ...
    def move_async(destination_folder: IStorageFolder, desired_new_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def move_async(destination_folder: IStorageFolder, desired_new_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def open_async(access_mode: FileAccessMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]:
        ...
    def open_transacted_write_async() -> winrt.windows.foundation.IAsyncOperation[StorageStreamTransaction]:
        ...
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_async(option: StorageDeleteOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_basic_properties_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.BasicProperties]:
        ...
    def is_of_type(type: StorageItemTypes) -> bool:
        ...
    def rename_async(desired_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def rename_async(desired_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def open_read_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]:
        ...
    def open_sequential_read_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IInputStream]:
        ...

class IStorageFile2(_winrt.winrt_base):
    ...
    def open_async(access_mode: FileAccessMode, options: StorageOpenOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]:
        ...
    def open_transacted_write_async(options: StorageOpenOptions) -> winrt.windows.foundation.IAsyncOperation[StorageStreamTransaction]:
        ...

class IStorageFilePropertiesWithAvailability(_winrt.winrt_base):
    ...
    is_available: bool

class IStorageFolder(IStorageItem, _winrt.winrt_base):
    ...
    attributes: FileAttributes
    date_created: winrt.windows.foundation.DateTime
    name: str
    path: str
    def create_file_async(desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_file_async(desired_name: str, options: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def create_folder_async(desired_name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def create_folder_async(desired_name: str, options: CreationCollisionOption) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_file_async(name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFile]:
        ...
    def get_files_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFile]]:
        ...
    def get_folder_async(name: str) -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def get_folders_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StorageFolder]]:
        ...
    def get_item_async(name: str) -> winrt.windows.foundation.IAsyncOperation[IStorageItem]:
        ...
    def get_items_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[IStorageItem]]:
        ...
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_async(option: StorageDeleteOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_basic_properties_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.BasicProperties]:
        ...
    def is_of_type(type: StorageItemTypes) -> bool:
        ...
    def rename_async(desired_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def rename_async(desired_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...

class IStorageFolder2(_winrt.winrt_base):
    ...
    def try_get_item_async(name: str) -> winrt.windows.foundation.IAsyncOperation[IStorageItem]:
        ...

class IStorageItem(_winrt.winrt_base):
    ...
    attributes: FileAttributes
    date_created: winrt.windows.foundation.DateTime
    name: str
    path: str
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_async(option: StorageDeleteOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_basic_properties_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.BasicProperties]:
        ...
    def is_of_type(type: StorageItemTypes) -> bool:
        ...
    def rename_async(desired_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def rename_async(desired_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...

class IStorageItem2(IStorageItem, _winrt.winrt_base):
    ...
    attributes: FileAttributes
    date_created: winrt.windows.foundation.DateTime
    name: str
    path: str
    def get_parent_async() -> winrt.windows.foundation.IAsyncOperation[StorageFolder]:
        ...
    def is_equal(item: IStorageItem) -> bool:
        ...
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_async(option: StorageDeleteOption) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_basic_properties_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.BasicProperties]:
        ...
    def is_of_type(type: StorageItemTypes) -> bool:
        ...
    def rename_async(desired_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def rename_async(desired_name: str, option: NameCollisionOption) -> winrt.windows.foundation.IAsyncAction:
        ...

class IStorageItemProperties(_winrt.winrt_base):
    ...
    display_name: str
    display_type: str
    folder_relative_id: str
    properties: winrt.windows.storage.fileproperties.StorageItemContentProperties
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...

class IStorageItemProperties2(IStorageItemProperties, _winrt.winrt_base):
    ...
    display_name: str
    display_type: str
    folder_relative_id: str
    properties: winrt.windows.storage.fileproperties.StorageItemContentProperties
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_scaled_image_as_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...

class IStorageItemPropertiesWithProvider(IStorageItemProperties, _winrt.winrt_base):
    ...
    provider: StorageProvider
    display_name: str
    display_type: str
    folder_relative_id: str
    properties: winrt.windows.storage.fileproperties.StorageItemContentProperties
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...
    def get_thumbnail_async(mode: winrt.windows.storage.fileproperties.ThumbnailMode, requested_size: int, options: winrt.windows.storage.fileproperties.ThumbnailOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.fileproperties.StorageItemThumbnail]:
        ...

class IStreamedFileDataRequest(_winrt.winrt_base):
    ...
    def fail_and_close(failure_mode: StreamedFileFailureMode) -> None:
        ...

ApplicationDataSetVersionHandler = typing.Callable[[SetVersionRequest], None]

StreamedFileDataRequestedHandler = typing.Callable[[StreamedFileDataRequest], None]

