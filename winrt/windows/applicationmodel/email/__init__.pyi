# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.appointments
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.security.cryptography.certificates
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class EmailAttachmentDownloadState(enum.IntEnum):
    NOT_DOWNLOADED = 0
    DOWNLOADING = 1
    DOWNLOADED = 2
    FAILED = 3

class EmailBatchStatus(enum.IntEnum):
    SUCCESS = 0
    SERVER_SEARCH_SYNC_MANAGER_ERROR = 1
    SERVER_SEARCH_UNKNOWN_ERROR = 2

class EmailCertificateValidationStatus(enum.IntEnum):
    SUCCESS = 0
    NO_MATCH = 1
    INVALID_USAGE = 2
    INVALID_CERTIFICATE = 3
    REVOKED = 4
    CHAIN_REVOKED = 5
    REVOCATION_SERVER_FAILURE = 6
    EXPIRED = 7
    UNTRUSTED = 8
    SERVER_ERROR = 9
    UNKNOWN_FAILURE = 10

class EmailFlagState(enum.IntEnum):
    UNFLAGGED = 0
    FLAGGED = 1
    COMPLETED = 2
    CLEARED = 3

class EmailImportance(enum.IntEnum):
    NORMAL = 0
    HIGH = 1
    LOW = 2

class EmailMailboxActionKind(enum.IntEnum):
    MARK_MESSAGE_AS_SEEN = 0
    MARK_MESSAGE_READ = 1
    CHANGE_MESSAGE_FLAG_STATE = 2
    MOVE_MESSAGE = 3
    SAVE_DRAFT = 4
    SEND_MESSAGE = 5
    CREATE_RESPONSE_REPLY_MESSAGE = 6
    CREATE_RESPONSE_REPLY_ALL_MESSAGE = 7
    CREATE_RESPONSE_FORWARD_MESSAGE = 8
    MOVE_FOLDER = 9
    MARK_FOLDER_FOR_SYNC_ENABLED = 10

class EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation(enum.IntEnum):
    NONE = 0
    STRONG_ALGORITHM = 1
    ANY_ALGORITHM = 2

class EmailMailboxAutoReplyMessageResponseKind(enum.IntEnum):
    HTML = 0
    PLAIN_TEXT = 1

class EmailMailboxChangeType(enum.IntEnum):
    MESSAGE_CREATED = 0
    MESSAGE_MODIFIED = 1
    MESSAGE_DELETED = 2
    FOLDER_CREATED = 3
    FOLDER_MODIFIED = 4
    FOLDER_DELETED = 5
    CHANGE_TRACKING_LOST = 6

class EmailMailboxCreateFolderStatus(enum.IntEnum):
    SUCCESS = 0
    NETWORK_ERROR = 1
    PERMISSIONS_ERROR = 2
    SERVER_ERROR = 3
    UNKNOWN_FAILURE = 4
    NAME_COLLISION = 5
    SERVER_REJECTED = 6

class EmailMailboxDeleteFolderStatus(enum.IntEnum):
    SUCCESS = 0
    NETWORK_ERROR = 1
    PERMISSIONS_ERROR = 2
    SERVER_ERROR = 3
    UNKNOWN_FAILURE = 4
    COULD_NOT_DELETE_EVERYTHING = 5

class EmailMailboxEmptyFolderStatus(enum.IntEnum):
    SUCCESS = 0
    NETWORK_ERROR = 1
    PERMISSIONS_ERROR = 2
    SERVER_ERROR = 3
    UNKNOWN_FAILURE = 4
    COULD_NOT_DELETE_EVERYTHING = 5

class EmailMailboxOtherAppReadAccess(enum.IntEnum):
    SYSTEM_ONLY = 0
    FULL = 1
    NONE = 2

class EmailMailboxOtherAppWriteAccess(enum.IntEnum):
    NONE = 0
    LIMITED = 1

class EmailMailboxSmimeEncryptionAlgorithm(enum.IntEnum):
    ANY = 0
    TRIPLE_DES = 1
    DES = 2
    R_C2128_BIT = 3
    R_C264_BIT = 4
    R_C240_BIT = 5

class EmailMailboxSmimeSigningAlgorithm(enum.IntEnum):
    ANY = 0
    SHA1 = 1
    M_D5 = 2

class EmailMailboxSyncStatus(enum.IntEnum):
    IDLE = 0
    SYNCING = 1
    UP_TO_DATE = 2
    AUTHENTICATION_ERROR = 3
    POLICY_ERROR = 4
    UNKNOWN_ERROR = 5
    MANUAL_ACCOUNT_REMOVAL_REQUIRED = 6

class EmailMeetingResponseType(enum.IntEnum):
    ACCEPT = 0
    DECLINE = 1
    TENTATIVE = 2

class EmailMessageBodyKind(enum.IntEnum):
    HTML = 0
    PLAIN_TEXT = 1

class EmailMessageDownloadState(enum.IntEnum):
    PARTIALLY_DOWNLOADED = 0
    DOWNLOADING = 1
    DOWNLOADED = 2
    FAILED = 3

class EmailMessageResponseKind(enum.IntEnum):
    NONE = 0
    REPLY = 1
    REPLY_ALL = 2
    FORWARD = 3

class EmailMessageSmimeKind(enum.IntEnum):
    NONE = 0
    CLEAR_SIGNED = 1
    OPAQUE_SIGNED = 2
    ENCRYPTED = 3

class EmailQueryKind(enum.IntEnum):
    ALL = 0
    IMPORTANT = 1
    FLAGGED = 2
    UNREAD = 3
    READ = 4
    UNSEEN = 5

class EmailQuerySearchFields(enum.IntFlag):
    NONE = 0
    SUBJECT = 0x1
    SENDER = 0x2
    PREVIEW = 0x4
    RECIPIENTS = 0x8
    ALL = 0xffffffff

class EmailQuerySearchScope(enum.IntEnum):
    LOCAL = 0
    SERVER = 1

class EmailQuerySortDirection(enum.IntEnum):
    DESCENDING = 0
    ASCENDING = 1

class EmailQuerySortProperty(enum.IntEnum):
    DATE = 0

class EmailRecipientResolutionStatus(enum.IntEnum):
    SUCCESS = 0
    RECIPIENT_NOT_FOUND = 1
    AMBIGUOUS_RECIPIENT = 2
    NO_CERTIFICATE = 3
    CERTIFICATE_REQUEST_LIMIT_REACHED = 4
    CANNOT_RESOLVE_DISTRIBUTION_LIST = 5
    SERVER_ERROR = 6
    UNKNOWN_FAILURE = 7

class EmailSpecialFolderKind(enum.IntEnum):
    NONE = 0
    ROOT = 1
    INBOX = 2
    OUTBOX = 3
    DRAFTS = 4
    DELETED_ITEMS = 5
    SENT = 6

class EmailStoreAccessType(enum.IntEnum):
    APP_MAILBOXES_READ_WRITE = 0
    ALL_MAILBOXES_LIMITED_READ_WRITE = 1

class EmailAttachment(_winrt.winrt_base):
    ...
    file_name: str
    data: winrt.windows.storage.streams.IRandomAccessStreamReference
    mime_type: str
    is_inline: bool
    estimated_download_size_in_bytes: int
    download_state: EmailAttachmentDownloadState
    content_location: str
    content_id: str
    id: str
    is_from_base_message: bool

class EmailConversation(_winrt.winrt_base):
    ...
    flag_state: EmailFlagState
    has_attachment: bool
    id: str
    importance: EmailImportance
    last_email_response_kind: EmailMessageResponseKind
    latest_sender: EmailRecipient
    mailbox_id: str
    message_count: int
    most_recent_message_id: str
    most_recent_message_time: winrt.windows.foundation.DateTime
    preview: str
    subject: str
    unread_message_count: int
    def find_messages_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[EmailMessage]]:
        ...
    def find_messages_async(count: int) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[EmailMessage]]:
        ...

class EmailConversationBatch(_winrt.winrt_base):
    ...
    conversations: winrt.windows.foundation.collections.IVectorView[EmailConversation]
    status: EmailBatchStatus

class EmailConversationReader(_winrt.winrt_base):
    ...
    def read_batch_async() -> winrt.windows.foundation.IAsyncOperation[EmailConversationBatch]:
        ...

class EmailFolder(_winrt.winrt_base):
    ...
    remote_id: str
    last_successful_sync_time: winrt.windows.foundation.DateTime
    is_sync_enabled: bool
    display_name: str
    id: str
    kind: EmailSpecialFolderKind
    mailbox_id: str
    parent_folder_id: str
    def create_folder_async(name: str) -> winrt.windows.foundation.IAsyncOperation[EmailFolder]:
        ...
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def find_child_folders_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[EmailFolder]]:
        ...
    def get_conversation_reader() -> EmailConversationReader:
        ...
    def get_conversation_reader(options: EmailQueryOptions) -> EmailConversationReader:
        ...
    def get_message_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailMessage]:
        ...
    def get_message_counts_async() -> winrt.windows.foundation.IAsyncOperation[EmailItemCounts]:
        ...
    def get_message_reader() -> EmailMessageReader:
        ...
    def get_message_reader(options: EmailQueryOptions) -> EmailMessageReader:
        ...
    def save_message_async(message: EmailMessage) -> winrt.windows.foundation.IAsyncAction:
        ...
    def try_move_async(new_parent_folder: EmailFolder) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_move_async(new_parent_folder: EmailFolder, new_folder_name: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_save_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class EmailIrmInfo(_winrt.winrt_base):
    ...
    can_remove_irm_on_response: bool
    can_print_data: bool
    can_modify_recipients_on_response: bool
    can_forward: bool
    can_extract_data: bool
    can_reply: bool
    can_edit: bool
    template: EmailIrmTemplate
    is_programatic_access_allowed: bool
    is_irm_originator: bool
    expiration_date: winrt.windows.foundation.DateTime
    can_reply_all: bool

class EmailIrmTemplate(_winrt.winrt_base):
    ...
    name: str
    id: str
    description: str

class EmailItemCounts(_winrt.winrt_base):
    ...
    flagged: int
    important: int
    total: int
    unread: int

class EmailMailbox(_winrt.winrt_base):
    ...
    other_app_write_access: EmailMailboxOtherAppWriteAccess
    mail_address: str
    other_app_read_access: EmailMailboxOtherAppReadAccess
    display_name: str
    id: str
    is_data_encrypted_under_lock: bool
    is_owned_by_current_app: bool
    mail_address_aliases: winrt.windows.foundation.collections.IVector[str]
    capabilities: EmailMailboxCapabilities
    change_tracker: EmailMailboxChangeTracker
    policies: EmailMailboxPolicies
    source_display_name: str
    sync_manager: EmailMailboxSyncManager
    user_data_account_id: str
    linked_mailbox_id: str
    network_account_id: str
    network_id: str
    def change_message_flag_state_async(message_id: str, flag_state: EmailFlagState) -> winrt.windows.foundation.IAsyncAction:
        ...
    def create_response_message_async(message_id: str, response_type: EmailMessageResponseKind, subject: str, response_header_type: EmailMessageBodyKind, response_header: str) -> winrt.windows.foundation.IAsyncOperation[EmailMessage]:
        ...
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_message_async(message_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def download_attachment_async(attachment_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def download_message_async(message_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_change_tracker(identity: str) -> EmailMailboxChangeTracker:
        ...
    def get_conversation_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailConversation]:
        ...
    def get_conversation_reader() -> EmailConversationReader:
        ...
    def get_conversation_reader(options: EmailQueryOptions) -> EmailConversationReader:
        ...
    def get_folder_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailFolder]:
        ...
    def get_message_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailMessage]:
        ...
    def get_message_reader() -> EmailMessageReader:
        ...
    def get_message_reader(options: EmailQueryOptions) -> EmailMessageReader:
        ...
    def get_special_folder_async(folder_type: EmailSpecialFolderKind) -> winrt.windows.foundation.IAsyncOperation[EmailFolder]:
        ...
    def mark_folder_as_seen_async(folder_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def mark_folder_sync_enabled_async(folder_id: str, is_sync_enabled: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def mark_message_as_seen_async(message_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def mark_message_read_async(message_id: str, is_read: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def register_sync_manager_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def resolve_recipients_async(recipients: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[EmailRecipientResolutionResult]]:
        ...
    def save_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def save_draft_async(message: EmailMessage) -> winrt.windows.foundation.IAsyncAction:
        ...
    def send_message_async(message: EmailMessage) -> winrt.windows.foundation.IAsyncAction:
        ...
    def send_message_async(message: EmailMessage, smart_send: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def try_create_folder_async(parent_folder_id: str, name: str) -> winrt.windows.foundation.IAsyncOperation[EmailMailboxCreateFolderResult]:
        ...
    def try_delete_folder_async(folder_id: str) -> winrt.windows.foundation.IAsyncOperation[EmailMailboxDeleteFolderStatus]:
        ...
    def try_empty_folder_async(folder_id: str) -> winrt.windows.foundation.IAsyncOperation[EmailMailboxEmptyFolderStatus]:
        ...
    def try_forward_meeting_async(meeting: EmailMessage, recipients: typing.Iterable[EmailRecipient], subject: str, forward_header_type: EmailMessageBodyKind, forward_header: str, comment: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_get_auto_reply_settings_async(requested_format: EmailMailboxAutoReplyMessageResponseKind) -> winrt.windows.foundation.IAsyncOperation[EmailMailboxAutoReplySettings]:
        ...
    def try_move_folder_async(folder_id: str, new_parent_folder_id: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_move_folder_async(folder_id: str, new_parent_folder_id: str, new_folder_name: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_move_message_async(message_id: str, new_parent_folder_id: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_propose_new_time_for_meeting_async(meeting: EmailMessage, new_start_time: winrt.windows.foundation.DateTime, new_duration: winrt.windows.foundation.TimeSpan, subject: str, comment: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_set_auto_reply_settings_async(auto_reply_settings: EmailMailboxAutoReplySettings) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_update_meeting_response_async(meeting: EmailMessage, response: EmailMeetingResponseType, subject: str, comment: str, send_update: bool) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def validate_certificates_async(certificates: typing.Iterable[winrt.windows.security.cryptography.certificates.Certificate]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[EmailCertificateValidationStatus]]:
        ...
    def add_mailbox_changed(p_handler: winrt.windows.foundation.TypedEventHandler[EmailMailbox, EmailMailboxChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_mailbox_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class EmailMailboxAction(_winrt.winrt_base):
    ...
    change_number: int
    kind: EmailMailboxActionKind

class EmailMailboxAutoReply(_winrt.winrt_base):
    ...
    response: str
    is_enabled: bool

class EmailMailboxAutoReplySettings(_winrt.winrt_base):
    ...
    start_time: typing.Optional[winrt.windows.foundation.DateTime]
    response_kind: EmailMailboxAutoReplyMessageResponseKind
    is_enabled: bool
    end_time: typing.Optional[winrt.windows.foundation.DateTime]
    internal_reply: EmailMailboxAutoReply
    known_external_reply: EmailMailboxAutoReply
    unknown_external_reply: EmailMailboxAutoReply

class EmailMailboxCapabilities(_winrt.winrt_base):
    ...
    can_smart_send: bool
    can_update_meeting_responses: bool
    can_server_search_mailbox: bool
    can_server_search_folders: bool
    can_forward_meetings: bool
    can_propose_new_time_for_meetings: bool
    can_get_and_set_internal_auto_replies: bool
    can_get_and_set_external_auto_replies: bool
    can_validate_certificates: bool
    can_resolve_recipients: bool
    can_move_folder: bool
    can_empty_folder: bool
    can_delete_folder: bool
    can_create_folder: bool

class EmailMailboxChange(_winrt.winrt_base):
    ...
    change_type: EmailMailboxChangeType
    folder: EmailFolder
    mailbox_actions: winrt.windows.foundation.collections.IVector[EmailMailboxAction]
    message: EmailMessage

class EmailMailboxChangeReader(_winrt.winrt_base):
    ...
    def accept_changes() -> None:
        ...
    def accept_changes_through(last_change_to_acknowledge: EmailMailboxChange) -> None:
        ...
    def read_batch_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[EmailMailboxChange]]:
        ...

class EmailMailboxChangeTracker(_winrt.winrt_base):
    ...
    is_tracking: bool
    def enable() -> None:
        ...
    def get_change_reader() -> EmailMailboxChangeReader:
        ...
    def reset() -> None:
        ...

class EmailMailboxChangedDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class EmailMailboxChangedEventArgs(_winrt.winrt_base):
    ...
    def get_deferral() -> EmailMailboxChangedDeferral:
        ...

class EmailMailboxCreateFolderResult(_winrt.winrt_base):
    ...
    folder: EmailFolder
    status: EmailMailboxCreateFolderStatus

class EmailMailboxPolicies(_winrt.winrt_base):
    ...
    required_smime_signing_algorithm: typing.Optional[EmailMailboxSmimeSigningAlgorithm]
    required_smime_encryption_algorithm: typing.Optional[EmailMailboxSmimeEncryptionAlgorithm]
    allowed_smime_encryption_algorithm_negotiation: EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation
    allow_smime_soft_certificates: bool
    must_sign_smime_messages: bool
    must_encrypt_smime_messages: bool

class EmailMailboxSyncManager(_winrt.winrt_base):
    ...
    status: EmailMailboxSyncStatus
    last_successful_sync_time: winrt.windows.foundation.DateTime
    last_attempted_sync_time: winrt.windows.foundation.DateTime
    def sync_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_sync_status_changed(handler: winrt.windows.foundation.TypedEventHandler[EmailMailboxSyncManager, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_sync_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class EmailManager(_winrt.winrt_base):
    ...
    def get_for_user(user: winrt.windows.system.User) -> EmailManagerForUser:
        ...
    def request_store_async(access_type: EmailStoreAccessType) -> winrt.windows.foundation.IAsyncOperation[EmailStore]:
        ...
    def show_compose_new_email_async(message: EmailMessage) -> winrt.windows.foundation.IAsyncAction:
        ...

class EmailManagerForUser(_winrt.winrt_base):
    ...
    user: winrt.windows.system.User
    def request_store_async(access_type: EmailStoreAccessType) -> winrt.windows.foundation.IAsyncOperation[EmailStore]:
        ...
    def show_compose_new_email_async(message: EmailMessage) -> winrt.windows.foundation.IAsyncAction:
        ...

class EmailMeetingInfo(_winrt.winrt_base):
    ...
    location: str
    is_response_requested: bool
    is_all_day: bool
    allow_new_time_proposal: bool
    duration: winrt.windows.foundation.TimeSpan
    appointment_roaming_id: str
    appointment_original_start_time: typing.Optional[winrt.windows.foundation.DateTime]
    proposed_duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    remote_change_number: int
    start_time: winrt.windows.foundation.DateTime
    recurrence_start_time: typing.Optional[winrt.windows.foundation.DateTime]
    recurrence: winrt.windows.applicationmodel.appointments.AppointmentRecurrence
    proposed_start_time: typing.Optional[winrt.windows.foundation.DateTime]
    is_reported_out_of_date_by_server: bool

class EmailMessage(_winrt.winrt_base):
    ...
    subject: str
    body: str
    bcc: winrt.windows.foundation.collections.IVector[EmailRecipient]
    c_c: winrt.windows.foundation.collections.IVector[EmailRecipient]
    attachments: winrt.windows.foundation.collections.IVector[EmailAttachment]
    to: winrt.windows.foundation.collections.IVector[EmailRecipient]
    allow_internet_images: bool
    flag_state: EmailFlagState
    estimated_download_size_in_bytes: int
    download_state: EmailMessageDownloadState
    importance: EmailImportance
    irm_info: EmailIrmInfo
    original_code_page: int
    sent_time: typing.Optional[winrt.windows.foundation.DateTime]
    sender: EmailRecipient
    remote_id: str
    preview: str
    message_class: str
    meeting_info: EmailMeetingInfo
    last_response_kind: EmailMessageResponseKind
    is_seen: bool
    is_read: bool
    is_server_search_message: bool
    is_smart_sendable: bool
    mailbox_id: str
    change_number: int
    conversation_id: str
    normalized_subject: str
    folder_id: str
    has_partial_bodies: bool
    id: str
    in_response_to_message_id: str
    is_draft_message: bool
    smime_kind: EmailMessageSmimeKind
    smime_data: winrt.windows.storage.streams.IRandomAccessStreamReference
    sent_representing: EmailRecipient
    reply_to: winrt.windows.foundation.collections.IVector[EmailRecipient]
    def get_body_stream(type: EmailMessageBodyKind) -> winrt.windows.storage.streams.IRandomAccessStreamReference:
        ...
    def set_body_stream(type: EmailMessageBodyKind, stream: winrt.windows.storage.streams.IRandomAccessStreamReference) -> None:
        ...

class EmailMessageBatch(_winrt.winrt_base):
    ...
    messages: winrt.windows.foundation.collections.IVectorView[EmailMessage]
    status: EmailBatchStatus

class EmailMessageReader(_winrt.winrt_base):
    ...
    def read_batch_async() -> winrt.windows.foundation.IAsyncOperation[EmailMessageBatch]:
        ...

class EmailQueryOptions(_winrt.winrt_base):
    ...
    sort_property: EmailQuerySortProperty
    sort_direction: EmailQuerySortDirection
    kind: EmailQueryKind
    folder_ids: winrt.windows.foundation.collections.IVector[str]
    text_search: EmailQueryTextSearch

class EmailQueryTextSearch(_winrt.winrt_base):
    ...
    text: str
    search_scope: EmailQuerySearchScope
    fields: EmailQuerySearchFields

class EmailRecipient(_winrt.winrt_base):
    ...
    name: str
    address: str

class EmailRecipientResolutionResult(_winrt.winrt_base):
    ...
    status: EmailRecipientResolutionStatus
    public_keys: winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]
    def set_public_keys(value: typing.Iterable[winrt.windows.security.cryptography.certificates.Certificate]) -> None:
        ...

class EmailStore(_winrt.winrt_base):
    ...
    def create_mailbox_async(account_name: str, account_address: str) -> winrt.windows.foundation.IAsyncOperation[EmailMailbox]:
        ...
    def create_mailbox_async(account_name: str, account_address: str, user_data_account_id: str) -> winrt.windows.foundation.IAsyncOperation[EmailMailbox]:
        ...
    def find_mailboxes_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[EmailMailbox]]:
        ...
    def get_conversation_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailConversation]:
        ...
    def get_conversation_reader() -> EmailConversationReader:
        ...
    def get_conversation_reader(options: EmailQueryOptions) -> EmailConversationReader:
        ...
    def get_folder_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailFolder]:
        ...
    def get_mailbox_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailMailbox]:
        ...
    def get_message_async(id: str) -> winrt.windows.foundation.IAsyncOperation[EmailMessage]:
        ...
    def get_message_reader() -> EmailMessageReader:
        ...
    def get_message_reader(options: EmailQueryOptions) -> EmailMessageReader:
        ...

class EmailStoreNotificationTriggerDetails(_winrt.winrt_base):
    ...

