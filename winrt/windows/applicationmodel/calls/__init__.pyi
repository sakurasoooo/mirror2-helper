# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.contacts
except Exception:
    pass

try:
    import winrt.windows.devices.enumeration
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

try:
    import winrt.windows.ui
except Exception:
    pass

class CellularDtmfMode(enum.IntEnum):
    CONTINUOUS = 0
    BURST = 1

class DtmfKey(enum.IntEnum):
    D0 = 0
    D1 = 1
    D2 = 2
    D3 = 3
    D4 = 4
    D5 = 5
    D6 = 6
    D7 = 7
    D8 = 8
    D9 = 9
    STAR = 10
    POUND = 11

class DtmfToneAudioPlayback(enum.IntEnum):
    PLAY = 0
    DO_NOT_PLAY = 1

class PhoneAudioRoutingEndpoint(enum.IntEnum):
    DEFAULT = 0
    BLUETOOTH = 1
    SPEAKERPHONE = 2

class PhoneCallAudioDevice(enum.IntEnum):
    UNKNOWN = 0
    LOCAL_DEVICE = 1
    REMOTE_DEVICE = 2

class PhoneCallDirection(enum.IntEnum):
    UNKNOWN = 0
    INCOMING = 1
    OUTGOING = 2

class PhoneCallHistoryEntryMedia(enum.IntEnum):
    AUDIO = 0
    VIDEO = 1

class PhoneCallHistoryEntryOtherAppReadAccess(enum.IntEnum):
    FULL = 0
    SYSTEM_ONLY = 1

class PhoneCallHistoryEntryQueryDesiredMedia(enum.IntFlag):
    NONE = 0
    AUDIO = 0x1
    VIDEO = 0x2
    ALL = 0xffffffff

class PhoneCallHistoryEntryRawAddressKind(enum.IntEnum):
    PHONE_NUMBER = 0
    CUSTOM = 1

class PhoneCallHistorySourceIdKind(enum.IntEnum):
    CELLULAR_PHONE_LINE_ID = 0
    PACKAGE_FAMILY_NAME = 1

class PhoneCallHistoryStoreAccessType(enum.IntEnum):
    APP_ENTRIES_READ_WRITE = 0
    ALL_ENTRIES_LIMITED_READ_WRITE = 1
    ALL_ENTRIES_READ_WRITE = 2

class PhoneCallMedia(enum.IntEnum):
    AUDIO = 0
    AUDIO_AND_VIDEO = 1
    AUDIO_AND_REAL_TIME_TEXT = 2

class PhoneCallOperationStatus(enum.IntEnum):
    SUCCEEDED = 0
    OTHER_FAILURE = 1
    TIMED_OUT = 2
    CONNECTION_LOST = 3
    INVALID_CALL_STATE = 4

class PhoneCallStatus(enum.IntEnum):
    LOST = 0
    INCOMING = 1
    DIALING = 2
    TALKING = 3
    HELD = 4
    ENDED = 5

class PhoneLineNetworkOperatorDisplayTextLocation(enum.IntEnum):
    DEFAULT = 0
    TILE = 1
    DIALER = 2
    IN_CALL_U_I = 3

class PhoneLineOperationStatus(enum.IntEnum):
    SUCCEEDED = 0
    OTHER_FAILURE = 1
    TIMED_OUT = 2
    CONNECTION_LOST = 3
    INVALID_CALL_STATE = 4

class PhoneLineTransport(enum.IntEnum):
    CELLULAR = 0
    VOIP_APP = 1
    BLUETOOTH = 2

class PhoneLineWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPED = 3

class PhoneNetworkState(enum.IntEnum):
    UNKNOWN = 0
    NO_SIGNAL = 1
    DEREGISTERED = 2
    DENIED = 3
    SEARCHING = 4
    HOME = 5
    ROAMING_INTERNATIONAL = 6
    ROAMING_DOMESTIC = 7

class PhoneSimState(enum.IntEnum):
    UNKNOWN = 0
    PIN_NOT_REQUIRED = 1
    PIN_UNLOCKED = 2
    PIN_LOCKED = 3
    PUK_LOCKED = 4
    NOT_INSERTED = 5
    INVALID = 6
    DISABLED = 7

class PhoneVoicemailType(enum.IntEnum):
    NONE = 0
    TRADITIONAL = 1
    VISUAL = 2

class TransportDeviceAudioRoutingStatus(enum.IntEnum):
    UNKNOWN = 0
    CAN_ROUTE_TO_LOCAL_DEVICE = 1
    CANNOT_ROUTE_TO_LOCAL_DEVICE = 2

class VoipPhoneCallMedia(enum.IntFlag):
    NONE = 0
    AUDIO = 0x1
    VIDEO = 0x2

class VoipPhoneCallRejectReason(enum.IntEnum):
    USER_IGNORED = 0
    TIMED_OUT = 1
    OTHER_INCOMING_CALL = 2
    EMERGENCY_CALL_EXISTS = 3
    INVALID_CALL_STATE = 4

class VoipPhoneCallResourceReservationStatus(enum.IntEnum):
    SUCCESS = 0
    RESOURCES_NOT_AVAILABLE = 1

class VoipPhoneCallState(enum.IntEnum):
    ENDED = 0
    HELD = 1
    ACTIVE = 2
    INCOMING = 3
    OUTGOING = 4

class CallAnswerEventArgs(_winrt.winrt_base):
    ...
    accepted_media: VoipPhoneCallMedia

class CallRejectEventArgs(_winrt.winrt_base):
    ...
    reject_reason: VoipPhoneCallRejectReason

class CallStateChangeEventArgs(_winrt.winrt_base):
    ...
    state: VoipPhoneCallState

class MuteChangeEventArgs(_winrt.winrt_base):
    ...
    muted: bool

class PhoneCall(_winrt.winrt_base):
    ...
    audio_device: PhoneCallAudioDevice
    call_id: str
    is_muted: bool
    status: PhoneCallStatus
    def accept_incoming() -> PhoneCallOperationStatus:
        ...
    def accept_incoming_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def change_audio_device(endpoint: PhoneCallAudioDevice) -> PhoneCallOperationStatus:
        ...
    def change_audio_device_async(endpoint: PhoneCallAudioDevice) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def end() -> PhoneCallOperationStatus:
        ...
    def end_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def get_from_id(call_id: str) -> PhoneCall:
        ...
    def get_phone_call_info() -> PhoneCallInfo:
        ...
    def get_phone_call_info_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallInfo]:
        ...
    def hold() -> PhoneCallOperationStatus:
        ...
    def hold_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def mute() -> PhoneCallOperationStatus:
        ...
    def mute_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def reject_incoming() -> PhoneCallOperationStatus:
        ...
    def reject_incoming_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def resume_from_hold() -> PhoneCallOperationStatus:
        ...
    def resume_from_hold_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def send_dtmf_key(key: DtmfKey, dtmf_tone_audio_playback: DtmfToneAudioPlayback) -> PhoneCallOperationStatus:
        ...
    def send_dtmf_key_async(key: DtmfKey, dtmf_tone_audio_playback: DtmfToneAudioPlayback) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def unmute() -> PhoneCallOperationStatus:
        ...
    def unmute_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]:
        ...
    def add_audio_device_changed(handler: winrt.windows.foundation.TypedEventHandler[PhoneCall, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_audio_device_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_is_muted_changed(handler: winrt.windows.foundation.TypedEventHandler[PhoneCall, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_is_muted_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_status_changed(handler: winrt.windows.foundation.TypedEventHandler[PhoneCall, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PhoneCallBlocking(_winrt.winrt_base):
    ...
    block_unknown_numbers: bool
    block_private_numbers: bool
    def set_call_blocking_list_async(phone_number_list: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class PhoneCallHistoryEntry(_winrt.winrt_base):
    ...
    media: PhoneCallHistoryEntryMedia
    is_missed: bool
    is_incoming: bool
    is_caller_id_blocked: bool
    is_seen: bool
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    is_emergency: bool
    is_suppressed: bool
    start_time: winrt.windows.foundation.DateTime
    source_id_kind: PhoneCallHistorySourceIdKind
    address: PhoneCallHistoryEntryAddress
    source_id: str
    remote_id: str
    other_app_read_access: PhoneCallHistoryEntryOtherAppReadAccess
    is_ringing: bool
    is_voicemail: bool
    id: str
    source_display_name: str

class PhoneCallHistoryEntryAddress(_winrt.winrt_base):
    ...
    raw_address_kind: PhoneCallHistoryEntryRawAddressKind
    raw_address: str
    display_name: str
    contact_id: str

class PhoneCallHistoryEntryQueryOptions(_winrt.winrt_base):
    ...
    desired_media: PhoneCallHistoryEntryQueryDesiredMedia
    source_ids: winrt.windows.foundation.collections.IVector[str]

class PhoneCallHistoryEntryReader(_winrt.winrt_base):
    ...
    def read_batch_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[PhoneCallHistoryEntry]]:
        ...

class PhoneCallHistoryManager(_winrt.winrt_base):
    ...
    def get_for_user(user: winrt.windows.system.User) -> PhoneCallHistoryManagerForUser:
        ...
    def request_store_async(access_type: PhoneCallHistoryStoreAccessType) -> winrt.windows.foundation.IAsyncOperation[PhoneCallHistoryStore]:
        ...

class PhoneCallHistoryManagerForUser(_winrt.winrt_base):
    ...
    user: winrt.windows.system.User
    def request_store_async(access_type: PhoneCallHistoryStoreAccessType) -> winrt.windows.foundation.IAsyncOperation[PhoneCallHistoryStore]:
        ...

class PhoneCallHistoryStore(_winrt.winrt_base):
    ...
    def delete_entries_async(call_history_entries: typing.Iterable[PhoneCallHistoryEntry]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_entry_async(call_history_entry: PhoneCallHistoryEntry) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_entry_async(call_history_entry_id: str) -> winrt.windows.foundation.IAsyncOperation[PhoneCallHistoryEntry]:
        ...
    def get_entry_reader() -> PhoneCallHistoryEntryReader:
        ...
    def get_entry_reader(query_options: PhoneCallHistoryEntryQueryOptions) -> PhoneCallHistoryEntryReader:
        ...
    def get_sources_unseen_count_async(source_ids: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_unseen_count_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def mark_all_as_seen_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def mark_entries_as_seen_async(call_history_entries: typing.Iterable[PhoneCallHistoryEntry]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def mark_entry_as_seen_async(call_history_entry: PhoneCallHistoryEntry) -> winrt.windows.foundation.IAsyncAction:
        ...
    def mark_sources_as_seen_async(source_ids: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def save_entry_async(call_history_entry: PhoneCallHistoryEntry) -> winrt.windows.foundation.IAsyncAction:
        ...

class PhoneCallInfo(_winrt.winrt_base):
    ...
    call_direction: PhoneCallDirection
    display_name: str
    is_hold_supported: bool
    line_id: uuid.UUID
    phone_number: str
    start_time: winrt.windows.foundation.DateTime

class PhoneCallManager(_winrt.winrt_base):
    ...
    is_call_active: bool
    is_call_incoming: bool
    def request_store_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallStore]:
        ...
    def show_phone_call_settings_u_i() -> None:
        ...
    def show_phone_call_u_i(phone_number: str, display_name: str) -> None:
        ...
    def add_call_state_changed(handler: winrt.windows.foundation.EventHandler[_winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_call_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PhoneCallStore(_winrt.winrt_base):
    ...
    def get_default_line_async() -> winrt.windows.foundation.IAsyncOperation[uuid.UUID]:
        ...
    def is_emergency_phone_number_async(number: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def request_line_watcher() -> PhoneLineWatcher:
        ...

class PhoneCallVideoCapabilities(_winrt.winrt_base):
    ...
    is_video_calling_capable: bool

class PhoneCallVideoCapabilitiesManager(_winrt.winrt_base):
    ...
    def get_capabilities_async(phone_number: str) -> winrt.windows.foundation.IAsyncOperation[PhoneCallVideoCapabilities]:
        ...

class PhoneCallsResult(_winrt.winrt_base):
    ...
    all_active_phone_calls: winrt.windows.foundation.collections.IVectorView[PhoneCall]
    operation_status: PhoneLineOperationStatus

class PhoneDialOptions(_winrt.winrt_base):
    ...
    number: str
    media: PhoneCallMedia
    display_name: str
    contact_phone: winrt.windows.applicationmodel.contacts.ContactPhone
    contact: winrt.windows.applicationmodel.contacts.Contact
    audio_endpoint: PhoneAudioRoutingEndpoint

class PhoneLine(_winrt.winrt_base):
    ...
    can_dial: bool
    cellular_details: PhoneLineCellularDetails
    display_color: winrt.windows.ui.Color
    display_name: str
    id: uuid.UUID
    line_configuration: PhoneLineConfiguration
    network_name: str
    network_state: PhoneNetworkState
    supports_tile: bool
    transport: PhoneLineTransport
    video_calling_capabilities: PhoneCallVideoCapabilities
    voicemail: PhoneVoicemail
    transport_device_id: str
    def dial(number: str, display_name: str) -> None:
        ...
    def dial_with_options(options: PhoneDialOptions) -> None:
        ...
    def dial_with_result(number: str, display_name: str) -> PhoneLineDialResult:
        ...
    def dial_with_result_async(number: str, display_name: str) -> winrt.windows.foundation.IAsyncOperation[PhoneLineDialResult]:
        ...
    def enable_text_reply(value: bool) -> None:
        ...
    def from_id_async(line_id: uuid.UUID) -> winrt.windows.foundation.IAsyncOperation[PhoneLine]:
        ...
    def get_all_active_phone_calls() -> PhoneCallsResult:
        ...
    def get_all_active_phone_calls_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallsResult]:
        ...
    def is_immediate_dial_number_async(number: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_line_changed(handler: winrt.windows.foundation.TypedEventHandler[PhoneLine, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_line_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PhoneLineCellularDetails(_winrt.winrt_base):
    ...
    is_modem_on: bool
    registration_reject_code: int
    sim_slot_index: int
    sim_state: PhoneSimState
    def get_network_operator_display_text(location: PhoneLineNetworkOperatorDisplayTextLocation) -> str:
        ...

class PhoneLineConfiguration(_winrt.winrt_base):
    ...
    extended_properties: winrt.windows.foundation.collections.IMapView[str, _winrt.winrt_base]
    is_video_calling_enabled: bool

class PhoneLineDialResult(_winrt.winrt_base):
    ...
    dial_call_status: PhoneCallOperationStatus
    dialed_call: PhoneCall

class PhoneLineTransportDevice(_winrt.winrt_base):
    ...
    device_id: str
    transport: PhoneLineTransport
    audio_routing_status: TransportDeviceAudioRoutingStatus
    in_band_ringing_enabled: bool
    def connect() -> bool:
        ...
    def connect_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def from_id(id: str) -> PhoneLineTransportDevice:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(transport: PhoneLineTransport) -> str:
        ...
    def is_registered() -> bool:
        ...
    def register_app() -> None:
        ...
    def register_app_for_user(user: winrt.windows.system.User) -> None:
        ...
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.devices.enumeration.DeviceAccessStatus]:
        ...
    def unregister_app() -> None:
        ...
    def unregister_app_for_user(user: winrt.windows.system.User) -> None:
        ...
    def add_audio_routing_status_changed(handler: winrt.windows.foundation.TypedEventHandler[PhoneLineTransportDevice, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_audio_routing_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_in_band_ringing_enabled_changed(handler: winrt.windows.foundation.TypedEventHandler[PhoneLineTransportDevice, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_in_band_ringing_enabled_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PhoneLineWatcher(_winrt.winrt_base):
    ...
    status: PhoneLineWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_line_added(handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_line_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_line_removed(handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_line_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_line_updated(handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_line_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PhoneLineWatcherEventArgs(_winrt.winrt_base):
    ...
    line_id: uuid.UUID

class PhoneVoicemail(_winrt.winrt_base):
    ...
    message_count: int
    number: str
    type: PhoneVoicemailType
    def dial_voicemail_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class VoipCallCoordinator(_winrt.winrt_base):
    ...
    def cancel_upgrade(call_upgrade_guid: uuid.UUID) -> None:
        ...
    def get_default() -> VoipCallCoordinator:
        ...
    def notify_muted() -> None:
        ...
    def notify_unmuted() -> None:
        ...
    def request_incoming_upgrade_to_video_call(context: str, contact_name: str, contact_number: str, contact_image: winrt.windows.foundation.Uri, service_name: str, branding_image: winrt.windows.foundation.Uri, call_details: str, ringtone: winrt.windows.foundation.Uri, ring_timeout: winrt.windows.foundation.TimeSpan) -> VoipPhoneCall:
        ...
    def request_new_app_initiated_call(context: str, contact_name: str, contact_number: str, service_name: str, media: VoipPhoneCallMedia) -> VoipPhoneCall:
        ...
    def request_new_incoming_call(context: str, contact_name: str, contact_number: str, contact_image: winrt.windows.foundation.Uri, service_name: str, branding_image: winrt.windows.foundation.Uri, call_details: str, ringtone: winrt.windows.foundation.Uri, media: VoipPhoneCallMedia, ring_timeout: winrt.windows.foundation.TimeSpan) -> VoipPhoneCall:
        ...
    def request_new_incoming_call(context: str, contact_name: str, contact_number: str, contact_image: winrt.windows.foundation.Uri, service_name: str, branding_image: winrt.windows.foundation.Uri, call_details: str, ringtone: winrt.windows.foundation.Uri, media: VoipPhoneCallMedia, ring_timeout: winrt.windows.foundation.TimeSpan, contact_remote_id: str) -> VoipPhoneCall:
        ...
    def request_new_outgoing_call(context: str, contact_name: str, service_name: str, media: VoipPhoneCallMedia) -> VoipPhoneCall:
        ...
    def request_outgoing_upgrade_to_video_call(call_upgrade_guid: uuid.UUID, context: str, contact_name: str, service_name: str) -> VoipPhoneCall:
        ...
    def reserve_call_resources_async() -> winrt.windows.foundation.IAsyncOperation[VoipPhoneCallResourceReservationStatus]:
        ...
    def reserve_call_resources_async(task_entry_point: str) -> winrt.windows.foundation.IAsyncOperation[VoipPhoneCallResourceReservationStatus]:
        ...
    def setup_new_accepted_call(context: str, contact_name: str, contact_number: str, service_name: str, media: VoipPhoneCallMedia) -> VoipPhoneCall:
        ...
    def terminate_cellular_call(call_upgrade_guid: uuid.UUID) -> None:
        ...
    def add_mute_state_changed(mute_change_handler: winrt.windows.foundation.TypedEventHandler[VoipCallCoordinator, MuteChangeEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_mute_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class VoipPhoneCall(_winrt.winrt_base):
    ...
    start_time: winrt.windows.foundation.DateTime
    contact_name: str
    call_media: VoipPhoneCallMedia
    def notify_call_accepted(media: VoipPhoneCallMedia) -> None:
        ...
    def notify_call_active() -> None:
        ...
    def notify_call_ended() -> None:
        ...
    def notify_call_held() -> None:
        ...
    def notify_call_ready() -> None:
        ...
    def try_show_app_u_i() -> None:
        ...
    def add_answer_requested(accept_handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallAnswerEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_answer_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_end_requested(handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_end_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_hold_requested(handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_hold_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_reject_requested(reject_handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallRejectEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_reject_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_resume_requested(handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_resume_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

