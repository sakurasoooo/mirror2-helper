# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.media.audio
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class ActivationSignalDetectionConfigurationCreationStatus(enum.IntEnum):
    SUCCESS = 0
    SIGNAL_ID_NOT_AVAILABLE = 1
    MODEL_ID_NOT_SUPPORTED = 2
    INVALID_SIGNAL_ID = 3
    INVALID_MODEL_ID = 4
    INVALID_DISPLAY_NAME = 5
    CONFIGURATION_ALREADY_EXISTS = 6
    CREATION_NOT_SUPPORTED = 7

class ActivationSignalDetectionConfigurationRemovalResult(enum.IntEnum):
    SUCCESS = 0
    NOT_FOUND = 1
    CURRENTLY_ENABLED = 2
    REMOVAL_NOT_SUPPORTED = 3

class ActivationSignalDetectionConfigurationSetModelDataResult(enum.IntEnum):
    SUCCESS = 0
    EMPTY_MODEL_DATA = 1
    UNSUPPORTED_FORMAT = 2
    CONFIGURATION_CURRENTLY_ENABLED = 3
    INVALID_DATA = 4
    SET_MODEL_DATA_NOT_SUPPORTED = 5
    CONFIGURATION_NOT_FOUND = 6
    UNKNOWN_ERROR = 7

class ActivationSignalDetectionConfigurationStateChangeResult(enum.IntEnum):
    SUCCESS = 0
    NO_MODEL_DATA = 1
    CONFIGURATION_NOT_FOUND = 2

class ActivationSignalDetectionTrainingDataFormat(enum.IntEnum):
    VOICE8K_HZ8_BIT_MONO = 0
    VOICE8K_HZ16_BIT_MONO = 1
    VOICE16K_HZ8_BIT_MONO = 2
    VOICE16K_HZ16_BIT_MONO = 3
    VOICE_O_E_M_DEFINED = 4
    AUDIO44K_HZ8_BIT_MONO = 5
    AUDIO44K_HZ16_BIT_MONO = 6
    AUDIO48K_HZ8_BIT_MONO = 7
    AUDIO48K_HZ16_BIT_MONO = 8
    AUDIO_O_E_M_DEFINED = 9
    OTHER_O_E_M_DEFINED = 10

class ActivationSignalDetectorKind(enum.IntEnum):
    AUDIO_PATTERN = 0
    AUDIO_IMPULSE = 1
    HARDWARE_EVENT = 2

class ActivationSignalDetectorPowerState(enum.IntEnum):
    HIGH_POWER = 0
    CONNECTED_LOW_POWER = 1
    DISCONNECTED_LOW_POWER = 2

class ConversationalAgentActivationKind(enum.IntEnum):
    VOICE_ACTIVATION_PREVIEW = 0
    FOREGROUND = 1

class ConversationalAgentActivationResult(enum.IntEnum):
    SUCCESS = 0
    AGENT_INACTIVE = 1
    SCREEN_NOT_AVAILABLE = 2
    AGENT_INTERRUPTED = 3

class ConversationalAgentSessionUpdateResponse(enum.IntEnum):
    SUCCESS = 0
    FAILED = 1

class ConversationalAgentState(enum.IntEnum):
    INACTIVE = 0
    DETECTING = 1
    LISTENING = 2
    WORKING = 3
    SPEAKING = 4
    LISTENING_AND_SPEAKING = 5

class ConversationalAgentSystemStateChangeType(enum.IntEnum):
    USER_AUTHENTICATION = 0
    SCREEN_AVAILABILITY = 1
    INDICATOR_LIGHT_AVAILABILITY = 2
    VOICE_ACTIVATION_AVAILABILITY = 3

class ConversationalAgentVoiceActivationPrerequisiteKind(enum.IntEnum):
    MICROPHONE_PERMISSION = 0
    KNOWN_AGENTS = 1
    AGENT_ALLOWED = 2
    APP_CAPABILITY = 3
    BACKGROUND_TASK_REGISTRATION = 4
    POLICY_PERMISSION = 5

class DetectionConfigurationAvailabilityChangeKind(enum.IntEnum):
    SYSTEM_RESOURCE_ACCESS = 0
    PERMISSION = 1
    LOCK_SCREEN_PERMISSION = 2

class DetectionConfigurationTrainingStatus(enum.IntEnum):
    SUCCESS = 0
    FORMAT_NOT_SUPPORTED = 1
    VOICE_TOO_QUIET = 2
    VOICE_TOO_LOUD = 3
    VOICE_TOO_FAST = 4
    VOICE_TOO_SLOW = 5
    VOICE_QUALITY_PROBLEM = 6
    TRAINING_SYSTEM_INTERNAL_ERROR = 7
    TRAINING_TIMED_OUT = 8
    CONFIGURATION_NOT_FOUND = 9

class SignalDetectorResourceKind(enum.IntEnum):
    PARALLEL_MODEL_SUPPORT = 0
    PARALLEL_MODEL_SUPPORT_FOR_AGENT = 1
    PARALLEL_SIGNAL_SUPPORT = 2
    PARALLEL_SIGNAL_SUPPORT_FOR_AGENT = 3
    DISPLAY_OFF_SUPPORT = 4
    PLUGGED_IN_POWER = 5
    DETECTOR = 6
    SUPPORTED_SLEEP_STATE = 7
    SUPPORTED_BATTERY_SAVER_STATE = 8
    SCREEN_AVAILABILITY = 9
    INPUT_HARDWARE = 10
    ACOUSTIC_ECHO_CANCELLATION = 11
    MODEL_ID_SUPPORT = 12
    DATA_CHANNEL = 13

class ActivationSignalDetectionConfiguration(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    availability_info: DetectionConfigurationAvailabilityInfo
    display_name: str
    is_active: bool
    model_id: str
    signal_id: str
    training_data_format: ActivationSignalDetectionTrainingDataFormat
    training_steps_completed: int
    training_steps_remaining: int
    training_step_completion_max_allowed_time: int
    def apply_training_data(training_data_format: ActivationSignalDetectionTrainingDataFormat, training_data: winrt.windows.storage.streams.IInputStream) -> DetectionConfigurationTrainingStatus:
        ...
    def apply_training_data_async(training_data_format: ActivationSignalDetectionTrainingDataFormat, training_data: winrt.windows.storage.streams.IInputStream) -> winrt.windows.foundation.IAsyncOperation[DetectionConfigurationTrainingStatus]:
        ...
    def clear_model_data() -> None:
        ...
    def clear_model_data_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def clear_training_data() -> None:
        ...
    def clear_training_data_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def get_model_data() -> winrt.windows.storage.streams.IInputStream:
        ...
    def get_model_data_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IInputStream]:
        ...
    def get_model_data_type() -> str:
        ...
    def get_model_data_type_async() -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def set_enabled(value: bool) -> None:
        ...
    def set_enabled_async(value: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_enabled_with_result(value: bool) -> ActivationSignalDetectionConfigurationStateChangeResult:
        ...
    def set_enabled_with_result_async(value: bool) -> winrt.windows.foundation.IAsyncOperation[ActivationSignalDetectionConfigurationStateChangeResult]:
        ...
    def set_model_data(data_type: str, data: winrt.windows.storage.streams.IInputStream) -> None:
        ...
    def set_model_data_async(data_type: str, data: winrt.windows.storage.streams.IInputStream) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_model_data_with_result(data_type: str, data: winrt.windows.storage.streams.IInputStream) -> ActivationSignalDetectionConfigurationSetModelDataResult:
        ...
    def set_model_data_with_result_async(data_type: str, data: winrt.windows.storage.streams.IInputStream) -> winrt.windows.foundation.IAsyncOperation[ActivationSignalDetectionConfigurationSetModelDataResult]:
        ...
    def add_availability_changed(handler: winrt.windows.foundation.TypedEventHandler[ActivationSignalDetectionConfiguration, DetectionConfigurationAvailabilityChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_availability_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ActivationSignalDetectionConfigurationCreationResult(_winrt.winrt_base):
    ...
    configuration: ActivationSignalDetectionConfiguration
    status: ActivationSignalDetectionConfigurationCreationStatus

class ActivationSignalDetector(_winrt.winrt_base):
    ...
    can_create_configurations: bool
    kind: ActivationSignalDetectorKind
    provider_id: str
    supported_model_data_types: winrt.windows.foundation.collections.IVectorView[str]
    supported_power_states: winrt.windows.foundation.collections.IVectorView[ActivationSignalDetectorPowerState]
    supported_training_data_formats: winrt.windows.foundation.collections.IVectorView[ActivationSignalDetectionTrainingDataFormat]
    detector_id: str
    def create_configuration(signal_id: str, model_id: str, display_name: str) -> None:
        ...
    def create_configuration_async(signal_id: str, model_id: str, display_name: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def create_configuration_with_result(signal_id: str, model_id: str, display_name: str) -> ActivationSignalDetectionConfigurationCreationResult:
        ...
    def create_configuration_with_result_async(signal_id: str, model_id: str, display_name: str) -> winrt.windows.foundation.IAsyncOperation[ActivationSignalDetectionConfigurationCreationResult]:
        ...
    def get_available_model_ids_for_signal_id(signal_id: str) -> winrt.windows.foundation.collections.IVector[str]:
        ...
    def get_available_model_ids_for_signal_id_async(signal_id: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[str]]:
        ...
    def get_configuration(signal_id: str, model_id: str) -> ActivationSignalDetectionConfiguration:
        ...
    def get_configuration_async(signal_id: str, model_id: str) -> winrt.windows.foundation.IAsyncOperation[ActivationSignalDetectionConfiguration]:
        ...
    def get_configurations() -> winrt.windows.foundation.collections.IVectorView[ActivationSignalDetectionConfiguration]:
        ...
    def get_configurations_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ActivationSignalDetectionConfiguration]]:
        ...
    def get_supported_model_ids_for_signal_id(signal_id: str) -> winrt.windows.foundation.collections.IVectorView[str]:
        ...
    def get_supported_model_ids_for_signal_id_async(signal_id: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[str]]:
        ...
    def remove_configuration(signal_id: str, model_id: str) -> None:
        ...
    def remove_configuration_async(signal_id: str, model_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def remove_configuration_with_result(signal_id: str, model_id: str) -> ActivationSignalDetectionConfigurationRemovalResult:
        ...
    def remove_configuration_with_result_async(signal_id: str, model_id: str) -> winrt.windows.foundation.IAsyncOperation[ActivationSignalDetectionConfigurationRemovalResult]:
        ...

class ConversationalAgentDetectorManager(_winrt.winrt_base):
    ...
    default: ConversationalAgentDetectorManager
    def get_activation_signal_detector_from_id(detector_id: str) -> ActivationSignalDetector:
        ...
    def get_activation_signal_detector_from_id_async(detector_id: str) -> winrt.windows.foundation.IAsyncOperation[ActivationSignalDetector]:
        ...
    def get_activation_signal_detectors(kind: ActivationSignalDetectorKind) -> winrt.windows.foundation.collections.IVectorView[ActivationSignalDetector]:
        ...
    def get_activation_signal_detectors_async(kind: ActivationSignalDetectorKind) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ActivationSignalDetector]]:
        ...
    def get_all_activation_signal_detectors() -> winrt.windows.foundation.collections.IVectorView[ActivationSignalDetector]:
        ...
    def get_all_activation_signal_detectors_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ActivationSignalDetector]]:
        ...

class ConversationalAgentSession(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    agent_state: ConversationalAgentState
    is_indicator_light_available: bool
    is_interrupted: bool
    is_interruptible: bool
    is_screen_available: bool
    is_user_authenticated: bool
    is_voice_activation_available: bool
    signal: ConversationalAgentSignal
    def close() -> None:
        ...
    def create_audio_device_input_node(graph: winrt.windows.media.audio.AudioGraph) -> winrt.windows.media.audio.AudioDeviceInputNode:
        ...
    def create_audio_device_input_node_async(graph: winrt.windows.media.audio.AudioGraph) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.audio.AudioDeviceInputNode]:
        ...
    def get_audio_capture_device_id() -> str:
        ...
    def get_audio_capture_device_id_async() -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def get_audio_client() -> _winrt.winrt_base:
        ...
    def get_audio_client_async() -> winrt.windows.foundation.IAsyncOperation[_winrt.winrt_base]:
        ...
    def get_audio_render_device_id() -> str:
        ...
    def get_audio_render_device_id_async() -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def get_current_session_async() -> winrt.windows.foundation.IAsyncOperation[ConversationalAgentSession]:
        ...
    def get_current_session_sync() -> ConversationalAgentSession:
        ...
    def get_missing_prerequisites() -> winrt.windows.foundation.collections.IVectorView[ConversationalAgentVoiceActivationPrerequisiteKind]:
        ...
    def get_missing_prerequisites_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ConversationalAgentVoiceActivationPrerequisiteKind]]:
        ...
    def get_signal_model_id() -> int:
        ...
    def get_signal_model_id_async() -> winrt.windows.foundation.IAsyncOperation[int]:
        ...
    def get_supported_signal_model_ids() -> winrt.windows.foundation.collections.IVectorView[int]:
        ...
    def get_supported_signal_model_ids_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[int]]:
        ...
    def request_activation(activation_kind: ConversationalAgentActivationKind) -> ConversationalAgentActivationResult:
        ...
    def request_activation_async(activation_kind: ConversationalAgentActivationKind) -> winrt.windows.foundation.IAsyncOperation[ConversationalAgentActivationResult]:
        ...
    def request_agent_state_change(state: ConversationalAgentState) -> ConversationalAgentSessionUpdateResponse:
        ...
    def request_agent_state_change_async(state: ConversationalAgentState) -> winrt.windows.foundation.IAsyncOperation[ConversationalAgentSessionUpdateResponse]:
        ...
    def request_foreground_activation() -> ConversationalAgentSessionUpdateResponse:
        ...
    def request_foreground_activation_async() -> winrt.windows.foundation.IAsyncOperation[ConversationalAgentSessionUpdateResponse]:
        ...
    def request_interruptible(interruptible: bool) -> ConversationalAgentSessionUpdateResponse:
        ...
    def request_interruptible_async(interruptible: bool) -> winrt.windows.foundation.IAsyncOperation[ConversationalAgentSessionUpdateResponse]:
        ...
    def set_signal_model_id(signal_model_id: int) -> bool:
        ...
    def set_signal_model_id_async(signal_model_id: int) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def set_support_lock_screen_activation(lock_screen_activation_supported: bool) -> None:
        ...
    def set_support_lock_screen_activation_async(lock_screen_activation_supported: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_session_interrupted(handler: winrt.windows.foundation.TypedEventHandler[ConversationalAgentSession, ConversationalAgentSessionInterruptedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_session_interrupted(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_signal_detected(handler: winrt.windows.foundation.TypedEventHandler[ConversationalAgentSession, ConversationalAgentSignalDetectedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_signal_detected(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_system_state_changed(handler: winrt.windows.foundation.TypedEventHandler[ConversationalAgentSession, ConversationalAgentSystemStateChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_system_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ConversationalAgentSessionInterruptedEventArgs(_winrt.winrt_base):
    ...

class ConversationalAgentSignal(_winrt.winrt_base):
    ...
    signal_start: winrt.windows.foundation.TimeSpan
    signal_name: str
    signal_id: str
    signal_end: winrt.windows.foundation.TimeSpan
    signal_context: _winrt.winrt_base
    is_signal_verification_required: bool
    detector_id: str
    detector_kind: ActivationSignalDetectorKind

class ConversationalAgentSignalDetectedEventArgs(_winrt.winrt_base):
    ...

class ConversationalAgentSystemStateChangedEventArgs(_winrt.winrt_base):
    ...
    system_state_change_type: ConversationalAgentSystemStateChangeType

class DetectionConfigurationAvailabilityChangedEventArgs(_winrt.winrt_base):
    ...
    kind: DetectionConfigurationAvailabilityChangeKind

class DetectionConfigurationAvailabilityInfo(_winrt.winrt_base):
    ...
    has_lock_screen_permission: bool
    has_permission: bool
    has_system_resource_access: bool
    is_enabled: bool
    unavailable_system_resources: winrt.windows.foundation.collections.IVectorView[SignalDetectorResourceKind]

