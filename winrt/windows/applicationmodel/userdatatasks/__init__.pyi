# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class UserDataTaskDaysOfWeek(enum.IntFlag):
    NONE = 0
    SUNDAY = 0x1
    MONDAY = 0x2
    TUESDAY = 0x4
    WEDNESDAY = 0x8
    THURSDAY = 0x10
    FRIDAY = 0x20
    SATURDAY = 0x40

class UserDataTaskDetailsKind(enum.IntEnum):
    PLAIN_TEXT = 0
    HTML = 1

class UserDataTaskKind(enum.IntEnum):
    SINGLE = 0
    RECURRING = 1
    REGENERATING = 2

class UserDataTaskListOtherAppReadAccess(enum.IntEnum):
    FULL = 0
    SYSTEM_ONLY = 1
    NONE = 2

class UserDataTaskListOtherAppWriteAccess(enum.IntEnum):
    LIMITED = 0
    NONE = 1

class UserDataTaskListSyncStatus(enum.IntEnum):
    IDLE = 0
    SYNCING = 1
    UP_TO_DATE = 2
    AUTHENTICATION_ERROR = 3
    POLICY_ERROR = 4
    UNKNOWN_ERROR = 5

class UserDataTaskPriority(enum.IntEnum):
    NORMAL = 0
    LOW = -1
    HIGH = 1

class UserDataTaskQueryKind(enum.IntEnum):
    ALL = 0
    INCOMPLETE = 1
    COMPLETE = 2

class UserDataTaskQuerySortProperty(enum.IntEnum):
    DUE_DATE = 0

class UserDataTaskRecurrenceUnit(enum.IntEnum):
    DAILY = 0
    WEEKLY = 1
    MONTHLY = 2
    MONTHLY_ON_DAY = 3
    YEARLY = 4
    YEARLY_ON_DAY = 5

class UserDataTaskRegenerationUnit(enum.IntEnum):
    DAILY = 0
    WEEKLY = 1
    MONTHLY = 2
    YEARLY = 4

class UserDataTaskSensitivity(enum.IntEnum):
    PUBLIC = 0
    PRIVATE = 1

class UserDataTaskStoreAccessType(enum.IntEnum):
    APP_TASKS_READ_WRITE = 0
    ALL_TASKS_LIMITED_READ_WRITE = 1

class UserDataTaskWeekOfMonth(enum.IntEnum):
    FIRST = 0
    SECOND = 1
    THIRD = 2
    FOURTH = 3
    LAST = 4

class UserDataTask(_winrt.winrt_base):
    ...
    regeneration_properties: UserDataTaskRegenerationProperties
    priority: UserDataTaskPriority
    completed_date: typing.Optional[winrt.windows.foundation.DateTime]
    due_date: typing.Optional[winrt.windows.foundation.DateTime]
    details_kind: UserDataTaskDetailsKind
    start_date: typing.Optional[winrt.windows.foundation.DateTime]
    details: str
    subject: str
    sensitivity: UserDataTaskSensitivity
    remote_id: str
    reminder: typing.Optional[winrt.windows.foundation.DateTime]
    recurrence_properties: UserDataTaskRecurrenceProperties
    id: str
    kind: UserDataTaskKind
    list_id: str

class UserDataTaskBatch(_winrt.winrt_base):
    ...
    tasks: winrt.windows.foundation.collections.IVectorView[UserDataTask]

class UserDataTaskList(_winrt.winrt_base):
    ...
    other_app_write_access: UserDataTaskListOtherAppWriteAccess
    other_app_read_access: UserDataTaskListOtherAppReadAccess
    display_name: str
    id: str
    limited_write_operations: UserDataTaskListLimitedWriteOperations
    source_display_name: str
    sync_manager: UserDataTaskListSyncManager
    user_data_account_id: str
    def delete_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def delete_task_async(user_data_task_id: str) -> winrt.windows.foundation.IAsyncAction:
        ...
    def get_task_async(user_data_task: str) -> winrt.windows.foundation.IAsyncOperation[UserDataTask]:
        ...
    def get_task_reader() -> UserDataTaskReader:
        ...
    def get_task_reader(options: UserDataTaskQueryOptions) -> UserDataTaskReader:
        ...
    def register_sync_manager_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def save_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def save_task_async(user_data_task: UserDataTask) -> winrt.windows.foundation.IAsyncAction:
        ...

class UserDataTaskListLimitedWriteOperations(_winrt.winrt_base):
    ...
    def try_complete_task_async(user_data_task_id: str) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def try_create_or_update_task_async(user_data_task: UserDataTask) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_delete_task_async(user_data_task_id: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def try_skip_occurrence_async(user_data_task_id: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class UserDataTaskListSyncManager(_winrt.winrt_base):
    ...
    status: UserDataTaskListSyncStatus
    last_successful_sync_time: winrt.windows.foundation.DateTime
    last_attempted_sync_time: winrt.windows.foundation.DateTime
    def sync_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_sync_status_changed(handler: winrt.windows.foundation.TypedEventHandler[UserDataTaskListSyncManager, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_sync_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class UserDataTaskManager(_winrt.winrt_base):
    ...
    user: winrt.windows.system.User
    def get_default() -> UserDataTaskManager:
        ...
    def get_for_user(user: winrt.windows.system.User) -> UserDataTaskManager:
        ...
    def request_store_async(access_type: UserDataTaskStoreAccessType) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskStore]:
        ...

class UserDataTaskQueryOptions(_winrt.winrt_base):
    ...
    sort_property: UserDataTaskQuerySortProperty
    kind: UserDataTaskQueryKind

class UserDataTaskReader(_winrt.winrt_base):
    ...
    def read_batch_async() -> winrt.windows.foundation.IAsyncOperation[UserDataTaskBatch]:
        ...

class UserDataTaskRecurrenceProperties(_winrt.winrt_base):
    ...
    week_of_month: typing.Optional[UserDataTaskWeekOfMonth]
    until: typing.Optional[winrt.windows.foundation.DateTime]
    unit: UserDataTaskRecurrenceUnit
    occurrences: typing.Optional[int]
    month: typing.Optional[int]
    interval: int
    days_of_week: typing.Optional[UserDataTaskDaysOfWeek]
    day: typing.Optional[int]

class UserDataTaskRegenerationProperties(_winrt.winrt_base):
    ...
    until: typing.Optional[winrt.windows.foundation.DateTime]
    unit: UserDataTaskRegenerationUnit
    occurrences: typing.Optional[int]
    interval: int

class UserDataTaskStore(_winrt.winrt_base):
    ...
    def create_list_async(name: str) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskList]:
        ...
    def create_list_async(name: str, user_data_account_id: str) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskList]:
        ...
    def find_lists_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UserDataTaskList]]:
        ...
    def get_list_async(task_list_id: str) -> winrt.windows.foundation.IAsyncOperation[UserDataTaskList]:
        ...

