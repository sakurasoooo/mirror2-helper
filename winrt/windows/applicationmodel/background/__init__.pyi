# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.activation
except Exception:
    pass

try:
    import winrt.windows.applicationmodel.calls.background
except Exception:
    pass

try:
    import winrt.windows.devices.bluetooth
except Exception:
    pass

try:
    import winrt.windows.devices.bluetooth.advertisement
except Exception:
    pass

try:
    import winrt.windows.devices.bluetooth.background
except Exception:
    pass

try:
    import winrt.windows.devices.bluetooth.genericattributeprofile
except Exception:
    pass

try:
    import winrt.windows.devices.geolocation
except Exception:
    pass

try:
    import winrt.windows.devices.sensors
except Exception:
    pass

try:
    import winrt.windows.devices.smartcards
except Exception:
    pass

try:
    import winrt.windows.devices.sms
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.networking
except Exception:
    pass

try:
    import winrt.windows.networking.sockets
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.provider
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

try:
    import winrt.windows.ui.notifications
except Exception:
    pass

class ApplicationTriggerResult(enum.IntEnum):
    ALLOWED = 0
    CURRENTLY_RUNNING = 1
    DISABLED_BY_POLICY = 2
    UNKNOWN_ERROR = 3

class BackgroundAccessRequestKind(enum.IntEnum):
    ALWAYS_ALLOWED = 0
    ALLOWED_SUBJECT_TO_SYSTEM_POLICY = 1

class BackgroundAccessStatus(enum.IntEnum):
    UNSPECIFIED = 0
    ALLOWED_WITH_ALWAYS_ON_REAL_TIME_CONNECTIVITY = 1
    ALLOWED_MAY_USE_ACTIVE_REAL_TIME_CONNECTIVITY = 2
    DENIED = 3
    ALWAYS_ALLOWED = 4
    ALLOWED_SUBJECT_TO_SYSTEM_POLICY = 5
    DENIED_BY_SYSTEM_POLICY = 6
    DENIED_BY_USER = 7

class BackgroundTaskCancellationReason(enum.IntEnum):
    ABORT = 0
    TERMINATING = 1
    LOGGING_OFF = 2
    SERVICING_UPDATE = 3
    IDLE_TASK = 4
    UNINSTALL = 5
    CONDITION_LOSS = 6
    SYSTEM_POLICY = 7
    QUIET_HOURS_ENTERED = 8
    EXECUTION_TIME_EXCEEDED = 9
    RESOURCE_REVOCATION = 10
    ENERGY_SAVER = 11

class BackgroundTaskThrottleCounter(enum.IntEnum):
    ALL = 0
    CPU = 1
    NETWORK = 2

class BackgroundWorkCostValue(enum.IntEnum):
    LOW = 0
    MEDIUM = 1
    HIGH = 2

class CustomSystemEventTriggerRecurrence(enum.IntEnum):
    ONCE = 0
    ALWAYS = 1

class DeviceTriggerResult(enum.IntEnum):
    ALLOWED = 0
    DENIED_BY_USER = 1
    DENIED_BY_SYSTEM = 2
    LOW_BATTERY = 3

class LocationTriggerType(enum.IntEnum):
    GEOFENCE = 0

class MediaProcessingTriggerResult(enum.IntEnum):
    ALLOWED = 0
    CURRENTLY_RUNNING = 1
    DISABLED_BY_POLICY = 2
    UNKNOWN_ERROR = 3

class SystemConditionType(enum.IntEnum):
    INVALID = 0
    USER_PRESENT = 1
    USER_NOT_PRESENT = 2
    INTERNET_AVAILABLE = 3
    INTERNET_NOT_AVAILABLE = 4
    SESSION_CONNECTED = 5
    SESSION_DISCONNECTED = 6
    FREE_NETWORK_AVAILABLE = 7
    BACKGROUND_WORK_COST_NOT_HIGH = 8

class SystemTriggerType(enum.IntEnum):
    INVALID = 0
    SMS_RECEIVED = 1
    USER_PRESENT = 2
    USER_AWAY = 3
    NETWORK_STATE_CHANGE = 4
    CONTROL_CHANNEL_RESET = 5
    INTERNET_AVAILABLE = 6
    SESSION_CONNECTED = 7
    SERVICING_COMPLETE = 8
    LOCK_SCREEN_APPLICATION_ADDED = 9
    LOCK_SCREEN_APPLICATION_REMOVED = 10
    TIME_ZONE_CHANGE = 11
    ONLINE_ID_CONNECTED_STATE_CHANGE = 12
    BACKGROUND_WORK_COST_CHANGE = 13
    POWER_STATE_CHANGE = 14
    DEFAULT_SIGN_IN_ACCOUNT_CHANGE = 15

class ActivitySensorTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    minimum_report_interval: int
    report_interval: int
    subscribed_activities: winrt.windows.foundation.collections.IVector[winrt.windows.devices.sensors.ActivityType]
    supported_activities: winrt.windows.foundation.collections.IVectorView[winrt.windows.devices.sensors.ActivityType]

class ApplicationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    def request_async() -> winrt.windows.foundation.IAsyncOperation[ApplicationTriggerResult]:
        ...
    def request_async(arguments: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[ApplicationTriggerResult]:
        ...

class ApplicationTriggerDetails(_winrt.winrt_base):
    ...
    arguments: winrt.windows.foundation.collections.ValueSet

class AppointmentStoreNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class BackgroundExecutionManager(_winrt.winrt_base):
    ...
    def get_access_status() -> BackgroundAccessStatus:
        ...
    def get_access_status(application_id: str) -> BackgroundAccessStatus:
        ...
    def get_access_status_for_modern_standby() -> BackgroundAccessStatus:
        ...
    def get_access_status_for_modern_standby(application_id: str) -> BackgroundAccessStatus:
        ...
    def remove_access() -> None:
        ...
    def remove_access(application_id: str) -> None:
        ...
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[BackgroundAccessStatus]:
        ...
    def request_access_async(application_id: str) -> winrt.windows.foundation.IAsyncOperation[BackgroundAccessStatus]:
        ...
    def request_access_kind_async(requested_access: BackgroundAccessRequestKind, reason: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def request_access_kind_for_modern_standby_async(requested_access: BackgroundAccessRequestKind, reason: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class BackgroundTaskBuilder(_winrt.winrt_base):
    ...
    task_entry_point: str
    name: str
    cancel_on_condition_loss: bool
    is_network_requested: bool
    task_group: BackgroundTaskRegistrationGroup
    def add_condition(condition: IBackgroundCondition) -> None:
        ...
    def register() -> BackgroundTaskRegistration:
        ...
    def set_task_entry_point_clsid(task_entry_point: uuid.UUID) -> None:
        ...
    def set_trigger(trigger: IBackgroundTrigger) -> None:
        ...

class BackgroundTaskCompletedEventArgs(_winrt.winrt_base):
    ...
    instance_id: uuid.UUID
    def check_result() -> None:
        ...

class BackgroundTaskDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class BackgroundTaskProgressEventArgs(_winrt.winrt_base):
    ...
    instance_id: uuid.UUID
    progress: int

class BackgroundTaskRegistration(IBackgroundTaskRegistration, IBackgroundTaskRegistration2, IBackgroundTaskRegistration3, _winrt.winrt_base):
    ...
    name: str
    task_id: uuid.UUID
    trigger: IBackgroundTrigger
    task_group: BackgroundTaskRegistrationGroup
    all_tasks: winrt.windows.foundation.collections.IMapView[uuid.UUID, IBackgroundTaskRegistration]
    all_task_groups: winrt.windows.foundation.collections.IMapView[str, BackgroundTaskRegistrationGroup]
    def get_task_group(group_id: str) -> BackgroundTaskRegistrationGroup:
        ...
    def unregister(cancel_task: bool) -> None:
        ...
    def add_completed(handler: BackgroundTaskCompletedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_completed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_progress(handler: BackgroundTaskProgressEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_progress(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class BackgroundTaskRegistrationGroup(_winrt.winrt_base):
    ...
    all_tasks: winrt.windows.foundation.collections.IMapView[uuid.UUID, BackgroundTaskRegistration]
    id: str
    name: str
    def add_background_activated(handler: winrt.windows.foundation.TypedEventHandler[BackgroundTaskRegistrationGroup, winrt.windows.applicationmodel.activation.BackgroundActivatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_background_activated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class BackgroundWorkCost(_winrt.winrt_base):
    ...
    current_background_work_cost: BackgroundWorkCostValue

class BluetoothLEAdvertisementPublisherTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    advertisement: winrt.windows.devices.bluetooth.advertisement.BluetoothLEAdvertisement
    use_extended_format: bool
    preferred_transmit_power_level_in_d_bm: typing.Optional[int]
    is_anonymous: bool
    include_transmit_power_level: bool

class BluetoothLEAdvertisementWatcherTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    signal_strength_filter: winrt.windows.devices.bluetooth.BluetoothSignalStrengthFilter
    advertisement_filter: winrt.windows.devices.bluetooth.advertisement.BluetoothLEAdvertisementFilter
    max_out_of_range_timeout: winrt.windows.foundation.TimeSpan
    max_sampling_interval: winrt.windows.foundation.TimeSpan
    min_out_of_range_timeout: winrt.windows.foundation.TimeSpan
    min_sampling_interval: winrt.windows.foundation.TimeSpan
    allow_extended_advertisements: bool

class CachedFileUpdaterTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class CachedFileUpdaterTriggerDetails(_winrt.winrt_base):
    ...
    can_request_user_input: bool
    update_request: winrt.windows.storage.provider.FileUpdateRequest
    update_target: winrt.windows.storage.provider.CachedFileTarget

class ChatMessageNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class ChatMessageReceivedNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class CommunicationBlockingAppSetAsActiveTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class ContactStoreNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class ContentPrefetchTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    wait_interval: winrt.windows.foundation.TimeSpan

class ConversationalAgentTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class CustomSystemEventTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    recurrence: CustomSystemEventTriggerRecurrence
    trigger_id: str

class DeviceConnectionChangeTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    maintain_connection: bool
    can_maintain_connection: bool
    device_id: str
    def from_id_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[DeviceConnectionChangeTrigger]:
        ...

class DeviceManufacturerNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    one_shot: bool
    trigger_qualifier: str

class DeviceServicingTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    def request_async(device_id: str, expected_duration: winrt.windows.foundation.TimeSpan) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]:
        ...
    def request_async(device_id: str, expected_duration: winrt.windows.foundation.TimeSpan, arguments: str) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]:
        ...

class DeviceUseTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    def request_async(device_id: str) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]:
        ...
    def request_async(device_id: str, arguments: str) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]:
        ...

class DeviceWatcherTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class EmailStoreNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class GattCharacteristicNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    characteristic: winrt.windows.devices.bluetooth.genericattributeprofile.GattCharacteristic
    event_triggering_mode: winrt.windows.devices.bluetooth.background.BluetoothEventTriggeringMode

class GattServiceProviderTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    advertising_parameters: winrt.windows.devices.bluetooth.genericattributeprofile.GattServiceProviderAdvertisingParameters
    service: winrt.windows.devices.bluetooth.genericattributeprofile.GattLocalService
    trigger_id: str
    def create_async(trigger_id: str, service_uuid: uuid.UUID) -> winrt.windows.foundation.IAsyncOperation[GattServiceProviderTriggerResult]:
        ...

class GattServiceProviderTriggerResult(_winrt.winrt_base):
    ...
    error: winrt.windows.devices.bluetooth.BluetoothError
    trigger: GattServiceProviderTrigger

class GeovisitTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    monitoring_scope: winrt.windows.devices.geolocation.VisitMonitoringScope

class LocationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    trigger_type: LocationTriggerType

class MaintenanceTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    freshness_time: int
    one_shot: bool

class MediaProcessingTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    def request_async() -> winrt.windows.foundation.IAsyncOperation[MediaProcessingTriggerResult]:
        ...
    def request_async(arguments: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[MediaProcessingTriggerResult]:
        ...

class MobileBroadbandDeviceServiceNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class MobileBroadbandPcoDataChangeTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class MobileBroadbandPinLockStateChangeTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class MobileBroadbandRadioStateChangeTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class MobileBroadbandRegistrationStateChangeTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class NetworkOperatorDataUsageTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class NetworkOperatorHotspotAuthenticationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class NetworkOperatorNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    network_account_id: str

class PaymentAppCanMakePaymentTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class PhoneTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    one_shot: bool
    trigger_type: winrt.windows.applicationmodel.calls.background.PhoneTriggerType

class PushNotificationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class RcsEndUserMessageAvailableTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class RfcommConnectionTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    remote_host_name: winrt.windows.networking.HostName
    protection_level: winrt.windows.networking.sockets.SocketProtectionLevel
    allow_multiple_connections: bool
    inbound_connection: winrt.windows.devices.bluetooth.background.RfcommInboundConnectionInformation
    outbound_connection: winrt.windows.devices.bluetooth.background.RfcommOutboundConnectionInformation

class SecondaryAuthenticationFactorAuthenticationTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class SensorDataThresholdTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class SmartCardTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    trigger_type: winrt.windows.devices.smartcards.SmartCardTriggerType

class SmsMessageReceivedTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class SocketActivityTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    is_wake_from_low_power_supported: bool

class StorageLibraryChangeTrackerTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class StorageLibraryContentChangedTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    def create(storage_library: winrt.windows.storage.StorageLibrary) -> StorageLibraryContentChangedTrigger:
        ...
    def create_from_libraries(storage_libraries: typing.Iterable[winrt.windows.storage.StorageLibrary]) -> StorageLibraryContentChangedTrigger:
        ...

class SystemCondition(IBackgroundCondition, _winrt.winrt_base):
    ...
    condition_type: SystemConditionType

class SystemTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    one_shot: bool
    trigger_type: SystemTriggerType

class TetheringEntitlementCheckTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class TimeTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...
    freshness_time: int
    one_shot: bool

class ToastNotificationActionTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class ToastNotificationHistoryChangedTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class UserNotificationChangedTrigger(IBackgroundTrigger, _winrt.winrt_base):
    ...

class IBackgroundCondition(_winrt.winrt_base):
    ...

class IBackgroundTask(_winrt.winrt_base):
    ...
    def run(task_instance: IBackgroundTaskInstance) -> None:
        ...

class IBackgroundTaskInstance(_winrt.winrt_base):
    ...
    instance_id: uuid.UUID
    progress: int
    suspended_count: int
    task: BackgroundTaskRegistration
    trigger_details: _winrt.winrt_base
    def get_deferral() -> BackgroundTaskDeferral:
        ...
    def add_canceled(cancel_handler: BackgroundTaskCanceledEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_canceled(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IBackgroundTaskInstance2(IBackgroundTaskInstance, _winrt.winrt_base):
    ...
    instance_id: uuid.UUID
    progress: int
    suspended_count: int
    task: BackgroundTaskRegistration
    trigger_details: _winrt.winrt_base
    def get_throttle_count(counter: BackgroundTaskThrottleCounter) -> int:
        ...
    def get_deferral() -> BackgroundTaskDeferral:
        ...
    def add_canceled(cancel_handler: BackgroundTaskCanceledEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_canceled(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IBackgroundTaskInstance4(IBackgroundTaskInstance, _winrt.winrt_base):
    ...
    user: winrt.windows.system.User
    instance_id: uuid.UUID
    progress: int
    suspended_count: int
    task: BackgroundTaskRegistration
    trigger_details: _winrt.winrt_base
    def get_deferral() -> BackgroundTaskDeferral:
        ...
    def add_canceled(cancel_handler: BackgroundTaskCanceledEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_canceled(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IBackgroundTaskRegistration(_winrt.winrt_base):
    ...
    name: str
    task_id: uuid.UUID
    def unregister(cancel_task: bool) -> None:
        ...
    def add_completed(handler: BackgroundTaskCompletedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_completed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_progress(handler: BackgroundTaskProgressEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_progress(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IBackgroundTaskRegistration2(IBackgroundTaskRegistration, _winrt.winrt_base):
    ...
    trigger: IBackgroundTrigger
    name: str
    task_id: uuid.UUID
    def unregister(cancel_task: bool) -> None:
        ...
    def add_completed(handler: BackgroundTaskCompletedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_completed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_progress(handler: BackgroundTaskProgressEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_progress(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IBackgroundTaskRegistration3(IBackgroundTaskRegistration, _winrt.winrt_base):
    ...
    task_group: BackgroundTaskRegistrationGroup
    name: str
    task_id: uuid.UUID
    def unregister(cancel_task: bool) -> None:
        ...
    def add_completed(handler: BackgroundTaskCompletedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_completed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_progress(handler: BackgroundTaskProgressEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_progress(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class IBackgroundTrigger(_winrt.winrt_base):
    ...

BackgroundTaskCanceledEventHandler = typing.Callable[[IBackgroundTaskInstance, BackgroundTaskCancellationReason], None]

BackgroundTaskCompletedEventHandler = typing.Callable[[BackgroundTaskRegistration, BackgroundTaskCompletedEventArgs], None]

BackgroundTaskProgressEventHandler = typing.Callable[[BackgroundTaskRegistration, BackgroundTaskProgressEventArgs], None]

