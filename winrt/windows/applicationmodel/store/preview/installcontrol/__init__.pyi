# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.management.deployment
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class AppInstallState(enum.IntEnum):
    PENDING = 0
    STARTING = 1
    ACQUIRING_LICENSE = 2
    DOWNLOADING = 3
    RESTORING_DATA = 4
    INSTALLING = 5
    COMPLETED = 6
    CANCELED = 7
    PAUSED = 8
    ERROR = 9
    PAUSED_LOW_BATTERY = 10
    PAUSED_WI_FI_RECOMMENDED = 11
    PAUSED_WI_FI_REQUIRED = 12
    READY_TO_DOWNLOAD = 13

class AppInstallType(enum.IntEnum):
    INSTALL = 0
    UPDATE = 1
    REPAIR = 2

class AppInstallationToastNotificationMode(enum.IntEnum):
    DEFAULT = 0
    TOAST = 1
    TOAST_WITHOUT_POPUP = 2
    NO_TOAST = 3

class AutoUpdateSetting(enum.IntEnum):
    DISABLED = 0
    ENABLED = 1
    DISABLED_BY_POLICY = 2
    ENABLED_BY_POLICY = 3

class GetEntitlementStatus(enum.IntEnum):
    SUCCEEDED = 0
    NO_STORE_ACCOUNT = 1
    NETWORK_ERROR = 2
    SERVER_ERROR = 3

class AppInstallItem(_winrt.winrt_base):
    ...
    install_type: AppInstallType
    is_user_initiated: bool
    package_family_name: str
    product_id: str
    children: winrt.windows.foundation.collections.IVectorView[AppInstallItem]
    item_operations_might_affect_other_items: bool
    launch_after_install: bool
    pin_to_taskbar_after_install: bool
    pin_to_start_after_install: bool
    pin_to_desktop_after_install: bool
    install_in_progress_toast_notification_mode: AppInstallationToastNotificationMode
    completed_install_toast_notification_mode: AppInstallationToastNotificationMode
    def cancel() -> None:
        ...
    def cancel(correlation_vector: str) -> None:
        ...
    def get_current_status() -> AppInstallStatus:
        ...
    def pause() -> None:
        ...
    def pause(correlation_vector: str) -> None:
        ...
    def restart() -> None:
        ...
    def restart(correlation_vector: str) -> None:
        ...
    def add_completed(handler: winrt.windows.foundation.TypedEventHandler[AppInstallItem, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_status_changed(handler: winrt.windows.foundation.TypedEventHandler[AppInstallItem, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class AppInstallManager(_winrt.winrt_base):
    ...
    auto_update_setting: AutoUpdateSetting
    acquisition_identity: str
    app_install_items: winrt.windows.foundation.collections.IVectorView[AppInstallItem]
    app_install_items_with_group_support: winrt.windows.foundation.collections.IVectorView[AppInstallItem]
    can_install_for_all_users: bool
    def cancel(product_id: str) -> None:
        ...
    def cancel(product_id: str, correlation_vector: str) -> None:
        ...
    def get_free_device_entitlement_async(store_id: str, campaign_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[GetEntitlementResult]:
        ...
    def get_free_user_entitlement_async(store_id: str, campaign_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[GetEntitlementResult]:
        ...
    def get_free_user_entitlement_for_user_async(user: winrt.windows.system.User, store_id: str, campaign_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[GetEntitlementResult]:
        ...
    def get_is_app_allowed_to_install_async(product_id: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_is_app_allowed_to_install_async(product_id: str, sku_id: str, catalog_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_is_app_allowed_to_install_for_user_async(user: winrt.windows.system.User, product_id: str, sku_id: str, catalog_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_is_applicable_async(product_id: str, sku_id: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_is_applicable_for_user_async(user: winrt.windows.system.User, product_id: str, sku_id: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_is_package_identity_allowed_to_install_async(correlation_vector: str, package_identity_name: str, publisher_certificate_name: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_is_package_identity_allowed_to_install_for_user_async(user: winrt.windows.system.User, correlation_vector: str, package_identity_name: str, publisher_certificate_name: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def is_store_blocked_by_policy_async(store_client_name: str, store_client_publisher: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def move_to_front_of_download_queue(product_id: str, correlation_vector: str) -> None:
        ...
    def pause(product_id: str) -> None:
        ...
    def pause(product_id: str, correlation_vector: str) -> None:
        ...
    def restart(product_id: str) -> None:
        ...
    def restart(product_id: str, correlation_vector: str) -> None:
        ...
    def search_for_all_updates_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def search_for_all_updates_async(correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def search_for_all_updates_async(correlation_vector: str, client_id: str, update_options: AppUpdateOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def search_for_all_updates_for_user_async(user: winrt.windows.system.User, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def search_for_all_updates_for_user_async(user: winrt.windows.system.User, correlation_vector: str, client_id: str, update_options: AppUpdateOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def search_for_updates_async(product_id: str, sku_id: str) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def search_for_updates_async(product_id: str, sku_id: str, catalog_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def search_for_updates_async(product_id: str, sku_id: str, correlation_vector: str, client_id: str, update_options: AppUpdateOptions) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def search_for_updates_for_user_async(user: winrt.windows.system.User, product_id: str, sku_id: str, catalog_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def search_for_updates_for_user_async(user: winrt.windows.system.User, product_id: str, sku_id: str, correlation_vector: str, client_id: str, update_options: AppUpdateOptions) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def start_app_install_async(product_id: str, sku_id: str, repair: bool, force_use_of_non_removable_storage: bool) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def start_app_install_async(product_id: str, sku_id: str, repair: bool, force_use_of_non_removable_storage: bool, catalog_id: str, bundle_id: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def start_product_install_async(product_id: str, flight_id: str, client_id: str, correlation_vector: str, install_options: AppInstallOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def start_product_install_async(product_id: str, catalog_id: str, flight_id: str, client_id: str, repair: bool, force_use_of_non_removable_storage: bool, correlation_vector: str, target_volume: winrt.windows.management.deployment.PackageVolume) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def start_product_install_for_user_async(user: winrt.windows.system.User, product_id: str, flight_id: str, client_id: str, correlation_vector: str, install_options: AppInstallOptions) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def start_product_install_for_user_async(user: winrt.windows.system.User, product_id: str, catalog_id: str, flight_id: str, client_id: str, repair: bool, force_use_of_non_removable_storage: bool, correlation_vector: str, target_volume: winrt.windows.management.deployment.PackageVolume) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppInstallItem]]:
        ...
    def update_app_by_package_family_name_async(package_family_name: str) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def update_app_by_package_family_name_async(package_family_name: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def update_app_by_package_family_name_for_user_async(user: winrt.windows.system.User, package_family_name: str, correlation_vector: str) -> winrt.windows.foundation.IAsyncOperation[AppInstallItem]:
        ...
    def add_item_completed(handler: winrt.windows.foundation.TypedEventHandler[AppInstallManager, AppInstallManagerItemEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_item_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_item_status_changed(handler: winrt.windows.foundation.TypedEventHandler[AppInstallManager, AppInstallManagerItemEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_item_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class AppInstallManagerItemEventArgs(_winrt.winrt_base):
    ...
    item: AppInstallItem

class AppInstallOptions(_winrt.winrt_base):
    ...
    target_volume: winrt.windows.management.deployment.PackageVolume
    repair: bool
    launch_after_install: bool
    force_use_of_non_removable_storage: bool
    catalog_id: str
    allow_forced_app_restart: bool
    stage_but_do_not_install: bool
    pin_to_taskbar_after_install: bool
    pin_to_start_after_install: bool
    pin_to_desktop_after_install: bool
    install_in_progress_toast_notification_mode: AppInstallationToastNotificationMode
    install_for_all_users: bool
    extended_campaign_id: str
    completed_install_toast_notification_mode: AppInstallationToastNotificationMode
    campaign_id: str

class AppInstallStatus(_winrt.winrt_base):
    ...
    bytes_downloaded: int
    download_size_in_bytes: int
    error_code: winrt.windows.foundation.HResult
    install_state: AppInstallState
    percent_complete: float
    ready_for_launch: bool
    user: winrt.windows.system.User
    is_staged: bool

class AppUpdateOptions(_winrt.winrt_base):
    ...
    catalog_id: str
    allow_forced_app_restart: bool
    automatically_download_and_install_update_if_found: bool

class GetEntitlementResult(_winrt.winrt_base):
    ...
    status: GetEntitlementStatus

