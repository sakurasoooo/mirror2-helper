# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.activation
except Exception:
    pass

try:
    import winrt.windows.applicationmodel.core
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class AddResourcePackageOptions(enum.IntFlag):
    NONE = 0
    FORCE_TARGET_APP_SHUTDOWN = 0x1
    APPLY_UPDATE_IF_AVAILABLE = 0x2

class AppExecutionContext(enum.IntEnum):
    UNKNOWN = 0
    HOST = 1
    GUEST = 2

class AppInstallerPolicySource(enum.IntEnum):
    DEFAULT = 0
    SYSTEM = 1

class LimitedAccessFeatureStatus(enum.IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    AVAILABLE_WITHOUT_TOKEN = 2
    UNKNOWN = 3

class PackageContentGroupState(enum.IntEnum):
    NOT_STAGED = 0
    QUEUED = 1
    STAGING = 2
    STAGED = 3

class PackageSignatureKind(enum.IntEnum):
    NONE = 0
    DEVELOPER = 1
    ENTERPRISE = 2
    STORE = 3
    SYSTEM = 4

class PackageUpdateAvailability(enum.IntEnum):
    UNKNOWN = 0
    NO_UPDATES = 1
    AVAILABLE = 2
    REQUIRED = 3
    ERROR = 4

class StartupTaskState(enum.IntEnum):
    DISABLED = 0
    DISABLED_BY_USER = 1
    ENABLED = 2
    DISABLED_BY_POLICY = 3
    ENABLED_BY_POLICY = 4

class PackageInstallProgress(_winrt.winrt_base):
    ...

class PackageVersion(_winrt.winrt_base):
    ...

class AppDisplayInfo(_winrt.winrt_base):
    ...
    description: str
    display_name: str
    def get_logo(size: winrt.windows.foundation.Size) -> winrt.windows.storage.streams.RandomAccessStreamReference:
        ...

class AppInfo(_winrt.winrt_base):
    ...
    app_user_model_id: str
    display_info: AppDisplayInfo
    id: str
    package_family_name: str
    package: Package
    execution_context: AppExecutionContext
    supported_file_extensions: str
    current: AppInfo
    def get_from_app_user_model_id(app_user_model_id: str) -> AppInfo:
        ...
    def get_from_app_user_model_id_for_user(user: winrt.windows.system.User, app_user_model_id: str) -> AppInfo:
        ...

class AppInstallerInfo(_winrt.winrt_base):
    ...
    uri: winrt.windows.foundation.Uri
    automatic_background_task: bool
    dependency_package_uris: winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.Uri]
    force_update_from_any_version: bool
    hours_between_update_checks: int
    is_auto_repair_enabled: bool
    last_checked: winrt.windows.foundation.DateTime
    on_launch: bool
    optional_package_uris: winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.Uri]
    paused_until: typing.Optional[winrt.windows.foundation.DateTime]
    policy_source: AppInstallerPolicySource
    repair_uris: winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.Uri]
    show_prompt: bool
    update_blocks_activation: bool
    update_uris: winrt.windows.foundation.collections.IVectorView[winrt.windows.foundation.Uri]
    version: PackageVersion

class AppInstance(_winrt.winrt_base):
    ...
    is_current_instance: bool
    key: str
    recommended_instance: AppInstance
    def find_or_register_instance_for_key(key: str) -> AppInstance:
        ...
    def get_activated_event_args() -> winrt.windows.applicationmodel.activation.IActivatedEventArgs:
        ...
    def get_instances() -> winrt.windows.foundation.collections.IVector[AppInstance]:
        ...
    def redirect_activation_to() -> None:
        ...
    def unregister() -> None:
        ...

class DesignMode(_winrt.winrt_base):
    ...
    design_mode_enabled: bool
    design_mode2_enabled: bool

class EnteredBackgroundEventArgs(IEnteredBackgroundEventArgs, _winrt.winrt_base):
    ...
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class LeavingBackgroundEventArgs(ILeavingBackgroundEventArgs, _winrt.winrt_base):
    ...
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class LimitedAccessFeatureRequestResult(_winrt.winrt_base):
    ...
    estimated_removal_date: typing.Optional[winrt.windows.foundation.DateTime]
    feature_id: str
    status: LimitedAccessFeatureStatus

class LimitedAccessFeatures(_winrt.winrt_base):
    ...
    def try_unlock_feature(feature_id: str, token: str, attestation: str) -> LimitedAccessFeatureRequestResult:
        ...

class Package(_winrt.winrt_base):
    ...
    dependencies: winrt.windows.foundation.collections.IVectorView[Package]
    id: PackageId
    installed_location: winrt.windows.storage.StorageFolder
    is_framework: bool
    description: str
    display_name: str
    is_bundle: bool
    is_development_mode: bool
    is_resource_package: bool
    logo: winrt.windows.foundation.Uri
    publisher_display_name: str
    installed_date: winrt.windows.foundation.DateTime
    status: PackageStatus
    is_optional: bool
    signature_kind: PackageSignatureKind
    effective_location: winrt.windows.storage.StorageFolder
    mutable_location: winrt.windows.storage.StorageFolder
    effective_external_location: winrt.windows.storage.StorageFolder
    effective_external_path: str
    effective_path: str
    installed_path: str
    is_stub: bool
    machine_external_location: winrt.windows.storage.StorageFolder
    machine_external_path: str
    mutable_path: str
    user_external_location: winrt.windows.storage.StorageFolder
    user_external_path: str
    install_date: winrt.windows.foundation.DateTime
    current: Package
    def check_update_availability_async() -> winrt.windows.foundation.IAsyncOperation[PackageUpdateAvailabilityResult]:
        ...
    def get_app_installer_info() -> AppInstallerInfo:
        ...
    def get_app_list_entries() -> winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.core.AppListEntry]:
        ...
    def get_app_list_entries_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.core.AppListEntry]]:
        ...
    def get_content_group_async(name: str) -> winrt.windows.foundation.IAsyncOperation[PackageContentGroup]:
        ...
    def get_content_groups_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[PackageContentGroup]]:
        ...
    def get_logo_as_random_access_stream_reference(size: winrt.windows.foundation.Size) -> winrt.windows.storage.streams.RandomAccessStreamReference:
        ...
    def get_thumbnail_token() -> str:
        ...
    def launch(parameters: str) -> None:
        ...
    def set_in_use_async(in_use: bool) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def stage_content_groups_async(names: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[PackageContentGroup]]:
        ...
    def stage_content_groups_async(names: typing.Iterable[str], move_to_head_of_queue: bool) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[PackageContentGroup]]:
        ...
    def verify_content_integrity_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class PackageCatalog(_winrt.winrt_base):
    ...
    def add_optional_package_async(optional_package_family_name: str) -> winrt.windows.foundation.IAsyncOperation[PackageCatalogAddOptionalPackageResult]:
        ...
    def add_resource_package_async(resource_package_family_name: str, resource_i_d: str, options: AddResourcePackageOptions) -> winrt.windows.foundation.IAsyncOperationWithProgress[PackageCatalogAddResourcePackageResult, PackageInstallProgress]:
        ...
    def open_for_current_package() -> PackageCatalog:
        ...
    def open_for_current_user() -> PackageCatalog:
        ...
    def remove_optional_packages_async(optional_package_family_names: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncOperation[PackageCatalogRemoveOptionalPackagesResult]:
        ...
    def remove_resource_packages_async(resource_packages: typing.Iterable[Package]) -> winrt.windows.foundation.IAsyncOperation[PackageCatalogRemoveResourcePackagesResult]:
        ...
    def add_package_installing(handler: winrt.windows.foundation.TypedEventHandler[PackageCatalog, PackageInstallingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_package_installing(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_package_staging(handler: winrt.windows.foundation.TypedEventHandler[PackageCatalog, PackageStagingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_package_staging(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_package_status_changed(handler: winrt.windows.foundation.TypedEventHandler[PackageCatalog, PackageStatusChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_package_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_package_uninstalling(handler: winrt.windows.foundation.TypedEventHandler[PackageCatalog, PackageUninstallingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_package_uninstalling(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_package_updating(handler: winrt.windows.foundation.TypedEventHandler[PackageCatalog, PackageUpdatingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_package_updating(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_package_content_group_staging(handler: winrt.windows.foundation.TypedEventHandler[PackageCatalog, PackageContentGroupStagingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_package_content_group_staging(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class PackageCatalogAddOptionalPackageResult(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult
    package: Package

class PackageCatalogAddResourcePackageResult(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult
    is_complete: bool
    package: Package

class PackageCatalogRemoveOptionalPackagesResult(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult
    packages_removed: winrt.windows.foundation.collections.IVectorView[Package]

class PackageCatalogRemoveResourcePackagesResult(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult
    packages_removed: winrt.windows.foundation.collections.IVectorView[Package]

class PackageContentGroup(_winrt.winrt_base):
    ...
    is_required: bool
    name: str
    package: Package
    state: PackageContentGroupState
    required_group_name: str

class PackageContentGroupStagingEventArgs(_winrt.winrt_base):
    ...
    activity_id: uuid.UUID
    content_group_name: str
    error_code: winrt.windows.foundation.HResult
    is_complete: bool
    is_content_group_required: bool
    package: Package
    progress: float

class PackageId(_winrt.winrt_base):
    ...
    architecture: winrt.windows.system.ProcessorArchitecture
    family_name: str
    full_name: str
    name: str
    publisher: str
    publisher_id: str
    resource_id: str
    version: PackageVersion
    author: str
    product_id: str

class PackageInstallingEventArgs(_winrt.winrt_base):
    ...
    activity_id: uuid.UUID
    error_code: winrt.windows.foundation.HResult
    is_complete: bool
    package: Package
    progress: float

class PackageStagingEventArgs(_winrt.winrt_base):
    ...
    activity_id: uuid.UUID
    error_code: winrt.windows.foundation.HResult
    is_complete: bool
    package: Package
    progress: float

class PackageStatus(_winrt.winrt_base):
    ...
    data_offline: bool
    dependency_issue: bool
    deployment_in_progress: bool
    disabled: bool
    license_issue: bool
    modified: bool
    needs_remediation: bool
    not_available: bool
    package_offline: bool
    servicing: bool
    tampered: bool
    is_partially_staged: bool
    def verify_is_o_k() -> bool:
        ...

class PackageStatusChangedEventArgs(_winrt.winrt_base):
    ...
    package: Package

class PackageUninstallingEventArgs(_winrt.winrt_base):
    ...
    activity_id: uuid.UUID
    error_code: winrt.windows.foundation.HResult
    is_complete: bool
    package: Package
    progress: float

class PackageUpdateAvailabilityResult(_winrt.winrt_base):
    ...
    availability: PackageUpdateAvailability
    extended_error: winrt.windows.foundation.HResult

class PackageUpdatingEventArgs(_winrt.winrt_base):
    ...
    activity_id: uuid.UUID
    error_code: winrt.windows.foundation.HResult
    is_complete: bool
    progress: float
    source_package: Package
    target_package: Package

class StartupTask(_winrt.winrt_base):
    ...
    state: StartupTaskState
    task_id: str
    def disable() -> None:
        ...
    def get_async(task_id: str) -> winrt.windows.foundation.IAsyncOperation[StartupTask]:
        ...
    def get_for_current_package_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[StartupTask]]:
        ...
    def request_enable_async() -> winrt.windows.foundation.IAsyncOperation[StartupTaskState]:
        ...

class SuspendingDeferral(ISuspendingDeferral, _winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class SuspendingEventArgs(ISuspendingEventArgs, _winrt.winrt_base):
    ...
    suspending_operation: SuspendingOperation

class SuspendingOperation(ISuspendingOperation, _winrt.winrt_base):
    ...
    deadline: winrt.windows.foundation.DateTime
    def get_deferral() -> SuspendingDeferral:
        ...

class IEnteredBackgroundEventArgs(_winrt.winrt_base):
    ...
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class ILeavingBackgroundEventArgs(_winrt.winrt_base):
    ...
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class ISuspendingDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class ISuspendingEventArgs(_winrt.winrt_base):
    ...
    suspending_operation: SuspendingOperation

class ISuspendingOperation(_winrt.winrt_base):
    ...
    deadline: winrt.windows.foundation.DateTime
    def get_deferral() -> SuspendingDeferral:
        ...

