# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.appservice
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.globalization
except Exception:
    pass

try:
    import winrt.windows.media.speechrecognition
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

class VoiceCommandCompletionReason(enum.IntEnum):
    UNKNOWN = 0
    COMMUNICATION_FAILED = 1
    RESOURCE_LIMITS_EXCEEDED = 2
    CANCELED = 3
    TIMEOUT_EXCEEDED = 4
    APP_LAUNCHED = 5
    COMPLETED = 6

class VoiceCommandContentTileType(enum.IntEnum):
    TITLE_ONLY = 0
    TITLE_WITH_TEXT = 1
    TITLE_WITH68X68_ICON = 2
    TITLE_WITH68X68_ICON_AND_TEXT = 3
    TITLE_WITH68X92_ICON = 4
    TITLE_WITH68X92_ICON_AND_TEXT = 5
    TITLE_WITH280X140_ICON = 6
    TITLE_WITH280X140_ICON_AND_TEXT = 7

class VoiceCommand(_winrt.winrt_base):
    ...
    command_name: str
    properties: winrt.windows.foundation.collections.IMapView[str, winrt.windows.foundation.collections.IVectorView[str]]
    speech_recognition_result: winrt.windows.media.speechrecognition.SpeechRecognitionResult

class VoiceCommandCompletedEventArgs(_winrt.winrt_base):
    ...
    reason: VoiceCommandCompletionReason

class VoiceCommandConfirmationResult(_winrt.winrt_base):
    ...
    confirmed: bool

class VoiceCommandContentTile(_winrt.winrt_base):
    ...
    title: str
    text_line3: str
    text_line2: str
    text_line1: str
    image: winrt.windows.storage.IStorageFile
    content_tile_type: VoiceCommandContentTileType
    app_launch_argument: str
    app_context: _winrt.winrt_base

class VoiceCommandDefinition(_winrt.winrt_base):
    ...
    language: str
    name: str
    def set_phrase_list_async(phrase_list_name: str, phrase_list: typing.Iterable[str]) -> winrt.windows.foundation.IAsyncAction:
        ...

class VoiceCommandDefinitionManager(_winrt.winrt_base):
    ...
    installed_command_definitions: winrt.windows.foundation.collections.IMapView[str, VoiceCommandDefinition]
    def install_command_definitions_from_storage_file_async(file: winrt.windows.storage.StorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...

class VoiceCommandDisambiguationResult(_winrt.winrt_base):
    ...
    selected_item: VoiceCommandContentTile

class VoiceCommandResponse(_winrt.winrt_base):
    ...
    repeat_message: VoiceCommandUserMessage
    message: VoiceCommandUserMessage
    app_launch_argument: str
    voice_command_content_tiles: winrt.windows.foundation.collections.IVector[VoiceCommandContentTile]
    max_supported_voice_command_content_tiles: int
    def create_response(user_message: VoiceCommandUserMessage) -> VoiceCommandResponse:
        ...
    def create_response(message: VoiceCommandUserMessage, content_tiles: typing.Iterable[VoiceCommandContentTile]) -> VoiceCommandResponse:
        ...
    def create_response_for_prompt(message: VoiceCommandUserMessage, repeat_message: VoiceCommandUserMessage) -> VoiceCommandResponse:
        ...
    def create_response_for_prompt(message: VoiceCommandUserMessage, repeat_message: VoiceCommandUserMessage, content_tiles: typing.Iterable[VoiceCommandContentTile]) -> VoiceCommandResponse:
        ...

class VoiceCommandServiceConnection(_winrt.winrt_base):
    ...
    language: winrt.windows.globalization.Language
    def from_app_service_trigger_details(trigger_details: winrt.windows.applicationmodel.appservice.AppServiceTriggerDetails) -> VoiceCommandServiceConnection:
        ...
    def get_voice_command_async() -> winrt.windows.foundation.IAsyncOperation[VoiceCommand]:
        ...
    def report_failure_async(response: VoiceCommandResponse) -> winrt.windows.foundation.IAsyncAction:
        ...
    def report_progress_async(response: VoiceCommandResponse) -> winrt.windows.foundation.IAsyncAction:
        ...
    def report_success_async(response: VoiceCommandResponse) -> winrt.windows.foundation.IAsyncAction:
        ...
    def request_app_launch_async(response: VoiceCommandResponse) -> winrt.windows.foundation.IAsyncAction:
        ...
    def request_confirmation_async(response: VoiceCommandResponse) -> winrt.windows.foundation.IAsyncOperation[VoiceCommandConfirmationResult]:
        ...
    def request_disambiguation_async(response: VoiceCommandResponse) -> winrt.windows.foundation.IAsyncOperation[VoiceCommandDisambiguationResult]:
        ...
    def add_voice_command_completed(handler: winrt.windows.foundation.TypedEventHandler[VoiceCommandServiceConnection, VoiceCommandCompletedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_voice_command_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class VoiceCommandUserMessage(_winrt.winrt_base):
    ...
    spoken_message: str
    display_message: str

