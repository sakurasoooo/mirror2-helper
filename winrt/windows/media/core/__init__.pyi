# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.appservice
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.graphics.directx.direct3d11
except Exception:
    pass

try:
    import winrt.windows.graphics.imaging
except Exception:
    pass

try:
    import winrt.windows.media.capture
except Exception:
    pass

try:
    import winrt.windows.media.capture.frames
except Exception:
    pass

try:
    import winrt.windows.media.devices
except Exception:
    pass

try:
    import winrt.windows.media.devices.core
except Exception:
    pass

try:
    import winrt.windows.media.faceanalysis
except Exception:
    pass

try:
    import winrt.windows.media.mediaproperties
except Exception:
    pass

try:
    import winrt.windows.media.playback
except Exception:
    pass

try:
    import winrt.windows.media.protection
except Exception:
    pass

try:
    import winrt.windows.media.streaming.adaptive
except Exception:
    pass

try:
    import winrt.windows.networking.backgroundtransfer
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.fileproperties
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.ui
except Exception:
    pass

class AudioDecoderDegradation(enum.IntEnum):
    NONE = 0
    DOWNMIX_TO2_CHANNELS = 1
    DOWNMIX_TO6_CHANNELS = 2
    DOWNMIX_TO8_CHANNELS = 3

class AudioDecoderDegradationReason(enum.IntEnum):
    NONE = 0
    LICENSING_REQUIREMENT = 1
    SPATIAL_AUDIO_NOT_SUPPORTED = 2

class CodecCategory(enum.IntEnum):
    ENCODER = 0
    DECODER = 1

class CodecKind(enum.IntEnum):
    AUDIO = 0
    VIDEO = 1

class FaceDetectionMode(enum.IntEnum):
    HIGH_PERFORMANCE = 0
    BALANCED = 1
    HIGH_QUALITY = 2

class MediaDecoderStatus(enum.IntEnum):
    FULLY_SUPPORTED = 0
    UNSUPPORTED_SUBTYPE = 1
    UNSUPPORTED_ENCODER_PROPERTIES = 2
    DEGRADED = 3

class MediaSourceState(enum.IntEnum):
    INITIAL = 0
    OPENING = 1
    OPENED = 2
    FAILED = 3
    CLOSED = 4

class MediaSourceStatus(enum.IntEnum):
    FULLY_SUPPORTED = 0
    UNKNOWN = 1

class MediaStreamSourceClosedReason(enum.IntEnum):
    DONE = 0
    UNKNOWN_ERROR = 1
    APP_REPORTED_ERROR = 2
    UNSUPPORTED_PROTECTION_SYSTEM = 3
    PROTECTION_SYSTEM_FAILURE = 4
    UNSUPPORTED_ENCODING_FORMAT = 5
    MISSING_SAMPLE_REQUESTED_EVENT_HANDLER = 6

class MediaStreamSourceErrorStatus(enum.IntEnum):
    OTHER = 0
    OUT_OF_MEMORY = 1
    FAILED_TO_OPEN_FILE = 2
    FAILED_TO_CONNECT_TO_SERVER = 3
    CONNECTION_TO_SERVER_LOST = 4
    UNSPECIFIED_NETWORK_ERROR = 5
    DECODE_ERROR = 6
    UNSUPPORTED_MEDIA_FORMAT = 7

class MediaTrackKind(enum.IntEnum):
    AUDIO = 0
    VIDEO = 1
    TIMED_METADATA = 2

class MseAppendMode(enum.IntEnum):
    SEGMENTS = 0
    SEQUENCE = 1

class MseEndOfStreamStatus(enum.IntEnum):
    SUCCESS = 0
    NETWORK_ERROR = 1
    DECODE_ERROR = 2
    UNKNOWN_ERROR = 3

class MseReadyState(enum.IntEnum):
    CLOSED = 0
    OPEN = 1
    ENDED = 2

class SceneAnalysisRecommendation(enum.IntEnum):
    STANDARD = 0
    HDR = 1
    LOW_LIGHT = 2

class TimedMetadataKind(enum.IntEnum):
    CAPTION = 0
    CHAPTER = 1
    CUSTOM = 2
    DATA = 3
    DESCRIPTION = 4
    SUBTITLE = 5
    IMAGE_SUBTITLE = 6
    SPEECH = 7

class TimedMetadataTrackErrorCode(enum.IntEnum):
    NONE = 0
    DATA_FORMAT_ERROR = 1
    NETWORK_ERROR = 2
    INTERNAL_ERROR = 3

class TimedTextBoutenPosition(enum.IntEnum):
    BEFORE = 0
    AFTER = 1
    OUTSIDE = 2

class TimedTextBoutenType(enum.IntEnum):
    NONE = 0
    AUTO = 1
    FILLED_CIRCLE = 2
    OPEN_CIRCLE = 3
    FILLED_DOT = 4
    OPEN_DOT = 5
    FILLED_SESAME = 6
    OPEN_SESAME = 7

class TimedTextDisplayAlignment(enum.IntEnum):
    BEFORE = 0
    AFTER = 1
    CENTER = 2

class TimedTextFlowDirection(enum.IntEnum):
    LEFT_TO_RIGHT = 0
    RIGHT_TO_LEFT = 1

class TimedTextFontStyle(enum.IntEnum):
    NORMAL = 0
    OBLIQUE = 1
    ITALIC = 2

class TimedTextLineAlignment(enum.IntEnum):
    START = 0
    END = 1
    CENTER = 2

class TimedTextRubyAlign(enum.IntEnum):
    CENTER = 0
    START = 1
    END = 2
    SPACE_AROUND = 3
    SPACE_BETWEEN = 4
    WITH_BASE = 5

class TimedTextRubyPosition(enum.IntEnum):
    BEFORE = 0
    AFTER = 1
    OUTSIDE = 2

class TimedTextRubyReserve(enum.IntEnum):
    NONE = 0
    BEFORE = 1
    AFTER = 2
    BOTH = 3
    OUTSIDE = 4

class TimedTextScrollMode(enum.IntEnum):
    POPON = 0
    ROLLUP = 1

class TimedTextUnit(enum.IntEnum):
    PIXELS = 0
    PERCENTAGE = 1

class TimedTextWeight(enum.IntEnum):
    NORMAL = 400
    BOLD = 700

class TimedTextWrapping(enum.IntEnum):
    NO_WRAP = 0
    WRAP = 1

class TimedTextWritingMode(enum.IntEnum):
    LEFT_RIGHT_TOP_BOTTOM = 0
    RIGHT_LEFT_TOP_BOTTOM = 1
    TOP_BOTTOM_RIGHT_LEFT = 2
    TOP_BOTTOM_LEFT_RIGHT = 3
    LEFT_RIGHT = 4
    RIGHT_LEFT = 5
    TOP_BOTTOM = 6

class VideoStabilizationEffectEnabledChangedReason(enum.IntEnum):
    PROGRAMMATIC = 0
    PIXEL_RATE_TOO_HIGH = 1
    RUNNING_SLOWLY = 2

class MseTimeRange(_winrt.winrt_base):
    ...

class TimedTextDouble(_winrt.winrt_base):
    ...

class TimedTextPadding(_winrt.winrt_base):
    ...

class TimedTextPoint(_winrt.winrt_base):
    ...

class TimedTextSize(_winrt.winrt_base):
    ...

class AudioStreamDescriptor(IMediaStreamDescriptor, IMediaStreamDescriptor2, _winrt.winrt_base):
    ...
    encoding_properties: winrt.windows.media.mediaproperties.AudioEncodingProperties
    trailing_encoder_padding: typing.Optional[int]
    leading_encoder_padding: typing.Optional[int]
    name: str
    language: str
    is_selected: bool
    label: str
    def copy() -> AudioStreamDescriptor:
        ...

class AudioTrack(IMediaTrack, _winrt.winrt_base):
    ...
    name: str
    playback_item: winrt.windows.media.playback.MediaPlaybackItem
    support_info: AudioTrackSupportInfo
    label: str
    id: str
    language: str
    track_kind: MediaTrackKind
    def get_encoding_properties() -> winrt.windows.media.mediaproperties.AudioEncodingProperties:
        ...
    def add_open_failed(handler: winrt.windows.foundation.TypedEventHandler[AudioTrack, AudioTrackOpenFailedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_open_failed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class AudioTrackOpenFailedEventArgs(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult

class AudioTrackSupportInfo(_winrt.winrt_base):
    ...
    decoder_status: MediaDecoderStatus
    degradation: AudioDecoderDegradation
    degradation_reason: AudioDecoderDegradationReason
    media_source_status: MediaSourceStatus

class ChapterCue(IMediaCue, _winrt.winrt_base):
    ...
    title: str
    start_time: winrt.windows.foundation.TimeSpan
    id: str
    duration: winrt.windows.foundation.TimeSpan

class CodecInfo(_winrt.winrt_base):
    ...
    category: CodecCategory
    display_name: str
    is_trusted: bool
    kind: CodecKind
    subtypes: winrt.windows.foundation.collections.IVectorView[str]

class CodecQuery(_winrt.winrt_base):
    ...
    def find_all_async(kind: CodecKind, category: CodecCategory, sub_type: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[CodecInfo]]:
        ...

class CodecSubtypes(_winrt.winrt_base):
    ...
    audio_format_aac: str
    audio_format_adts: str
    audio_format_alac: str
    audio_format_amr_n_b: str
    audio_format_amr_w_b: str
    audio_format_amr_w_p: str
    audio_format_dolby_a_c3: str
    audio_format_dolby_a_c3_spdif: str
    audio_format_dolby_d_d_plus: str
    audio_format_drm: str
    audio_format_dts: str
    audio_format_flac: str
    audio_format_float: str
    audio_format_m_p3: str
    audio_format_m_peg: str
    audio_format_msp1: str
    audio_format_opus: str
    audio_format_pcm: str
    audio_format_w_m_audio_lossless: str
    audio_format_w_m_audio_v8: str
    audio_format_w_m_audio_v9: str
    audio_format_wma_spdif: str
    video_format420_o: str
    video_format_d_v25: str
    video_format_d_v50: str
    video_format_dvc: str
    video_format_dvh1: str
    video_format_dvh_d: str
    video_format_dvsd: str
    video_format_dvsl: str
    video_format_h263: str
    video_format_h264: str
    video_format_h264_e_s: str
    video_format_h265: str
    video_format_hevc: str
    video_format_hevc_e_s: str
    video_format_m4_s2: str
    video_format_m_p43: str
    video_format_m_p4_s: str
    video_format_m_p4_v: str
    video_format_mjpg: str
    video_format_mpeg2: str
    video_format_mpg1: str
    video_format_mss1: str
    video_format_mss2: str
    video_format_v_p80: str
    video_format_v_p90: str
    video_format_wmv1: str
    video_format_wmv2: str
    video_format_wmv3: str
    video_format_wvc1: str

class DataCue(IMediaCue, _winrt.winrt_base):
    ...
    data: winrt.windows.storage.streams.IBuffer
    properties: winrt.windows.foundation.collections.PropertySet
    start_time: winrt.windows.foundation.TimeSpan
    id: str
    duration: winrt.windows.foundation.TimeSpan

class FaceDetectedEventArgs(_winrt.winrt_base):
    ...
    result_frame: FaceDetectionEffectFrame

class FaceDetectionEffect(winrt.windows.media.IMediaExtension, _winrt.winrt_base):
    ...
    enabled: bool
    desired_detection_interval: winrt.windows.foundation.TimeSpan
    def set_properties(configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def add_face_detected(handler: winrt.windows.foundation.TypedEventHandler[FaceDetectionEffect, FaceDetectedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_face_detected(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class FaceDetectionEffectDefinition(winrt.windows.media.effects.IVideoEffectDefinition, _winrt.winrt_base):
    ...
    synchronous_detection_enabled: bool
    detection_mode: FaceDetectionMode
    activatable_class_id: str
    properties: winrt.windows.foundation.collections.IPropertySet

class FaceDetectionEffectFrame(winrt.windows.media.IMediaFrame, winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    detected_faces: winrt.windows.foundation.collections.IVectorView[winrt.windows.media.faceanalysis.DetectedFace]
    system_relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    is_discontinuous: bool
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    extended_properties: winrt.windows.foundation.collections.IPropertySet
    is_read_only: bool
    type: str
    def close() -> None:
        ...

class HighDynamicRangeControl(_winrt.winrt_base):
    ...
    enabled: bool

class HighDynamicRangeOutput(_winrt.winrt_base):
    ...
    certainty: float
    frame_controllers: winrt.windows.foundation.collections.IVectorView[winrt.windows.media.devices.core.FrameController]

class ImageCue(IMediaCue, _winrt.winrt_base):
    ...
    software_bitmap: winrt.windows.graphics.imaging.SoftwareBitmap
    position: TimedTextPoint
    extent: TimedTextSize
    start_time: winrt.windows.foundation.TimeSpan
    id: str
    duration: winrt.windows.foundation.TimeSpan

class InitializeMediaStreamSourceRequestedEventArgs(_winrt.winrt_base):
    ...
    random_access_stream: winrt.windows.storage.streams.IRandomAccessStream
    source: MediaStreamSource
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class LowLightFusion(_winrt.winrt_base):
    ...
    max_supported_frame_count: int
    supported_bitmap_pixel_formats: winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.imaging.BitmapPixelFormat]
    def fuse_async(frame_set: typing.Iterable[winrt.windows.graphics.imaging.SoftwareBitmap]) -> winrt.windows.foundation.IAsyncOperationWithProgress[LowLightFusionResult, float]:
        ...

class LowLightFusionResult(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    frame: winrt.windows.graphics.imaging.SoftwareBitmap
    def close() -> None:
        ...

class MediaBinder(_winrt.winrt_base):
    ...
    token: str
    source: MediaSource
    def add_binding(handler: winrt.windows.foundation.TypedEventHandler[MediaBinder, MediaBindingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_binding(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaBindingEventArgs(_winrt.winrt_base):
    ...
    media_binder: MediaBinder
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...
    def set_adaptive_media_source(media_source: winrt.windows.media.streaming.adaptive.AdaptiveMediaSource) -> None:
        ...
    def set_download_operation(download_operation: winrt.windows.networking.backgroundtransfer.DownloadOperation) -> None:
        ...
    def set_storage_file(file: winrt.windows.storage.IStorageFile) -> None:
        ...
    def set_stream(stream: winrt.windows.storage.streams.IRandomAccessStream, content_type: str) -> None:
        ...
    def set_stream_reference(stream: winrt.windows.storage.streams.IRandomAccessStreamReference, content_type: str) -> None:
        ...
    def set_uri(uri: winrt.windows.foundation.Uri) -> None:
        ...
    def add_canceled(handler: winrt.windows.foundation.TypedEventHandler[MediaBindingEventArgs, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_canceled(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaCueEventArgs(_winrt.winrt_base):
    ...
    cue: IMediaCue

class MediaSource(winrt.windows.foundation.IClosable, winrt.windows.media.playback.IMediaPlaybackSource, _winrt.winrt_base):
    ...
    custom_properties: winrt.windows.foundation.collections.ValueSet
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    external_timed_metadata_tracks: winrt.windows.foundation.collections.IObservableVector[TimedMetadataTrack]
    external_timed_text_sources: winrt.windows.foundation.collections.IObservableVector[TimedTextSource]
    is_open: bool
    state: MediaSourceState
    adaptive_media_source: winrt.windows.media.streaming.adaptive.AdaptiveMediaSource
    media_stream_source: MediaStreamSource
    mse_stream_source: MseStreamSource
    uri: winrt.windows.foundation.Uri
    download_operation: winrt.windows.networking.backgroundtransfer.DownloadOperation
    def close() -> None:
        ...
    def create_from_adaptive_media_source(media_source: winrt.windows.media.streaming.adaptive.AdaptiveMediaSource) -> MediaSource:
        ...
    def create_from_download_operation(download_operation: winrt.windows.networking.backgroundtransfer.DownloadOperation) -> MediaSource:
        ...
    def create_from_i_media_source(media_source: IMediaSource) -> MediaSource:
        ...
    def create_from_media_binder(binder: MediaBinder) -> MediaSource:
        ...
    def create_from_media_frame_source(frame_source: winrt.windows.media.capture.frames.MediaFrameSource) -> MediaSource:
        ...
    def create_from_media_stream_source(media_source: MediaStreamSource) -> MediaSource:
        ...
    def create_from_mse_stream_source(media_source: MseStreamSource) -> MediaSource:
        ...
    def create_from_storage_file(file: winrt.windows.storage.IStorageFile) -> MediaSource:
        ...
    def create_from_stream(stream: winrt.windows.storage.streams.IRandomAccessStream, content_type: str) -> MediaSource:
        ...
    def create_from_stream_reference(stream: winrt.windows.storage.streams.IRandomAccessStreamReference, content_type: str) -> MediaSource:
        ...
    def create_from_uri(uri: winrt.windows.foundation.Uri) -> MediaSource:
        ...
    def open_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def reset() -> None:
        ...
    def add_open_operation_completed(handler: winrt.windows.foundation.TypedEventHandler[MediaSource, MediaSourceOpenOperationCompletedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_open_operation_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_state_changed(handler: winrt.windows.foundation.TypedEventHandler[MediaSource, MediaSourceStateChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaSourceAppServiceConnection(_winrt.winrt_base):
    ...
    def start() -> None:
        ...
    def add_initialize_media_stream_source_requested(handler: winrt.windows.foundation.TypedEventHandler[MediaSourceAppServiceConnection, InitializeMediaStreamSourceRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_initialize_media_stream_source_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaSourceError(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult

class MediaSourceOpenOperationCompletedEventArgs(_winrt.winrt_base):
    ...
    error: MediaSourceError

class MediaSourceStateChangedEventArgs(_winrt.winrt_base):
    ...
    new_state: MediaSourceState
    old_state: MediaSourceState

class MediaStreamSample(_winrt.winrt_base):
    ...
    key_frame: bool
    duration: winrt.windows.foundation.TimeSpan
    discontinuous: bool
    decode_timestamp: winrt.windows.foundation.TimeSpan
    buffer: winrt.windows.storage.streams.Buffer
    extended_properties: MediaStreamSamplePropertySet
    protection: MediaStreamSampleProtectionProperties
    timestamp: winrt.windows.foundation.TimeSpan
    direct3_d11_surface: winrt.windows.graphics.directx.direct3d11.IDirect3DSurface
    def create_from_buffer(buffer: winrt.windows.storage.streams.IBuffer, timestamp: winrt.windows.foundation.TimeSpan) -> MediaStreamSample:
        ...
    def create_from_direct3_d11_surface(surface: winrt.windows.graphics.directx.direct3d11.IDirect3DSurface, timestamp: winrt.windows.foundation.TimeSpan) -> MediaStreamSample:
        ...
    def create_from_stream_async(stream: winrt.windows.storage.streams.IInputStream, count: int, timestamp: winrt.windows.foundation.TimeSpan) -> winrt.windows.foundation.IAsyncOperation[MediaStreamSample]:
        ...
    def add_processed(handler: winrt.windows.foundation.TypedEventHandler[MediaStreamSample, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_processed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaStreamSamplePropertySet(winrt.windows.foundation.collections.IMap[uuid.UUID, _winrt.winrt_base], winrt.windows.foundation.collections.IIterable[winrt.windows.foundation.collections.IKeyValuePair[uuid.UUID, _winrt.winrt_base]], _winrt.winrt_base):
    ...
    size: int
    def clear() -> None:
        ...
    def first() -> winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[uuid.UUID, _winrt.winrt_base]]:
        ...
    def get_view() -> winrt.windows.foundation.collections.IMapView[uuid.UUID, _winrt.winrt_base]:
        ...
    def has_key(key: uuid.UUID) -> bool:
        ...
    def insert(key: uuid.UUID, value: _winrt.winrt_base) -> bool:
        ...
    def lookup(key: uuid.UUID) -> _winrt.winrt_base:
        ...
    def remove(key: uuid.UUID) -> None:
        ...

class MediaStreamSampleProtectionProperties(_winrt.winrt_base):
    ...
    def get_initialization_vector() -> typing.List[int]:
        ...
    def get_key_identifier() -> typing.List[int]:
        ...
    def get_sub_sample_mapping() -> typing.List[int]:
        ...
    def set_initialization_vector(value: typing.Sequence[int]) -> None:
        ...
    def set_key_identifier(value: typing.Sequence[int]) -> None:
        ...
    def set_sub_sample_mapping(value: typing.Sequence[int]) -> None:
        ...

class MediaStreamSource(IMediaSource, _winrt.winrt_base):
    ...
    thumbnail: winrt.windows.storage.streams.IRandomAccessStreamReference
    media_protection_manager: winrt.windows.media.protection.MediaProtectionManager
    duration: winrt.windows.foundation.TimeSpan
    can_seek: bool
    buffer_time: winrt.windows.foundation.TimeSpan
    music_properties: winrt.windows.storage.fileproperties.MusicProperties
    video_properties: winrt.windows.storage.fileproperties.VideoProperties
    max_supported_playback_rate: typing.Optional[float]
    is_live: bool
    def add_protection_key(stream_descriptor: IMediaStreamDescriptor, key_identifier: typing.Sequence[int], license_data: typing.Sequence[int]) -> None:
        ...
    def add_stream_descriptor(descriptor: IMediaStreamDescriptor) -> None:
        ...
    def notify_error(error_status: MediaStreamSourceErrorStatus) -> None:
        ...
    def set_buffered_range(start_offset: winrt.windows.foundation.TimeSpan, end_offset: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[MediaStreamSource, MediaStreamSourceClosedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_paused(handler: winrt.windows.foundation.TypedEventHandler[MediaStreamSource, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_paused(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_sample_requested(handler: winrt.windows.foundation.TypedEventHandler[MediaStreamSource, MediaStreamSourceSampleRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_sample_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_starting(handler: winrt.windows.foundation.TypedEventHandler[MediaStreamSource, MediaStreamSourceStartingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_starting(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_switch_streams_requested(handler: winrt.windows.foundation.TypedEventHandler[MediaStreamSource, MediaStreamSourceSwitchStreamsRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_switch_streams_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_sample_rendered(handler: winrt.windows.foundation.TypedEventHandler[MediaStreamSource, MediaStreamSourceSampleRenderedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_sample_rendered(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaStreamSourceClosedEventArgs(_winrt.winrt_base):
    ...
    request: MediaStreamSourceClosedRequest

class MediaStreamSourceClosedRequest(_winrt.winrt_base):
    ...
    reason: MediaStreamSourceClosedReason

class MediaStreamSourceSampleRenderedEventArgs(_winrt.winrt_base):
    ...
    sample_lag: winrt.windows.foundation.TimeSpan

class MediaStreamSourceSampleRequest(_winrt.winrt_base):
    ...
    sample: MediaStreamSample
    stream_descriptor: IMediaStreamDescriptor
    def get_deferral() -> MediaStreamSourceSampleRequestDeferral:
        ...
    def report_sample_progress(progress: int) -> None:
        ...

class MediaStreamSourceSampleRequestDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class MediaStreamSourceSampleRequestedEventArgs(_winrt.winrt_base):
    ...
    request: MediaStreamSourceSampleRequest

class MediaStreamSourceStartingEventArgs(_winrt.winrt_base):
    ...
    request: MediaStreamSourceStartingRequest

class MediaStreamSourceStartingRequest(_winrt.winrt_base):
    ...
    start_position: typing.Optional[winrt.windows.foundation.TimeSpan]
    def get_deferral() -> MediaStreamSourceStartingRequestDeferral:
        ...
    def set_actual_start_position(position: winrt.windows.foundation.TimeSpan) -> None:
        ...

class MediaStreamSourceStartingRequestDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class MediaStreamSourceSwitchStreamsRequest(_winrt.winrt_base):
    ...
    new_stream_descriptor: IMediaStreamDescriptor
    old_stream_descriptor: IMediaStreamDescriptor
    def get_deferral() -> MediaStreamSourceSwitchStreamsRequestDeferral:
        ...

class MediaStreamSourceSwitchStreamsRequestDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class MediaStreamSourceSwitchStreamsRequestedEventArgs(_winrt.winrt_base):
    ...
    request: MediaStreamSourceSwitchStreamsRequest

class MseSourceBuffer(_winrt.winrt_base):
    ...
    timestamp_offset: winrt.windows.foundation.TimeSpan
    mode: MseAppendMode
    append_window_start: winrt.windows.foundation.TimeSpan
    append_window_end: typing.Optional[winrt.windows.foundation.TimeSpan]
    buffered: winrt.windows.foundation.collections.IVectorView[MseTimeRange]
    is_updating: bool
    def abort() -> None:
        ...
    def append_buffer(buffer: winrt.windows.storage.streams.IBuffer) -> None:
        ...
    def append_stream(stream: winrt.windows.storage.streams.IInputStream) -> None:
        ...
    def append_stream(stream: winrt.windows.storage.streams.IInputStream, max_size: int) -> None:
        ...
    def remove(start: winrt.windows.foundation.TimeSpan, end: typing.Optional[winrt.windows.foundation.TimeSpan]) -> None:
        ...
    def add_aborted(handler: winrt.windows.foundation.TypedEventHandler[MseSourceBuffer, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_aborted(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_error_occurred(handler: winrt.windows.foundation.TypedEventHandler[MseSourceBuffer, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_error_occurred(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_update_ended(handler: winrt.windows.foundation.TypedEventHandler[MseSourceBuffer, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_update_ended(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_update_starting(handler: winrt.windows.foundation.TypedEventHandler[MseSourceBuffer, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_update_starting(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winrt.windows.foundation.TypedEventHandler[MseSourceBuffer, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MseSourceBufferList(_winrt.winrt_base):
    ...
    buffers: winrt.windows.foundation.collections.IVectorView[MseSourceBuffer]
    def add_source_buffer_added(handler: winrt.windows.foundation.TypedEventHandler[MseSourceBufferList, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_source_buffer_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_source_buffer_removed(handler: winrt.windows.foundation.TypedEventHandler[MseSourceBufferList, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_source_buffer_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MseStreamSource(IMediaSource, _winrt.winrt_base):
    ...
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    active_source_buffers: MseSourceBufferList
    ready_state: MseReadyState
    source_buffers: MseSourceBufferList
    live_seekable_range: typing.Optional[MseTimeRange]
    def add_source_buffer(mime_type: str) -> MseSourceBuffer:
        ...
    def end_of_stream(status: MseEndOfStreamStatus) -> None:
        ...
    def is_content_type_supported(content_type: str) -> bool:
        ...
    def remove_source_buffer(buffer: MseSourceBuffer) -> None:
        ...
    def add_closed(handler: winrt.windows.foundation.TypedEventHandler[MseStreamSource, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_ended(handler: winrt.windows.foundation.TypedEventHandler[MseStreamSource, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_ended(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_opened(handler: winrt.windows.foundation.TypedEventHandler[MseStreamSource, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_opened(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SceneAnalysisEffect(winrt.windows.media.IMediaExtension, _winrt.winrt_base):
    ...
    desired_analysis_interval: winrt.windows.foundation.TimeSpan
    high_dynamic_range_analyzer: HighDynamicRangeControl
    def set_properties(configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def add_scene_analyzed(handler: winrt.windows.foundation.TypedEventHandler[SceneAnalysisEffect, SceneAnalyzedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_scene_analyzed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SceneAnalysisEffectDefinition(winrt.windows.media.effects.IVideoEffectDefinition, _winrt.winrt_base):
    ...
    activatable_class_id: str
    properties: winrt.windows.foundation.collections.IPropertySet

class SceneAnalysisEffectFrame(winrt.windows.media.IMediaFrame, winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    frame_control_values: winrt.windows.media.capture.CapturedFrameControlValues
    high_dynamic_range: HighDynamicRangeOutput
    analysis_recommendation: SceneAnalysisRecommendation
    system_relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    is_discontinuous: bool
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    extended_properties: winrt.windows.foundation.collections.IPropertySet
    is_read_only: bool
    type: str
    def close() -> None:
        ...

class SceneAnalyzedEventArgs(_winrt.winrt_base):
    ...
    result_frame: SceneAnalysisEffectFrame

class SpeechCue(IMediaCue, _winrt.winrt_base):
    ...
    start_time: winrt.windows.foundation.TimeSpan
    id: str
    duration: winrt.windows.foundation.TimeSpan
    text: str
    start_position_in_input: typing.Optional[int]
    end_position_in_input: typing.Optional[int]

class TimedMetadataStreamDescriptor(IMediaStreamDescriptor2, IMediaStreamDescriptor, _winrt.winrt_base):
    ...
    name: str
    language: str
    is_selected: bool
    label: str
    encoding_properties: winrt.windows.media.mediaproperties.TimedMetadataEncodingProperties
    def copy() -> TimedMetadataStreamDescriptor:
        ...

class TimedMetadataTrack(IMediaTrack, _winrt.winrt_base):
    ...
    label: str
    id: str
    language: str
    track_kind: MediaTrackKind
    active_cues: winrt.windows.foundation.collections.IVectorView[IMediaCue]
    cues: winrt.windows.foundation.collections.IVectorView[IMediaCue]
    dispatch_type: str
    timed_metadata_kind: TimedMetadataKind
    name: str
    playback_item: winrt.windows.media.playback.MediaPlaybackItem
    def add_cue(cue: IMediaCue) -> None:
        ...
    def remove_cue(cue: IMediaCue) -> None:
        ...
    def add_cue_entered(handler: winrt.windows.foundation.TypedEventHandler[TimedMetadataTrack, MediaCueEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_cue_entered(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_cue_exited(handler: winrt.windows.foundation.TypedEventHandler[TimedMetadataTrack, MediaCueEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_cue_exited(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_track_failed(handler: winrt.windows.foundation.TypedEventHandler[TimedMetadataTrack, TimedMetadataTrackFailedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_track_failed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class TimedMetadataTrackError(_winrt.winrt_base):
    ...
    error_code: TimedMetadataTrackErrorCode
    extended_error: winrt.windows.foundation.HResult

class TimedMetadataTrackFailedEventArgs(_winrt.winrt_base):
    ...
    error: TimedMetadataTrackError

class TimedTextBouten(_winrt.winrt_base):
    ...
    type: TimedTextBoutenType
    position: TimedTextBoutenPosition
    color: winrt.windows.ui.Color

class TimedTextCue(IMediaCue, _winrt.winrt_base):
    ...
    start_time: winrt.windows.foundation.TimeSpan
    id: str
    duration: winrt.windows.foundation.TimeSpan
    cue_style: TimedTextStyle
    cue_region: TimedTextRegion
    lines: winrt.windows.foundation.collections.IVector[TimedTextLine]

class TimedTextLine(_winrt.winrt_base):
    ...
    text: str
    subformats: winrt.windows.foundation.collections.IVector[TimedTextSubformat]

class TimedTextRegion(_winrt.winrt_base):
    ...
    name: str
    line_height: TimedTextDouble
    is_overflow_clipped: bool
    extent: TimedTextSize
    display_alignment: TimedTextDisplayAlignment
    padding: TimedTextPadding
    background: winrt.windows.ui.Color
    z_index: int
    writing_mode: TimedTextWritingMode
    text_wrapping: TimedTextWrapping
    scroll_mode: TimedTextScrollMode
    position: TimedTextPoint

class TimedTextRuby(_winrt.winrt_base):
    ...
    text: str
    reserve: TimedTextRubyReserve
    position: TimedTextRubyPosition
    align: TimedTextRubyAlign

class TimedTextSource(_winrt.winrt_base):
    ...
    def create_from_stream(stream: winrt.windows.storage.streams.IRandomAccessStream) -> TimedTextSource:
        ...
    def create_from_stream(stream: winrt.windows.storage.streams.IRandomAccessStream, default_language: str) -> TimedTextSource:
        ...
    def create_from_stream_with_index(stream: winrt.windows.storage.streams.IRandomAccessStream, index_stream: winrt.windows.storage.streams.IRandomAccessStream) -> TimedTextSource:
        ...
    def create_from_stream_with_index(stream: winrt.windows.storage.streams.IRandomAccessStream, index_stream: winrt.windows.storage.streams.IRandomAccessStream, default_language: str) -> TimedTextSource:
        ...
    def create_from_uri(uri: winrt.windows.foundation.Uri) -> TimedTextSource:
        ...
    def create_from_uri(uri: winrt.windows.foundation.Uri, default_language: str) -> TimedTextSource:
        ...
    def create_from_uri_with_index(uri: winrt.windows.foundation.Uri, index_uri: winrt.windows.foundation.Uri) -> TimedTextSource:
        ...
    def create_from_uri_with_index(uri: winrt.windows.foundation.Uri, index_uri: winrt.windows.foundation.Uri, default_language: str) -> TimedTextSource:
        ...
    def add_resolved(handler: winrt.windows.foundation.TypedEventHandler[TimedTextSource, TimedTextSourceResolveResultEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_resolved(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class TimedTextSourceResolveResultEventArgs(_winrt.winrt_base):
    ...
    error: TimedMetadataTrackError
    tracks: winrt.windows.foundation.collections.IVectorView[TimedMetadataTrack]

class TimedTextStyle(_winrt.winrt_base):
    ...
    line_alignment: TimedTextLineAlignment
    is_background_always_shown: bool
    outline_color: winrt.windows.ui.Color
    foreground: winrt.windows.ui.Color
    font_weight: TimedTextWeight
    background: winrt.windows.ui.Color
    font_size: TimedTextDouble
    font_family: str
    flow_direction: TimedTextFlowDirection
    outline_thickness: TimedTextDouble
    outline_radius: TimedTextDouble
    name: str
    is_underline_enabled: bool
    is_overline_enabled: bool
    is_line_through_enabled: bool
    font_style: TimedTextFontStyle
    is_text_combined: bool
    font_angle_in_degrees: float
    bouten: TimedTextBouten
    ruby: TimedTextRuby

class TimedTextSubformat(_winrt.winrt_base):
    ...
    subformat_style: TimedTextStyle
    start_index: int
    length: int

class VideoStabilizationEffect(winrt.windows.media.IMediaExtension, _winrt.winrt_base):
    ...
    enabled: bool
    def get_recommended_stream_configuration(controller: winrt.windows.media.devices.VideoDeviceController, desired_properties: winrt.windows.media.mediaproperties.VideoEncodingProperties) -> winrt.windows.media.capture.VideoStreamConfiguration:
        ...
    def set_properties(configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def add_enabled_changed(handler: winrt.windows.foundation.TypedEventHandler[VideoStabilizationEffect, VideoStabilizationEffectEnabledChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enabled_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class VideoStabilizationEffectDefinition(winrt.windows.media.effects.IVideoEffectDefinition, _winrt.winrt_base):
    ...
    activatable_class_id: str
    properties: winrt.windows.foundation.collections.IPropertySet

class VideoStabilizationEffectEnabledChangedEventArgs(_winrt.winrt_base):
    ...
    reason: VideoStabilizationEffectEnabledChangedReason

class VideoStreamDescriptor(IMediaStreamDescriptor, IMediaStreamDescriptor2, _winrt.winrt_base):
    ...
    name: str
    language: str
    is_selected: bool
    label: str
    encoding_properties: winrt.windows.media.mediaproperties.VideoEncodingProperties
    def copy() -> VideoStreamDescriptor:
        ...

class VideoTrack(IMediaTrack, _winrt.winrt_base):
    ...
    label: str
    id: str
    language: str
    track_kind: MediaTrackKind
    name: str
    playback_item: winrt.windows.media.playback.MediaPlaybackItem
    support_info: VideoTrackSupportInfo
    def get_encoding_properties() -> winrt.windows.media.mediaproperties.VideoEncodingProperties:
        ...
    def add_open_failed(handler: winrt.windows.foundation.TypedEventHandler[VideoTrack, VideoTrackOpenFailedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_open_failed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class VideoTrackOpenFailedEventArgs(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult

class VideoTrackSupportInfo(_winrt.winrt_base):
    ...
    decoder_status: MediaDecoderStatus
    media_source_status: MediaSourceStatus

class IMediaCue(_winrt.winrt_base):
    ...
    duration: winrt.windows.foundation.TimeSpan
    id: str
    start_time: winrt.windows.foundation.TimeSpan

class IMediaSource(_winrt.winrt_base):
    ...

class IMediaStreamDescriptor(_winrt.winrt_base):
    ...
    is_selected: bool
    language: str
    name: str

class IMediaStreamDescriptor2(IMediaStreamDescriptor, _winrt.winrt_base):
    ...
    label: str
    is_selected: bool
    language: str
    name: str

class IMediaTrack(_winrt.winrt_base):
    ...
    id: str
    label: str
    language: str
    track_kind: MediaTrackKind

class ISingleSelectMediaTrackList(_winrt.winrt_base):
    ...
    selected_index: int
    def add_selected_index_changed(handler: winrt.windows.foundation.TypedEventHandler[ISingleSelectMediaTrackList, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_selected_index_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ITimedMetadataTrackProvider(_winrt.winrt_base):
    ...
    timed_metadata_tracks: winrt.windows.foundation.collections.IVectorView[TimedMetadataTrack]

