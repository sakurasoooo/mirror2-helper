# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.media.core
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class AudioEncodingQuality(enum.IntEnum):
    AUTO = 0
    HIGH = 1
    MEDIUM = 2
    LOW = 3

class MediaMirroringOptions(enum.IntFlag):
    NONE = 0
    HORIZONTAL = 0x1
    VERTICAL = 0x2

class MediaPixelFormat(enum.IntEnum):
    NV12 = 0
    BGRA8 = 1
    P010 = 2

class MediaRotation(enum.IntEnum):
    NONE = 0
    CLOCKWISE90_DEGREES = 1
    CLOCKWISE180_DEGREES = 2
    CLOCKWISE270_DEGREES = 3

class MediaThumbnailFormat(enum.IntEnum):
    BMP = 0
    BGRA8 = 1

class SphericalVideoFrameFormat(enum.IntEnum):
    NONE = 0
    UNSUPPORTED = 1
    EQUIRECTANGULAR = 2

class StereoscopicVideoPackingMode(enum.IntEnum):
    NONE = 0
    SIDE_BY_SIDE = 1
    TOP_BOTTOM = 2

class VideoEncodingQuality(enum.IntEnum):
    AUTO = 0
    H_D1080P = 1
    H_D720P = 2
    WVGA = 3
    NTSC = 4
    PAL = 5
    VGA = 6
    QVGA = 7
    UHD2160P = 8
    UHD4320P = 9

class AudioEncodingProperties(IMediaEncodingProperties, _winrt.winrt_base):
    ...
    sample_rate: int
    channel_count: int
    bits_per_sample: int
    bitrate: int
    is_spatial: bool
    subtype: str
    properties: MediaPropertySet
    type: str
    def copy() -> AudioEncodingProperties:
        ...
    def create_aac(sample_rate: int, channel_count: int, bitrate: int) -> AudioEncodingProperties:
        ...
    def create_aac_adts(sample_rate: int, channel_count: int, bitrate: int) -> AudioEncodingProperties:
        ...
    def create_alac(sample_rate: int, channel_count: int, bits_per_sample: int) -> AudioEncodingProperties:
        ...
    def create_flac(sample_rate: int, channel_count: int, bits_per_sample: int) -> AudioEncodingProperties:
        ...
    def create_mp3(sample_rate: int, channel_count: int, bitrate: int) -> AudioEncodingProperties:
        ...
    def create_pcm(sample_rate: int, channel_count: int, bits_per_sample: int) -> AudioEncodingProperties:
        ...
    def create_wma(sample_rate: int, channel_count: int, bitrate: int) -> AudioEncodingProperties:
        ...
    def get_format_user_data() -> typing.List[int]:
        ...
    def set_format_user_data(value: typing.Sequence[int]) -> None:
        ...

class ContainerEncodingProperties(IMediaEncodingProperties, _winrt.winrt_base):
    ...
    subtype: str
    properties: MediaPropertySet
    type: str
    def copy() -> ContainerEncodingProperties:
        ...

class H264ProfileIds(_winrt.winrt_base):
    ...
    baseline: int
    constrained_baseline: int
    extended: int
    high: int
    high10: int
    high422: int
    high444: int
    main: int
    multiview_high: int
    stereo_high: int

class ImageEncodingProperties(IMediaEncodingProperties, _winrt.winrt_base):
    ...
    width: int
    height: int
    subtype: str
    properties: MediaPropertySet
    type: str
    def copy() -> ImageEncodingProperties:
        ...
    def create_bmp() -> ImageEncodingProperties:
        ...
    def create_heif() -> ImageEncodingProperties:
        ...
    def create_jpeg() -> ImageEncodingProperties:
        ...
    def create_jpeg_x_r() -> ImageEncodingProperties:
        ...
    def create_png() -> ImageEncodingProperties:
        ...
    def create_uncompressed(format: MediaPixelFormat) -> ImageEncodingProperties:
        ...

class MediaEncodingProfile(_winrt.winrt_base):
    ...
    video: VideoEncodingProperties
    container: ContainerEncodingProperties
    audio: AudioEncodingProperties
    def create_alac(quality: AudioEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_avi(quality: VideoEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_flac(quality: AudioEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_from_file_async(file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncOperation[MediaEncodingProfile]:
        ...
    def create_from_stream_async(stream: winrt.windows.storage.streams.IRandomAccessStream) -> winrt.windows.foundation.IAsyncOperation[MediaEncodingProfile]:
        ...
    def create_hevc(quality: VideoEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_m4a(quality: AudioEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_mp3(quality: AudioEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_mp4(quality: VideoEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_wav(quality: AudioEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_wma(quality: AudioEncodingQuality) -> MediaEncodingProfile:
        ...
    def create_wmv(quality: VideoEncodingQuality) -> MediaEncodingProfile:
        ...
    def get_audio_tracks() -> winrt.windows.foundation.collections.IVector[winrt.windows.media.core.AudioStreamDescriptor]:
        ...
    def get_timed_metadata_tracks() -> winrt.windows.foundation.collections.IVector[winrt.windows.media.core.TimedMetadataStreamDescriptor]:
        ...
    def get_video_tracks() -> winrt.windows.foundation.collections.IVector[winrt.windows.media.core.VideoStreamDescriptor]:
        ...
    def set_audio_tracks(value: typing.Iterable[winrt.windows.media.core.AudioStreamDescriptor]) -> None:
        ...
    def set_timed_metadata_tracks(value: typing.Iterable[winrt.windows.media.core.TimedMetadataStreamDescriptor]) -> None:
        ...
    def set_video_tracks(value: typing.Iterable[winrt.windows.media.core.VideoStreamDescriptor]) -> None:
        ...

class MediaEncodingSubtypes(_winrt.winrt_base):
    ...
    asf: str
    aac: str
    aac_adts: str
    ac3: str
    amr_nb: str
    amr_wb: str
    argb32: str
    mpeg1: str
    avi: str
    bgra8: str
    bmp: str
    eac3: str
    float: str
    gif: str
    h263: str
    h264: str
    h264_es: str
    hevc: str
    hevc_es: str
    iyuv: str
    jpeg: str
    jpeg_xr: str
    mjpg: str
    mp3: str
    mpeg: str
    mpeg2: str
    mpeg4: str
    nv12: str
    pcm: str
    png: str
    rgb24: str
    rgb32: str
    tiff: str
    wave: str
    wma8: str
    wma9: str
    wmv3: str
    wvc1: str
    yuy2: str
    yv12: str
    d16: str
    l16: str
    l8: str
    vp9: str
    alac: str
    flac: str
    p010: str
    heif: str
    srt: str
    ssa: str
    vob_sub: str
    pgs: str

class MediaPropertySet(winrt.windows.foundation.collections.IMap[uuid.UUID, _winrt.winrt_base], winrt.windows.foundation.collections.IIterable[winrt.windows.foundation.collections.IKeyValuePair[uuid.UUID, _winrt.winrt_base]], _winrt.winrt_base):
    ...
    size: int
    def clear() -> None:
        ...
    def first() -> winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[uuid.UUID, _winrt.winrt_base]]:
        ...
    def get_view() -> winrt.windows.foundation.collections.IMapView[uuid.UUID, _winrt.winrt_base]:
        ...
    def has_key(key: uuid.UUID) -> bool:
        ...
    def insert(key: uuid.UUID, value: _winrt.winrt_base) -> bool:
        ...
    def lookup(key: uuid.UUID) -> _winrt.winrt_base:
        ...
    def remove(key: uuid.UUID) -> None:
        ...

class MediaRatio(_winrt.winrt_base):
    ...
    numerator: int
    denominator: int

class Mpeg2ProfileIds(_winrt.winrt_base):
    ...
    high: int
    main: int
    signal_noise_ratio_scalable: int
    simple: int
    spatially_scalable: int

class TimedMetadataEncodingProperties(IMediaEncodingProperties, _winrt.winrt_base):
    ...
    subtype: str
    properties: MediaPropertySet
    type: str
    def copy() -> TimedMetadataEncodingProperties:
        ...
    def create_pgs() -> TimedMetadataEncodingProperties:
        ...
    def create_srt() -> TimedMetadataEncodingProperties:
        ...
    def create_ssa(format_user_data: typing.Sequence[int]) -> TimedMetadataEncodingProperties:
        ...
    def create_vob_sub(format_user_data: typing.Sequence[int]) -> TimedMetadataEncodingProperties:
        ...
    def get_format_user_data() -> typing.List[int]:
        ...
    def set_format_user_data(value: typing.Sequence[int]) -> None:
        ...

class VideoEncodingProperties(IMediaEncodingProperties, _winrt.winrt_base):
    ...
    subtype: str
    type: str
    properties: MediaPropertySet
    width: int
    height: int
    bitrate: int
    pixel_aspect_ratio: MediaRatio
    frame_rate: MediaRatio
    profile_id: int
    stereoscopic_video_packing_mode: StereoscopicVideoPackingMode
    spherical_video_frame_format: SphericalVideoFrameFormat
    def copy() -> VideoEncodingProperties:
        ...
    def create_h264() -> VideoEncodingProperties:
        ...
    def create_hevc() -> VideoEncodingProperties:
        ...
    def create_mpeg2() -> VideoEncodingProperties:
        ...
    def create_uncompressed(subtype: str, width: int, height: int) -> VideoEncodingProperties:
        ...
    def get_format_user_data() -> typing.List[int]:
        ...
    def set_format_user_data(value: typing.Sequence[int]) -> None:
        ...

class IMediaEncodingProperties(_winrt.winrt_base):
    ...
    properties: MediaPropertySet
    subtype: str
    type: str

