# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.appservice
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.graphics.directx
except Exception:
    pass

try:
    import winrt.windows.graphics.directx.direct3d11
except Exception:
    pass

try:
    import winrt.windows.graphics.imaging
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class AudioBufferAccessMode(enum.IntEnum):
    READ = 0
    READ_WRITE = 1
    WRITE = 2

class AudioProcessing(enum.IntEnum):
    DEFAULT = 0
    RAW = 1

class MediaPlaybackAutoRepeatMode(enum.IntEnum):
    NONE = 0
    TRACK = 1
    LIST = 2

class MediaPlaybackStatus(enum.IntEnum):
    CLOSED = 0
    CHANGING = 1
    STOPPED = 2
    PLAYING = 3
    PAUSED = 4

class MediaPlaybackType(enum.IntEnum):
    UNKNOWN = 0
    MUSIC = 1
    VIDEO = 2
    IMAGE = 3

class MediaTimelineControllerState(enum.IntEnum):
    PAUSED = 0
    RUNNING = 1
    STALLED = 2
    ERROR = 3

class SoundLevel(enum.IntEnum):
    MUTED = 0
    LOW = 1
    FULL = 2

class SystemMediaTransportControlsButton(enum.IntEnum):
    PLAY = 0
    PAUSE = 1
    STOP = 2
    RECORD = 3
    FAST_FORWARD = 4
    REWIND = 5
    NEXT = 6
    PREVIOUS = 7
    CHANNEL_UP = 8
    CHANNEL_DOWN = 9

class SystemMediaTransportControlsProperty(enum.IntEnum):
    SOUND_LEVEL = 0

class MediaTimeRange(_winrt.winrt_base):
    ...

class AudioBuffer(winrt.windows.foundation.IMemoryBuffer, winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    length: int
    capacity: int
    def close() -> None:
        ...
    def create_reference() -> winrt.windows.foundation.IMemoryBufferReference:
        ...

class AudioFrame(IMediaFrame, winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    system_relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    is_discontinuous: bool
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    extended_properties: winrt.windows.foundation.collections.IPropertySet
    is_read_only: bool
    type: str
    def close() -> None:
        ...
    def lock_buffer(mode: AudioBufferAccessMode) -> AudioBuffer:
        ...

class AutoRepeatModeChangeRequestedEventArgs(_winrt.winrt_base):
    ...
    requested_auto_repeat_mode: MediaPlaybackAutoRepeatMode

class ImageDisplayProperties(_winrt.winrt_base):
    ...
    title: str
    subtitle: str

class MediaExtensionManager(_winrt.winrt_base):
    ...
    def register_audio_decoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID) -> None:
        ...
    def register_audio_decoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID, configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def register_audio_encoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID) -> None:
        ...
    def register_audio_encoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID, configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def register_byte_stream_handler(activatable_class_id: str, file_extension: str, mime_type: str) -> None:
        ...
    def register_byte_stream_handler(activatable_class_id: str, file_extension: str, mime_type: str, configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def register_media_extension_for_app_service(extension: IMediaExtension, connection: winrt.windows.applicationmodel.appservice.AppServiceConnection) -> None:
        ...
    def register_scheme_handler(activatable_class_id: str, scheme: str) -> None:
        ...
    def register_scheme_handler(activatable_class_id: str, scheme: str, configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def register_video_decoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID) -> None:
        ...
    def register_video_decoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID, configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...
    def register_video_encoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID) -> None:
        ...
    def register_video_encoder(activatable_class_id: str, input_subtype: uuid.UUID, output_subtype: uuid.UUID, configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...

class MediaMarkerTypes(_winrt.winrt_base):
    ...
    bookmark: str

class MediaProcessingTriggerDetails(_winrt.winrt_base):
    ...
    arguments: winrt.windows.foundation.collections.ValueSet

class MediaTimelineController(_winrt.winrt_base):
    ...
    position: winrt.windows.foundation.TimeSpan
    clock_rate: float
    state: MediaTimelineControllerState
    is_looping_enabled: bool
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    def pause() -> None:
        ...
    def resume() -> None:
        ...
    def start() -> None:
        ...
    def add_position_changed(position_changed_event_handler: winrt.windows.foundation.TypedEventHandler[MediaTimelineController, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_position_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_state_changed(state_changed_event_handler: winrt.windows.foundation.TypedEventHandler[MediaTimelineController, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_state_changed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_ended(event_handler: winrt.windows.foundation.TypedEventHandler[MediaTimelineController, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_ended(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_failed(event_handler: winrt.windows.foundation.TypedEventHandler[MediaTimelineController, MediaTimelineControllerFailedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_failed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaTimelineControllerFailedEventArgs(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult

class MusicDisplayProperties(_winrt.winrt_base):
    ...
    title: str
    artist: str
    album_artist: str
    track_number: int
    album_title: str
    genres: winrt.windows.foundation.collections.IVector[str]
    album_track_count: int

class PlaybackPositionChangeRequestedEventArgs(_winrt.winrt_base):
    ...
    requested_playback_position: winrt.windows.foundation.TimeSpan

class PlaybackRateChangeRequestedEventArgs(_winrt.winrt_base):
    ...
    requested_playback_rate: float

class ShuffleEnabledChangeRequestedEventArgs(_winrt.winrt_base):
    ...
    requested_shuffle_enabled: bool

class SystemMediaTransportControls(_winrt.winrt_base):
    ...
    is_play_enabled: bool
    is_pause_enabled: bool
    is_next_enabled: bool
    is_previous_enabled: bool
    is_enabled: bool
    is_channel_down_enabled: bool
    is_fast_forward_enabled: bool
    is_channel_up_enabled: bool
    playback_status: MediaPlaybackStatus
    is_stop_enabled: bool
    is_rewind_enabled: bool
    is_record_enabled: bool
    display_updater: SystemMediaTransportControlsDisplayUpdater
    sound_level: SoundLevel
    shuffle_enabled: bool
    playback_rate: float
    auto_repeat_mode: MediaPlaybackAutoRepeatMode
    def get_for_current_view() -> SystemMediaTransportControls:
        ...
    def update_timeline_properties(timeline_properties: SystemMediaTransportControlsTimelineProperties) -> None:
        ...
    def add_button_pressed(handler: winrt.windows.foundation.TypedEventHandler[SystemMediaTransportControls, SystemMediaTransportControlsButtonPressedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_button_pressed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_property_changed(handler: winrt.windows.foundation.TypedEventHandler[SystemMediaTransportControls, SystemMediaTransportControlsPropertyChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_property_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_auto_repeat_mode_change_requested(handler: winrt.windows.foundation.TypedEventHandler[SystemMediaTransportControls, AutoRepeatModeChangeRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_auto_repeat_mode_change_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_playback_position_change_requested(handler: winrt.windows.foundation.TypedEventHandler[SystemMediaTransportControls, PlaybackPositionChangeRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_playback_position_change_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_playback_rate_change_requested(handler: winrt.windows.foundation.TypedEventHandler[SystemMediaTransportControls, PlaybackRateChangeRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_playback_rate_change_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_shuffle_enabled_change_requested(handler: winrt.windows.foundation.TypedEventHandler[SystemMediaTransportControls, ShuffleEnabledChangeRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_shuffle_enabled_change_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class SystemMediaTransportControlsButtonPressedEventArgs(_winrt.winrt_base):
    ...
    button: SystemMediaTransportControlsButton

class SystemMediaTransportControlsDisplayUpdater(_winrt.winrt_base):
    ...
    type: MediaPlaybackType
    thumbnail: winrt.windows.storage.streams.RandomAccessStreamReference
    app_media_id: str
    image_properties: ImageDisplayProperties
    music_properties: MusicDisplayProperties
    video_properties: VideoDisplayProperties
    def clear_all() -> None:
        ...
    def copy_from_file_async(type: MediaPlaybackType, source: winrt.windows.storage.StorageFile) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def update() -> None:
        ...

class SystemMediaTransportControlsPropertyChangedEventArgs(_winrt.winrt_base):
    ...
    property: SystemMediaTransportControlsProperty

class SystemMediaTransportControlsTimelineProperties(_winrt.winrt_base):
    ...
    start_time: winrt.windows.foundation.TimeSpan
    position: winrt.windows.foundation.TimeSpan
    min_seek_time: winrt.windows.foundation.TimeSpan
    max_seek_time: winrt.windows.foundation.TimeSpan
    end_time: winrt.windows.foundation.TimeSpan

class VideoDisplayProperties(_winrt.winrt_base):
    ...
    title: str
    subtitle: str
    genres: winrt.windows.foundation.collections.IVector[str]

class VideoEffects(_winrt.winrt_base):
    ...
    video_stabilization: str

class VideoFrame(IMediaFrame, winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    system_relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    is_discontinuous: bool
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    extended_properties: winrt.windows.foundation.collections.IPropertySet
    is_read_only: bool
    type: str
    direct3_d_surface: winrt.windows.graphics.directx.direct3d11.IDirect3DSurface
    software_bitmap: winrt.windows.graphics.imaging.SoftwareBitmap
    def close() -> None:
        ...
    def copy_to_async(frame: VideoFrame) -> winrt.windows.foundation.IAsyncAction:
        ...
    def copy_to_async(frame: VideoFrame, source_bounds: typing.Optional[winrt.windows.graphics.imaging.BitmapBounds], destination_bounds: typing.Optional[winrt.windows.graphics.imaging.BitmapBounds]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def create_as_direct3_d11_surface_backed(format: winrt.windows.graphics.directx.DirectXPixelFormat, width: int, height: int) -> VideoFrame:
        ...
    def create_as_direct3_d11_surface_backed(format: winrt.windows.graphics.directx.DirectXPixelFormat, width: int, height: int, device: winrt.windows.graphics.directx.direct3d11.IDirect3DDevice) -> VideoFrame:
        ...
    def create_with_direct3_d11_surface(surface: winrt.windows.graphics.directx.direct3d11.IDirect3DSurface) -> VideoFrame:
        ...
    def create_with_software_bitmap(bitmap: winrt.windows.graphics.imaging.SoftwareBitmap) -> VideoFrame:
        ...

class IMediaExtension(_winrt.winrt_base):
    ...
    def set_properties(configuration: winrt.windows.foundation.collections.IPropertySet) -> None:
        ...

class IMediaFrame(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    duration: typing.Optional[winrt.windows.foundation.TimeSpan]
    extended_properties: winrt.windows.foundation.collections.IPropertySet
    is_discontinuous: bool
    is_read_only: bool
    relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    system_relative_time: typing.Optional[winrt.windows.foundation.TimeSpan]
    type: str
    def close() -> None:
        ...

class IMediaMarker(_winrt.winrt_base):
    ...
    media_marker_type: str
    text: str
    time: winrt.windows.foundation.TimeSpan

class IMediaMarkers(_winrt.winrt_base):
    ...
    markers: winrt.windows.foundation.collections.IVectorView[IMediaMarker]

