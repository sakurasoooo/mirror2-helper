# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.enumeration
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.ui.popups
except Exception:
    pass

class CastingConnectionErrorStatus(enum.IntEnum):
    SUCCEEDED = 0
    DEVICE_DID_NOT_RESPOND = 1
    DEVICE_ERROR = 2
    DEVICE_LOCKED = 3
    PROTECTED_PLAYBACK_FAILED = 4
    INVALID_CASTING_SOURCE = 5
    UNKNOWN = 6

class CastingConnectionState(enum.IntEnum):
    DISCONNECTED = 0
    CONNECTED = 1
    RENDERING = 2
    DISCONNECTING = 3
    CONNECTING = 4

class CastingPlaybackTypes(enum.IntFlag):
    NONE = 0
    AUDIO = 0x1
    VIDEO = 0x2
    PICTURE = 0x4

class CastingConnection(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    source: CastingSource
    device: CastingDevice
    state: CastingConnectionState
    def close() -> None:
        ...
    def disconnect_async() -> winrt.windows.foundation.IAsyncOperation[CastingConnectionErrorStatus]:
        ...
    def request_start_casting_async(value: CastingSource) -> winrt.windows.foundation.IAsyncOperation[CastingConnectionErrorStatus]:
        ...
    def add_error_occurred(handler: winrt.windows.foundation.TypedEventHandler[CastingConnection, CastingConnectionErrorOccurredEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_error_occurred(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_state_changed(handler: winrt.windows.foundation.TypedEventHandler[CastingConnection, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CastingConnectionErrorOccurredEventArgs(_winrt.winrt_base):
    ...
    error_status: CastingConnectionErrorStatus
    message: str

class CastingDevice(_winrt.winrt_base):
    ...
    friendly_name: str
    icon: winrt.windows.storage.streams.IRandomAccessStreamWithContentType
    id: str
    def create_casting_connection() -> CastingConnection:
        ...
    def device_info_supports_casting_async(device: winrt.windows.devices.enumeration.DeviceInformation) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def from_id_async(value: str) -> winrt.windows.foundation.IAsyncOperation[CastingDevice]:
        ...
    def get_device_selector(type: CastingPlaybackTypes) -> str:
        ...
    def get_device_selector_from_casting_source_async(casting_source: CastingSource) -> winrt.windows.foundation.IAsyncOperation[str]:
        ...
    def get_supported_casting_playback_types_async() -> winrt.windows.foundation.IAsyncOperation[CastingPlaybackTypes]:
        ...

class CastingDevicePicker(_winrt.winrt_base):
    ...
    appearance: winrt.windows.devices.enumeration.DevicePickerAppearance
    filter: CastingDevicePickerFilter
    def hide() -> None:
        ...
    def show(selection: winrt.windows.foundation.Rect) -> None:
        ...
    def show(selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement) -> None:
        ...
    def add_casting_device_picker_dismissed(handler: winrt.windows.foundation.TypedEventHandler[CastingDevicePicker, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_casting_device_picker_dismissed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_casting_device_selected(handler: winrt.windows.foundation.TypedEventHandler[CastingDevicePicker, CastingDeviceSelectedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_casting_device_selected(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CastingDevicePickerFilter(_winrt.winrt_base):
    ...
    supports_video: bool
    supports_pictures: bool
    supports_audio: bool
    supported_casting_sources: winrt.windows.foundation.collections.IVector[CastingSource]

class CastingDeviceSelectedEventArgs(_winrt.winrt_base):
    ...
    selected_casting_device: CastingDevice

class CastingSource(_winrt.winrt_base):
    ...
    preferred_source_uri: winrt.windows.foundation.Uri

