# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.enumeration
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.graphics.directx.direct3d11
except Exception:
    pass

try:
    import winrt.windows.graphics.imaging
except Exception:
    pass

try:
    import winrt.windows.media
except Exception:
    pass

try:
    import winrt.windows.media.capture.core
except Exception:
    pass

try:
    import winrt.windows.media.capture.frames
except Exception:
    pass

try:
    import winrt.windows.media.core
except Exception:
    pass

try:
    import winrt.windows.media.devices
except Exception:
    pass

try:
    import winrt.windows.media.effects
except Exception:
    pass

try:
    import winrt.windows.media.mediaproperties
except Exception:
    pass

try:
    import winrt.windows.security.credentials
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.ui.windowmanagement
except Exception:
    pass

class CameraCaptureUIMaxPhotoResolution(enum.IntEnum):
    HIGHEST_AVAILABLE = 0
    VERY_SMALL_QVGA = 1
    SMALL_VGA = 2
    MEDIUM_XGA = 3
    LARGE3_M = 4
    VERY_LARGE5_M = 5

class CameraCaptureUIMaxVideoResolution(enum.IntEnum):
    HIGHEST_AVAILABLE = 0
    LOW_DEFINITION = 1
    STANDARD_DEFINITION = 2
    HIGH_DEFINITION = 3

class CameraCaptureUIMode(enum.IntEnum):
    PHOTO_OR_VIDEO = 0
    PHOTO = 1
    VIDEO = 2

class CameraCaptureUIPhotoFormat(enum.IntEnum):
    JPEG = 0
    PNG = 1
    JPEG_X_R = 2

class CameraCaptureUIVideoFormat(enum.IntEnum):
    MP4 = 0
    WMV = 1

class KnownVideoProfile(enum.IntEnum):
    VIDEO_RECORDING = 0
    HIGH_QUALITY_PHOTO = 1
    BALANCED_VIDEO_AND_PHOTO = 2
    VIDEO_CONFERENCING = 3
    PHOTO_SEQUENCE = 4
    HIGH_FRAME_RATE = 5
    VARIABLE_PHOTO_SEQUENCE = 6
    HDR_WITH_WCG_VIDEO = 7
    HDR_WITH_WCG_PHOTO = 8
    VIDEO_HDR8 = 9
    COMPRESSED_CAMERA = 10

class MediaCaptureDeviceExclusiveControlStatus(enum.IntEnum):
    EXCLUSIVE_CONTROL_AVAILABLE = 0
    SHARED_READ_ONLY_AVAILABLE = 1

class MediaCaptureMemoryPreference(enum.IntEnum):
    AUTO = 0
    CPU = 1

class MediaCaptureSharingMode(enum.IntEnum):
    EXCLUSIVE_CONTROL = 0
    SHARED_READ_ONLY = 1

class MediaCaptureThermalStatus(enum.IntEnum):
    NORMAL = 0
    OVERHEATED = 1

class MediaCategory(enum.IntEnum):
    OTHER = 0
    COMMUNICATIONS = 1
    MEDIA = 2
    GAME_CHAT = 3
    SPEECH = 4
    FAR_FIELD_SPEECH = 5
    UNIFORM_SPEECH = 6
    VOICE_TYPING = 7

class MediaStreamType(enum.IntEnum):
    VIDEO_PREVIEW = 0
    VIDEO_RECORD = 1
    AUDIO = 2
    PHOTO = 3
    METADATA = 4

class PhotoCaptureSource(enum.IntEnum):
    AUTO = 0
    VIDEO_PREVIEW = 1
    PHOTO = 2

class PowerlineFrequency(enum.IntEnum):
    DISABLED = 0
    FIFTY_HERTZ = 1
    SIXTY_HERTZ = 2
    AUTO = 3

class StreamingCaptureMode(enum.IntEnum):
    AUDIO_AND_VIDEO = 0
    AUDIO = 1
    VIDEO = 2

class VideoDeviceCharacteristic(enum.IntEnum):
    ALL_STREAMS_INDEPENDENT = 0
    PREVIEW_RECORD_STREAMS_IDENTICAL = 1
    PREVIEW_PHOTO_STREAMS_IDENTICAL = 2
    RECORD_PHOTO_STREAMS_IDENTICAL = 3
    ALL_STREAMS_IDENTICAL = 4

class VideoRotation(enum.IntEnum):
    NONE = 0
    CLOCKWISE90_DEGREES = 1
    CLOCKWISE180_DEGREES = 2
    CLOCKWISE270_DEGREES = 3

class WhiteBalanceGain(_winrt.winrt_base):
    ...

class AdvancedCapturedPhoto(_winrt.winrt_base):
    ...
    context: _winrt.winrt_base
    frame: CapturedFrame
    mode: winrt.windows.media.devices.AdvancedPhotoMode
    frame_bounds_relative_to_reference_photo: typing.Optional[winrt.windows.foundation.Rect]

class AdvancedPhotoCapture(_winrt.winrt_base):
    ...
    def capture_async() -> winrt.windows.foundation.IAsyncOperation[AdvancedCapturedPhoto]:
        ...
    def capture_async(context: _winrt.winrt_base) -> winrt.windows.foundation.IAsyncOperation[AdvancedCapturedPhoto]:
        ...
    def finish_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_all_photos_captured(handler: winrt.windows.foundation.TypedEventHandler[AdvancedPhotoCapture, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_all_photos_captured(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_optional_reference_photo_captured(handler: winrt.windows.foundation.TypedEventHandler[AdvancedPhotoCapture, OptionalReferencePhotoCapturedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_optional_reference_photo_captured(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class AppCapture(_winrt.winrt_base):
    ...
    is_capturing_audio: bool
    is_capturing_video: bool
    def get_for_current_view() -> AppCapture:
        ...
    def set_allowed_async(allowed: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_capturing_changed(handler: winrt.windows.foundation.TypedEventHandler[AppCapture, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_capturing_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CameraCaptureUI(_winrt.winrt_base):
    ...
    photo_settings: CameraCaptureUIPhotoCaptureSettings
    video_settings: CameraCaptureUIVideoCaptureSettings
    def capture_file_async(mode: CameraCaptureUIMode) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]:
        ...

class CameraCaptureUIPhotoCaptureSettings(_winrt.winrt_base):
    ...
    max_resolution: CameraCaptureUIMaxPhotoResolution
    format: CameraCaptureUIPhotoFormat
    cropped_size_in_pixels: winrt.windows.foundation.Size
    cropped_aspect_ratio: winrt.windows.foundation.Size
    allow_cropping: bool

class CameraCaptureUIVideoCaptureSettings(_winrt.winrt_base):
    ...
    max_resolution: CameraCaptureUIMaxVideoResolution
    max_duration_in_seconds: float
    format: CameraCaptureUIVideoFormat
    allow_trimming: bool

class CapturedFrame(winrt.windows.storage.streams.IRandomAccessStreamWithContentType, winrt.windows.storage.streams.IContentTypeProvider, winrt.windows.storage.streams.IRandomAccessStream, winrt.windows.storage.streams.IOutputStream, winrt.windows.foundation.IClosable, winrt.windows.storage.streams.IInputStream, _winrt.winrt_base):
    ...
    height: int
    width: int
    bitmap_properties: winrt.windows.graphics.imaging.BitmapPropertySet
    control_values: CapturedFrameControlValues
    software_bitmap: winrt.windows.graphics.imaging.SoftwareBitmap
    content_type: str
    size: int
    can_read: bool
    can_write: bool
    position: int
    def clone_stream() -> winrt.windows.storage.streams.IRandomAccessStream:
        ...
    def close() -> None:
        ...
    def flush_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def get_input_stream_at(position: int) -> winrt.windows.storage.streams.IInputStream:
        ...
    def get_output_stream_at(position: int) -> winrt.windows.storage.streams.IOutputStream:
        ...
    def read_async(buffer: winrt.windows.storage.streams.IBuffer, count: int, options: winrt.windows.storage.streams.InputStreamOptions) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.storage.streams.IBuffer, int]:
        ...
    def seek(position: int) -> None:
        ...
    def write_async(buffer: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperationWithProgress[int, int]:
        ...

class CapturedFrameControlValues(_winrt.winrt_base):
    ...
    exposure: typing.Optional[winrt.windows.foundation.TimeSpan]
    exposure_compensation: typing.Optional[float]
    flash_power_percent: typing.Optional[float]
    flashed: typing.Optional[bool]
    focus: typing.Optional[int]
    iso_speed: typing.Optional[int]
    scene_mode: typing.Optional[winrt.windows.media.devices.CaptureSceneMode]
    white_balance: typing.Optional[int]
    zoom_factor: typing.Optional[float]
    focus_state: typing.Optional[winrt.windows.media.devices.MediaCaptureFocusState]
    iso_analog_gain: typing.Optional[float]
    iso_digital_gain: typing.Optional[float]
    sensor_frame_rate: winrt.windows.media.mediaproperties.MediaRatio
    white_balance_gain: typing.Optional[WhiteBalanceGain]

class CapturedPhoto(_winrt.winrt_base):
    ...
    frame: CapturedFrame
    thumbnail: CapturedFrame

class LowLagMediaRecording(_winrt.winrt_base):
    ...
    def finish_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def pause_async(behavior: winrt.windows.media.devices.MediaCapturePauseBehavior) -> winrt.windows.foundation.IAsyncAction:
        ...
    def pause_with_result_async(behavior: winrt.windows.media.devices.MediaCapturePauseBehavior) -> winrt.windows.foundation.IAsyncOperation[MediaCapturePauseResult]:
        ...
    def resume_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_with_result_async() -> winrt.windows.foundation.IAsyncOperation[MediaCaptureStopResult]:
        ...

class LowLagPhotoCapture(_winrt.winrt_base):
    ...
    def capture_async() -> winrt.windows.foundation.IAsyncOperation[CapturedPhoto]:
        ...
    def finish_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class LowLagPhotoSequenceCapture(_winrt.winrt_base):
    ...
    def finish_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_photo_captured(handler: winrt.windows.foundation.TypedEventHandler[LowLagPhotoSequenceCapture, PhotoCapturedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_photo_captured(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaCapture(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    audio_device_controller: winrt.windows.media.devices.AudioDeviceController
    media_capture_settings: MediaCaptureSettings
    video_device_controller: winrt.windows.media.devices.VideoDeviceController
    camera_stream_state: winrt.windows.media.devices.CameraStreamState
    thermal_status: MediaCaptureThermalStatus
    frame_sources: winrt.windows.foundation.collections.IMapView[str, winrt.windows.media.capture.frames.MediaFrameSource]
    def add_audio_effect_async(definition: winrt.windows.media.effects.IAudioEffectDefinition) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.IMediaExtension]:
        ...
    def add_effect_async(media_stream_type: MediaStreamType, effect_activation_i_d: str, effect_settings: winrt.windows.foundation.collections.IPropertySet) -> winrt.windows.foundation.IAsyncAction:
        ...
    def add_video_effect_async(definition: winrt.windows.media.effects.IVideoEffectDefinition, media_stream_type: MediaStreamType) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.IMediaExtension]:
        ...
    def capture_photo_to_storage_file_async(type: winrt.windows.media.mediaproperties.ImageEncodingProperties, file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...
    def capture_photo_to_stream_async(type: winrt.windows.media.mediaproperties.ImageEncodingProperties, stream: winrt.windows.storage.streams.IRandomAccessStream) -> winrt.windows.foundation.IAsyncAction:
        ...
    def clear_effects_async(media_stream_type: MediaStreamType) -> winrt.windows.foundation.IAsyncAction:
        ...
    def close() -> None:
        ...
    def create_frame_reader_async(input_source: winrt.windows.media.capture.frames.MediaFrameSource) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.capture.frames.MediaFrameReader]:
        ...
    def create_frame_reader_async(input_source: winrt.windows.media.capture.frames.MediaFrameSource, output_subtype: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.capture.frames.MediaFrameReader]:
        ...
    def create_frame_reader_async(input_source: winrt.windows.media.capture.frames.MediaFrameSource, output_subtype: str, output_size: winrt.windows.graphics.imaging.BitmapSize) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.capture.frames.MediaFrameReader]:
        ...
    def create_multi_source_frame_reader_async(input_sources: typing.Iterable[winrt.windows.media.capture.frames.MediaFrameSource]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.capture.frames.MultiSourceMediaFrameReader]:
        ...
    def create_relative_panel_watcher(capture_mode: StreamingCaptureMode, display_region: winrt.windows.ui.windowmanagement.DisplayRegion) -> MediaCaptureRelativePanelWatcher:
        ...
    def find_all_video_profiles(video_device_id: str) -> winrt.windows.foundation.collections.IVectorView[MediaCaptureVideoProfile]:
        ...
    def find_concurrent_profiles(video_device_id: str) -> winrt.windows.foundation.collections.IVectorView[MediaCaptureVideoProfile]:
        ...
    def find_known_video_profiles(video_device_id: str, name: KnownVideoProfile) -> winrt.windows.foundation.collections.IVectorView[MediaCaptureVideoProfile]:
        ...
    def get_encoder_property(media_stream_type: MediaStreamType, property_id: uuid.UUID) -> _winrt.winrt_base:
        ...
    def get_preview_frame_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.VideoFrame]:
        ...
    def get_preview_frame_async(destination: winrt.windows.media.VideoFrame) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.VideoFrame]:
        ...
    def get_preview_mirroring() -> bool:
        ...
    def get_preview_rotation() -> VideoRotation:
        ...
    def get_record_rotation() -> VideoRotation:
        ...
    def initialize_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def initialize_async(media_capture_initialization_settings: MediaCaptureInitializationSettings) -> winrt.windows.foundation.IAsyncAction:
        ...
    def is_video_profile_supported(video_device_id: str) -> bool:
        ...
    def pause_record_async(behavior: winrt.windows.media.devices.MediaCapturePauseBehavior) -> winrt.windows.foundation.IAsyncAction:
        ...
    def pause_record_with_result_async(behavior: winrt.windows.media.devices.MediaCapturePauseBehavior) -> winrt.windows.foundation.IAsyncOperation[MediaCapturePauseResult]:
        ...
    def prepare_advanced_photo_capture_async(encoding_properties: winrt.windows.media.mediaproperties.ImageEncodingProperties) -> winrt.windows.foundation.IAsyncOperation[AdvancedPhotoCapture]:
        ...
    def prepare_low_lag_photo_capture_async(type: winrt.windows.media.mediaproperties.ImageEncodingProperties) -> winrt.windows.foundation.IAsyncOperation[LowLagPhotoCapture]:
        ...
    def prepare_low_lag_photo_sequence_capture_async(type: winrt.windows.media.mediaproperties.ImageEncodingProperties) -> winrt.windows.foundation.IAsyncOperation[LowLagPhotoSequenceCapture]:
        ...
    def prepare_low_lag_record_to_custom_sink_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, custom_media_sink: winrt.windows.media.IMediaExtension) -> winrt.windows.foundation.IAsyncOperation[LowLagMediaRecording]:
        ...
    def prepare_low_lag_record_to_custom_sink_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, custom_sink_activation_id: str, custom_sink_settings: winrt.windows.foundation.collections.IPropertySet) -> winrt.windows.foundation.IAsyncOperation[LowLagMediaRecording]:
        ...
    def prepare_low_lag_record_to_storage_file_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncOperation[LowLagMediaRecording]:
        ...
    def prepare_low_lag_record_to_stream_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, stream: winrt.windows.storage.streams.IRandomAccessStream) -> winrt.windows.foundation.IAsyncOperation[LowLagMediaRecording]:
        ...
    def prepare_variable_photo_sequence_capture_async(type: winrt.windows.media.mediaproperties.ImageEncodingProperties) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.media.capture.core.VariablePhotoSequenceCapture]:
        ...
    def remove_effect_async(effect: winrt.windows.media.IMediaExtension) -> winrt.windows.foundation.IAsyncAction:
        ...
    def resume_record_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_encoder_property(media_stream_type: MediaStreamType, property_id: uuid.UUID, property_value: _winrt.winrt_base) -> None:
        ...
    def set_encoding_properties_async(media_stream_type: MediaStreamType, media_encoding_properties: winrt.windows.media.mediaproperties.IMediaEncodingProperties, encoder_properties: winrt.windows.media.mediaproperties.MediaPropertySet) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_preview_mirroring(value: bool) -> None:
        ...
    def set_preview_rotation(value: VideoRotation) -> None:
        ...
    def set_record_rotation(value: VideoRotation) -> None:
        ...
    def start_preview_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_preview_to_custom_sink_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, custom_media_sink: winrt.windows.media.IMediaExtension) -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_preview_to_custom_sink_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, custom_sink_activation_id: str, custom_sink_settings: winrt.windows.foundation.collections.IPropertySet) -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_record_to_custom_sink_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, custom_media_sink: winrt.windows.media.IMediaExtension) -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_record_to_custom_sink_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, custom_sink_activation_id: str, custom_sink_settings: winrt.windows.foundation.collections.IPropertySet) -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_record_to_storage_file_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...
    def start_record_to_stream_async(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile, stream: winrt.windows.storage.streams.IRandomAccessStream) -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_preview_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_record_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def stop_record_with_result_async() -> winrt.windows.foundation.IAsyncOperation[MediaCaptureStopResult]:
        ...
    def add_failed(error_event_handler: MediaCaptureFailedEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_failed(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_record_limitation_exceeded(record_limitation_exceeded_event_handler: RecordLimitationExceededEventHandler) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_record_limitation_exceeded(event_cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_focus_changed(handler: winrt.windows.foundation.TypedEventHandler[MediaCapture, MediaCaptureFocusChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_focus_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_photo_confirmation_captured(handler: winrt.windows.foundation.TypedEventHandler[MediaCapture, PhotoConfirmationCapturedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_photo_confirmation_captured(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_camera_stream_state_changed(handler: winrt.windows.foundation.TypedEventHandler[MediaCapture, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_camera_stream_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_thermal_status_changed(handler: winrt.windows.foundation.TypedEventHandler[MediaCapture, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_thermal_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_capture_device_exclusive_control_status_changed(handler: winrt.windows.foundation.TypedEventHandler[MediaCapture, MediaCaptureDeviceExclusiveControlStatusChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_capture_device_exclusive_control_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaCaptureDeviceExclusiveControlStatusChangedEventArgs(_winrt.winrt_base):
    ...
    device_id: str
    status: MediaCaptureDeviceExclusiveControlStatus

class MediaCaptureFailedEventArgs(_winrt.winrt_base):
    ...
    code: int
    message: str

class MediaCaptureFocusChangedEventArgs(_winrt.winrt_base):
    ...
    focus_state: winrt.windows.media.devices.MediaCaptureFocusState

class MediaCaptureInitializationSettings(_winrt.winrt_base):
    ...
    video_device_id: str
    streaming_capture_mode: StreamingCaptureMode
    photo_capture_source: PhotoCaptureSource
    audio_device_id: str
    media_category: MediaCategory
    audio_processing: winrt.windows.media.AudioProcessing
    video_source: winrt.windows.media.core.IMediaSource
    audio_source: winrt.windows.media.core.IMediaSource
    video_profile: MediaCaptureVideoProfile
    record_media_description: MediaCaptureVideoProfileMediaDescription
    preview_media_description: MediaCaptureVideoProfileMediaDescription
    photo_media_description: MediaCaptureVideoProfileMediaDescription
    source_group: winrt.windows.media.capture.frames.MediaFrameSourceGroup
    sharing_mode: MediaCaptureSharingMode
    memory_preference: MediaCaptureMemoryPreference
    always_play_system_shutter_sound: bool
    device_uri_password_credential: winrt.windows.security.credentials.PasswordCredential
    device_uri: winrt.windows.foundation.Uri

class MediaCapturePauseResult(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    last_frame: winrt.windows.media.VideoFrame
    record_duration: winrt.windows.foundation.TimeSpan
    def close() -> None:
        ...

class MediaCaptureRelativePanelWatcher(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    relative_panel: winrt.windows.devices.enumeration.Panel
    def close() -> None:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_changed(handler: winrt.windows.foundation.TypedEventHandler[MediaCaptureRelativePanelWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaCaptureSettings(_winrt.winrt_base):
    ...
    audio_device_id: str
    photo_capture_source: PhotoCaptureSource
    streaming_capture_mode: StreamingCaptureMode
    video_device_characteristic: VideoDeviceCharacteristic
    video_device_id: str
    audio_processing: winrt.windows.media.AudioProcessing
    camera_sound_required_for_region: bool
    concurrent_record_and_photo_sequence_supported: bool
    concurrent_record_and_photo_supported: bool
    horizontal35mm_equivalent_focal_length: typing.Optional[int]
    media_category: MediaCategory
    pitch_offset_degrees: typing.Optional[int]
    vertical35mm_equivalent_focal_length: typing.Optional[int]
    direct3_d11_device: winrt.windows.graphics.directx.direct3d11.IDirect3DDevice

class MediaCaptureStopResult(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    last_frame: winrt.windows.media.VideoFrame
    record_duration: winrt.windows.foundation.TimeSpan
    def close() -> None:
        ...

class MediaCaptureVideoProfile(_winrt.winrt_base):
    ...
    id: str
    supported_photo_media_description: winrt.windows.foundation.collections.IVectorView[MediaCaptureVideoProfileMediaDescription]
    supported_preview_media_description: winrt.windows.foundation.collections.IVectorView[MediaCaptureVideoProfileMediaDescription]
    supported_record_media_description: winrt.windows.foundation.collections.IVectorView[MediaCaptureVideoProfileMediaDescription]
    video_device_id: str
    frame_source_infos: winrt.windows.foundation.collections.IVectorView[winrt.windows.media.capture.frames.MediaFrameSourceInfo]
    properties: winrt.windows.foundation.collections.IMapView[uuid.UUID, _winrt.winrt_base]
    def get_concurrency() -> winrt.windows.foundation.collections.IVectorView[MediaCaptureVideoProfile]:
        ...

class MediaCaptureVideoProfileMediaDescription(_winrt.winrt_base):
    ...
    frame_rate: float
    height: int
    is_hdr_video_supported: bool
    is_variable_photo_sequence_supported: bool
    width: int
    properties: winrt.windows.foundation.collections.IMapView[uuid.UUID, _winrt.winrt_base]
    subtype: str

class OptionalReferencePhotoCapturedEventArgs(_winrt.winrt_base):
    ...
    context: _winrt.winrt_base
    frame: CapturedFrame

class PhotoCapturedEventArgs(_winrt.winrt_base):
    ...
    capture_time_offset: winrt.windows.foundation.TimeSpan
    frame: CapturedFrame
    thumbnail: CapturedFrame

class PhotoConfirmationCapturedEventArgs(_winrt.winrt_base):
    ...
    capture_time_offset: winrt.windows.foundation.TimeSpan
    frame: CapturedFrame

class VideoStreamConfiguration(_winrt.winrt_base):
    ...
    input_properties: winrt.windows.media.mediaproperties.VideoEncodingProperties
    output_properties: winrt.windows.media.mediaproperties.VideoEncodingProperties

MediaCaptureFailedEventHandler = typing.Callable[[MediaCapture, MediaCaptureFailedEventArgs], None]

RecordLimitationExceededEventHandler = typing.Callable[[MediaCapture], None]

