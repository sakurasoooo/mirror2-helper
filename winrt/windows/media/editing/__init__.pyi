# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.graphics.directx.direct3d11
except Exception:
    pass

try:
    import winrt.windows.graphics.imaging
except Exception:
    pass

try:
    import winrt.windows.media.core
except Exception:
    pass

try:
    import winrt.windows.media.effects
except Exception:
    pass

try:
    import winrt.windows.media.mediaproperties
except Exception:
    pass

try:
    import winrt.windows.media.transcoding
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.ui
except Exception:
    pass

class MediaTrimmingPreference(enum.IntEnum):
    FAST = 0
    PRECISE = 1

class VideoFramePrecision(enum.IntEnum):
    NEAREST_FRAME = 0
    NEAREST_KEY_FRAME = 1

class BackgroundAudioTrack(_winrt.winrt_base):
    ...
    volume: float
    trim_time_from_start: winrt.windows.foundation.TimeSpan
    trim_time_from_end: winrt.windows.foundation.TimeSpan
    delay: winrt.windows.foundation.TimeSpan
    audio_effect_definitions: winrt.windows.foundation.collections.IVector[winrt.windows.media.effects.IAudioEffectDefinition]
    original_duration: winrt.windows.foundation.TimeSpan
    trimmed_duration: winrt.windows.foundation.TimeSpan
    user_data: winrt.windows.foundation.collections.IMap[str, str]
    def clone() -> BackgroundAudioTrack:
        ...
    def create_from_embedded_audio_track(embedded_audio_track: EmbeddedAudioTrack) -> BackgroundAudioTrack:
        ...
    def create_from_file_async(file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncOperation[BackgroundAudioTrack]:
        ...
    def get_audio_encoding_properties() -> winrt.windows.media.mediaproperties.AudioEncodingProperties:
        ...

class EmbeddedAudioTrack(_winrt.winrt_base):
    ...
    def get_audio_encoding_properties() -> winrt.windows.media.mediaproperties.AudioEncodingProperties:
        ...

class MediaClip(_winrt.winrt_base):
    ...
    selected_embedded_audio_track_index: int
    trim_time_from_end: winrt.windows.foundation.TimeSpan
    volume: float
    trim_time_from_start: winrt.windows.foundation.TimeSpan
    embedded_audio_tracks: winrt.windows.foundation.collections.IVectorView[EmbeddedAudioTrack]
    end_time_in_composition: winrt.windows.foundation.TimeSpan
    original_duration: winrt.windows.foundation.TimeSpan
    start_time_in_composition: winrt.windows.foundation.TimeSpan
    trimmed_duration: winrt.windows.foundation.TimeSpan
    user_data: winrt.windows.foundation.collections.IMap[str, str]
    video_effect_definitions: winrt.windows.foundation.collections.IVector[winrt.windows.media.effects.IVideoEffectDefinition]
    audio_effect_definitions: winrt.windows.foundation.collections.IVector[winrt.windows.media.effects.IAudioEffectDefinition]
    def clone() -> MediaClip:
        ...
    def create_from_color(color: winrt.windows.ui.Color, original_duration: winrt.windows.foundation.TimeSpan) -> MediaClip:
        ...
    def create_from_file_async(file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncOperation[MediaClip]:
        ...
    def create_from_image_file_async(file: winrt.windows.storage.IStorageFile, original_duration: winrt.windows.foundation.TimeSpan) -> winrt.windows.foundation.IAsyncOperation[MediaClip]:
        ...
    def create_from_surface(surface: winrt.windows.graphics.directx.direct3d11.IDirect3DSurface, original_duration: winrt.windows.foundation.TimeSpan) -> MediaClip:
        ...
    def get_video_encoding_properties() -> winrt.windows.media.mediaproperties.VideoEncodingProperties:
        ...

class MediaComposition(_winrt.winrt_base):
    ...
    background_audio_tracks: winrt.windows.foundation.collections.IVector[BackgroundAudioTrack]
    clips: winrt.windows.foundation.collections.IVector[MediaClip]
    duration: winrt.windows.foundation.TimeSpan
    user_data: winrt.windows.foundation.collections.IMap[str, str]
    overlay_layers: winrt.windows.foundation.collections.IVector[MediaOverlayLayer]
    def clone() -> MediaComposition:
        ...
    def create_default_encoding_profile() -> winrt.windows.media.mediaproperties.MediaEncodingProfile:
        ...
    def generate_media_stream_source() -> winrt.windows.media.core.MediaStreamSource:
        ...
    def generate_media_stream_source(encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile) -> winrt.windows.media.core.MediaStreamSource:
        ...
    def generate_preview_media_stream_source(scaled_width: int, scaled_height: int) -> winrt.windows.media.core.MediaStreamSource:
        ...
    def get_thumbnail_async(time_from_start: winrt.windows.foundation.TimeSpan, scaled_width: int, scaled_height: int, frame_precision: VideoFramePrecision) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.graphics.imaging.ImageStream]:
        ...
    def get_thumbnails_async(times_from_start: typing.Iterable[winrt.windows.foundation.TimeSpan], scaled_width: int, scaled_height: int, frame_precision: VideoFramePrecision) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.imaging.ImageStream]]:
        ...
    def load_async(file: winrt.windows.storage.StorageFile) -> winrt.windows.foundation.IAsyncOperation[MediaComposition]:
        ...
    def render_to_file_async(destination: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.media.transcoding.TranscodeFailureReason, float]:
        ...
    def render_to_file_async(destination: winrt.windows.storage.IStorageFile, trimming_preference: MediaTrimmingPreference) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.media.transcoding.TranscodeFailureReason, float]:
        ...
    def render_to_file_async(destination: winrt.windows.storage.IStorageFile, trimming_preference: MediaTrimmingPreference, encoding_profile: winrt.windows.media.mediaproperties.MediaEncodingProfile) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.media.transcoding.TranscodeFailureReason, float]:
        ...
    def save_async(file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncAction:
        ...

class MediaOverlay(_winrt.winrt_base):
    ...
    position: winrt.windows.foundation.Rect
    opacity: float
    delay: winrt.windows.foundation.TimeSpan
    audio_enabled: bool
    clip: MediaClip
    def clone() -> MediaOverlay:
        ...

class MediaOverlayLayer(_winrt.winrt_base):
    ...
    custom_compositor_definition: winrt.windows.media.effects.IVideoCompositorDefinition
    overlays: winrt.windows.foundation.collections.IVector[MediaOverlay]
    def clone() -> MediaOverlayLayer:
        ...

