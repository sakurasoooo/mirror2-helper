# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.devices.enumeration
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.media.capture
except Exception:
    pass

try:
    import winrt.windows.media.devices.core
except Exception:
    pass

try:
    import winrt.windows.media.mediaproperties
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

class AdvancedPhotoMode(enum.IntEnum):
    AUTO = 0
    STANDARD = 1
    HDR = 2
    LOW_LIGHT = 3

class AudioDeviceRole(enum.IntEnum):
    DEFAULT = 0
    COMMUNICATIONS = 1

class AutoFocusRange(enum.IntEnum):
    FULL_RANGE = 0
    MACRO = 1
    NORMAL = 2

class CameraOcclusionKind(enum.IntEnum):
    LID = 0
    CAMERA_HARDWARE = 1

class CameraStreamState(enum.IntEnum):
    NOT_STREAMING = 0
    STREAMING = 1
    BLOCKED_FOR_PRIVACY = 2
    SHUTDOWN = 3

class CaptureSceneMode(enum.IntEnum):
    AUTO = 0
    MANUAL = 1
    MACRO = 2
    PORTRAIT = 3
    SPORT = 4
    SNOW = 5
    NIGHT = 6
    BEACH = 7
    SUNSET = 8
    CANDLELIGHT = 9
    LANDSCAPE = 10
    NIGHT_PORTRAIT = 11
    BACKLIT = 12

class CaptureUse(enum.IntEnum):
    NONE = 0
    PHOTO = 1
    VIDEO = 2

class ColorTemperaturePreset(enum.IntEnum):
    AUTO = 0
    MANUAL = 1
    CLOUDY = 2
    DAYLIGHT = 3
    FLASH = 4
    FLUORESCENT = 5
    TUNGSTEN = 6
    CANDLELIGHT = 7

class DigitalWindowMode(enum.IntEnum):
    OFF = 0
    ON = 1
    AUTO = 2

class FocusMode(enum.IntEnum):
    AUTO = 0
    SINGLE = 1
    CONTINUOUS = 2
    MANUAL = 3

class FocusPreset(enum.IntEnum):
    AUTO = 0
    MANUAL = 1
    AUTO_MACRO = 2
    AUTO_NORMAL = 3
    AUTO_INFINITY = 4
    AUTO_HYPERFOCAL = 5

class HdrVideoMode(enum.IntEnum):
    OFF = 0
    ON = 1
    AUTO = 2

class InfraredTorchMode(enum.IntEnum):
    OFF = 0
    ON = 1
    ALTERNATING_FRAME_ILLUMINATION = 2

class IsoSpeedPreset(enum.IntEnum):
    AUTO = 0
    ISO50 = 1
    ISO80 = 2
    ISO100 = 3
    ISO200 = 4
    ISO400 = 5
    ISO800 = 6
    ISO1600 = 7
    ISO3200 = 8
    ISO6400 = 9
    ISO12800 = 10
    ISO25600 = 11

class ManualFocusDistance(enum.IntEnum):
    INFINITY = 0
    HYPERFOCAL = 1
    NEAREST = 2

class MediaCaptureFocusState(enum.IntEnum):
    UNINITIALIZED = 0
    LOST = 1
    SEARCHING = 2
    FOCUSED = 3
    FAILED = 4

class MediaCaptureOptimization(enum.IntEnum):
    DEFAULT = 0
    QUALITY = 1
    LATENCY = 2
    POWER = 3
    LATENCY_THEN_QUALITY = 4
    LATENCY_THEN_POWER = 5
    POWER_AND_QUALITY = 6

class MediaCapturePauseBehavior(enum.IntEnum):
    RETAIN_HARDWARE_RESOURCES = 0
    RELEASE_HARDWARE_RESOURCES = 1

class OpticalImageStabilizationMode(enum.IntEnum):
    OFF = 0
    ON = 1
    AUTO = 2

class RegionOfInterestType(enum.IntEnum):
    UNKNOWN = 0
    FACE = 1

class SendCommandStatus(enum.IntEnum):
    SUCCESS = 0
    DEVICE_NOT_AVAILABLE = 1

class VideoDeviceControllerGetDevicePropertyStatus(enum.IntEnum):
    SUCCESS = 0
    UNKNOWN_FAILURE = 1
    BUFFER_TOO_SMALL = 2
    NOT_SUPPORTED = 3
    DEVICE_NOT_AVAILABLE = 4
    MAX_PROPERTY_VALUE_SIZE_TOO_SMALL = 5
    MAX_PROPERTY_VALUE_SIZE_REQUIRED = 6

class VideoDeviceControllerSetDevicePropertyStatus(enum.IntEnum):
    SUCCESS = 0
    UNKNOWN_FAILURE = 1
    NOT_SUPPORTED = 2
    INVALID_VALUE = 3
    DEVICE_NOT_AVAILABLE = 4
    NOT_IN_CONTROL = 5

class VideoTemporalDenoisingMode(enum.IntEnum):
    OFF = 0
    ON = 1
    AUTO = 2

class ZoomTransitionMode(enum.IntEnum):
    AUTO = 0
    DIRECT = 1
    SMOOTH = 2

class AdvancedPhotoCaptureSettings(_winrt.winrt_base):
    ...
    mode: AdvancedPhotoMode

class AdvancedPhotoControl(_winrt.winrt_base):
    ...
    mode: AdvancedPhotoMode
    supported: bool
    supported_modes: winrt.windows.foundation.collections.IVectorView[AdvancedPhotoMode]
    def configure(settings: AdvancedPhotoCaptureSettings) -> None:
        ...

class AudioDeviceController(IMediaDeviceController, _winrt.winrt_base):
    ...
    volume_percent: float
    muted: bool
    def get_available_media_stream_properties(media_stream_type: winrt.windows.media.capture.MediaStreamType) -> winrt.windows.foundation.collections.IVectorView[winrt.windows.media.mediaproperties.IMediaEncodingProperties]:
        ...
    def get_media_stream_properties(media_stream_type: winrt.windows.media.capture.MediaStreamType) -> winrt.windows.media.mediaproperties.IMediaEncodingProperties:
        ...
    def set_media_stream_properties_async(media_stream_type: winrt.windows.media.capture.MediaStreamType, media_encoding_properties: winrt.windows.media.mediaproperties.IMediaEncodingProperties) -> winrt.windows.foundation.IAsyncAction:
        ...

class AudioDeviceModule(_winrt.winrt_base):
    ...
    class_id: str
    display_name: str
    instance_id: int
    major_version: int
    minor_version: int
    def send_command_async(command: winrt.windows.storage.streams.IBuffer) -> winrt.windows.foundation.IAsyncOperation[ModuleCommandResult]:
        ...

class AudioDeviceModuleNotificationEventArgs(_winrt.winrt_base):
    ...
    module: AudioDeviceModule
    notification_data: winrt.windows.storage.streams.IBuffer

class AudioDeviceModulesManager(_winrt.winrt_base):
    ...
    def find_all() -> winrt.windows.foundation.collections.IVectorView[AudioDeviceModule]:
        ...
    def find_all_by_id(module_id: str) -> winrt.windows.foundation.collections.IVectorView[AudioDeviceModule]:
        ...
    def add_module_notification_received(handler: winrt.windows.foundation.TypedEventHandler[AudioDeviceModulesManager, AudioDeviceModuleNotificationEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_module_notification_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CameraOcclusionInfo(_winrt.winrt_base):
    ...
    def get_state() -> CameraOcclusionState:
        ...
    def is_occlusion_kind_supported(occlusion_kind: CameraOcclusionKind) -> bool:
        ...
    def add_state_changed(handler: winrt.windows.foundation.TypedEventHandler[CameraOcclusionInfo, CameraOcclusionStateChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class CameraOcclusionState(_winrt.winrt_base):
    ...
    is_occluded: bool
    def is_occlusion_kind(occlusion_kind: CameraOcclusionKind) -> bool:
        ...

class CameraOcclusionStateChangedEventArgs(_winrt.winrt_base):
    ...
    state: CameraOcclusionState

class DefaultAudioCaptureDeviceChangedEventArgs(IDefaultAudioDeviceChangedEventArgs, _winrt.winrt_base):
    ...
    id: str
    role: AudioDeviceRole

class DefaultAudioRenderDeviceChangedEventArgs(IDefaultAudioDeviceChangedEventArgs, _winrt.winrt_base):
    ...
    id: str
    role: AudioDeviceRole

class DigitalWindowBounds(_winrt.winrt_base):
    ...
    scale: float
    normalized_origin_top: float
    normalized_origin_left: float

class DigitalWindowCapability(_winrt.winrt_base):
    ...
    height: int
    max_scale_value: float
    min_scale_value: float
    min_scale_value_without_upsampling: float
    normalized_field_of_view_limit: winrt.windows.foundation.Rect
    width: int

class DigitalWindowControl(_winrt.winrt_base):
    ...
    current_mode: DigitalWindowMode
    is_supported: bool
    supported_capabilities: winrt.windows.foundation.collections.IVectorView[DigitalWindowCapability]
    supported_modes: DigitalWindowMode
    def configure(digital_window_mode: DigitalWindowMode) -> None:
        ...
    def configure(digital_window_mode: DigitalWindowMode, digital_window_bounds: DigitalWindowBounds) -> None:
        ...
    def get_bounds() -> DigitalWindowBounds:
        ...
    def get_capability_for_size(width: int, height: int) -> DigitalWindowCapability:
        ...

class ExposureCompensationControl(_winrt.winrt_base):
    ...
    max: float
    min: float
    step: float
    supported: bool
    value: float
    def set_value_async(value: float) -> winrt.windows.foundation.IAsyncAction:
        ...

class ExposureControl(_winrt.winrt_base):
    ...
    auto: bool
    max: winrt.windows.foundation.TimeSpan
    min: winrt.windows.foundation.TimeSpan
    step: winrt.windows.foundation.TimeSpan
    supported: bool
    value: winrt.windows.foundation.TimeSpan
    def set_auto_async(value: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_value_async(shutter_duration: winrt.windows.foundation.TimeSpan) -> winrt.windows.foundation.IAsyncAction:
        ...

class ExposurePriorityVideoControl(_winrt.winrt_base):
    ...
    enabled: bool
    supported: bool

class FlashControl(_winrt.winrt_base):
    ...
    red_eye_reduction: bool
    power_percent: float
    enabled: bool
    auto: bool
    power_supported: bool
    red_eye_reduction_supported: bool
    supported: bool
    assistant_light_enabled: bool
    assistant_light_supported: bool

class FocusControl(_winrt.winrt_base):
    ...
    max: int
    min: int
    preset: FocusPreset
    step: int
    supported: bool
    supported_presets: winrt.windows.foundation.collections.IVectorView[FocusPreset]
    value: int
    focus_changed_supported: bool
    focus_state: MediaCaptureFocusState
    mode: FocusMode
    supported_focus_distances: winrt.windows.foundation.collections.IVectorView[ManualFocusDistance]
    supported_focus_modes: winrt.windows.foundation.collections.IVectorView[FocusMode]
    supported_focus_ranges: winrt.windows.foundation.collections.IVectorView[AutoFocusRange]
    wait_for_focus_supported: bool
    def configure(settings: FocusSettings) -> None:
        ...
    def focus_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def lock_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_preset_async(preset: FocusPreset) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_preset_async(preset: FocusPreset, complete_before_focus: bool) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_value_async(focus: int) -> winrt.windows.foundation.IAsyncAction:
        ...
    def unlock_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class FocusSettings(_winrt.winrt_base):
    ...
    wait_for_focus: bool
    value: typing.Optional[int]
    mode: FocusMode
    distance: typing.Optional[ManualFocusDistance]
    disable_driver_fallback: bool
    auto_focus_range: AutoFocusRange

class HdrVideoControl(_winrt.winrt_base):
    ...
    mode: HdrVideoMode
    supported: bool
    supported_modes: winrt.windows.foundation.collections.IVectorView[HdrVideoMode]

class InfraredTorchControl(_winrt.winrt_base):
    ...
    power: int
    current_mode: InfraredTorchMode
    is_supported: bool
    max_power: int
    min_power: int
    power_step: int
    supported_modes: winrt.windows.foundation.collections.IVectorView[InfraredTorchMode]

class IsoSpeedControl(_winrt.winrt_base):
    ...
    preset: IsoSpeedPreset
    supported: bool
    supported_presets: winrt.windows.foundation.collections.IVectorView[IsoSpeedPreset]
    auto: bool
    max: int
    min: int
    step: int
    value: int
    def set_auto_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_preset_async(preset: IsoSpeedPreset) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_value_async(iso_speed: int) -> winrt.windows.foundation.IAsyncAction:
        ...

class LowLagPhotoControl(_winrt.winrt_base):
    ...
    thumbnail_format: winrt.windows.media.mediaproperties.MediaThumbnailFormat
    thumbnail_enabled: bool
    desired_thumbnail_size: int
    hardware_accelerated_thumbnail_supported: int
    def get_current_frame_rate() -> winrt.windows.media.mediaproperties.MediaRatio:
        ...
    def get_highest_concurrent_frame_rate(capture_properties: winrt.windows.media.mediaproperties.IMediaEncodingProperties) -> winrt.windows.media.mediaproperties.MediaRatio:
        ...

class LowLagPhotoSequenceControl(_winrt.winrt_base):
    ...
    thumbnail_format: winrt.windows.media.mediaproperties.MediaThumbnailFormat
    thumbnail_enabled: bool
    photos_per_second_limit: float
    past_photo_limit: int
    desired_thumbnail_size: int
    hardware_accelerated_thumbnail_supported: int
    max_past_photos: int
    max_photos_per_second: float
    supported: bool
    def get_current_frame_rate() -> winrt.windows.media.mediaproperties.MediaRatio:
        ...
    def get_highest_concurrent_frame_rate(capture_properties: winrt.windows.media.mediaproperties.IMediaEncodingProperties) -> winrt.windows.media.mediaproperties.MediaRatio:
        ...

class MediaDevice(_winrt.winrt_base):
    ...
    def get_audio_capture_selector() -> str:
        ...
    def get_audio_render_selector() -> str:
        ...
    def get_default_audio_capture_id(role: AudioDeviceRole) -> str:
        ...
    def get_default_audio_render_id(role: AudioDeviceRole) -> str:
        ...
    def get_video_capture_selector() -> str:
        ...
    def add_default_audio_capture_device_changed(handler: winrt.windows.foundation.TypedEventHandler[_winrt.winrt_base, DefaultAudioCaptureDeviceChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_default_audio_capture_device_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_default_audio_render_device_changed(handler: winrt.windows.foundation.TypedEventHandler[_winrt.winrt_base, DefaultAudioRenderDeviceChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_default_audio_render_device_changed(cookie: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaDeviceControl(_winrt.winrt_base):
    ...
    capabilities: MediaDeviceControlCapabilities
    def try_get_auto() -> typing.Tuple[bool, bool]:
        ...
    def try_get_value() -> typing.Tuple[bool, float]:
        ...
    def try_set_auto(value: bool) -> bool:
        ...
    def try_set_value(value: float) -> bool:
        ...

class MediaDeviceControlCapabilities(_winrt.winrt_base):
    ...
    auto_mode_supported: bool
    default: float
    max: float
    min: float
    step: float
    supported: bool

class ModuleCommandResult(_winrt.winrt_base):
    ...
    result: winrt.windows.storage.streams.IBuffer
    status: SendCommandStatus

class OpticalImageStabilizationControl(_winrt.winrt_base):
    ...
    mode: OpticalImageStabilizationMode
    supported: bool
    supported_modes: winrt.windows.foundation.collections.IVectorView[OpticalImageStabilizationMode]

class PanelBasedOptimizationControl(_winrt.winrt_base):
    ...
    panel: winrt.windows.devices.enumeration.Panel
    is_supported: bool

class PhotoConfirmationControl(_winrt.winrt_base):
    ...
    pixel_format: winrt.windows.media.mediaproperties.MediaPixelFormat
    enabled: bool
    supported: bool

class RegionOfInterest(_winrt.winrt_base):
    ...
    bounds: winrt.windows.foundation.Rect
    auto_white_balance_enabled: bool
    auto_focus_enabled: bool
    auto_exposure_enabled: bool
    weight: int
    type: RegionOfInterestType
    bounds_normalized: bool

class RegionsOfInterestControl(_winrt.winrt_base):
    ...
    auto_exposure_supported: bool
    auto_focus_supported: bool
    auto_white_balance_supported: bool
    max_regions: int
    def clear_regions_async() -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_regions_async(regions: typing.Iterable[RegionOfInterest]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_regions_async(regions: typing.Iterable[RegionOfInterest], lock_values: bool) -> winrt.windows.foundation.IAsyncAction:
        ...

class SceneModeControl(_winrt.winrt_base):
    ...
    supported_modes: winrt.windows.foundation.collections.IVectorView[CaptureSceneMode]
    value: CaptureSceneMode
    def set_value_async(scene_mode: CaptureSceneMode) -> winrt.windows.foundation.IAsyncAction:
        ...

class TorchControl(_winrt.winrt_base):
    ...
    power_percent: float
    enabled: bool
    power_supported: bool
    supported: bool

class VideoDeviceController(IMediaDeviceController, _winrt.winrt_base):
    ...
    camera_occlusion_info: CameraOcclusionInfo
    primary_use: CaptureUse
    focus_control: FocusControl
    iso_speed_control: IsoSpeedControl
    low_lag_photo: LowLagPhotoControl
    white_balance_control: WhiteBalanceControl
    torch_control: TorchControl
    scene_mode_control: SceneModeControl
    regions_of_interest_control: RegionsOfInterestControl
    flash_control: FlashControl
    low_lag_photo_sequence: LowLagPhotoSequenceControl
    exposure_compensation_control: ExposureCompensationControl
    exposure_control: ExposureControl
    zoom_control: ZoomControl
    photo_confirmation_control: PhotoConfirmationControl
    variable_photo_sequence_controller: winrt.windows.media.devices.core.VariablePhotoSequenceController
    desired_optimization: MediaCaptureOptimization
    advanced_photo_control: AdvancedPhotoControl
    exposure_priority_video_control: ExposurePriorityVideoControl
    hdr_video_control: HdrVideoControl
    optical_image_stabilization_control: OpticalImageStabilizationControl
    id: str
    video_temporal_denoising_control: VideoTemporalDenoisingControl
    infrared_torch_control: InfraredTorchControl
    panel_based_optimization_control: PanelBasedOptimizationControl
    digital_window_control: DigitalWindowControl
    hue: MediaDeviceControl
    zoom: MediaDeviceControl
    contrast: MediaDeviceControl
    white_balance: MediaDeviceControl
    backlight_compensation: MediaDeviceControl
    brightness: MediaDeviceControl
    exposure: MediaDeviceControl
    tilt: MediaDeviceControl
    roll: MediaDeviceControl
    pan: MediaDeviceControl
    focus: MediaDeviceControl
    def get_available_media_stream_properties(media_stream_type: winrt.windows.media.capture.MediaStreamType) -> winrt.windows.foundation.collections.IVectorView[winrt.windows.media.mediaproperties.IMediaEncodingProperties]:
        ...
    def get_device_property(property_id: str) -> _winrt.winrt_base:
        ...
    def get_device_property_by_extended_id(extended_property_id: typing.Sequence[int], max_property_value_size: typing.Optional[int]) -> VideoDeviceControllerGetDevicePropertyResult:
        ...
    def get_device_property_by_id(property_id: str, max_property_value_size: typing.Optional[int]) -> VideoDeviceControllerGetDevicePropertyResult:
        ...
    def get_media_stream_properties(media_stream_type: winrt.windows.media.capture.MediaStreamType) -> winrt.windows.media.mediaproperties.IMediaEncodingProperties:
        ...
    def set_device_property(property_id: str, property_value: _winrt.winrt_base) -> None:
        ...
    def set_device_property_by_extended_id(extended_property_id: typing.Sequence[int], property_value: typing.Sequence[int]) -> VideoDeviceControllerSetDevicePropertyStatus:
        ...
    def set_device_property_by_id(property_id: str, property_value: _winrt.winrt_base) -> VideoDeviceControllerSetDevicePropertyStatus:
        ...
    def set_media_stream_properties_async(media_stream_type: winrt.windows.media.capture.MediaStreamType, media_encoding_properties: winrt.windows.media.mediaproperties.IMediaEncodingProperties) -> winrt.windows.foundation.IAsyncAction:
        ...
    def try_get_powerline_frequency() -> typing.Tuple[bool, winrt.windows.media.capture.PowerlineFrequency]:
        ...
    def try_set_powerline_frequency(value: winrt.windows.media.capture.PowerlineFrequency) -> bool:
        ...

class VideoDeviceControllerGetDevicePropertyResult(_winrt.winrt_base):
    ...
    status: VideoDeviceControllerGetDevicePropertyStatus
    value: _winrt.winrt_base

class VideoTemporalDenoisingControl(_winrt.winrt_base):
    ...
    mode: VideoTemporalDenoisingMode
    supported: bool
    supported_modes: winrt.windows.foundation.collections.IVectorView[VideoTemporalDenoisingMode]

class WhiteBalanceControl(_winrt.winrt_base):
    ...
    max: int
    min: int
    preset: ColorTemperaturePreset
    step: int
    supported: bool
    value: int
    def set_preset_async(preset: ColorTemperaturePreset) -> winrt.windows.foundation.IAsyncAction:
        ...
    def set_value_async(temperature: int) -> winrt.windows.foundation.IAsyncAction:
        ...

class ZoomControl(_winrt.winrt_base):
    ...
    value: float
    max: float
    min: float
    step: float
    supported: bool
    mode: ZoomTransitionMode
    supported_modes: winrt.windows.foundation.collections.IVectorView[ZoomTransitionMode]
    def configure(settings: ZoomSettings) -> None:
        ...

class ZoomSettings(_winrt.winrt_base):
    ...
    value: float
    mode: ZoomTransitionMode

class IDefaultAudioDeviceChangedEventArgs(_winrt.winrt_base):
    ...
    id: str
    role: AudioDeviceRole

class IMediaDeviceController(_winrt.winrt_base):
    ...
    def get_available_media_stream_properties(media_stream_type: winrt.windows.media.capture.MediaStreamType) -> winrt.windows.foundation.collections.IVectorView[winrt.windows.media.mediaproperties.IMediaEncodingProperties]:
        ...
    def get_media_stream_properties(media_stream_type: winrt.windows.media.capture.MediaStreamType) -> winrt.windows.media.mediaproperties.IMediaEncodingProperties:
        ...
    def set_media_stream_properties_async(media_stream_type: winrt.windows.media.capture.MediaStreamType, media_encoding_properties: winrt.windows.media.mediaproperties.IMediaEncodingProperties) -> winrt.windows.foundation.IAsyncAction:
        ...

