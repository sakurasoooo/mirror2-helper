# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.storage
except Exception:
    pass

try:
    import winrt.windows.storage.search
except Exception:
    pass

try:
    import winrt.windows.storage.streams
except Exception:
    pass

try:
    import winrt.windows.system.diagnostics
except Exception:
    pass

try:
    import winrt.windows.system.remotesystems
except Exception:
    pass

try:
    import winrt.windows.ui.popups
except Exception:
    pass

try:
    import winrt.windows.ui.viewmanagement
except Exception:
    pass

class AppDiagnosticInfoWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class AppMemoryUsageLevel(enum.IntEnum):
    LOW = 0
    MEDIUM = 1
    HIGH = 2
    OVER_LIMIT = 3

class AppResourceGroupEnergyQuotaState(enum.IntEnum):
    UNKNOWN = 0
    OVER = 1
    UNDER = 2

class AppResourceGroupExecutionState(enum.IntEnum):
    UNKNOWN = 0
    RUNNING = 1
    SUSPENDING = 2
    SUSPENDED = 3
    NOT_RUNNING = 4

class AppResourceGroupInfoWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class AutoUpdateTimeZoneStatus(enum.IntEnum):
    ATTEMPTED = 0
    TIMED_OUT = 1
    FAILED = 2

class DiagnosticAccessStatus(enum.IntEnum):
    UNSPECIFIED = 0
    DENIED = 1
    LIMITED = 2
    ALLOWED = 3

class DispatcherQueuePriority(enum.IntEnum):
    LOW = -10
    NORMAL = 0
    HIGH = 10

class LaunchFileStatus(enum.IntEnum):
    SUCCESS = 0
    APP_UNAVAILABLE = 1
    DENIED_BY_POLICY = 2
    FILE_TYPE_NOT_SUPPORTED = 3
    UNKNOWN = 4

class LaunchQuerySupportStatus(enum.IntEnum):
    AVAILABLE = 0
    APP_NOT_INSTALLED = 1
    APP_UNAVAILABLE = 2
    NOT_SUPPORTED = 3
    UNKNOWN = 4

class LaunchQuerySupportType(enum.IntEnum):
    URI = 0
    URI_FOR_RESULTS = 1

class LaunchUriStatus(enum.IntEnum):
    SUCCESS = 0
    APP_UNAVAILABLE = 1
    PROTOCOL_UNAVAILABLE = 2
    UNKNOWN = 3

class PowerState(enum.IntEnum):
    CONNECTED_STANDBY = 0
    SLEEP_S3 = 1

class ProcessorArchitecture(enum.IntEnum):
    X86 = 0
    ARM = 5
    X64 = 9
    NEUTRAL = 11
    ARM64 = 12
    X86_ON_ARM64 = 14
    UNKNOWN = 65535

class RemoteLaunchUriStatus(enum.IntEnum):
    UNKNOWN = 0
    SUCCESS = 1
    APP_UNAVAILABLE = 2
    PROTOCOL_UNAVAILABLE = 3
    REMOTE_SYSTEM_UNAVAILABLE = 4
    VALUE_SET_TOO_LARGE = 5
    DENIED_BY_LOCAL_SYSTEM = 6
    DENIED_BY_REMOTE_SYSTEM = 7

class ShutdownKind(enum.IntEnum):
    SHUTDOWN = 0
    RESTART = 1

class UserAgeConsentGroup(enum.IntEnum):
    CHILD = 0
    MINOR = 1
    ADULT = 2

class UserAgeConsentResult(enum.IntEnum):
    NOT_ENFORCED = 0
    INCLUDED = 1
    NOT_INCLUDED = 2
    UNKNOWN = 3
    AMBIGUOUS = 4

class UserAuthenticationStatus(enum.IntEnum):
    UNAUTHENTICATED = 0
    LOCALLY_AUTHENTICATED = 1
    REMOTELY_AUTHENTICATED = 2

class UserPictureSize(enum.IntEnum):
    SIZE64X64 = 0
    SIZE208X208 = 1
    SIZE424X424 = 2
    SIZE1080X1080 = 3

class UserType(enum.IntEnum):
    LOCAL_USER = 0
    REMOTE_USER = 1
    LOCAL_GUEST = 2
    REMOTE_GUEST = 3
    SYSTEM_MANAGED = 4

class UserWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class UserWatcherUpdateKind(enum.IntEnum):
    PROPERTIES = 0
    PICTURE = 1

class VirtualKey(enum.IntEnum):
    NONE = 0
    LEFT_BUTTON = 1
    RIGHT_BUTTON = 2
    CANCEL = 3
    MIDDLE_BUTTON = 4
    X_BUTTON1 = 5
    X_BUTTON2 = 6
    BACK = 8
    TAB = 9
    CLEAR = 12
    ENTER = 13
    SHIFT = 16
    CONTROL = 17
    MENU = 18
    PAUSE = 19
    CAPITAL_LOCK = 20
    KANA = 21
    HANGUL = 21
    IME_ON = 22
    JUNJA = 23
    FINAL = 24
    HANJA = 25
    KANJI = 25
    IME_OFF = 26
    ESCAPE = 27
    CONVERT = 28
    NON_CONVERT = 29
    ACCEPT = 30
    MODE_CHANGE = 31
    SPACE = 32
    PAGE_UP = 33
    PAGE_DOWN = 34
    END = 35
    HOME = 36
    LEFT = 37
    UP = 38
    RIGHT = 39
    DOWN = 40
    SELECT = 41
    PRINT = 42
    EXECUTE = 43
    SNAPSHOT = 44
    INSERT = 45
    DELETE = 46
    HELP = 47
    NUMBER0 = 48
    NUMBER1 = 49
    NUMBER2 = 50
    NUMBER3 = 51
    NUMBER4 = 52
    NUMBER5 = 53
    NUMBER6 = 54
    NUMBER7 = 55
    NUMBER8 = 56
    NUMBER9 = 57
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    LEFT_WINDOWS = 91
    RIGHT_WINDOWS = 92
    APPLICATION = 93
    SLEEP = 95
    NUMBER_PAD0 = 96
    NUMBER_PAD1 = 97
    NUMBER_PAD2 = 98
    NUMBER_PAD3 = 99
    NUMBER_PAD4 = 100
    NUMBER_PAD5 = 101
    NUMBER_PAD6 = 102
    NUMBER_PAD7 = 103
    NUMBER_PAD8 = 104
    NUMBER_PAD9 = 105
    MULTIPLY = 106
    ADD = 107
    SEPARATOR = 108
    SUBTRACT = 109
    DECIMAL = 110
    DIVIDE = 111
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    F13 = 124
    F14 = 125
    F15 = 126
    F16 = 127
    F17 = 128
    F18 = 129
    F19 = 130
    F20 = 131
    F21 = 132
    F22 = 133
    F23 = 134
    F24 = 135
    NAVIGATION_VIEW = 136
    NAVIGATION_MENU = 137
    NAVIGATION_UP = 138
    NAVIGATION_DOWN = 139
    NAVIGATION_LEFT = 140
    NAVIGATION_RIGHT = 141
    NAVIGATION_ACCEPT = 142
    NAVIGATION_CANCEL = 143
    NUMBER_KEY_LOCK = 144
    SCROLL = 145
    LEFT_SHIFT = 160
    RIGHT_SHIFT = 161
    LEFT_CONTROL = 162
    RIGHT_CONTROL = 163
    LEFT_MENU = 164
    RIGHT_MENU = 165
    GO_BACK = 166
    GO_FORWARD = 167
    REFRESH = 168
    STOP = 169
    SEARCH = 170
    FAVORITES = 171
    GO_HOME = 172
    GAMEPAD_A = 195
    GAMEPAD_B = 196
    GAMEPAD_X = 197
    GAMEPAD_Y = 198
    GAMEPAD_RIGHT_SHOULDER = 199
    GAMEPAD_LEFT_SHOULDER = 200
    GAMEPAD_LEFT_TRIGGER = 201
    GAMEPAD_RIGHT_TRIGGER = 202
    GAMEPAD_D_PAD_UP = 203
    GAMEPAD_D_PAD_DOWN = 204
    GAMEPAD_D_PAD_LEFT = 205
    GAMEPAD_D_PAD_RIGHT = 206
    GAMEPAD_MENU = 207
    GAMEPAD_VIEW = 208
    GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209
    GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210
    GAMEPAD_LEFT_THUMBSTICK_UP = 211
    GAMEPAD_LEFT_THUMBSTICK_DOWN = 212
    GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213
    GAMEPAD_LEFT_THUMBSTICK_LEFT = 214
    GAMEPAD_RIGHT_THUMBSTICK_UP = 215
    GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216
    GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217
    GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218

class VirtualKeyModifiers(enum.IntFlag):
    NONE = 0
    CONTROL = 0x1
    MENU = 0x2
    SHIFT = 0x4
    WINDOWS = 0x8

class AppActivationResult(_winrt.winrt_base):
    ...
    app_resource_group_info: AppResourceGroupInfo
    extended_error: winrt.windows.foundation.HResult

class AppDiagnosticInfo(_winrt.winrt_base):
    ...
    app_info: winrt.windows.applicationmodel.AppInfo
    def create_resource_group_watcher() -> AppResourceGroupInfoWatcher:
        ...
    def create_watcher() -> AppDiagnosticInfoWatcher:
        ...
    def get_resource_groups() -> winrt.windows.foundation.collections.IVector[AppResourceGroupInfo]:
        ...
    def launch_async() -> winrt.windows.foundation.IAsyncOperation[AppActivationResult]:
        ...
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[DiagnosticAccessStatus]:
        ...
    def request_info_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[AppDiagnosticInfo]]:
        ...
    def request_info_for_app_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[AppDiagnosticInfo]]:
        ...
    def request_info_for_app_async(app_user_model_id: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[AppDiagnosticInfo]]:
        ...
    def request_info_for_package_async(package_family_name: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[AppDiagnosticInfo]]:
        ...

class AppDiagnosticInfoWatcher(_winrt.winrt_base):
    ...
    status: AppDiagnosticInfoWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[AppDiagnosticInfoWatcher, AppDiagnosticInfoWatcherEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[AppDiagnosticInfoWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[AppDiagnosticInfoWatcher, AppDiagnosticInfoWatcherEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winrt.windows.foundation.TypedEventHandler[AppDiagnosticInfoWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class AppDiagnosticInfoWatcherEventArgs(_winrt.winrt_base):
    ...
    app_diagnostic_info: AppDiagnosticInfo

class AppExecutionStateChangeResult(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult

class AppMemoryReport(_winrt.winrt_base):
    ...
    peak_private_commit_usage: int
    private_commit_usage: int
    total_commit_limit: int
    total_commit_usage: int
    expected_total_commit_limit: int

class AppMemoryUsageLimitChangingEventArgs(_winrt.winrt_base):
    ...
    new_limit: int
    old_limit: int

class AppResourceGroupBackgroundTaskReport(_winrt.winrt_base):
    ...
    entry_point: str
    name: str
    task_id: uuid.UUID
    trigger: str

class AppResourceGroupInfo(_winrt.winrt_base):
    ...
    instance_id: uuid.UUID
    is_shared: bool
    def get_background_task_reports() -> winrt.windows.foundation.collections.IVector[AppResourceGroupBackgroundTaskReport]:
        ...
    def get_memory_report() -> AppResourceGroupMemoryReport:
        ...
    def get_process_diagnostic_infos() -> winrt.windows.foundation.collections.IVector[winrt.windows.system.diagnostics.ProcessDiagnosticInfo]:
        ...
    def get_state_report() -> AppResourceGroupStateReport:
        ...
    def start_resume_async() -> winrt.windows.foundation.IAsyncOperation[AppExecutionStateChangeResult]:
        ...
    def start_suspend_async() -> winrt.windows.foundation.IAsyncOperation[AppExecutionStateChangeResult]:
        ...
    def start_terminate_async() -> winrt.windows.foundation.IAsyncOperation[AppExecutionStateChangeResult]:
        ...

class AppResourceGroupInfoWatcher(_winrt.winrt_base):
    ...
    status: AppResourceGroupInfoWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[AppResourceGroupInfoWatcher, AppResourceGroupInfoWatcherEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[AppResourceGroupInfoWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_execution_state_changed(handler: winrt.windows.foundation.TypedEventHandler[AppResourceGroupInfoWatcher, AppResourceGroupInfoWatcherExecutionStateChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_execution_state_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[AppResourceGroupInfoWatcher, AppResourceGroupInfoWatcherEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winrt.windows.foundation.TypedEventHandler[AppResourceGroupInfoWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class AppResourceGroupInfoWatcherEventArgs(_winrt.winrt_base):
    ...
    app_diagnostic_infos: winrt.windows.foundation.collections.IVectorView[AppDiagnosticInfo]
    app_resource_group_info: AppResourceGroupInfo

class AppResourceGroupInfoWatcherExecutionStateChangedEventArgs(_winrt.winrt_base):
    ...
    app_diagnostic_infos: winrt.windows.foundation.collections.IVectorView[AppDiagnosticInfo]
    app_resource_group_info: AppResourceGroupInfo

class AppResourceGroupMemoryReport(_winrt.winrt_base):
    ...
    commit_usage_level: AppMemoryUsageLevel
    commit_usage_limit: int
    private_commit_usage: int
    total_commit_usage: int

class AppResourceGroupStateReport(_winrt.winrt_base):
    ...
    energy_quota_state: AppResourceGroupEnergyQuotaState
    execution_state: AppResourceGroupExecutionState

class AppUriHandlerHost(_winrt.winrt_base):
    ...
    name: str
    is_enabled: bool

class AppUriHandlerRegistration(_winrt.winrt_base):
    ...
    name: str
    user: User
    package_family_name: str
    def get_all_hosts() -> winrt.windows.foundation.collections.IVector[AppUriHandlerHost]:
        ...
    def get_app_added_hosts_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[AppUriHandlerHost]]:
        ...
    def set_app_added_hosts_async(hosts: typing.Iterable[AppUriHandlerHost]) -> winrt.windows.foundation.IAsyncAction:
        ...
    def update_hosts(hosts: typing.Iterable[AppUriHandlerHost]) -> None:
        ...

class AppUriHandlerRegistrationManager(_winrt.winrt_base):
    ...
    user: User
    package_family_name: str
    def get_default() -> AppUriHandlerRegistrationManager:
        ...
    def get_for_package(package_family_name: str) -> AppUriHandlerRegistrationManager:
        ...
    def get_for_package_for_user(package_family_name: str, user: User) -> AppUriHandlerRegistrationManager:
        ...
    def get_for_user(user: User) -> AppUriHandlerRegistrationManager:
        ...
    def try_get_registration(name: str) -> AppUriHandlerRegistration:
        ...

class DateTimeSettings(_winrt.winrt_base):
    ...
    def set_system_date_time(utc_date_time: winrt.windows.foundation.DateTime) -> None:
        ...

class DispatcherQueue(_winrt.winrt_base):
    ...
    has_thread_access: bool
    def create_timer() -> DispatcherQueueTimer:
        ...
    def get_for_current_thread() -> DispatcherQueue:
        ...
    def try_enqueue(callback: DispatcherQueueHandler) -> bool:
        ...
    def try_enqueue(priority: DispatcherQueuePriority, callback: DispatcherQueueHandler) -> bool:
        ...
    def add_shutdown_completed(handler: winrt.windows.foundation.TypedEventHandler[DispatcherQueue, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_shutdown_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_shutdown_starting(handler: winrt.windows.foundation.TypedEventHandler[DispatcherQueue, DispatcherQueueShutdownStartingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_shutdown_starting(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class DispatcherQueueController(_winrt.winrt_base):
    ...
    dispatcher_queue: DispatcherQueue
    def create_on_dedicated_thread() -> DispatcherQueueController:
        ...
    def shutdown_queue_async() -> winrt.windows.foundation.IAsyncAction:
        ...

class DispatcherQueueShutdownStartingEventArgs(_winrt.winrt_base):
    ...
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class DispatcherQueueTimer(_winrt.winrt_base):
    ...
    is_repeating: bool
    interval: winrt.windows.foundation.TimeSpan
    is_running: bool
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_tick(handler: winrt.windows.foundation.TypedEventHandler[DispatcherQueueTimer, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_tick(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class FolderLauncherOptions(ILauncherViewOptions, _winrt.winrt_base):
    ...
    items_to_select: winrt.windows.foundation.collections.IVector[winrt.windows.storage.IStorageItem]
    desired_remaining_view: winrt.windows.ui.viewmanagement.ViewSizePreference

class KnownUserProperties(_winrt.winrt_base):
    ...
    account_name: str
    display_name: str
    domain_name: str
    first_name: str
    guest_host: str
    last_name: str
    principal_name: str
    provider_name: str
    session_initiation_protocol_uri: str
    age_enforcement_region: str

class LaunchUriResult(_winrt.winrt_base):
    ...
    result: winrt.windows.foundation.collections.ValueSet
    status: LaunchUriStatus

class Launcher(_winrt.winrt_base):
    ...
    def find_app_uri_handlers_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.AppInfo]]:
        ...
    def find_file_handlers_async(extension: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.AppInfo]]:
        ...
    def find_uri_scheme_handlers_async(scheme: str) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.AppInfo]]:
        ...
    def find_uri_scheme_handlers_async(scheme: str, launch_query_support_type: LaunchQuerySupportType) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.AppInfo]]:
        ...
    def launch_file_async(file: winrt.windows.storage.IStorageFile) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_file_async(file: winrt.windows.storage.IStorageFile, options: LauncherOptions) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_folder_async(folder: winrt.windows.storage.IStorageFolder) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_folder_async(folder: winrt.windows.storage.IStorageFolder, options: FolderLauncherOptions) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_folder_path_async(path: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_folder_path_async(path: str, options: FolderLauncherOptions) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_folder_path_for_user_async(user: User, path: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_folder_path_for_user_async(user: User, path: str, options: FolderLauncherOptions) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_uri_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_uri_async(uri: winrt.windows.foundation.Uri, options: LauncherOptions) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_uri_async(uri: winrt.windows.foundation.Uri, options: LauncherOptions, input_data: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def launch_uri_for_results_async(uri: winrt.windows.foundation.Uri, options: LauncherOptions) -> winrt.windows.foundation.IAsyncOperation[LaunchUriResult]:
        ...
    def launch_uri_for_results_async(uri: winrt.windows.foundation.Uri, options: LauncherOptions, input_data: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[LaunchUriResult]:
        ...
    def launch_uri_for_results_for_user_async(user: User, uri: winrt.windows.foundation.Uri, options: LauncherOptions) -> winrt.windows.foundation.IAsyncOperation[LaunchUriResult]:
        ...
    def launch_uri_for_results_for_user_async(user: User, uri: winrt.windows.foundation.Uri, options: LauncherOptions, input_data: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[LaunchUriResult]:
        ...
    def launch_uri_for_user_async(user: User, uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncOperation[LaunchUriStatus]:
        ...
    def launch_uri_for_user_async(user: User, uri: winrt.windows.foundation.Uri, options: LauncherOptions) -> winrt.windows.foundation.IAsyncOperation[LaunchUriStatus]:
        ...
    def launch_uri_for_user_async(user: User, uri: winrt.windows.foundation.Uri, options: LauncherOptions, input_data: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[LaunchUriStatus]:
        ...
    def query_app_uri_support_async(uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncOperation[LaunchQuerySupportStatus]:
        ...
    def query_app_uri_support_async(uri: winrt.windows.foundation.Uri, package_family_name: str) -> winrt.windows.foundation.IAsyncOperation[LaunchQuerySupportStatus]:
        ...
    def query_file_support_async(file: winrt.windows.storage.StorageFile) -> winrt.windows.foundation.IAsyncOperation[LaunchQuerySupportStatus]:
        ...
    def query_file_support_async(file: winrt.windows.storage.StorageFile, package_family_name: str) -> winrt.windows.foundation.IAsyncOperation[LaunchQuerySupportStatus]:
        ...
    def query_uri_support_async(uri: winrt.windows.foundation.Uri, launch_query_support_type: LaunchQuerySupportType) -> winrt.windows.foundation.IAsyncOperation[LaunchQuerySupportStatus]:
        ...
    def query_uri_support_async(uri: winrt.windows.foundation.Uri, launch_query_support_type: LaunchQuerySupportType, package_family_name: str) -> winrt.windows.foundation.IAsyncOperation[LaunchQuerySupportStatus]:
        ...

class LauncherOptions(ILauncherViewOptions, _winrt.winrt_base):
    ...
    treat_as_untrusted: bool
    preferred_application_package_family_name: str
    preferred_application_display_name: str
    fallback_uri: winrt.windows.foundation.Uri
    display_application_picker: bool
    content_type: str
    u_i: LauncherUIOptions
    target_application_package_family_name: str
    neighboring_files_query: winrt.windows.storage.search.StorageFileQueryResult
    ignore_app_uri_handlers: bool
    limit_picker_to_current_app_and_app_uri_handlers: bool
    desired_remaining_view: winrt.windows.ui.viewmanagement.ViewSizePreference

class LauncherUIOptions(_winrt.winrt_base):
    ...
    selection_rect: typing.Optional[winrt.windows.foundation.Rect]
    preferred_placement: winrt.windows.ui.popups.Placement
    invocation_point: typing.Optional[winrt.windows.foundation.Point]

class MemoryManager(_winrt.winrt_base):
    ...
    app_memory_usage: int
    app_memory_usage_level: AppMemoryUsageLevel
    app_memory_usage_limit: int
    expected_app_memory_usage_limit: int
    def get_app_memory_report() -> AppMemoryReport:
        ...
    def get_process_memory_report() -> ProcessMemoryReport:
        ...
    def try_set_app_memory_usage_limit(value: int) -> bool:
        ...
    def add_app_memory_usage_decreased(handler: winrt.windows.foundation.EventHandler[_winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_app_memory_usage_decreased(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_app_memory_usage_increased(handler: winrt.windows.foundation.EventHandler[_winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_app_memory_usage_increased(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_app_memory_usage_limit_changing(handler: winrt.windows.foundation.EventHandler[AppMemoryUsageLimitChangingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_app_memory_usage_limit_changing(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ProcessLauncher(_winrt.winrt_base):
    ...
    def run_to_completion_async(file_name: str, args: str) -> winrt.windows.foundation.IAsyncOperation[ProcessLauncherResult]:
        ...
    def run_to_completion_async(file_name: str, args: str, options: ProcessLauncherOptions) -> winrt.windows.foundation.IAsyncOperation[ProcessLauncherResult]:
        ...

class ProcessLauncherOptions(_winrt.winrt_base):
    ...
    working_directory: str
    standard_output: winrt.windows.storage.streams.IOutputStream
    standard_input: winrt.windows.storage.streams.IInputStream
    standard_error: winrt.windows.storage.streams.IOutputStream

class ProcessLauncherResult(_winrt.winrt_base):
    ...
    exit_code: int

class ProcessMemoryReport(_winrt.winrt_base):
    ...
    private_working_set_usage: int
    total_working_set_usage: int

class ProtocolForResultsOperation(_winrt.winrt_base):
    ...
    def report_completed(data: winrt.windows.foundation.collections.ValueSet) -> None:
        ...

class RemoteLauncher(_winrt.winrt_base):
    ...
    def launch_uri_async(remote_system_connection_request: winrt.windows.system.remotesystems.RemoteSystemConnectionRequest, uri: winrt.windows.foundation.Uri) -> winrt.windows.foundation.IAsyncOperation[RemoteLaunchUriStatus]:
        ...
    def launch_uri_async(remote_system_connection_request: winrt.windows.system.remotesystems.RemoteSystemConnectionRequest, uri: winrt.windows.foundation.Uri, options: RemoteLauncherOptions) -> winrt.windows.foundation.IAsyncOperation[RemoteLaunchUriStatus]:
        ...
    def launch_uri_async(remote_system_connection_request: winrt.windows.system.remotesystems.RemoteSystemConnectionRequest, uri: winrt.windows.foundation.Uri, options: RemoteLauncherOptions, input_data: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[RemoteLaunchUriStatus]:
        ...

class RemoteLauncherOptions(_winrt.winrt_base):
    ...
    fallback_uri: winrt.windows.foundation.Uri
    preferred_app_ids: winrt.windows.foundation.collections.IVector[str]

class ShutdownManager(_winrt.winrt_base):
    ...
    def begin_shutdown(shutdown_kind: ShutdownKind, timeout: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def cancel_shutdown() -> None:
        ...
    def enter_power_state(power_state: PowerState) -> None:
        ...
    def enter_power_state(power_state: PowerState, wake_up_after: winrt.windows.foundation.TimeSpan) -> None:
        ...
    def is_power_state_supported(power_state: PowerState) -> bool:
        ...

class TimeZoneSettings(_winrt.winrt_base):
    ...
    can_change_time_zone: bool
    current_time_zone_display_name: str
    supported_time_zone_display_names: winrt.windows.foundation.collections.IVectorView[str]
    def auto_update_time_zone_async(timeout: winrt.windows.foundation.TimeSpan) -> winrt.windows.foundation.IAsyncOperation[AutoUpdateTimeZoneStatus]:
        ...
    def change_time_zone_by_display_name(time_zone_display_name: str) -> None:
        ...

class User(_winrt.winrt_base):
    ...
    authentication_status: UserAuthenticationStatus
    non_roamable_id: str
    type: UserType
    def check_user_age_consent_group_async(consent_group: UserAgeConsentGroup) -> winrt.windows.foundation.IAsyncOperation[UserAgeConsentResult]:
        ...
    def create_watcher() -> UserWatcher:
        ...
    def find_all_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[User]]:
        ...
    def find_all_async(type: UserType) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[User]]:
        ...
    def find_all_async(type: UserType, status: UserAuthenticationStatus) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[User]]:
        ...
    def get_default() -> User:
        ...
    def get_from_id(non_roamable_id: str) -> User:
        ...
    def get_picture_async(desired_size: UserPictureSize) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStreamReference]:
        ...
    def get_properties_async(values: winrt.windows.foundation.collections.IVectorView[str]) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IPropertySet]:
        ...
    def get_property_async(value: str) -> winrt.windows.foundation.IAsyncOperation[_winrt.winrt_base]:
        ...

class UserAuthenticationStatusChangeDeferral(_winrt.winrt_base):
    ...
    def complete() -> None:
        ...

class UserAuthenticationStatusChangingEventArgs(_winrt.winrt_base):
    ...
    current_status: UserAuthenticationStatus
    new_status: UserAuthenticationStatus
    user: User
    def get_deferral() -> UserAuthenticationStatusChangeDeferral:
        ...

class UserChangedEventArgs(_winrt.winrt_base):
    ...
    user: User
    changed_property_kinds: winrt.windows.foundation.collections.IVectorView[UserWatcherUpdateKind]

class UserDeviceAssociation(_winrt.winrt_base):
    ...
    def find_user_from_device_id(device_id: str) -> User:
        ...
    def add_user_device_association_changed(handler: winrt.windows.foundation.EventHandler[UserDeviceAssociationChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_user_device_association_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class UserDeviceAssociationChangedEventArgs(_winrt.winrt_base):
    ...
    device_id: str
    new_user: User
    old_user: User

class UserPicker(_winrt.winrt_base):
    ...
    suggested_selected_user: User
    allow_guest_accounts: bool
    def is_supported() -> bool:
        ...
    def pick_single_user_async() -> winrt.windows.foundation.IAsyncOperation[User]:
        ...

class UserWatcher(_winrt.winrt_base):
    ...
    status: UserWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_authentication_status_changed(handler: winrt.windows.foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_authentication_status_changed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_authentication_status_changing(handler: winrt.windows.foundation.TypedEventHandler[UserWatcher, UserAuthenticationStatusChangingEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_authentication_status_changing(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[UserWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winrt.windows.foundation.TypedEventHandler[UserWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winrt.windows.foundation.TypedEventHandler[UserWatcher, UserChangedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class ILauncherViewOptions(_winrt.winrt_base):
    ...
    desired_remaining_view: winrt.windows.ui.viewmanagement.ViewSizePreference

DispatcherQueueHandler = typing.Callable[[], None]

