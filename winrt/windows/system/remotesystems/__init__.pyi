# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.applicationmodel.appservice
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.networking
except Exception:
    pass

try:
    import winrt.windows.security.credentials
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class RemoteSystemAccessStatus(enum.IntEnum):
    UNSPECIFIED = 0
    ALLOWED = 1
    DENIED_BY_USER = 2
    DENIED_BY_SYSTEM = 3

class RemoteSystemAuthorizationKind(enum.IntEnum):
    SAME_USER = 0
    ANONYMOUS = 1

class RemoteSystemDiscoveryType(enum.IntEnum):
    ANY = 0
    PROXIMAL = 1
    CLOUD = 2
    SPATIALLY_PROXIMAL = 3

class RemoteSystemPlatform(enum.IntEnum):
    UNKNOWN = 0
    WINDOWS = 1
    ANDROID = 2
    IOS = 3
    LINUX = 4

class RemoteSystemSessionCreationStatus(enum.IntEnum):
    SUCCESS = 0
    SESSION_LIMITS_EXCEEDED = 1
    OPERATION_ABORTED = 2

class RemoteSystemSessionDisconnectedReason(enum.IntEnum):
    SESSION_UNAVAILABLE = 0
    REMOVED_BY_CONTROLLER = 1
    SESSION_CLOSED = 2

class RemoteSystemSessionJoinStatus(enum.IntEnum):
    SUCCESS = 0
    SESSION_LIMITS_EXCEEDED = 1
    OPERATION_ABORTED = 2
    SESSION_UNAVAILABLE = 3
    REJECTED_BY_CONTROLLER = 4

class RemoteSystemSessionMessageChannelReliability(enum.IntEnum):
    RELIABLE = 0
    UNRELIABLE = 1

class RemoteSystemSessionParticipantWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class RemoteSystemSessionWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class RemoteSystemStatus(enum.IntEnum):
    UNAVAILABLE = 0
    DISCOVERING_AVAILABILITY = 1
    AVAILABLE = 2
    UNKNOWN = 3

class RemoteSystemStatusType(enum.IntEnum):
    ANY = 0
    AVAILABLE = 1

class RemoteSystemWatcherError(enum.IntEnum):
    UNKNOWN = 0
    INTERNET_NOT_AVAILABLE = 1
    AUTHENTICATION_ERROR = 2

class KnownRemoteSystemCapabilities(_winrt.winrt_base):
    ...
    app_service: str
    launch_uri: str
    remote_session: str
    spatial_entity: str

class RemoteSystem(_winrt.winrt_base):
    ...
    display_name: str
    id: str
    is_available_by_proximity: bool
    kind: str
    status: RemoteSystemStatus
    is_available_by_spatial_proximity: bool
    manufacturer_display_name: str
    model_display_name: str
    platform: RemoteSystemPlatform
    apps: winrt.windows.foundation.collections.IVectorView[RemoteSystemApp]
    user: winrt.windows.system.User
    def create_watcher() -> RemoteSystemWatcher:
        ...
    def create_watcher(filters: typing.Iterable[IRemoteSystemFilter]) -> RemoteSystemWatcher:
        ...
    def create_watcher_for_user(user: winrt.windows.system.User) -> RemoteSystemWatcher:
        ...
    def create_watcher_for_user(user: winrt.windows.system.User, filters: typing.Iterable[IRemoteSystemFilter]) -> RemoteSystemWatcher:
        ...
    def find_by_host_name_async(host_name: winrt.windows.networking.HostName) -> winrt.windows.foundation.IAsyncOperation[RemoteSystem]:
        ...
    def get_capability_supported_async(capability_name: str) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def is_authorization_kind_enabled(kind: RemoteSystemAuthorizationKind) -> bool:
        ...
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[RemoteSystemAccessStatus]:
        ...

class RemoteSystemAddedEventArgs(_winrt.winrt_base):
    ...
    remote_system: RemoteSystem

class RemoteSystemApp(_winrt.winrt_base):
    ...
    attributes: winrt.windows.foundation.collections.IMapView[str, str]
    display_name: str
    id: str
    is_available_by_proximity: bool
    is_available_by_spatial_proximity: bool
    connection_token: str
    user: winrt.windows.system.User

class RemoteSystemAppRegistration(_winrt.winrt_base):
    ...
    attributes: winrt.windows.foundation.collections.IMap[str, str]
    user: winrt.windows.system.User
    def get_default() -> RemoteSystemAppRegistration:
        ...
    def get_for_user(user: winrt.windows.system.User) -> RemoteSystemAppRegistration:
        ...
    def save_async() -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...

class RemoteSystemAuthorizationKindFilter(IRemoteSystemFilter, _winrt.winrt_base):
    ...
    remote_system_authorization_kind: RemoteSystemAuthorizationKind

class RemoteSystemConnectionInfo(_winrt.winrt_base):
    ...
    is_proximal: bool
    def try_create_from_app_service_connection(connection: winrt.windows.applicationmodel.appservice.AppServiceConnection) -> RemoteSystemConnectionInfo:
        ...

class RemoteSystemConnectionRequest(_winrt.winrt_base):
    ...
    remote_system: RemoteSystem
    remote_system_app: RemoteSystemApp
    connection_token: str
    def create_for_app(remote_system_app: RemoteSystemApp) -> RemoteSystemConnectionRequest:
        ...
    def create_from_connection_token(connection_token: str) -> RemoteSystemConnectionRequest:
        ...
    def create_from_connection_token_for_user(user: winrt.windows.system.User, connection_token: str) -> RemoteSystemConnectionRequest:
        ...

class RemoteSystemDiscoveryTypeFilter(IRemoteSystemFilter, _winrt.winrt_base):
    ...
    remote_system_discovery_type: RemoteSystemDiscoveryType

class RemoteSystemEnumerationCompletedEventArgs(_winrt.winrt_base):
    ...

class RemoteSystemKindFilter(IRemoteSystemFilter, _winrt.winrt_base):
    ...
    remote_system_kinds: winrt.windows.foundation.collections.IVectorView[str]

class RemoteSystemKinds(_winrt.winrt_base):
    ...
    desktop: str
    holographic: str
    hub: str
    phone: str
    xbox: str
    iot: str
    laptop: str
    tablet: str

class RemoteSystemRemovedEventArgs(_winrt.winrt_base):
    ...
    remote_system_id: str

class RemoteSystemSession(winrt.windows.foundation.IClosable, _winrt.winrt_base):
    ...
    controller_display_name: str
    display_name: str
    id: str
    def close() -> None:
        ...
    def create_participant_watcher() -> RemoteSystemSessionParticipantWatcher:
        ...
    def create_watcher() -> RemoteSystemSessionWatcher:
        ...
    def send_invitation_async(invitee: RemoteSystem) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_disconnected(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSession, RemoteSystemSessionDisconnectedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_disconnected(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteSystemSessionAddedEventArgs(_winrt.winrt_base):
    ...
    session_info: RemoteSystemSessionInfo

class RemoteSystemSessionController(_winrt.winrt_base):
    ...
    def create_session_async() -> winrt.windows.foundation.IAsyncOperation[RemoteSystemSessionCreationResult]:
        ...
    def remove_participant_async(p_participant: RemoteSystemSessionParticipant) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_join_requested(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionController, RemoteSystemSessionJoinRequestedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_join_requested(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteSystemSessionCreationResult(_winrt.winrt_base):
    ...
    session: RemoteSystemSession
    status: RemoteSystemSessionCreationStatus

class RemoteSystemSessionDisconnectedEventArgs(_winrt.winrt_base):
    ...
    reason: RemoteSystemSessionDisconnectedReason

class RemoteSystemSessionInfo(_winrt.winrt_base):
    ...
    controller_display_name: str
    display_name: str
    def join_async() -> winrt.windows.foundation.IAsyncOperation[RemoteSystemSessionJoinResult]:
        ...

class RemoteSystemSessionInvitation(_winrt.winrt_base):
    ...
    sender: RemoteSystem
    session_info: RemoteSystemSessionInfo

class RemoteSystemSessionInvitationListener(_winrt.winrt_base):
    ...
    def add_invitation_received(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionInvitationListener, RemoteSystemSessionInvitationReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_invitation_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteSystemSessionInvitationReceivedEventArgs(_winrt.winrt_base):
    ...
    invitation: RemoteSystemSessionInvitation

class RemoteSystemSessionJoinRequest(_winrt.winrt_base):
    ...
    participant: RemoteSystemSessionParticipant
    def accept() -> None:
        ...

class RemoteSystemSessionJoinRequestedEventArgs(_winrt.winrt_base):
    ...
    join_request: RemoteSystemSessionJoinRequest
    def get_deferral() -> winrt.windows.foundation.Deferral:
        ...

class RemoteSystemSessionJoinResult(_winrt.winrt_base):
    ...
    session: RemoteSystemSession
    status: RemoteSystemSessionJoinStatus

class RemoteSystemSessionMessageChannel(_winrt.winrt_base):
    ...
    session: RemoteSystemSession
    def broadcast_value_set_async(message_data: winrt.windows.foundation.collections.ValueSet) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def send_value_set_async(message_data: winrt.windows.foundation.collections.ValueSet, participant: RemoteSystemSessionParticipant) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def send_value_set_to_participants_async(message_data: winrt.windows.foundation.collections.ValueSet, participants: typing.Iterable[RemoteSystemSessionParticipant]) -> winrt.windows.foundation.IAsyncOperation[bool]:
        ...
    def add_value_set_received(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionMessageChannel, RemoteSystemSessionValueSetReceivedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_value_set_received(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteSystemSessionOptions(_winrt.winrt_base):
    ...
    is_invite_only: bool

class RemoteSystemSessionParticipant(_winrt.winrt_base):
    ...
    remote_system: RemoteSystem
    def get_host_names() -> winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.HostName]:
        ...

class RemoteSystemSessionParticipantAddedEventArgs(_winrt.winrt_base):
    ...
    participant: RemoteSystemSessionParticipant

class RemoteSystemSessionParticipantRemovedEventArgs(_winrt.winrt_base):
    ...
    participant: RemoteSystemSessionParticipant

class RemoteSystemSessionParticipantWatcher(_winrt.winrt_base):
    ...
    status: RemoteSystemSessionParticipantWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, RemoteSystemSessionParticipantAddedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, _winrt.winrt_base]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, RemoteSystemSessionParticipantRemovedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteSystemSessionRemovedEventArgs(_winrt.winrt_base):
    ...
    session_info: RemoteSystemSessionInfo

class RemoteSystemSessionUpdatedEventArgs(_winrt.winrt_base):
    ...
    session_info: RemoteSystemSessionInfo

class RemoteSystemSessionValueSetReceivedEventArgs(_winrt.winrt_base):
    ...
    message: winrt.windows.foundation.collections.ValueSet
    sender: RemoteSystemSessionParticipant

class RemoteSystemSessionWatcher(_winrt.winrt_base):
    ...
    status: RemoteSystemSessionWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionAddedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionRemovedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteSystemStatusTypeFilter(IRemoteSystemFilter, _winrt.winrt_base):
    ...
    remote_system_status_type: RemoteSystemStatusType

class RemoteSystemUpdatedEventArgs(_winrt.winrt_base):
    ...
    remote_system: RemoteSystem

class RemoteSystemWatcher(_winrt.winrt_base):
    ...
    user: winrt.windows.system.User
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_remote_system_added(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemAddedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_remote_system_added(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_remote_system_removed(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemRemovedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_remote_system_removed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_remote_system_updated(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemUpdatedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_remote_system_updated(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemEnumerationCompletedEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_error_occurred(handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemWatcherErrorOccurredEventArgs]) -> winrt.windows.foundation.EventRegistrationToken:
        ...
    def remove_error_occurred(token: winrt.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteSystemWatcherErrorOccurredEventArgs(_winrt.winrt_base):
    ...
    error: RemoteSystemWatcherError

class RemoteSystemWebAccountFilter(IRemoteSystemFilter, _winrt.winrt_base):
    ...
    account: winrt.windows.security.credentials.WebAccount

class IRemoteSystemFilter(_winrt.winrt_base):
    ...

