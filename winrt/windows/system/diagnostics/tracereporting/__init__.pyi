# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.foundation.collections
except Exception:
    pass

class PlatformDiagnosticActionState(enum.IntEnum):
    SUCCESS = 0
    FREE_NETWORK_NOT_AVAILABLE = 1
    A_C_POWER_NOT_AVAILABLE = 2

class PlatformDiagnosticEscalationType(enum.IntEnum):
    ON_COMPLETION = 0
    ON_FAILURE = 1

class PlatformDiagnosticEventBufferLatencies(enum.IntFlag):
    NORMAL = 0x1
    COST_DEFERRED = 0x2
    REALTIME = 0x4

class PlatformDiagnosticTracePriority(enum.IntEnum):
    NORMAL = 0
    USER_ELEVATED = 1

class PlatformDiagnosticTraceSlotState(enum.IntEnum):
    NOT_RUNNING = 0
    RUNNING = 1
    THROTTLED = 2

class PlatformDiagnosticTraceSlotType(enum.IntEnum):
    ALTERNATIVE = 0
    ALWAYS_ON = 1
    MINI = 2

class PlatformDiagnosticActions(_winrt.winrt_base):
    ...
    def download_latest_settings_for_namespace(partner: str, feature: str, is_scenario_namespace: bool, download_over_costed_network: bool, download_over_battery: bool) -> PlatformDiagnosticActionState:
        ...
    def force_upload(latency: PlatformDiagnosticEventBufferLatencies, upload_over_costed_network: bool, upload_over_battery: bool) -> PlatformDiagnosticActionState:
        ...
    def get_active_scenario_list() -> winrt.windows.foundation.collections.IVectorView[uuid.UUID]:
        ...
    def get_active_trace_runtime(slot_type: PlatformDiagnosticTraceSlotType) -> PlatformDiagnosticTraceRuntimeInfo:
        ...
    def get_known_trace_list(slot_type: PlatformDiagnosticTraceSlotType) -> winrt.windows.foundation.collections.IVectorView[PlatformDiagnosticTraceInfo]:
        ...
    def is_scenario_enabled(scenario_id: uuid.UUID) -> bool:
        ...
    def is_trace_running(slot_type: PlatformDiagnosticTraceSlotType, scenario_id: uuid.UUID, trace_profile_hash: int) -> PlatformDiagnosticTraceSlotState:
        ...
    def try_escalate_scenario(scenario_id: uuid.UUID, escalation_type: PlatformDiagnosticEscalationType, output_directory: str, timestamp_output_directory: bool, force_escalation_upload: bool, triggers: winrt.windows.foundation.collections.IMapView[str, str]) -> bool:
        ...

class PlatformDiagnosticTraceInfo(_winrt.winrt_base):
    ...
    is_auto_logger: bool
    is_exclusive: bool
    max_trace_duration_file_time: int
    priority: PlatformDiagnosticTracePriority
    profile_hash: int
    scenario_id: uuid.UUID

class PlatformDiagnosticTraceRuntimeInfo(_winrt.winrt_base):
    ...
    etw_runtime_file_time: int
    runtime_file_time: int

