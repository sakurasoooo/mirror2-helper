# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.2.3.4

import enum
import typing
import uuid

import winrt._winrt as _winrt
try:
    import winrt.windows.data.json
except Exception:
    pass

try:
    import winrt.windows.foundation
except Exception:
    pass

try:
    import winrt.windows.foundation.collections
except Exception:
    pass

try:
    import winrt.windows.system
except Exception:
    pass

class DiagnosticActionState(enum.IntEnum):
    INITIALIZING = 0
    DOWNLOADING = 1
    VERIFYING_TRUST = 2
    DETECTING = 3
    RESOLVING = 4
    VERIFYING_RESOLUTION = 5
    EXECUTING = 6

class DiagnosticActionResult(_winrt.winrt_base):
    ...
    extended_error: winrt.windows.foundation.HResult
    results: winrt.windows.foundation.collections.ValueSet

class DiagnosticInvoker(_winrt.winrt_base):
    ...
    is_supported: bool
    def get_default() -> DiagnosticInvoker:
        ...
    def get_for_user(user: winrt.windows.system.User) -> DiagnosticInvoker:
        ...
    def run_diagnostic_action_async(context: winrt.windows.data.json.JsonObject) -> winrt.windows.foundation.IAsyncOperationWithProgress[DiagnosticActionResult, DiagnosticActionState]:
        ...
    def run_diagnostic_action_from_string_async(context: str) -> winrt.windows.foundation.IAsyncOperationWithProgress[DiagnosticActionResult, DiagnosticActionState]:
        ...

class ProcessCpuUsage(_winrt.winrt_base):
    ...
    def get_report() -> ProcessCpuUsageReport:
        ...

class ProcessCpuUsageReport(_winrt.winrt_base):
    ...
    kernel_time: winrt.windows.foundation.TimeSpan
    user_time: winrt.windows.foundation.TimeSpan

class ProcessDiagnosticInfo(_winrt.winrt_base):
    ...
    cpu_usage: ProcessCpuUsage
    disk_usage: ProcessDiskUsage
    executable_file_name: str
    memory_usage: ProcessMemoryUsage
    parent: ProcessDiagnosticInfo
    process_id: int
    process_start_time: winrt.windows.foundation.DateTime
    is_packaged: bool
    def get_app_diagnostic_infos() -> winrt.windows.foundation.collections.IVector[winrt.windows.system.AppDiagnosticInfo]:
        ...
    def get_for_current_process() -> ProcessDiagnosticInfo:
        ...
    def get_for_processes() -> winrt.windows.foundation.collections.IVectorView[ProcessDiagnosticInfo]:
        ...
    def try_get_for_process_id(process_id: int) -> ProcessDiagnosticInfo:
        ...

class ProcessDiskUsage(_winrt.winrt_base):
    ...
    def get_report() -> ProcessDiskUsageReport:
        ...

class ProcessDiskUsageReport(_winrt.winrt_base):
    ...
    bytes_read_count: int
    bytes_written_count: int
    other_bytes_count: int
    other_operation_count: int
    read_operation_count: int
    write_operation_count: int

class ProcessMemoryUsage(_winrt.winrt_base):
    ...
    def get_report() -> ProcessMemoryUsageReport:
        ...

class ProcessMemoryUsageReport(_winrt.winrt_base):
    ...
    non_paged_pool_size_in_bytes: int
    page_fault_count: int
    page_file_size_in_bytes: int
    paged_pool_size_in_bytes: int
    peak_non_paged_pool_size_in_bytes: int
    peak_page_file_size_in_bytes: int
    peak_paged_pool_size_in_bytes: int
    peak_virtual_memory_size_in_bytes: int
    peak_working_set_size_in_bytes: int
    private_page_count: int
    virtual_memory_size_in_bytes: int
    working_set_size_in_bytes: int

class SystemCpuUsage(_winrt.winrt_base):
    ...
    def get_report() -> SystemCpuUsageReport:
        ...

class SystemCpuUsageReport(_winrt.winrt_base):
    ...
    idle_time: winrt.windows.foundation.TimeSpan
    kernel_time: winrt.windows.foundation.TimeSpan
    user_time: winrt.windows.foundation.TimeSpan

class SystemDiagnosticInfo(_winrt.winrt_base):
    ...
    cpu_usage: SystemCpuUsage
    memory_usage: SystemMemoryUsage
    preferred_architecture: winrt.windows.system.ProcessorArchitecture
    def get_for_current_system() -> SystemDiagnosticInfo:
        ...
    def is_architecture_supported(type: winrt.windows.system.ProcessorArchitecture) -> bool:
        ...

class SystemMemoryUsage(_winrt.winrt_base):
    ...
    def get_report() -> SystemMemoryUsageReport:
        ...

class SystemMemoryUsageReport(_winrt.winrt_base):
    ...
    available_size_in_bytes: int
    committed_size_in_bytes: int
    total_physical_size_in_bytes: int

